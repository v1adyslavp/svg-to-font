(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],3:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
    return fromTypedArray(that, object)
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = String(string)

  if (string.length === 0) return 0

  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      return string.length
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return string.length * 2
    case 'hex':
      return string.length >>> 1
    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(string).length
    case 'base64':
      return base64ToBytes(string).length
    default:
      return string.length
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function toString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  var i = 0

  for (; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (leadSurrogate) {
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        } else {
          // valid surrogate pair
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      } else {
        // no lead yet

        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else {
          // valid lead
          leadSurrogate = codePoint
          continue
        }
      }
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":4,"ieee754":5,"is-array":6}],4:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],5:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],6:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],7:[function(require,module,exports){
'use strict';

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')

exports.createHash = exports.Hash = require('create-hash')

exports.createHmac = exports.Hmac = require('create-hmac')

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes;
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-aes');
[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key];
})

var dh = require('diffie-hellman');
[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key];
})

var sign = require('browserify-sign');
[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key];
})

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt');

[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key];
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
  }
})

},{"browserify-aes":11,"browserify-sign":27,"browserify-sign/algos":26,"create-ecdh":75,"create-hash":98,"create-hmac":110,"diffie-hellman":111,"pbkdf2":118,"public-encrypt":119,"randombytes":147}],8:[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hash/md5":100}],9:[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
},{"buffer":3}],10:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('./xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"./aes":9,"./cipherBase":12,"./ghash":15,"./xor":25,"buffer":3,"inherits":149}],11:[function(require,module,exports){
var ciphers = require('./encrypter')
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = require('./decrypter')
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = require('./modes')
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":13,"./encrypter":14,"./modes":16}],12:[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')

module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase () {
  Transform.call(this)
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (outputEnc) {
    outData = outData.toString(outputEnc)
  }
  return outData
}
CipherBase.prototype._transform = function (data, _, next) {
  this.push(this._update(data))
  next()
}
CipherBase.prototype._flush = function (next) {
  try {
    this.push(this._final())
  } catch(e) {
    return next(e)
  }
  next()
}
CipherBase.prototype.final = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = outData.toString(outputEnc)
  }
  return outData
}

}).call(this,require("buffer").Buffer)
},{"buffer":3,"inherits":149,"stream":164}],13:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('./EVP_BytesToKey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":8,"./aes":9,"./authCipher":10,"./cipherBase":12,"./modes":16,"./modes/cbc":17,"./modes/cfb":18,"./modes/cfb1":19,"./modes/cfb8":20,"./modes/ctr":21,"./modes/ecb":22,"./modes/ofb":23,"./streamCipher":24,"buffer":3,"inherits":149}],14:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('./EVP_BytesToKey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":8,"./aes":9,"./authCipher":10,"./cipherBase":12,"./modes":16,"./modes/cbc":17,"./modes/cfb":18,"./modes/cfb1":19,"./modes/cfb8":20,"./modes/ctr":21,"./modes/ecb":22,"./modes/ofb":23,"./streamCipher":24,"buffer":3,"inherits":149}],15:[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],16:[function(require,module,exports){
exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}

},{}],17:[function(require,module,exports){
var xor = require('../xor')
exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)
  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}
exports.decrypt = function (self, block) {
  var pad = self._prev
  self._prev = block
  var out = self._cipher.decryptBlock(block)
  return xor(out, pad)
}

},{"../xor":25}],18:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor')
exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len
  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }
    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }
  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
},{"../xor":25,"buffer":3}],19:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],20:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],21:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor')
function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}
exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

}).call(this,require("buffer").Buffer)
},{"../xor":25,"buffer":3}],22:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],23:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor')
function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}
exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"../xor":25,"buffer":3}],24:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
},{"./aes":9,"./cipherBase":12,"buffer":3,"inherits":149}],25:[function(require,module,exports){
(function (Buffer){
module.exports = xor
function xor (a, b) {
  var len = Math.min(a.length, b.length)
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out.writeUInt8(a[i] ^ b[i], i)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],26:[function(require,module,exports){
(function (Buffer){
'use strict'
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
}
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
}
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
}
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
}
exports['RSA-SHA1'] = {
	sign: 'rsa',
	hash: 'sha1',
	id: new Buffer('3021300906052b0e03021a05000414', 'hex')
}
exports['ecdsa-with-SHA1'] = {
	sign: 'ecdsa',
	hash: 'sha1',
	id: new Buffer('', 'hex')
}
exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
}
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
}
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
}
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],27:[function(require,module,exports){
(function (Buffer){
'use strict'
var sign = require('./sign')
var verify = require('./verify')
var stream = require('stream')
var inherits = require('inherits')
var _algos = require('./algos')
var createHash = require('create-hash')
var algos = {}
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key]
})

exports.createSign = exports.Sign = createSign

function createSign (algorithm) {
  return new Sign(algorithm)
}

exports.createVerify = exports.Verify = createVerify

function createVerify (algorithm) {
  return new Verify(algorithm)
}

inherits(Sign, stream.Writable)

function Sign (algorithm) {
  stream.Writable.call(this)
  var data = algos[algorithm]
  if (!data)
    throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string')
    data = new Buffer(data, enc)
  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)
  if (enc) {
    sig = sig.toString(enc)
  }
  return sig
}

inherits(Verify, stream.Writable)
function Verify (algorithm) {
  stream.Writable.call(this)
  var data = algos[algorithm]
  if (!data)
    throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string')
    data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  this.end()
  var hash = this._hash.digest()
  if (typeof sig === 'string')
    sig = new Buffer(sig, enc)

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
}

}).call(this,require("buffer").Buffer)
},{"./algos":26,"./sign":72,"./verify":73,"buffer":3,"create-hash":98,"inherits":149,"stream":164}],28:[function(require,module,exports){
'use strict'
exports['1.3.132.0.10'] = 'secp256k1'

exports['1.3.132.0.33'] = 'p224'

exports['1.2.840.10045.3.1.1'] = 'p192'

exports['1.2.840.10045.3.1.7'] = 'p256'

},{}],29:[function(require,module,exports){
(function (module, exports) {

'use strict';

// Utils

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

// Could use `inherits` module, but don't want to move from single file
// architecture yet.
function inherits(ctor, superCtor) {
  ctor.super_ = superCtor;
  var TempCtor = function () {};
  TempCtor.prototype = superCtor.prototype;
  ctor.prototype = new TempCtor();
  ctor.prototype.constructor = ctor;
}

// BN

function BN(number, base, endian) {
  // May be `new BN(bn)` ?
  if (number !== null &&
      typeof number === 'object' &&
      Array.isArray(number.words)) {
    return number;
  }

  this.sign = false;
  this.words = null;
  this.length = 0;

  // Reduction context
  this.red = null;

  if (base === 'le' || base === 'be') {
    endian = base;
    base = 10;
  }

  if (number !== null)
    this._init(number || 0, base || 10, endian || 'be');
}
if (typeof module === 'object')
  module.exports = BN;
else
  exports.BN = BN;

BN.BN = BN;
BN.wordSize = 26;

BN.prototype._init = function init(number, base, endian) {
  if (typeof number === 'number') {
    return this._initNumber(number, base, endian);
  } else if (typeof number === 'object') {
    return this._initArray(number, base, endian);
  }
  if (base === 'hex')
    base = 16;
  assert(base === (base | 0) && base >= 2 && base <= 36);

  number = number.toString().replace(/\s+/g, '');
  var start = 0;
  if (number[0] === '-')
    start++;

  if (base === 16)
    this._parseHex(number, start);
  else
    this._parseBase(number, base, start);

  if (number[0] === '-')
    this.sign = true;

  this.strip();

  if (endian !== 'le')
    return;

  this._initArray(this.toArray(), base, endian);
};

BN.prototype._initNumber = function _initNumber(number, base, endian) {
  if (number < 0) {
    this.sign = true;
    number = -number;
  }
  if (number < 0x4000000) {
    this.words = [ number & 0x3ffffff ];
    this.length = 1;
  } else if (number < 0x10000000000000) {
    this.words = [
      number & 0x3ffffff,
      (number / 0x4000000) & 0x3ffffff
    ];
    this.length = 2;
  } else {
    assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
    this.words = [
      number & 0x3ffffff,
      (number / 0x4000000) & 0x3ffffff,
      1
    ];
    this.length = 3;
  }

  if (endian !== 'le')
    return;

  // Reverse the bytes
  this._initArray(this.toArray(), base, endian);
};

BN.prototype._initArray = function _initArray(number, base, endian) {
  // Perhaps a Uint8Array
  assert(typeof number.length === 'number');
  if (number.length <= 0) {
    this.words = [ 0 ];
    this.length = 1;
    return this;
  }

  this.length = Math.ceil(number.length / 3);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  var off = 0;
  if (endian === 'be') {
    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  } else if (endian === 'le') {
    for (var i = 0, j = 0; i < number.length; i += 3) {
      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  }
  return this.strip();
};

function parseHex(str, start, end) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r <<= 4;

    // 'a' - 'f'
    if (c >= 49 && c <= 54)
      r |= c - 49 + 0xa;

    // 'A' - 'F'
    else if (c >= 17 && c <= 22)
      r |= c - 17 + 0xa;

    // '0' - '9'
    else
      r |= c & 0xf;
  }
  return r;
}

BN.prototype._parseHex = function _parseHex(number, start) {
  // Create possibly bigger array to ensure that it fits the number
  this.length = Math.ceil((number.length - start) / 6);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  // Scan 24-bit chunks and add them to the number
  var off = 0;
  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
    var w = parseHex(number, i, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    off += 24;
    if (off >= 26) {
      off -= 26;
      j++;
    }
  }
  if (i + 6 !== start) {
    var w = parseHex(number, start, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
  }
  this.strip();
};

function parseBase(str, start, end, mul) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r *= mul;

    // 'a'
    if (c >= 49)
      r += c - 49 + 0xa;

    // 'A'
    else if (c >= 17)
      r += c - 17 + 0xa;

    // '0' - '9'
    else
      r += c;
  }
  return r;
}

BN.prototype._parseBase = function _parseBase(number, base, start) {
  // Initialize as zero
  this.words = [ 0 ];
  this.length = 1;

  // Find length of limb in base
  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
    limbLen++;
  limbLen--;
  limbPow = (limbPow / base) | 0;

  var total = number.length - start;
  var mod = total % limbLen;
  var end = Math.min(total, total - mod) + start;

  var word = 0;
  for (var i = start; i < end; i += limbLen) {
    word = parseBase(number, i, i + limbLen, base);

    this.imuln(limbPow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }

  if (mod !== 0) {
    var pow = 1;
    var word = parseBase(number, i, number.length, base);

    for (var i = 0; i < mod; i++)
      pow *= base;
    this.imuln(pow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }
};

BN.prototype.copy = function copy(dest) {
  dest.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    dest.words[i] = this.words[i];
  dest.length = this.length;
  dest.sign = this.sign;
  dest.red = this.red;
};

BN.prototype.clone = function clone() {
  var r = new BN(null);
  this.copy(r);
  return r;
};

// Remove leading `0` from `this`
BN.prototype.strip = function strip() {
  while (this.length > 1 && this.words[this.length - 1] === 0)
    this.length--;
  return this._normSign();
};

BN.prototype._normSign = function _normSign() {
  // -0 = 0
  if (this.length === 1 && this.words[0] === 0)
    this.sign = false;
  return this;
};

BN.prototype.inspect = function inspect() {
  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
};

/*

var zeros = [];
var groupSizes = [];
var groupBases = [];

var s = '';
var i = -1;
while (++i < BN.wordSize) {
  zeros[i] = s;
  s += '0';
}
groupSizes[0] = 0;
groupSizes[1] = 0;
groupBases[0] = 0;
groupBases[1] = 0;
var base = 2 - 1;
while (++base < 36 + 1) {
  var groupSize = 0;
  var groupBase = 1;
  while (groupBase < (1 << BN.wordSize) / base) {
    groupBase *= base;
    groupSize += 1;
  }
  groupSizes[base] = groupSize;
  groupBases[base] = groupBase;
}

*/

var zeros = [
  '',
  '0',
  '00',
  '000',
  '0000',
  '00000',
  '000000',
  '0000000',
  '00000000',
  '000000000',
  '0000000000',
  '00000000000',
  '000000000000',
  '0000000000000',
  '00000000000000',
  '000000000000000',
  '0000000000000000',
  '00000000000000000',
  '000000000000000000',
  '0000000000000000000',
  '00000000000000000000',
  '000000000000000000000',
  '0000000000000000000000',
  '00000000000000000000000',
  '000000000000000000000000',
  '0000000000000000000000000'
];

var groupSizes = [
  0, 0,
  25, 16, 12, 11, 10, 9, 8,
  8, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 5, 5,
  5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5
];

var groupBases = [
  0, 0,
  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
];

BN.prototype.toString = function toString(base, padding) {
  base = base || 10;
  if (base === 16 || base === 'hex') {
    var out = '';
    var off = 0;
    var padding = padding | 0 || 1;
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i];
      var word = (((w << off) | carry) & 0xffffff).toString(16);
      carry = (w >>> (24 - off)) & 0xffffff;
      if (carry !== 0 || i !== this.length - 1)
        out = zeros[6 - word.length] + word + out;
      else
        out = word + out;
      off += 2;
      if (off >= 26) {
        off -= 26;
        i--;
      }
    }
    if (carry !== 0)
      out = carry.toString(16) + out;
    while (out.length % padding !== 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else if (base === (base | 0) && base >= 2 && base <= 36) {
    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    var groupSize = groupSizes[base];
    // var groupBase = Math.pow(base, groupSize);
    var groupBase = groupBases[base];
    var out = '';
    var c = this.clone();
    c.sign = false;
    while (c.cmpn(0) !== 0) {
      var r = c.modn(groupBase).toString(base);
      c = c.idivn(groupBase);

      if (c.cmpn(0) !== 0)
        out = zeros[groupSize - r.length] + r + out;
      else
        out = r + out;
    }
    if (this.cmpn(0) === 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else {
    assert(false, 'Base should be between 2 and 36');
  }
};

BN.prototype.toJSON = function toJSON() {
  return this.toString(16);
};

BN.prototype.toArray = function toArray(endian) {
  this.strip();
  var res = new Array(this.byteLength());
  res[0] = 0;

  var q = this.clone();
  if (endian !== 'le') {
    // Assume big-endian
    for (var i = 0; q.cmpn(0) !== 0; i++) {
      var b = q.andln(0xff);
      q.ishrn(8);

      res[res.length - i - 1] = b;
    }
  } else {
    // Assume little-endian
    for (var i = 0; q.cmpn(0) !== 0; i++) {
      var b = q.andln(0xff);
      q.ishrn(8);

      res[i] = b;
    }
  }

  return res;
};

if (Math.clz32) {
  BN.prototype._countBits = function _countBits(w) {
    return 32 - Math.clz32(w);
  };
} else {
  BN.prototype._countBits = function _countBits(w) {
    var t = w;
    var r = 0;
    if (t >= 0x1000) {
      r += 13;
      t >>>= 13;
    }
    if (t >= 0x40) {
      r += 7;
      t >>>= 7;
    }
    if (t >= 0x8) {
      r += 4;
      t >>>= 4;
    }
    if (t >= 0x02) {
      r += 2;
      t >>>= 2;
    }
    return r + t;
  };
}

BN.prototype._zeroBits = function _zeroBits(w) {
  // Short-cut
  if (w === 0)
    return 26;

  var t = w;
  var r = 0;
  if ((t & 0x1fff) === 0) {
    r += 13;
    t >>>= 13;
  }
  if ((t & 0x7f) === 0) {
    r += 7;
    t >>>= 7;
  }
  if ((t & 0xf) === 0) {
    r += 4;
    t >>>= 4;
  }
  if ((t & 0x3) === 0) {
    r += 2;
    t >>>= 2;
  }
  if ((t & 0x1) === 0)
    r++;
  return r;
};

// Return number of used bits in a BN
BN.prototype.bitLength = function bitLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  var hi = this._countBits(w);
  return (this.length - 1) * 26 + hi;
};

// Number of trailing zero bits
BN.prototype.zeroBits = function zeroBits() {
  if (this.cmpn(0) === 0)
    return 0;

  var r = 0;
  for (var i = 0; i < this.length; i++) {
    var b = this._zeroBits(this.words[i]);
    r += b;
    if (b !== 26)
      break;
  }
  return r;
};

BN.prototype.byteLength = function byteLength() {
  return Math.ceil(this.bitLength() / 8);
};

// Return negative clone of `this`
BN.prototype.neg = function neg() {
  if (this.cmpn(0) === 0)
    return this.clone();

  var r = this.clone();
  r.sign = !this.sign;
  return r;
};


// Or `num` with `this` in-place
BN.prototype.ior = function ior(num) {
  this.sign = this.sign || num.sign;

  while (this.length < num.length)
    this.words[this.length++] = 0;

  for (var i = 0; i < num.length; i++)
    this.words[i] = this.words[i] | num.words[i];

  return this.strip();
};


// Or `num` with `this`
BN.prototype.or = function or(num) {
  if (this.length > num.length)
    return this.clone().ior(num);
  else
    return num.clone().ior(this);
};


// And `num` with `this` in-place
BN.prototype.iand = function iand(num) {
  this.sign = this.sign && num.sign;

  // b = min-length(num, this)
  var b;
  if (this.length > num.length)
    b = num;
  else
    b = this;

  for (var i = 0; i < b.length; i++)
    this.words[i] = this.words[i] & num.words[i];

  this.length = b.length;

  return this.strip();
};


// And `num` with `this`
BN.prototype.and = function and(num) {
  if (this.length > num.length)
    return this.clone().iand(num);
  else
    return num.clone().iand(this);
};


// Xor `num` with `this` in-place
BN.prototype.ixor = function ixor(num) {
  this.sign = this.sign || num.sign;

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  for (var i = 0; i < b.length; i++)
    this.words[i] = a.words[i] ^ b.words[i];

  if (this !== a)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];

  this.length = a.length;

  return this.strip();
};


// Xor `num` with `this`
BN.prototype.xor = function xor(num) {
  if (this.length > num.length)
    return this.clone().ixor(num);
  else
    return num.clone().ixor(this);
};


// Set `bit` of `this`
BN.prototype.setn = function setn(bit, val) {
  assert(typeof bit === 'number' && bit >= 0);

  var off = (bit / 26) | 0;
  var wbit = bit % 26;

  while (this.length <= off)
    this.words[this.length++] = 0;

  if (val)
    this.words[off] = this.words[off] | (1 << wbit);
  else
    this.words[off] = this.words[off] & ~(1 << wbit);

  return this.strip();
};


// Add `num` to `this` in-place
BN.prototype.iadd = function iadd(num) {
  // negative + positive
  if (this.sign && !num.sign) {
    this.sign = false;
    var r = this.isub(num);
    this.sign = !this.sign;
    return this._normSign();

  // positive + negative
  } else if (!this.sign && num.sign) {
    num.sign = false;
    var r = this.isub(num);
    num.sign = true;
    return r._normSign();
  }

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] + b.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }

  this.length = a.length;
  if (carry !== 0) {
    this.words[this.length] = carry;
    this.length++;
  // Copy the rest of the words
  } else if (a !== this) {
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  }

  return this;
};

// Add `num` to `this`
BN.prototype.add = function add(num) {
  if (num.sign && !this.sign) {
    num.sign = false;
    var res = this.sub(num);
    num.sign = true;
    return res;
  } else if (!num.sign && this.sign) {
    this.sign = false;
    var res = num.sub(this);
    this.sign = true;
    return res;
  }

  if (this.length > num.length)
    return this.clone().iadd(num);
  else
    return num.clone().iadd(this);
};

// Subtract `num` from `this` in-place
BN.prototype.isub = function isub(num) {
  // this - (-num) = this + num
  if (num.sign) {
    num.sign = false;
    var r = this.iadd(num);
    num.sign = true;
    return r._normSign();

  // -this - num = -(this + num)
  } else if (this.sign) {
    this.sign = false;
    this.iadd(num);
    this.sign = true;
    return this._normSign();
  }

  // At this point both numbers are positive
  var cmp = this.cmp(num);

  // Optimization - zeroify
  if (cmp === 0) {
    this.sign = false;
    this.length = 1;
    this.words[0] = 0;
    return this;
  }

  // a > b
  var a;
  var b;
  if (cmp > 0) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] - b.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }

  // Copy rest of the words
  if (carry === 0 && i < a.length && a !== this)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  this.length = Math.max(this.length, i);

  if (a !== this)
    this.sign = true;

  return this.strip();
};

// Subtract `num` from `this`
BN.prototype.sub = function sub(num) {
  return this.clone().isub(num);
};

/*
// NOTE: This could be potentionally used to generate loop-less multiplications
function _genCombMulTo(alen, blen) {
  var len = alen + blen - 1;
  var src = [
    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
        'mask = 0x3ffffff, shift = 0x4000000;',
    'out.length = ' + len + ';'
  ];
  for (var k = 0; k < len; k++) {
    var minJ = Math.max(0, k - alen + 1);
    var maxJ = Math.min(k, blen - 1);

    for (var j = minJ; j <= maxJ; j++) {
      var i = k - j;
      var mul = 'a[' + i + '] * b[' + j + ']';

      if (j === minJ) {
        src.push('w = ' + mul + ' + c;');
        src.push('c = (w / shift) | 0;');
      } else {
        src.push('w += ' + mul + ';');
        src.push('c += (w / shift) | 0;');
      }
      src.push('w &= mask;');
    }
    src.push('o[' + k + '] = w;');
  }
  src.push('if (c !== 0) {',
           '  o[' + k + '] = c;',
           '  out.length++;',
           '}',
           'return out;');

  return src.join('\n');
}
*/

BN.prototype._smallMulTo = function _smallMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = carry >>> 26;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;
    }
    out.words[k] = rword;
    carry = ncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype._bigMulTo = function _bigMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  var hncarry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = hncarry;
    hncarry = 0;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;

      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }
    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype.mulTo = function mulTo(num, out) {
  var res;
  if (this.length + num.length < 63)
    res = this._smallMulTo(num, out);
  else
    res = this._bigMulTo(num, out);
  return res;
};

// Multiply `this` by `num`
BN.prototype.mul = function mul(num) {
  var out = new BN(null);
  out.words = new Array(this.length + num.length);
  return this.mulTo(num, out);
};

// In-place Multiplication
BN.prototype.imul = function imul(num) {
  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
    this.words[0] = 0;
    this.length = 1;
    return this;
  }

  var tlen = this.length;
  var nlen = num.length;

  this.sign = num.sign !== this.sign;
  this.length = this.length + num.length;
  this.words[this.length - 1] = 0;

  for (var k = this.length - 2; k >= 0; k--) {
    // Sum all words with the same `i + j = k` and accumulate `carry`,
    // note that carry could be >= 0x3ffffff
    var carry = 0;
    var rword = 0;
    var maxJ = Math.min(k, nlen - 1);
    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i];
      var b = num.words[j];
      var r = a * b;

      var lo = r & 0x3ffffff;
      carry += (r / 0x4000000) | 0;
      lo += rword;
      rword = lo & 0x3ffffff;
      carry += lo >>> 26;
    }
    this.words[k] = rword;
    this.words[k + 1] += carry;
    carry = 0;
  }

  // Propagate overflows
  var carry = 0;
  for (var i = 1; i < this.length; i++) {
    var w = this.words[i] + carry;
    this.words[i] = w & 0x3ffffff;
    carry = w >>> 26;
  }

  return this.strip();
};

BN.prototype.imuln = function imuln(num) {
  assert(typeof num === 'number');

  // Carry
  var carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = this.words[i] * num;
    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
    carry >>= 26;
    carry += (w / 0x4000000) | 0;
    // NOTE: lo is 27bit maximum
    carry += lo >>> 26;
    this.words[i] = lo & 0x3ffffff;
  }

  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }

  return this;
};

// `this` * `this`
BN.prototype.sqr = function sqr() {
  return this.mul(this);
};

// `this` * `this` in-place
BN.prototype.isqr = function isqr() {
  return this.mul(this);
};

// Shift-left in-place
BN.prototype.ishln = function ishln(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;
  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

  if (r !== 0) {
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var newCarry = this.words[i] & carryMask;
      var c = (this.words[i] - newCarry) << r;
      this.words[i] = c | carry;
      carry = newCarry >>> (26 - r);
    }
    if (carry) {
      this.words[i] = carry;
      this.length++;
    }
  }

  if (s !== 0) {
    for (var i = this.length - 1; i >= 0; i--)
      this.words[i + s] = this.words[i];
    for (var i = 0; i < s; i++)
      this.words[i] = 0;
    this.length += s;
  }

  return this.strip();
};

// Shift-right in-place
// NOTE: `hint` is a lowest bit before trailing zeroes
// NOTE: if `extended` is present - it will be filled with destroyed bits
BN.prototype.ishrn = function ishrn(bits, hint, extended) {
  assert(typeof bits === 'number' && bits >= 0);
  var h;
  if (hint)
    h = (hint - (hint % 26)) / 26;
  else
    h = 0;

  var r = bits % 26;
  var s = Math.min((bits - r) / 26, this.length);
  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  var maskedWords = extended;

  h -= s;
  h = Math.max(0, h);

  // Extended mode, copy masked part
  if (maskedWords) {
    for (var i = 0; i < s; i++)
      maskedWords.words[i] = this.words[i];
    maskedWords.length = s;
  }

  if (s === 0) {
    // No-op, we should not move anything at all
  } else if (this.length > s) {
    this.length -= s;
    for (var i = 0; i < this.length; i++)
      this.words[i] = this.words[i + s];
  } else {
    this.words[0] = 0;
    this.length = 1;
  }

  var carry = 0;
  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
    var word = this.words[i];
    this.words[i] = (carry << (26 - r)) | (word >>> r);
    carry = word & mask;
  }

  // Push carried bits as a mask
  if (maskedWords && carry !== 0)
    maskedWords.words[maskedWords.length++] = carry;

  if (this.length === 0) {
    this.words[0] = 0;
    this.length = 1;
  }

  this.strip();

  return this;
};

// Shift-left
BN.prototype.shln = function shln(bits) {
  return this.clone().ishln(bits);
};

// Shift-right
BN.prototype.shrn = function shrn(bits) {
  return this.clone().ishrn(bits);
};

// Test if n bit is set
BN.prototype.testn = function testn(bit) {
  assert(typeof bit === 'number' && bit >= 0);
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    return false;
  }

  // Check bit and return
  var w = this.words[s];

  return !!(w & q);
};

// Return only lowers bits of number (in-place)
BN.prototype.imaskn = function imaskn(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;

  assert(!this.sign, 'imaskn works only with positive numbers');

  if (r !== 0)
    s++;
  this.length = Math.min(s, this.length);

  if (r !== 0) {
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    this.words[this.length - 1] &= mask;
  }

  return this.strip();
};

// Return only lowers bits of number
BN.prototype.maskn = function maskn(bits) {
  return this.clone().imaskn(bits);
};

// Add plain number `num` to `this`
BN.prototype.iaddn = function iaddn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.isubn(-num);

  // Possible sign change
  if (this.sign) {
    if (this.length === 1 && this.words[0] < num) {
      this.words[0] = num - this.words[0];
      this.sign = false;
      return this;
    }

    this.sign = false;
    this.isubn(num);
    this.sign = true;
    return this;
  }

  // Add without checks
  return this._iaddn(num);
};

BN.prototype._iaddn = function _iaddn(num) {
  this.words[0] += num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    this.words[i] -= 0x4000000;
    if (i === this.length - 1)
      this.words[i + 1] = 1;
    else
      this.words[i + 1]++;
  }
  this.length = Math.max(this.length, i + 1);

  return this;
};

// Subtract plain number `num` from `this`
BN.prototype.isubn = function isubn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.iaddn(-num);

  if (this.sign) {
    this.sign = false;
    this.iaddn(num);
    this.sign = true;
    return this;
  }

  this.words[0] -= num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    this.words[i] += 0x4000000;
    this.words[i + 1] -= 1;
  }

  return this.strip();
};

BN.prototype.addn = function addn(num) {
  return this.clone().iaddn(num);
};

BN.prototype.subn = function subn(num) {
  return this.clone().isubn(num);
};

BN.prototype.iabs = function iabs() {
  this.sign = false;

  return this;
};

BN.prototype.abs = function abs() {
  return this.clone().iabs();
};

BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
  // Bigger storage is needed
  var len = num.length + shift;
  var i;
  if (this.words.length < len) {
    var t = new Array(len);
    for (var i = 0; i < this.length; i++)
      t[i] = this.words[i];
    this.words = t;
  } else {
    i = this.length;
  }

  // Zeroify rest
  this.length = Math.max(this.length, len);
  for (; i < this.length; i++)
    this.words[i] = 0;

  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var w = this.words[i + shift] + carry;
    var right = num.words[i] * mul;
    w -= right & 0x3ffffff;
    carry = (w >> 26) - ((right / 0x4000000) | 0);
    this.words[i + shift] = w & 0x3ffffff;
  }
  for (; i < this.length - shift; i++) {
    var w = this.words[i + shift] + carry;
    carry = w >> 26;
    this.words[i + shift] = w & 0x3ffffff;
  }

  if (carry === 0)
    return this.strip();

  // Subtraction overflow
  assert(carry === -1);
  carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = -this.words[i] + carry;
    carry = w >> 26;
    this.words[i] = w & 0x3ffffff;
  }
  this.sign = true;

  return this.strip();
};

BN.prototype._wordDiv = function _wordDiv(num, mode) {
  var shift = this.length - num.length;

  var a = this.clone();
  var b = num;

  // Normalize
  var bhi = b.words[b.length - 1];
  var bhiBits = this._countBits(bhi);
  shift = 26 - bhiBits;
  if (shift !== 0) {
    b = b.shln(shift);
    a.ishln(shift);
    bhi = b.words[b.length - 1];
  }

  // Initialize quotient
  var m = a.length - b.length;
  var q;

  if (mode !== 'mod') {
    q = new BN(null);
    q.length = m + 1;
    q.words = new Array(q.length);
    for (var i = 0; i < q.length; i++)
      q.words[i] = 0;
  }

  var diff = a.clone()._ishlnsubmul(b, 1, m);
  if (!diff.sign) {
    a = diff;
    if (q)
      q.words[m] = 1;
  }

  for (var j = m - 1; j >= 0; j--) {
    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
    // (0x7ffffff)
    qj = Math.min((qj / bhi) | 0, 0x3ffffff);

    a._ishlnsubmul(b, qj, j);
    while (a.sign) {
      qj--;
      a.sign = false;
      a._ishlnsubmul(b, 1, j);
      if (a.cmpn(0) !== 0)
        a.sign = !a.sign;
    }
    if (q)
      q.words[j] = qj;
  }
  if (q)
    q.strip();
  a.strip();

  // Denormalize
  if (mode !== 'div' && shift !== 0)
    a.ishrn(shift);
  return { div: q ? q : null, mod: a };
};

BN.prototype.divmod = function divmod(num, mode) {
  assert(num.cmpn(0) !== 0);

  if (this.sign && !num.sign) {
    var res = this.neg().divmod(num, mode);
    var div;
    var mod;
    if (mode !== 'mod')
      div = res.div.neg();
    if (mode !== 'div')
      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
    return {
      div: div,
      mod: mod
    };
  } else if (!this.sign && num.sign) {
    var res = this.divmod(num.neg(), mode);
    var div;
    if (mode !== 'mod')
      div = res.div.neg();
    return { div: div, mod: res.mod };
  } else if (this.sign && num.sign) {
    return this.neg().divmod(num.neg(), mode);
  }

  // Both numbers are positive at this point

  // Strip both numbers to approximate shift value
  if (num.length > this.length || this.cmp(num) < 0)
    return { div: new BN(0), mod: this };

  // Very short reduction
  if (num.length === 1) {
    if (mode === 'div')
      return { div: this.divn(num.words[0]), mod: null };
    else if (mode === 'mod')
      return { div: null, mod: new BN(this.modn(num.words[0])) };
    return {
      div: this.divn(num.words[0]),
      mod: new BN(this.modn(num.words[0]))
    };
  }

  return this._wordDiv(num, mode);
};

// Find `this` / `num`
BN.prototype.div = function div(num) {
  return this.divmod(num, 'div').div;
};

// Find `this` % `num`
BN.prototype.mod = function mod(num) {
  return this.divmod(num, 'mod').mod;
};

// Find Round(`this` / `num`)
BN.prototype.divRound = function divRound(num) {
  var dm = this.divmod(num);

  // Fast case - exact division
  if (dm.mod.cmpn(0) === 0)
    return dm.div;

  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

  var half = num.shrn(1);
  var r2 = num.andln(1);
  var cmp = mod.cmp(half);

  // Round down
  if (cmp < 0 || r2 === 1 && cmp === 0)
    return dm.div;

  // Round up
  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
};

BN.prototype.modn = function modn(num) {
  assert(num <= 0x3ffffff);
  var p = (1 << 26) % num;

  var acc = 0;
  for (var i = this.length - 1; i >= 0; i--)
    acc = (p * acc + this.words[i]) % num;

  return acc;
};

// In-place division by number
BN.prototype.idivn = function idivn(num) {
  assert(num <= 0x3ffffff);

  var carry = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var w = this.words[i] + carry * 0x4000000;
    this.words[i] = (w / num) | 0;
    carry = w % num;
  }

  return this.strip();
};

BN.prototype.divn = function divn(num) {
  return this.clone().idivn(num);
};

BN.prototype.egcd = function egcd(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var x = this;
  var y = p.clone();

  if (x.sign)
    x = x.mod(p);
  else
    x = x.clone();

  // A * x + B * y = x
  var A = new BN(1);
  var B = new BN(0);

  // C * x + D * y = y
  var C = new BN(0);
  var D = new BN(1);

  var g = 0;

  while (x.isEven() && y.isEven()) {
    x.ishrn(1);
    y.ishrn(1);
    ++g;
  }

  var yp = y.clone();
  var xp = x.clone();

  while (x.cmpn(0) !== 0) {
    while (x.isEven()) {
      x.ishrn(1);
      if (A.isEven() && B.isEven()) {
        A.ishrn(1);
        B.ishrn(1);
      } else {
        A.iadd(yp).ishrn(1);
        B.isub(xp).ishrn(1);
      }
    }

    while (y.isEven()) {
      y.ishrn(1);
      if (C.isEven() && D.isEven()) {
        C.ishrn(1);
        D.ishrn(1);
      } else {
        C.iadd(yp).ishrn(1);
        D.isub(xp).ishrn(1);
      }
    }

    if (x.cmp(y) >= 0) {
      x.isub(y);
      A.isub(C);
      B.isub(D);
    } else {
      y.isub(x);
      C.isub(A);
      D.isub(B);
    }
  }

  return {
    a: C,
    b: D,
    gcd: y.ishln(g)
  };
};

// This is reduced incarnation of the binary EEA
// above, designated to invert members of the
// _prime_ fields F(p) at a maximal speed
BN.prototype._invmp = function _invmp(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var a = this;
  var b = p.clone();

  if (a.sign)
    a = a.mod(p);
  else
    a = a.clone();

  var x1 = new BN(1);
  var x2 = new BN(0);

  var delta = b.clone();

  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    while (a.isEven()) {
      a.ishrn(1);
      if (x1.isEven())
        x1.ishrn(1);
      else
        x1.iadd(delta).ishrn(1);
    }
    while (b.isEven()) {
      b.ishrn(1);
      if (x2.isEven())
        x2.ishrn(1);
      else
        x2.iadd(delta).ishrn(1);
    }
    if (a.cmp(b) >= 0) {
      a.isub(b);
      x1.isub(x2);
    } else {
      b.isub(a);
      x2.isub(x1);
    }
  }
  if (a.cmpn(1) === 0)
    return x1;
  else
    return x2;
};

BN.prototype.gcd = function gcd(num) {
  if (this.cmpn(0) === 0)
    return num.clone();
  if (num.cmpn(0) === 0)
    return this.clone();

  var a = this.clone();
  var b = num.clone();
  a.sign = false;
  b.sign = false;

  // Remove common factor of two
  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    a.ishrn(1);
    b.ishrn(1);
  }

  do {
    while (a.isEven())
      a.ishrn(1);
    while (b.isEven())
      b.ishrn(1);

    var r = a.cmp(b);
    if (r < 0) {
      // Swap `a` and `b` to make `a` always bigger than `b`
      var t = a;
      a = b;
      b = t;
    } else if (r === 0 || b.cmpn(1) === 0) {
      break;
    }

    a.isub(b);
  } while (true);

  return b.ishln(shift);
};

// Invert number in the field F(num)
BN.prototype.invm = function invm(num) {
  return this.egcd(num).a.mod(num);
};

BN.prototype.isEven = function isEven() {
  return (this.words[0] & 1) === 0;
};

BN.prototype.isOdd = function isOdd() {
  return (this.words[0] & 1) === 1;
};

// And first word and num
BN.prototype.andln = function andln(num) {
  return this.words[0] & num;
};

// Increment at the bit position in-line
BN.prototype.bincn = function bincn(bit) {
  assert(typeof bit === 'number');
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    for (var i = this.length; i < s + 1; i++)
      this.words[i] = 0;
    this.words[s] |= q;
    this.length = s + 1;
    return this;
  }

  // Add bit and propagate, if needed
  var carry = q;
  for (var i = s; carry !== 0 && i < this.length; i++) {
    var w = this.words[i];
    w += carry;
    carry = w >>> 26;
    w &= 0x3ffffff;
    this.words[i] = w;
  }
  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }
  return this;
};

BN.prototype.cmpn = function cmpn(num) {
  var sign = num < 0;
  if (sign)
    num = -num;

  if (this.sign && !sign)
    return -1;
  else if (!this.sign && sign)
    return 1;

  num &= 0x3ffffff;
  this.strip();

  var res;
  if (this.length > 1) {
    res = 1;
  } else {
    var w = this.words[0];
    res = w === num ? 0 : w < num ? -1 : 1;
  }
  if (this.sign)
    res = -res;
  return res;
};

// Compare two numbers and return:
// 1 - if `this` > `num`
// 0 - if `this` == `num`
// -1 - if `this` < `num`
BN.prototype.cmp = function cmp(num) {
  if (this.sign && !num.sign)
    return -1;
  else if (!this.sign && num.sign)
    return 1;

  var res = this.ucmp(num);
  if (this.sign)
    return -res;
  else
    return res;
};

// Unsigned comparison
BN.prototype.ucmp = function ucmp(num) {
  // At this point both numbers have the same sign
  if (this.length > num.length)
    return 1;
  else if (this.length < num.length)
    return -1;

  var res = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var a = this.words[i];
    var b = num.words[i];

    if (a === b)
      continue;
    if (a < b)
      res = -1;
    else if (a > b)
      res = 1;
    break;
  }
  return res;
};

//
// A reduce context, could be using montgomery or something better, depending
// on the `m` itself.
//
BN.red = function red(num) {
  return new Red(num);
};

BN.prototype.toRed = function toRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  assert(!this.sign, 'red works only with positives');
  return ctx.convertTo(this)._forceRed(ctx);
};

BN.prototype.fromRed = function fromRed() {
  assert(this.red, 'fromRed works only with numbers in reduction context');
  return this.red.convertFrom(this);
};

BN.prototype._forceRed = function _forceRed(ctx) {
  this.red = ctx;
  return this;
};

BN.prototype.forceRed = function forceRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  return this._forceRed(ctx);
};

BN.prototype.redAdd = function redAdd(num) {
  assert(this.red, 'redAdd works only with red numbers');
  return this.red.add(this, num);
};

BN.prototype.redIAdd = function redIAdd(num) {
  assert(this.red, 'redIAdd works only with red numbers');
  return this.red.iadd(this, num);
};

BN.prototype.redSub = function redSub(num) {
  assert(this.red, 'redSub works only with red numbers');
  return this.red.sub(this, num);
};

BN.prototype.redISub = function redISub(num) {
  assert(this.red, 'redISub works only with red numbers');
  return this.red.isub(this, num);
};

BN.prototype.redShl = function redShl(num) {
  assert(this.red, 'redShl works only with red numbers');
  return this.red.shl(this, num);
};

BN.prototype.redMul = function redMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.mul(this, num);
};

BN.prototype.redIMul = function redIMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.imul(this, num);
};

BN.prototype.redSqr = function redSqr() {
  assert(this.red, 'redSqr works only with red numbers');
  this.red._verify1(this);
  return this.red.sqr(this);
};

BN.prototype.redISqr = function redISqr() {
  assert(this.red, 'redISqr works only with red numbers');
  this.red._verify1(this);
  return this.red.isqr(this);
};

// Square root over p
BN.prototype.redSqrt = function redSqrt() {
  assert(this.red, 'redSqrt works only with red numbers');
  this.red._verify1(this);
  return this.red.sqrt(this);
};

BN.prototype.redInvm = function redInvm() {
  assert(this.red, 'redInvm works only with red numbers');
  this.red._verify1(this);
  return this.red.invm(this);
};

// Return negative clone of `this` % `red modulo`
BN.prototype.redNeg = function redNeg() {
  assert(this.red, 'redNeg works only with red numbers');
  this.red._verify1(this);
  return this.red.neg(this);
};

BN.prototype.redPow = function redPow(num) {
  assert(this.red && !num.red, 'redPow(normalNum)');
  this.red._verify1(this);
  return this.red.pow(this, num);
};

// Prime numbers with efficient reduction
var primes = {
  k256: null,
  p224: null,
  p192: null,
  p25519: null
};

// Pseudo-Mersenne prime
function MPrime(name, p) {
  // P = 2 ^ N - K
  this.name = name;
  this.p = new BN(p, 16);
  this.n = this.p.bitLength();
  this.k = new BN(1).ishln(this.n).isub(this.p);

  this.tmp = this._tmp();
}

MPrime.prototype._tmp = function _tmp() {
  var tmp = new BN(null);
  tmp.words = new Array(Math.ceil(this.n / 13));
  return tmp;
};

MPrime.prototype.ireduce = function ireduce(num) {
  // Assumes that `num` is less than `P^2`
  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  var r = num;
  var rlen;

  do {
    this.split(r, this.tmp);
    r = this.imulK(r);
    r = r.iadd(this.tmp);
    rlen = r.bitLength();
  } while (rlen > this.n);

  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
  if (cmp === 0) {
    r.words[0] = 0;
    r.length = 1;
  } else if (cmp > 0) {
    r.isub(this.p);
  } else {
    r.strip();
  }

  return r;
};

MPrime.prototype.split = function split(input, out) {
  input.ishrn(this.n, 0, out);
};

MPrime.prototype.imulK = function imulK(num) {
  return num.imul(this.k);
};

function K256() {
  MPrime.call(
    this,
    'k256',
    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
}
inherits(K256, MPrime);

K256.prototype.split = function split(input, output) {
  // 256 = 9 * 26 + 22
  var mask = 0x3fffff;

  var outLen = Math.min(input.length, 9);
  for (var i = 0; i < outLen; i++)
    output.words[i] = input.words[i];
  output.length = outLen;

  if (input.length <= 9) {
    input.words[0] = 0;
    input.length = 1;
    return;
  }

  // Shift by 9 limbs
  var prev = input.words[9];
  output.words[output.length++] = prev & mask;

  for (var i = 10; i < input.length; i++) {
    var next = input.words[i];
    input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
    prev = next;
  }
  input.words[i - 10] = prev >>> 22;
  input.length -= 9;
};

K256.prototype.imulK = function imulK(num) {
  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  num.words[num.length] = 0;
  num.words[num.length + 1] = 0;
  num.length += 2;

  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  var hi;
  var lo = 0;
  for (var i = 0; i < num.length; i++) {
    var w = num.words[i];
    hi = w * 0x40;
    lo += w * 0x3d1;
    hi += (lo / 0x4000000) | 0;
    lo &= 0x3ffffff;

    num.words[i] = lo;

    lo = hi;
  }

  // Fast length reduction
  if (num.words[num.length - 1] === 0) {
    num.length--;
    if (num.words[num.length - 1] === 0)
      num.length--;
  }
  return num;
};

function P224() {
  MPrime.call(
    this,
    'p224',
    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
}
inherits(P224, MPrime);

function P192() {
  MPrime.call(
    this,
    'p192',
    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
}
inherits(P192, MPrime);

function P25519() {
  // 2 ^ 255 - 19
  MPrime.call(
    this,
    '25519',
    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
}
inherits(P25519, MPrime);

P25519.prototype.imulK = function imulK(num) {
  // K = 0x13
  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var hi = num.words[i] * 0x13 + carry;
    var lo = hi & 0x3ffffff;
    hi >>>= 26;

    num.words[i] = lo;
    carry = hi;
  }
  if (carry !== 0)
    num.words[num.length++] = carry;
  return num;
};

// Exported mostly for testing purposes, use plain name instead
BN._prime = function prime(name) {
  // Cached version of prime
  if (primes[name])
    return primes[name];

  var prime;
  if (name === 'k256')
    prime = new K256();
  else if (name === 'p224')
    prime = new P224();
  else if (name === 'p192')
    prime = new P192();
  else if (name === 'p25519')
    prime = new P25519();
  else
    throw new Error('Unknown prime ' + name);
  primes[name] = prime;

  return prime;
};

//
// Base reduction engine
//
function Red(m) {
  if (typeof m === 'string') {
    var prime = BN._prime(m);
    this.m = prime.p;
    this.prime = prime;
  } else {
    this.m = m;
    this.prime = null;
  }
}

Red.prototype._verify1 = function _verify1(a) {
  assert(!a.sign, 'red works only with positives');
  assert(a.red, 'red works only with red numbers');
};

Red.prototype._verify2 = function _verify2(a, b) {
  assert(!a.sign && !b.sign, 'red works only with positives');
  assert(a.red && a.red === b.red,
         'red works only with red numbers');
};

Red.prototype.imod = function imod(a) {
  if (this.prime)
    return this.prime.ireduce(a)._forceRed(this);
  return a.mod(this.m)._forceRed(this);
};

Red.prototype.neg = function neg(a) {
  var r = a.clone();
  r.sign = !r.sign;
  return r.iadd(this.m)._forceRed(this);
};

Red.prototype.add = function add(a, b) {
  this._verify2(a, b);

  var res = a.add(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res._forceRed(this);
};

Red.prototype.iadd = function iadd(a, b) {
  this._verify2(a, b);

  var res = a.iadd(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res;
};

Red.prototype.sub = function sub(a, b) {
  this._verify2(a, b);

  var res = a.sub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res._forceRed(this);
};

Red.prototype.isub = function isub(a, b) {
  this._verify2(a, b);

  var res = a.isub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res;
};

Red.prototype.shl = function shl(a, num) {
  this._verify1(a);
  return this.imod(a.shln(num));
};

Red.prototype.imul = function imul(a, b) {
  this._verify2(a, b);
  return this.imod(a.imul(b));
};

Red.prototype.mul = function mul(a, b) {
  this._verify2(a, b);
  return this.imod(a.mul(b));
};

Red.prototype.isqr = function isqr(a) {
  return this.imul(a, a);
};

Red.prototype.sqr = function sqr(a) {
  return this.mul(a, a);
};

Red.prototype.sqrt = function sqrt(a) {
  if (a.cmpn(0) === 0)
    return a.clone();

  var mod3 = this.m.andln(3);
  assert(mod3 % 2 === 1);

  // Fast case
  if (mod3 === 3) {
    var pow = this.m.add(new BN(1)).ishrn(2);
    var r = this.pow(a, pow);
    return r;
  }

  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  //
  // Find Q and S, that Q * 2 ^ S = (P - 1)
  var q = this.m.subn(1);
  var s = 0;
  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
    s++;
    q.ishrn(1);
  }
  assert(q.cmpn(0) !== 0);

  var one = new BN(1).toRed(this);
  var nOne = one.redNeg();

  // Find quadratic non-residue
  // NOTE: Max is such because of generalized Riemann hypothesis.
  var lpow = this.m.subn(1).ishrn(1);
  var z = this.m.bitLength();
  z = new BN(2 * z * z).toRed(this);
  while (this.pow(z, lpow).cmp(nOne) !== 0)
    z.redIAdd(nOne);

  var c = this.pow(z, q);
  var r = this.pow(a, q.addn(1).ishrn(1));
  var t = this.pow(a, q);
  var m = s;
  while (t.cmp(one) !== 0) {
    var tmp = t;
    for (var i = 0; tmp.cmp(one) !== 0; i++)
      tmp = tmp.redSqr();
    assert(i < m);
    var b = this.pow(c, new BN(1).ishln(m - i - 1));

    r = r.redMul(b);
    c = b.redSqr();
    t = t.redMul(c);
    m = i;
  }

  return r;
};

Red.prototype.invm = function invm(a) {
  var inv = a._invmp(this.m);
  if (inv.sign) {
    inv.sign = false;
    return this.imod(inv).redNeg();
  } else {
    return this.imod(inv);
  }
};

Red.prototype.pow = function pow(a, num) {
  var w = [];

  if (num.cmpn(0) === 0)
    return new BN(1);

  var q = num.clone();

  while (q.cmpn(0) !== 0) {
    w.push(q.andln(1));
    q.ishrn(1);
  }

  // Skip leading zeroes
  var res = a;
  for (var i = 0; i < w.length; i++, res = this.sqr(res))
    if (w[i] !== 0)
      break;

  if (++i < w.length) {
    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
      if (w[i] === 0)
        continue;
      res = this.mul(res, q);
    }
  }

  return res;
};

Red.prototype.convertTo = function convertTo(num) {
  var r = num.mod(this.m);
  if (r === num)
    return r.clone();
  else
    return r;
};

Red.prototype.convertFrom = function convertFrom(num) {
  var res = num.clone();
  res.red = null;
  return res;
};

//
// Montgomery method engine
//

BN.mont = function mont(num) {
  return new Mont(num);
};

function Mont(m) {
  Red.call(this, m);

  this.shift = this.m.bitLength();
  if (this.shift % 26 !== 0)
    this.shift += 26 - (this.shift % 26);
  this.r = new BN(1).ishln(this.shift);
  this.r2 = this.imod(this.r.sqr());
  this.rinv = this.r._invmp(this.m);

  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  this.minv.sign = true;
  this.minv = this.minv.mod(this.r);
}
inherits(Mont, Red);

Mont.prototype.convertTo = function convertTo(num) {
  return this.imod(num.shln(this.shift));
};

Mont.prototype.convertFrom = function convertFrom(num) {
  var r = this.imod(num.mul(this.rinv));
  r.red = null;
  return r;
};

Mont.prototype.imul = function imul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
    a.words[0] = 0;
    a.length = 1;
    return a;
  }

  var t = a.imul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.mul = function mul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
    return new BN(0)._forceRed(this);

  var t = a.mul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.invm = function invm(a) {
  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  var res = this.imod(a._invmp(this.m).mul(this.r2));
  return res._forceRed(this);
};

})(typeof module === 'undefined' || module, this);

},{}],30:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).mod(p);
  h.imul(q);
  m2.iadd(h);
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
  if (out.length < len) {
    var prefix = new Buffer(len - out.length);
    prefix.fill(0);
    out = Buffer.concat([prefix, out], len);
  }
  return out;
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}
}).call(this,require("buffer").Buffer)
},{"bn.js":29,"buffer":3,"randombytes":147}],31:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');

},{"../package.json":51,"./elliptic/curve":34,"./elliptic/curves":37,"./elliptic/ec":38,"./elliptic/hmac-drbg":41,"./elliptic/utils":43,"brorand":44}],32:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');

var getNAF = elliptic.utils.getNAF;
var getJSF = elliptic.utils.getJSF;
var assert = elliptic.utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new bn(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

  // Useful for many curves
  this.zero = new bn(0).toRed(this.red);
  this.one = new bn(1).toRed(this.red);
  this.two = new bn(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new bn(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;
  return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":31,"bn.js":29}],33:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);
  this.c = new bn(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new bn(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y = rhs.redMul(lhs.redInvm()).redSqrt();
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y, curve.one);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = z ? new bn(z, 16) : this.curve.one;
    this.t = t && new bn(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":31,"../curve":34,"bn.js":29,"inherits":149}],34:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":32,"./edwards":33,"./mont":35,"./short":36}],35:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.i4 = new bn(4).toRed(this.red).redInvm();
  this.two = new bn(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new bn(x, 16);
    this.z = new bn(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../curve":34,"bn.js":29,"inherits":149}],36:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new bn(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new bn(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new bn(vec.a, 16),
        b: new bn(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : bn.mont(num);
  var tinv = new bn(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new bn(1);
  var y1 = new bn(0);
  var x2 = new bn(0);
  var y2 = new bn(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.sign) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.sign) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.sign) {
      split.k1.sign = !split.k1.sign;
      p = p.neg(true);
    }
    if (split.k2.sign) {
      split.k2.sign = !split.k2.sign;
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new bn(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new bn(0);
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = new bn(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new bn(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":31,"../curve":34,"bn.js":29,"inherits":149}],37:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":31,"./precomputed/secp256k1":42,"hash.js":45}],38:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.shrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new bn(2));
  do {
    var priv = new bn(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.shrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new bn(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray();
  for (var i = bkey.length; i < 21; i++)
    bkey.unshift(0);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray();
  for (var i = nonce.length; i < bytes; i++)
    nonce.unshift(0);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new bn(1));
  do {
    var k = new bn(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.mod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0)
      s = this.n.sub(s);

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  } while (true);
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new bn(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).mod(this.n);
  var u2 = sinv.mul(r).mod(this.n);

  var p = this.g.mulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  return p.getX().mod(this.n).cmp(r) === 0;
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new bn(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.mod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  r = this.curve.pointFromX(isYOdd, r);
  var eNeg = e.neg().mod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  var rInv = signature.r.invm(n);
  return r.mul(s).add(this.g.mul(eNeg)).mul(rInv);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime = this.recoverPubKey(e, signature, i);

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":31,"./key":39,"./signature":40,"bn.js":29}],39:[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!enc)
    return this.pub;

  var len = this.ec.curve.p.byteLength();
  var x = this.pub.getX().toArray();

  for (var i = x.length; i < len; i++)
    x.unshift(0);

  var res;
  if (this.ec.curve.type !== 'mont') {
    if (compact) {
      res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);
    } else {
      var y = this.pub.getY().toArray();
      for (var i = y.length; i < len; i++)
        y.unshift(0);
      var res = [ 0x04 ].concat(x, y);
    }
  } else {
    res = x;
  }

  return utils.encode(res, enc);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new bn(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.mod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }

  key = utils.toArray(key, enc);
  if (this.ec.curve.type !== 'mont')
    return this._importPublicShort(key);
  else
    return this._importPublicMont(key);
};

KeyPair.prototype._importPublicShort = function _importPublicShort(key) {
  var len = this.ec.curve.p.byteLength();
  if (key[0] === 0x04 && key.length - 1 === 2 * len) {
    this.pub = this.ec.curve.point(
      key.slice(1, 1 + len),
      key.slice(1 + len, 1 + 2 * len));
  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {
    this.pub = this.ec.curve.pointFromX(key[0] === 0x03, key.slice(1, 1 + len));
  }
};

KeyPair.prototype._importPublicMont = function _importPublicMont(key) {
  this.pub = this.ec.curve.point(key, 1);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg) {
  return this.ec.sign(msg, this);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":31,"bn.js":29}],40:[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new bn(options.r, 16);
  this.s = new bn(options.s, 16);
  if (options.recoveryParam !== null)
    this.recoveryParam = options.recoveryParam;
  else
    this.recoveryParam = null;
}
module.exports = Signature;

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
    return false;
  var total = data[1];
  if (1 + total > data.length)
    return false;
  var rlen = data[3];
  // Short length notation
  if (rlen >= 0x80)
    return false;
  if (4 + rlen + 2 >= data.length)
    return false;
  if (data[4 + rlen] !== 0x02)
    return false;
  var slen = data[5 + rlen];
  // Short length notation
  if (slen >= 0x80)
    return false;
  if (4 + rlen + 2 + slen > data.length)
    return false;

  this.r = new bn(data.slice(4, 4 + rlen));
  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));
  this.recoveryParam = null;

  return true;
};

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  var total = r.length + s.length + 4;
  var res = [ 0x30, total, 0x02, r.length ];
  res = res.concat(r, [ 0x02, s.length ], s);
  return utils.encode(res, enc);
};

},{"../../elliptic":31,"bn.js":29}],41:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":31,"hash.js":45}],42:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],43:[function(require,module,exports){
'use strict';

var utils = exports;

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.ishrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.ishrn(1);
    k2.ishrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

},{}],44:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof window === 'object') {
  if (window.crypto && window.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker
  try {
    var crypto = require('cry' + 'pto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{}],45:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":46,"./hash/hmac":47,"./hash/ripemd":48,"./hash/sha":49,"./hash/utils":50}],46:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":45}],47:[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":45}],48:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":45}],49:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":45}],50:[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":149}],51:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "3.1.0",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "scripts": {
    "test": "make lint && mocha --reporter=spec test/*-test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "browserify": "^3.44.2",
    "jscs": "^1.11.3",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0",
    "uglify-js": "^2.4.13"
  },
  "dependencies": {
    "bn.js": "^2.0.3",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "gitHead": "d86cd2a8178f7e7cecbd6dd92eea084e2ab44c13",
  "_id": "elliptic@3.1.0",
  "_shasum": "c21682ef762769b56a74201609105da11d5f60cc",
  "_from": "elliptic@>=3.0.0 <4.0.0",
  "_npmVersion": "2.11.0",
  "_nodeVersion": "2.2.1",
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "dist": {
    "shasum": "c21682ef762769b56a74201609105da11d5f60cc",
    "tarball": "http://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],52:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function evp(password, salt, keyLen) {
  keyLen = keyLen/8;
  var ki = 0;
  var ii = 0;
  var key = new Buffer(keyLen);
  var addmd = 0;
  var md, md_buf;
  var i;
  while (true) {
    md = createHash('md5');
    if(addmd++ > 0) {
       md.update(md_buf);
    }
    md.update(password);
    md.update(salt);
    md_buf = md.digest();
    i = 0;
    if(keyLen > 0) {
      while(true) {
        if(keyLen === 0) {
          break;
        }
        if(i === md_buf.length) {
          break;
        }
        key[ki++] = md_buf[i++];
        keyLen--;
       }
    }
   if(keyLen === 0) {
      break;
    }
  }
  for(i=0;i<md_buf.length;i++) {
    md_buf[i] = 0;
  }
  return key;
};
}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hash":98}],53:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],54:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js');

var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  );
});
exports.RSAPrivateKey = RSAPrivateKey;

var RSAPublicKey = asn1.define('RSAPublicKey', function() {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  );
});
exports.RSAPublicKey = RSAPublicKey;

var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  );
});
exports.PublicKey = PublicKey;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int()
      ).optional()
  );
});

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  );
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  );
});

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  );
});
exports.DSAPrivateKey = DSAPrivateKey;

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  );
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function() {
  this.choice({
    namedCurve: this.objid()
  });
});

exports.signature = asn1.define('signature', function() {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  );
});

},{"asn1.js":57}],55:[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m;
var startRegex =/^-----BEGIN (.*) KEY-----\r?\n/m;
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m;
var evp = require('./EVP_BytesToKey');
var ciphers = require('browserify-aes');
module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;
  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }
  var tag = key.match(startRegex)[1] + ' KEY';
  return {
    tag: tag,
    data: decrypted
  };
};

// http://stackoverflow.com/a/7033705
function wrap (str) {
  var chunks = []

  for (var i = 0; i < str.length; i += 64) {
    chunks.push(str.slice(i, i + 64))
  }
  return chunks.join("\n")
}

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":52,"browserify-aes":11,"buffer":3}],56:[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var compat = require('pbkdf2');
module.exports = parseKeys;

function parseKeys(buffer) {
  var password;
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase;
    buffer = buffer.key;
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer);
  }

  var stripped = fixProc(buffer, password);

  var type = stripped.tag;
  var data = stripped.data;
  var subtype,ndata;
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
        case '1.2.840.10045.2.1':
        ndata.subjectPrivateKey = ndata.subjectPublicKey;
          return {
            type: 'ec',
            data:  ndata
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der');
      data = decrypt(data, password);
      //falling through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der');
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der');
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      };
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der');
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      };
    default: throw new Error('unknown key type ' +  type);
  }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
  var iv = data.algorithm.decrypt.cipher.iv;
  var cipherText = data.subjectPrivateKey;
  var keylen = parseInt(algo.split('-')[1], 10)/8;
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);
  var cipher = ciphers.createDecipheriv(algo, key, iv);
  var out = [];
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  return Buffer.concat(out);
}

}).call(this,require("buffer").Buffer)
},{"./aesid.json":53,"./asn1":54,"./fixProc":55,"browserify-aes":11,"buffer":3,"pbkdf2":118}],57:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":58,"./asn1/base":60,"./asn1/constants":64,"./asn1/decoders":66,"./asn1/encoders":69,"bn.js":29}],58:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":57,"inherits":149,"vm":168}],59:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":60,"buffer":3,"inherits":149}],60:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":59,"./node":61,"./reporter":62}],61:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input));

  var result = state['default'];
  var present = true;

  var prevKey;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    present = this._peekTag(
      input,
      state.explicit !== null ? state.explicit :
          state.implicit !== null ? state.implicit :
              state.tag || 0,
      state.any
    );
    if (input.isError(present))
      return present;
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input);
    else
      result = this._decodeChoice(input);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      var fail = state.children.some(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input);
      });
      if (fail)
        return err;
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0]);
  else if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._decodeStr(input, tag);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1]);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag);
  else if (tag === 'null_')
    return this._decodeNull(input);
  else if (tag === 'bool')
    return this._decodeBool(input);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0]);
  else if (state.use !== null)
    return this._getUse(state.use, input._reporterState.obj)._decode(input);
  else
    return input.error('unknown tag: ' + tag);

  return null;
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;
  var present = true;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // For error reporting
  var prevKey;

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });

    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else
    throw new Error('Unsupported tag: ' + tag);
};

},{"../base":60,"minimalistic-assert":71}],62:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  Error.captureStackTrace(this, ReporterError);

  return this;
};

},{"inherits":149}],63:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":64}],64:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":63}],65:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.start();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  return buffer.cut(state);
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der');
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;

    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'ia5str') {
    return buffer.raw().toString();
  } else {
    return this.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values)
    result = values[result.join(' ')];

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return this.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num >= 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":57,"inherits":149}],66:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":65,"./pem":67}],67:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"../../asn1":57,"./der":65,"buffer":3,"inherits":149}],68:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'octstr')
    return this._createEncoderBuffer(str);
  else if (tag === 'bitstr')
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  else if (tag === 'ia5str')
    return this._createEncoderBuffer(str);
  return this.reporter.error('Encoding of string type: ' + tag +
                             ' unsupported');
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/\s+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (num.sign === false && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":57,"buffer":3,"inherits":149}],69:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":68,"./pem":70}],70:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"../../asn1":57,"./der":68,"buffer":3,"inherits":149}],71:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],72:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var parseKeys = require('parse-asn1')
var BN = require('bn.js')
var elliptic = require('elliptic')
var crt = require('browserify-rsa')
var createHmac = require('create-hmac')
var curves = require('./curves')

module.exports = sign
function sign (hash, key, hashType, signType) {
  var priv = parseKeys(key)
  if (priv.curve) {
    if (signType !== 'ecdsa') {
      throw new Error('wrong private key type')
    }
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    return dsaSign(hash, priv, hashType)
    if (signType !== 'dsa') {
      throw new Error('wrong private key type')
    }
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong private key type')
    }
  }
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff)
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }

  var out = crt(pad, priv)
  return out
}
function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId)
    throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new elliptic.ec(curveId)

  var key = curve.genKeyPair()
  key._importPrivate(priv.privateKey)
  var out = key.sign(hash)
  return new Buffer(out.toDER())
}
function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var montq = BN.mont(q)
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (!s.cmpn(0)) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}
function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r)
  // Pad values
  if (s[0] & 0x80)
    s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}
module.exports.getKey = getKey
function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  return {
    k: k,
    v: v
  }
}
function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) {
    bits.ishrn(shift)
  }
  return bits
}
function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([zeros, out])
  }
  return out
}
module.exports.makeKey = makeKey
function makeKey (q, kv, algo) {
  var t
  var k
  while (true) {
    t = new Buffer('')
    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
      t = Buffer.concat([t, kv.v])
    }
    k = bits2int(t, q)
    kv.k =  createHmac(algo, kv.k)
        .update(kv.v)
        .update(new Buffer([0]))
        .digest()
    kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
    if (k.cmp(q) === -1) {
      return k
    }
  }
}
function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

}).call(this,require("buffer").Buffer)
},{"./curves":28,"bn.js":29,"browserify-rsa":30,"buffer":3,"create-hmac":110,"elliptic":31,"parse-asn1":56}],73:[function(require,module,exports){
(function (Buffer){
'use strict'
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var parseKeys = require('parse-asn1')
var elliptic = require('elliptic')
var curves = require('./curves')
var BN = require('bn.js')
module.exports = verify

function verify (sig, hash, key, signType) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type')
    }
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type')
    }
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type')
    }
  }
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))

  sig = new Buffer(sig.fromRed().toArray())
  var out = 0
  if (padNum < 8) {
    out = 1
  }
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) {
    out = 1
  }

  i = -1
  while (++i < len) {
    out |= (sig[i] ^ pad[i])
  }
  return out === 0
}
function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId)
    throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new elliptic.ec(curveId)

  var pubkey = pub.data.subjectPrivateKey.data
  return curve.verify(hash, sig, pubkey)
}
function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montq = BN.mont(q)
  var montp = BN.mont(p)
  var w =  s.invm(q)
  var v = g.toRed(montp)
  .redPow(new BN(hash).mul(w).mod(q))
  .fromRed()
  .mul(
    y.toRed(montp)
    .redPow(r.mul(w).mod(q))
    .fromRed()
  ).mod(p).mod(q)
  return !v.cmp(r)
}
function checkValue (b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig')
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig')
  }
}

}).call(this,require("buffer").Buffer)
},{"./curves":28,"bn.js":29,"buffer":3,"elliptic":31,"parse-asn1":56}],74:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
},{"bn.js":76,"buffer":3,"elliptic":77}],75:[function(require,module,exports){
var createECDH = require('crypto').createECDH;

module.exports = createECDH || require('./browser');
},{"./browser":74,"crypto":7}],76:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],77:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"../package.json":97,"./elliptic/curve":80,"./elliptic/curves":83,"./elliptic/ec":84,"./elliptic/hmac-drbg":87,"./elliptic/utils":89,"brorand":90,"dup":31}],78:[function(require,module,exports){
arguments[4][32][0].apply(exports,arguments)
},{"../../elliptic":77,"bn.js":76,"dup":32}],79:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"../../elliptic":77,"../curve":80,"bn.js":76,"dup":33,"inherits":149}],80:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"./base":78,"./edwards":79,"./mont":81,"./short":82,"dup":34}],81:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"../curve":80,"bn.js":76,"dup":35,"inherits":149}],82:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"../../elliptic":77,"../curve":80,"bn.js":76,"dup":36,"inherits":149}],83:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"../elliptic":77,"./precomputed/secp256k1":88,"dup":37,"hash.js":91}],84:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"../../elliptic":77,"./key":85,"./signature":86,"bn.js":76,"dup":38}],85:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"../../elliptic":77,"bn.js":76,"dup":39}],86:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"../../elliptic":77,"bn.js":76,"dup":40}],87:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"../elliptic":77,"dup":41,"hash.js":91}],88:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"dup":42}],89:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"dup":43}],90:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"dup":44}],91:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"./hash/common":92,"./hash/hmac":93,"./hash/ripemd":94,"./hash/sha":95,"./hash/utils":96,"dup":45}],92:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"../hash":91,"dup":46}],93:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"../hash":91,"dup":47}],94:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"../hash":91,"dup":48}],95:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"../hash":91,"dup":49}],96:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"dup":50,"inherits":149}],97:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],98:[function(require,module,exports){
(function (Buffer){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Transform = require('stream').Transform

function HashNoConstructor(hash) {
  Transform.call(this)

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Transform)

HashNoConstructor.prototype._transform = function (data, _, next) {
  this.buffers.push(data)

  next()
}

HashNoConstructor.prototype._flush = function (next) {
  this.push(this.digest())
  next()
}

HashNoConstructor.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this.buffers.push(data)
  return this
}

HashNoConstructor.prototype.digest = function (enc) {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return enc ? r.toString(enc) : r
}

function Hash(hash) {
  Transform.call(this)

  this._hash = hash
}

inherits(Hash, Transform)

Hash.prototype._transform = function (data, enc, next) {
  if (enc) data = new Buffer(data, enc)

  this._hash.update(data)

  next()
}

Hash.prototype._flush = function (next) {
  this.push(this._hash.digest())
  this._hash = null

  next()
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Hash.prototype.digest = function (enc) {
  var outData = this._hash.digest()

  return enc ? outData.toString(enc) : outData
}

module.exports = function createHash (alg) {
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
},{"./md5":100,"buffer":3,"inherits":149,"ripemd160":101,"sha.js":103,"stream":164}],99:[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("buffer").Buffer)
},{"buffer":3}],100:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
},{"./helpers":99}],101:[function(require,module,exports){
(function (Buffer){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("buffer").Buffer)
},{"buffer":3}],102:[function(require,module,exports){
(function (Buffer){
// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
},{"buffer":3}],103:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":104,"./sha1":105,"./sha224":106,"./sha256":107,"./sha384":108,"./sha512":109}],104:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0, k

  /*
   * SHA-1 has a bitwise rotate left operation. But, SHA is not
   * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
   */
  function calcW () { return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16] }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


}).call(this,require("buffer").Buffer)
},{"./hash":102,"buffer":3,"inherits":149}],105:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0, k

  function calcW () { return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1) }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

}).call(this,require("buffer").Buffer)
},{"./hash":102,"buffer":3,"inherits":149}],106:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8 | 0
  this._b = 0x367cd507 | 0
  this._c = 0x3070dd17 | 0
  this._d = 0xf70e5939 | 0
  this._e = 0xffc00b31 | 0
  this._f = 0x68581511 | 0
  this._g = 0x64f98fa7 | 0
  this._h = 0xbefa4fa4 | 0

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
},{"./hash":102,"./sha256":107,"buffer":3,"inherits":149}],107:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  return this
}

function S (X, n) {
  return (X >>> n) | (X << (32 - n))
}

function R (X, n) {
  return (X >>> n)
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z))
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z))
}

function Sigma0256 (x) {
  return (S(x, 2) ^ S(x, 13) ^ S(x, 22))
}

function Sigma1256 (x) {
  return (S(x, 6) ^ S(x, 11) ^ S(x, 25))
}

function Gamma0256 (x) {
  return (S(x, 7) ^ S(x, 18) ^ R(x, 3))
}

function Gamma1256 (x) {
  return (S(x, 17) ^ S(x, 19) ^ R(x, 10))
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var j = 0

  function calcW () { return Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16] }
  function loop (w) {
    W[j] = w

    var T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w
    var T2 = Sigma0256(a) + Maj(a, b, c)

    h = g
    g = f
    f = e
    e = d + T1
    d = c
    c = b
    b = a
    a = T1 + T2

    j++
  }

  while (j < 16) loop(M.readInt32BE(j * 4))
  while (j < 64) loop(calcW())

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
},{"./hash":102,"buffer":3,"inherits":149}],108:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._a = 0xcbbb9d5d | 0
  this._b = 0x629a292a | 0
  this._c = 0x9159015a | 0
  this._d = 0x152fecd8 | 0
  this._e = 0x67332667 | 0
  this._f = 0x8eb44a87 | 0
  this._g = 0xdb0c2e0d | 0
  this._h = 0x47b5481d | 0

  this._al = 0xc1059ed8 | 0
  this._bl = 0x367cd507 | 0
  this._cl = 0x3070dd17 | 0
  this._dl = 0xf70e5939 | 0
  this._el = 0xffc00b31 | 0
  this._fl = 0x68581511 | 0
  this._gl = 0x64f98fa7 | 0
  this._hl = 0xbefa4fa4 | 0

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
},{"./hash":102,"./sha512":109,"buffer":3,"inherits":149}],109:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  this._al = 0xf3bcc908 | 0
  this._bl = 0x84caa73b | 0
  this._cl = 0xfe94f82b | 0
  this._dl = 0x5f1d36f1 | 0
  this._el = 0xade682d1 | 0
  this._fl = 0x2b3e6c1f | 0
  this._gl = 0xfb41bd6b | 0
  this._hl = 0x137e2179 | 0

  return this
}

function S (X, Xl, n) {
  return (X >>> n) | (Xl << (32 - n))
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z))
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z))
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  var i = 0, j = 0
  var Wi, Wil
  function calcW () {
    var x = W[j - 15 * 2]
    var xl = W[j - 15 * 2 + 1]
    var gamma0 = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
    var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

    x = W[j - 2 * 2]
    xl = W[j - 2 * 2 + 1]
    var gamma1 = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
    var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7 = W[j - 7 * 2]
    var Wi7l = W[j - 7 * 2 + 1]

    var Wi16 = W[j - 16 * 2]
    var Wi16l = W[j - 16 * 2 + 1]

    Wil = gamma0l + Wi7l
    Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
    Wil = Wil + gamma1l
    Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
    Wil = Wil + Wi16l
    Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
  }

  function loop () {
    W[j] = Wi
    W[j + 1] = Wil

    var maj = Maj(a, b, c)
    var majl = Maj(al, bl, cl)

    var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
    var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
    var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
    var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

    // t1 = h + sigma1 + ch + K[i] + W[i]
    var Ki = K[j]
    var Kil = K[j + 1]

    var ch = Ch(e, f, g)
    var chl = Ch(el, fl, gl)

    var t1l = hl + sigma1l
    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
    t1l = t1l + chl
    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
    t1l = t1l + Kil
    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
    t1l = t1l + Wil
    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl
    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

    h = g
    hl = gl
    g = f
    gl = fl
    f = e
    fl = el
    el = (dl + t1l) | 0
    e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    d = c
    dl = cl
    c = b
    cl = bl
    b = a
    bl = al
    al = (t1l + t2l) | 0
    a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

    i++
    j += 2
  }

  while (i < 16) {
    Wi = M.readInt32BE(j * 4)
    Wil = M.readInt32BE(j * 4 + 4)

    loop()
  }

  while (i < 80) {
    calcW()
    loop()
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)
  writeInt64BE(this._g, this._gl, 48)
  writeInt64BE(this._h, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
},{"./hash":102,"buffer":3,"inherits":149}],110:[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)

  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hash/browser":98,"inherits":149,"stream":164}],111:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes');

var DH = require('./lib/dh');

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {
    genc = generator;
    generator = enc;
    enc = undefined;
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

}).call(this,require("buffer").Buffer)
},{"./lib/dh":112,"./lib/generatePrime":113,"./lib/primes":114,"buffer":3}],112:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;
  
  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;
    
    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      } 
      break;
    default: 
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function defineError (self, error) {
  try {
    Object.defineProperty(self, 'verifyError', {
      enumerable: true,
      value: error,
      writable: false
    });
  } catch(e) {
    self.verifyError = error;
  }
}
function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = void 0;
  this._priv = void 0;
  
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
    defineError(this, checkPrime(this.__prime, generator));
  } else {
    defineError(this, 8);
  }
}

DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
}).call(this,require("buffer").Buffer)
},{"./generatePrime":113,"bn.js":115,"buffer":3,"miller-rabin":116,"randombytes":147}],113:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);
  var runs, comp;
  function generateRandom(bits) {
    runs = -1;
    var out = new BN(randomBytes(Math.ceil(bits / 8)));
    while (out.bitLength() > bits) {
      out.ishrn(1);
    }
    if (out.isEven()) {
      out.iadd(ONE);
    }
    if (!out.testn(1)) {
      out.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {
        out.iadd(FOUR);
      }
      comp = {
        major: [TWENTYFOUR],
        minor: [TWELVE]
      };
    } else if (!gen.cmp(FIVE)) {
      rem = out.mod(TEN);
      while (rem.cmp(THREE)) {
        out.iadd(FOUR);
        rem = out.mod(TEN);
      }
      comp = {
        major: [FOUR, SIXTEEN],
        minor: [TWO, EIGHT]
      };
    } else {
      comp = {
        major: [FOUR],
        minor: [TWO]
      };
    }
    return out;
  }
  var num = generateRandom(bits);

  var n2 = num.shrn(1);

  while (true) {
    while (num.bitLength() > bits) {
      num = generateRandom(bits);
      n2 = num.shrn(1);
    }
    runs++;
    if (simpleSieve(n2) &&  simpleSieve(num) &&
      fermatTest(n2) &&  fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
    num.iadd(comp.major[runs%comp.major.length]);
    n2.iadd(comp.minor[runs%comp.minor.length]);
  }

}
},{"bn.js":115,"miller-rabin":116,"randombytes":147}],114:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],115:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],116:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":115,"brorand":117}],117:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"dup":44}],118:[function(require,module,exports){
(function (Buffer){
var createHmac = require('create-hmac')
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

exports.pbkdf2 = pbkdf2
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  if (typeof callback !== 'function') {
    throw new Error('No callback provided to pbkdf2')
  }

  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)
  setTimeout(function () {
    callback(undefined, result)
  })
}

exports.pbkdf2Sync = pbkdf2Sync
function pbkdf2Sync (password, salt, iterations, keylen, digest) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC) {
    throw new TypeError('Bad key length')
  }

  digest = digest || 'sha1'

  if (!Buffer.isBuffer(password)) password = new Buffer(password, 'binary')
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, 'binary')

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()

      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k]
      }
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hmac":110}],119:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":143,"./publicEncrypt":144}],120:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hash":98}],121:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],122:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"bn.js":121,"buffer":3,"dup":30,"randombytes":147}],123:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"buffer":3,"create-hash":98,"dup":52}],124:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"dup":53}],125:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"asn1.js":128,"dup":54}],126:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"./EVP_BytesToKey":123,"browserify-aes":11,"buffer":3,"dup":55}],127:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"./aesid.json":124,"./asn1":125,"./fixProc":126,"browserify-aes":11,"buffer":3,"dup":56,"pbkdf2":118}],128:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"./asn1/api":129,"./asn1/base":131,"./asn1/constants":135,"./asn1/decoders":137,"./asn1/encoders":140,"bn.js":121,"dup":57}],129:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../asn1":128,"dup":58,"inherits":149,"vm":168}],130:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../base":131,"buffer":3,"dup":59,"inherits":149}],131:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"./buffer":130,"./node":132,"./reporter":133,"dup":60}],132:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../base":131,"dup":61,"minimalistic-assert":142}],133:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"dup":62,"inherits":149}],134:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"../constants":135,"dup":63}],135:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"./der":134,"dup":64}],136:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"../../asn1":128,"dup":65,"inherits":149}],137:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./der":136,"./pem":138,"dup":66}],138:[function(require,module,exports){
arguments[4][67][0].apply(exports,arguments)
},{"../../asn1":128,"./der":136,"buffer":3,"dup":67,"inherits":149}],139:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"../../asn1":128,"buffer":3,"dup":68,"inherits":149}],140:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"./der":139,"./pem":141,"dup":69}],141:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"../../asn1":128,"./der":139,"buffer":3,"dup":70,"inherits":149}],142:[function(require,module,exports){
arguments[4][71][0].apply(exports,arguments)
},{"dup":71}],143:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":120,"./withPublic":145,"./xor":146,"bn.js":121,"browserify-rsa":122,"buffer":3,"create-hash":98,"parse-asn1":127}],144:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":120,"./withPublic":145,"./xor":146,"bn.js":121,"browserify-rsa":122,"buffer":3,"create-hash":98,"parse-asn1":127,"randombytes":147}],145:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
},{"bn.js":121,"buffer":3}],146:[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],147:[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var crypto = global.crypto || global.msCrypto
if(crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}
function randomBytes(size, cb) {
  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
    /* This will not work in older browsers.
     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
     */

  crypto.getRandomValues(bytes);
  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }
  return bytes;
}
function oldBrowser() {
  throw new Error(
      'secure random number generation not supported by this browser\n'+
      'use chrome, FireFox or Internet Explorer 11'
    )
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":152,"buffer":3}],148:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],149:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],150:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],151:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":152}],152:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],153:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":154}],154:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":156,"./_stream_writable":158,"_process":152,"core-util-is":159,"inherits":149}],155:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":157,"core-util-is":159,"inherits":149}],156:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":154,"_process":152,"buffer":3,"core-util-is":159,"events":148,"inherits":149,"isarray":150,"stream":164,"string_decoder/":165,"util":2}],157:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":154,"core-util-is":159,"inherits":149}],158:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":154,"_process":152,"buffer":3,"core-util-is":159,"inherits":149,"stream":164}],159:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)
},{"buffer":3}],160:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":155}],161:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":154,"./lib/_stream_passthrough.js":155,"./lib/_stream_readable.js":156,"./lib/_stream_transform.js":157,"./lib/_stream_writable.js":158,"stream":164}],162:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":157}],163:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":158}],164:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":148,"inherits":149,"readable-stream/duplex.js":153,"readable-stream/passthrough.js":160,"readable-stream/readable.js":161,"readable-stream/transform.js":162,"readable-stream/writable.js":163}],165:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":3}],166:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],167:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":166,"_process":152,"inherits":149}],168:[function(require,module,exports){
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":169}],169:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],170:[function(require,module,exports){
// Commandor constructor : rootElement is the element
// from wich we capture commands
var Commandor = function Commandor(rootElement, prefix) {
	// Event handlers
	var _pointerDownListener;
	var _pointerUpListener;
	var _pointerClickListener;
	var	_touchstartListener;
	var _touchendListener;
	var _clickListener;
	var	_keydownListener;
	var _keyupListener;
	var	_formChangeListener;
	var _formSubmitListener;

	// Commands hashmap
	var	_commands = {
		'____internal': true
	};

	// Command prefix
	this.prefix = prefix || 'app:';

	// Testing rootElement
	if(!rootElement) {
		throw Error('No rootElement given');
	}

	// keeping a reference to the rootElement
	this.rootElement = rootElement;

	// MS Pointer events : should unify pointers, but... read and see by yourself.
	if(!!('onmsgesturechange' in window)) {

		// event listeners for buttons
		(function() {
			var curElement = null;
			_pointerDownListener = function(event) {
				curElement = this.findButton(event.target) || this.findForm(event.target);
				curElement && event.preventDefault() || event.stopPropagation();
			}.bind(this);
			_pointerUpListener = function(event) {
				if(curElement) {
					if(curElement === this.findButton(event.target)) {
						this.captureButton(event);
					} else if(curElement === this.findForm(event.target)) {
						this.captureForm(event);
					}
					event.preventDefault();
					event.stopPropagation();
					curElement = null;
				}
			}.bind(this);
			this.rootElement.addEventListener('MSPointerDown', _pointerDownListener, true);
			this.rootElement.addEventListener('MSPointerUp', _pointerUpListener, true);
		}).call(this);

		// fucking IE10 bug : it doesn't cancel click event
		// when gesture events are cancelled
		_pointerClickListener = function(event) {
			if(this.findButton(event.target)) {
				event.preventDefault();
				event.stopPropagation();
			}
		}.bind(this);
		this.rootElement.addEventListener('click', _pointerClickListener,true);
	} else {
		// Touch events
		if(!!('ontouchstart' in window)) {
			(function() {
				// a var keepin' the touchstart element
				var curElement = null;
				_touchstartListener = function(event) {
					curElement = this.findButton(event.target) || this.findForm(event.target);
					curElement && event.preventDefault() || event.stopPropagation();
				}.bind(this);
				this.rootElement.addEventListener('touchstart', _touchstartListener, true);
				// checking it's the same at touchend, capturing command if so
				_touchendListener = function(event) {
					if(curElement == this.findButton(event.target)) {
						this.captureButton(event);
					} else if(curElement === this.findForm(event.target)) {
						this.captureForm(event);
					} else {
						curElement = null;
					}
				}.bind(this);
				this.rootElement.addEventListener('touchend', _touchendListener, true);
			}).call(this);
		}
	// Clic events
	_clickListener = this.captureButton.bind(this);
	this.rootElement.addEventListener('click', _clickListener, true);
	}
	// Keyboard events
	// Cancel keydown action (no click event)
	_keydownListener = function(event) {
		if(
			13 === event.keyCode && (
				this.findButton(event.target) ||
				this.findForm(event.target)
			)
		) {
			event.preventDefault() && event.stopPropagation();
		}
	}.bind(this);
	this.rootElement.addEventListener('keydown', _keydownListener, true);
	// Fire on keyup
	_keyupListener = function(event) {
		if(
			13 === event.keyCode &&
			!event.ctrlKey
		) {
			if(this.findButton(event.target)) {
				this.captureButton.apply(this, arguments);
			} else {
				this.captureForm.apply(this, arguments);
			}
		}
	}.bind(this);
	this.rootElement.addEventListener('keyup', _keyupListener, true);
	// event listeners for forms submission
	_formSubmitListener = this.captureForm.bind(this);
	this.rootElement.addEventListener('submit', _formSubmitListener, true);
	// event listeners for form changes
	_formChangeListener = this.formChange.bind(this);
	this.rootElement.addEventListener('change', _formChangeListener, true);
	this.rootElement.addEventListener('select', _formChangeListener, true);

	// Common command executor
	this.executeCommand = function (event,command,element) {
		if(!_commands) {
			throw Error('Cannot execute command on a disposed Commandor object.');
		}
		// checking for the prefix
		if(0 !== command.indexOf(this.prefix)) {
			return false;
		}
		// removing the prefix
		command = command.substr(this.prefix.length);
		var chunks = command.split('?');
		// the first chunk is the command path
		var callback = _commands;
		var nodes = chunks[0].split('/');
		for(var i = 0, j = nodes.length; i < j-1; i++) {
			if(!callback[nodes[i]]) {
				throw Error('Cannot execute the following command "' + command + '".');
			}
			callback = callback[nodes[i]];
		}
		if('function' !== typeof callback[nodes[i]]) {
			throw Error('Cannot execute the following command "' + command + '", not a function.');
		}
		// Preparing arguments
		var args = {};
		if(chunks[1]) {
			chunks = chunks[1].split('&');
			for(var k = 0, l = chunks.length; k < l; k++) {
				var parts = chunks[k].split('=');
				if(undefined !== parts[0] && undefined !== parts[1]) {
					args[parts[0]] = decodeURIComponent(parts[1]);
				}
			}
		}
		// executing the command fallback
		if(callback.____internal) {
			return !!!((callback[nodes[i]])(event, args, element));
		} else {
			return !!!(callback[nodes[i]](event, args, element));
		}
		return !!!callback(event, args, element);
	};

	// Add a callback or object for the specified path
	this.suscribe = function(path, callback) {
		if(!_commands) {
			throw Error('Cannot suscribe commands on a disposed Commandor object.');
		}
		var nodes = path.split('/');
		var command = _commands;
		for(var i = 0, j = nodes.length-1; i < j; i++) {
			if((!command[nodes[i]]) || !(command[nodes[i]] instanceof Object)) {
				if(!command.____internal) {
					throw Error('Cannot suscribe commands on an external object.');
				}
				command[nodes[i]] = {
					'____internal': true
				};
			}
			command = command[nodes[i]];
		}
		if(!command.____internal) {
			throw Error('Cannot suscribe commands on an external object.');
		}
		command[nodes[i]] = callback;
	};

	// Delete callback for the specified path
	this.unsuscribe = function(path) {
		if(!_commands) {
			throw Error('Cannot unsuscribe commands of a disposed Commandor object.');
		}
		var nodes = path.split('/'),
			command = _commands;
		for(var i = 0, j = nodes.length-1; i < j; i++) {
			command = command[nodes[i]] = {};
		}
		if(!command.____internal) {
			throw Error('Cannot unsuscribe commands of an external object.');
		}
		command[nodes[i]] = null;
	};

	// Dispose the commandor object (remove event listeners)
	this.dispose = function() {
		_commands = null;
		if(_pointerDownListener) {
			this.rootElement.removeEventListener('MSPointerDown',
				_pointerDownListener, true);
			this.rootElement.removeEventListener('MSPointerUp',
				_pointerUpListener, true);
			this.rootElement.removeEventListener('click',
				_pointerClickListener, true);
		}
		if(_touchstartListener) {
			this.rootElement.removeEventListener('touchstart',
				_touchstartListener, true);
			this.rootElement.removeEventListener('touchend',
				_touchendListener, true);
		}
		this.rootElement.removeEventListener('click', _clickListener, true);
		this.rootElement.removeEventListener('keydown', _keydownListener, true);
		this.rootElement.removeEventListener('keyup', _keyupListener, true);
		this.rootElement.removeEventListener('change', _formChangeListener, true);
		this.rootElement.removeEventListener('select', _formChangeListener, true);
		this.rootElement.removeEventListener('submit', _formSubmitListener, true);
	};
};

// Look for a button
Commandor.prototype.findButton = function(element) {
	while(element && element.parentNode) {
		if(
			'A' === element.nodeName &&
			element.getAttribute('href') &&
			-1 !== element.getAttribute('href').indexOf(this.prefix)
		) {
			return element;
		}
		if(
			'INPUT' === element.nodeName &&
			element.getAttribute('type') && (
				element.getAttribute('type') == 'submit' ||
				element.getAttribute('type') == 'button'
			) &&
			element.getAttribute('formaction') &&
			-1 !== element.getAttribute('formaction').indexOf(this.prefix)
		) {
			return element;
		}
		if(element === this.rootElement) {
			return null;
		}
		element = element.parentNode;
	}
	return null;
};

// Look for a form
Commandor.prototype.findForm = function(element) {
	if(
		'FORM' === element.nodeName || (
			'INPUT' === element.nodeName &&
			element.getAttribute('type') &&
		 'submit' === element.getAttribute('type')
		 )
	) {
		while(element && element.parentNode) {
			if(
				'FORM' === element.nodeName &&
				element.getAttribute('action') &&
				-1 !== element.getAttribute('action').indexOf(this.prefix)
			) {
				return element;
			}
			if(element === this.rootElement) {
				return null;
			}
			element = element.parentNode;
		}
		return element;
	}
	return null;
};

// Look for form change
Commandor.prototype.findFormChange = function(element) {
	while(element && element.parentNode) {
		if(
			'FORM' === element.nodeName &&
			element.getAttribute('action') &&
			-1 !== element.getAttribute('action').indexOf(this.prefix)
		) {
			return element;
		}
		if(element === this.rootElement) {
			return null;
		}
		element = element.parentNode;
	}
	return element;
};

// Extract the command for a button
Commandor.prototype.doCommandOfButton = function(element, event) {
	var command = '';
	// looking for a button with formaction attribute
	if('INPUT' === element.nodeName) {
		command = element.getAttribute('formaction');
	// looking for a link
	} else if('A' === element.nodeName) {
		command = element.getAttribute('href');
	}
	// executing the command
	this.executeCommand(event, command, element);
};

// Button event handler
Commandor.prototype.captureButton = function(event) {
	var element = this.findButton(event.target);
	// if there is a button, stop event
	if(element) {
		// if the button is not disabled, run the command
		if('disabled' !== element.getAttribute('disabled')) {
			this.doCommandOfButton(element, event);
		}
		event.stopPropagation() || event.preventDefault();
	}
};

// Form change handler
Commandor.prototype.formChange = function(event) {
	// find the evolved form
	var element = this.findFormChange(event.target);
	var command = '';
	// searching the data-change attribute containing the command
	if(element && 'FORM' === element.nodeName) {
		command = element.getAttribute('data-change');
	}
	// executing the command
	command && this.executeCommand(event, command, element);
};

// Extract the command for a button
Commandor.prototype.doCommandOfForm = function(element, event) {
	var command = '';
	// looking for a button with formaction attribute
	if('FORM' === element.nodeName) {
		command=element.getAttribute('action');
	}
	// executing the command
	this.executeCommand(event, command, element);
};

// Form command handler
Commandor.prototype.captureForm = function(event) {
	var element = this.findForm(event.target);
	// if there is a button, stop event
	if(element) {
		// if the button is not disabled, run the command
		if('disabled' !== element.getAttribute('disabled')) {
			this.doCommandOfForm(element, event);
		}
		event.stopPropagation() || event.preventDefault();
	}
};

module.exports = Commandor;


},{}],171:[function(require,module,exports){
'use strict';
// private property
var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";


// public method for encoding
exports.encode = function(input, utf8) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;

    while (i < input.length) {

        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        }
        else if (isNaN(chr3)) {
            enc4 = 64;
        }

        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);

    }

    return output;
};

// public method for decoding
exports.decode = function(input, utf8) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;

    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    while (i < input.length) {

        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }

    }

    return output;

};

},{}],172:[function(require,module,exports){
'use strict';
function CompressedObject() {
    this.compressedSize = 0;
    this.uncompressedSize = 0;
    this.crc32 = 0;
    this.compressionMethod = null;
    this.compressedContent = null;
}

CompressedObject.prototype = {
    /**
     * Return the decompressed content in an unspecified format.
     * The format will depend on the decompressor.
     * @return {Object} the decompressed content.
     */
    getContent: function() {
        return null; // see implementation
    },
    /**
     * Return the compressed content in an unspecified format.
     * The format will depend on the compressed conten source.
     * @return {Object} the compressed content.
     */
    getCompressedContent: function() {
        return null; // see implementation
    }
};
module.exports = CompressedObject;

},{}],173:[function(require,module,exports){
'use strict';
exports.STORE = {
    magic: "\x00\x00",
    compress: function(content, compressionOptions) {
        return content; // no compression
    },
    uncompress: function(content) {
        return content; // no compression
    },
    compressInputType: null,
    uncompressInputType: null
};
exports.DEFLATE = require('./flate');

},{"./flate":178}],174:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var table = [
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
];

/**
 *
 *  Javascript crc32
 *  http://www.webtoolkit.info/
 *
 */
module.exports = function crc32(input, crc) {
    if (typeof input === "undefined" || !input.length) {
        return 0;
    }

    var isArray = utils.getTypeOf(input) !== "string";

    if (typeof(crc) == "undefined") {
        crc = 0;
    }
    var x = 0;
    var y = 0;
    var b = 0;

    crc = crc ^ (-1);
    for (var i = 0, iTop = input.length; i < iTop; i++) {
        b = isArray ? input[i] : input.charCodeAt(i);
        y = (crc ^ b) & 0xFF;
        x = table[y];
        crc = (crc >>> 8) ^ x;
    }

    return crc ^ (-1);
};
// vim: set shiftwidth=4 softtabstop=4:

},{"./utils":191}],175:[function(require,module,exports){
'use strict';
var utils = require('./utils');

function DataReader(data) {
    this.data = null; // type : see implementation
    this.length = 0;
    this.index = 0;
}
DataReader.prototype = {
    /**
     * Check that the offset will not go too far.
     * @param {string} offset the additional offset to check.
     * @throws {Error} an Error if the offset is out of bounds.
     */
    checkOffset: function(offset) {
        this.checkIndex(this.index + offset);
    },
    /**
     * Check that the specifed index will not be too far.
     * @param {string} newIndex the index to check.
     * @throws {Error} an Error if the index is out of bounds.
     */
    checkIndex: function(newIndex) {
        if (this.length < newIndex || newIndex < 0) {
            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
        }
    },
    /**
     * Change the index.
     * @param {number} newIndex The new index.
     * @throws {Error} if the new index is out of the data.
     */
    setIndex: function(newIndex) {
        this.checkIndex(newIndex);
        this.index = newIndex;
    },
    /**
     * Skip the next n bytes.
     * @param {number} n the number of bytes to skip.
     * @throws {Error} if the new index is out of the data.
     */
    skip: function(n) {
        this.setIndex(this.index + n);
    },
    /**
     * Get the byte at the specified index.
     * @param {number} i the index to use.
     * @return {number} a byte.
     */
    byteAt: function(i) {
        // see implementations
    },
    /**
     * Get the next number with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {number} the corresponding number.
     */
    readInt: function(size) {
        var result = 0,
            i;
        this.checkOffset(size);
        for (i = this.index + size - 1; i >= this.index; i--) {
            result = (result << 8) + this.byteAt(i);
        }
        this.index += size;
        return result;
    },
    /**
     * Get the next string with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {string} the corresponding string.
     */
    readString: function(size) {
        return utils.transformTo("string", this.readData(size));
    },
    /**
     * Get raw data without conversion, <size> bytes.
     * @param {number} size the number of bytes to read.
     * @return {Object} the raw data, implementation specific.
     */
    readData: function(size) {
        // see implementations
    },
    /**
     * Find the last occurence of a zip signature (4 bytes).
     * @param {string} sig the signature to find.
     * @return {number} the index of the last occurence, -1 if not found.
     */
    lastIndexOfSignature: function(sig) {
        // see implementations
    },
    /**
     * Get the next date.
     * @return {Date} the date.
     */
    readDate: function() {
        var dostime = this.readInt(4);
        return new Date(
        ((dostime >> 25) & 0x7f) + 1980, // year
        ((dostime >> 21) & 0x0f) - 1, // month
        (dostime >> 16) & 0x1f, // day
        (dostime >> 11) & 0x1f, // hour
        (dostime >> 5) & 0x3f, // minute
        (dostime & 0x1f) << 1); // second
    }
};
module.exports = DataReader;

},{"./utils":191}],176:[function(require,module,exports){
'use strict';
exports.base64 = false;
exports.binary = false;
exports.dir = false;
exports.createFolders = false;
exports.date = null;
exports.compression = null;
exports.compressionOptions = null;
exports.comment = null;
exports.unixPermissions = null;
exports.dosPermissions = null;

},{}],177:[function(require,module,exports){
'use strict';
var utils = require('./utils');

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2binary = function(str) {
    return utils.string2binary(str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2Uint8Array = function(str) {
    return utils.transformTo("uint8array", str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.uint8Array2String = function(array) {
    return utils.transformTo("string", array);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2Blob = function(str) {
    var buffer = utils.transformTo("arraybuffer", str);
    return utils.arrayBuffer2Blob(buffer);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.arrayBuffer2Blob = function(buffer) {
    return utils.arrayBuffer2Blob(buffer);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.transformTo = function(outputType, input) {
    return utils.transformTo(outputType, input);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.getTypeOf = function(input) {
    return utils.getTypeOf(input);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.checkSupport = function(type) {
    return utils.checkSupport(type);
};

/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;

/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;


/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.pretty = function(str) {
    return utils.pretty(str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.findCompression = function(compressionMethod) {
    return utils.findCompression(compressionMethod);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.isRegExp = function (object) {
    return utils.isRegExp(object);
};


},{"./utils":191}],178:[function(require,module,exports){
'use strict';
var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');

var pako = require("pako");
exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";

exports.magic = "\x08\x00";
exports.compress = function(input, compressionOptions) {
    return pako.deflateRaw(input, {
        level : compressionOptions.level || -1 // default compression
    });
};
exports.uncompress =  function(input) {
    return pako.inflateRaw(input);
};

},{"pako":194}],179:[function(require,module,exports){
'use strict';

var base64 = require('./base64');

/**
Usage:
   zip = new JSZip();
   zip.file("hello.txt", "Hello, World!").file("tempfile", "nothing");
   zip.folder("images").file("smile.gif", base64Data, {base64: true});
   zip.file("Xmas.txt", "Ho ho ho !", {date : new Date("December 25, 2007 00:00:01")});
   zip.remove("tempfile");

   base64zip = zip.generate();

**/

/**
 * Representation a of zip file in js
 * @constructor
 * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).
 * @param {Object=} options the options for creating this objects (optional).
 */
function JSZip(data, options) {
    // if this constructor is used without `new`, it adds `new` before itself:
    if(!(this instanceof JSZip)) return new JSZip(data, options);

    // object containing the files :
    // {
    //   "folder/" : {...},
    //   "folder/data.txt" : {...}
    // }
    this.files = {};

    this.comment = null;

    // Where we are in the hierarchy
    this.root = "";
    if (data) {
        this.load(data, options);
    }
    this.clone = function() {
        var newObj = new JSZip();
        for (var i in this) {
            if (typeof this[i] !== "function") {
                newObj[i] = this[i];
            }
        }
        return newObj;
    };
}
JSZip.prototype = require('./object');
JSZip.prototype.load = require('./load');
JSZip.support = require('./support');
JSZip.defaults = require('./defaults');

/**
 * @deprecated
 * This namespace will be removed in a future version without replacement.
 */
JSZip.utils = require('./deprecatedPublicUtils');

JSZip.base64 = {
    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    encode : function(input) {
        return base64.encode(input);
    },
    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    decode : function(input) {
        return base64.decode(input);
    }
};
JSZip.compressions = require('./compressions');
module.exports = JSZip;

},{"./base64":171,"./compressions":173,"./defaults":176,"./deprecatedPublicUtils":177,"./load":180,"./object":183,"./support":187}],180:[function(require,module,exports){
'use strict';
var base64 = require('./base64');
var ZipEntries = require('./zipEntries');
module.exports = function(data, options) {
    var files, zipEntries, i, input;
    options = options || {};
    if (options.base64) {
        data = base64.decode(data);
    }

    zipEntries = new ZipEntries(data, options);
    files = zipEntries.files;
    for (i = 0; i < files.length; i++) {
        input = files[i];
        this.file(input.fileName, input.decompressed, {
            binary: true,
            optimizedBinaryString: true,
            date: input.date,
            dir: input.dir,
            comment : input.fileComment.length ? input.fileComment : null,
            unixPermissions : input.unixPermissions,
            dosPermissions : input.dosPermissions,
            createFolders: options.createFolders
        });
    }
    if (zipEntries.zipComment.length) {
        this.comment = zipEntries.zipComment;
    }

    return this;
};

},{"./base64":171,"./zipEntries":192}],181:[function(require,module,exports){
(function (Buffer){
'use strict';
module.exports = function(data, encoding){
    return new Buffer(data, encoding);
};
module.exports.test = function(b){
    return Buffer.isBuffer(b);
};

}).call(this,require("buffer").Buffer)
},{"buffer":3}],182:[function(require,module,exports){
'use strict';
var Uint8ArrayReader = require('./uint8ArrayReader');

function NodeBufferReader(data) {
    this.data = data;
    this.length = this.data.length;
    this.index = 0;
}
NodeBufferReader.prototype = new Uint8ArrayReader();

/**
 * @see DataReader.readData
 */
NodeBufferReader.prototype.readData = function(size) {
    this.checkOffset(size);
    var result = this.data.slice(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = NodeBufferReader;

},{"./uint8ArrayReader":188}],183:[function(require,module,exports){
'use strict';
var support = require('./support');
var utils = require('./utils');
var crc32 = require('./crc32');
var signature = require('./signature');
var defaults = require('./defaults');
var base64 = require('./base64');
var compressions = require('./compressions');
var CompressedObject = require('./compressedObject');
var nodeBuffer = require('./nodeBuffer');
var utf8 = require('./utf8');
var StringWriter = require('./stringWriter');
var Uint8ArrayWriter = require('./uint8ArrayWriter');

/**
 * Returns the raw data of a ZipObject, decompress the content if necessary.
 * @param {ZipObject} file the file to use.
 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
 */
var getRawData = function(file) {
    if (file._data instanceof CompressedObject) {
        file._data = file._data.getContent();
        file.options.binary = true;
        file.options.base64 = false;

        if (utils.getTypeOf(file._data) === "uint8array") {
            var copy = file._data;
            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.
            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).
            file._data = new Uint8Array(copy.length);
            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
            if (copy.length !== 0) {
                file._data.set(copy, 0);
            }
        }
    }
    return file._data;
};

/**
 * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.
 * @param {ZipObject} file the file to use.
 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
 */
var getBinaryData = function(file) {
    var result = getRawData(file),
        type = utils.getTypeOf(result);
    if (type === "string") {
        if (!file.options.binary) {
            // unicode text !
            // unicode string => binary string is a painful process, check if we can avoid it.
            if (support.nodebuffer) {
                return nodeBuffer(result, "utf-8");
            }
        }
        return file.asBinary();
    }
    return result;
};

/**
 * Transform this._data into a string.
 * @param {function} filter a function String -> String, applied if not null on the result.
 * @return {String} the string representing this._data.
 */
var dataToString = function(asUTF8) {
    var result = getRawData(this);
    if (result === null || typeof result === "undefined") {
        return "";
    }
    // if the data is a base64 string, we decode it before checking the encoding !
    if (this.options.base64) {
        result = base64.decode(result);
    }
    if (asUTF8 && this.options.binary) {
        // JSZip.prototype.utf8decode supports arrays as input
        // skip to array => string step, utf8decode will do it.
        result = out.utf8decode(result);
    }
    else {
        // no utf8 transformation, do the array => string step.
        result = utils.transformTo("string", result);
    }

    if (!asUTF8 && !this.options.binary) {
        result = utils.transformTo("string", out.utf8encode(result));
    }
    return result;
};
/**
 * A simple object representing a file in the zip file.
 * @constructor
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
 * @param {Object} options the options of the file
 */
var ZipObject = function(name, data, options) {
    this.name = name;
    this.dir = options.dir;
    this.date = options.date;
    this.comment = options.comment;
    this.unixPermissions = options.unixPermissions;
    this.dosPermissions = options.dosPermissions;

    this._data = data;
    this.options = options;

    /*
     * This object contains initial values for dir and date.
     * With them, we can check if the user changed the deprecated metadata in
     * `ZipObject#options` or not.
     */
    this._initialMetadata = {
      dir : options.dir,
      date : options.date
    };
};

ZipObject.prototype = {
    /**
     * Return the content as UTF8 string.
     * @return {string} the UTF8 string.
     */
    asText: function() {
        return dataToString.call(this, true);
    },
    /**
     * Returns the binary content.
     * @return {string} the content as binary.
     */
    asBinary: function() {
        return dataToString.call(this, false);
    },
    /**
     * Returns the content as a nodejs Buffer.
     * @return {Buffer} the content as a Buffer.
     */
    asNodeBuffer: function() {
        var result = getBinaryData(this);
        return utils.transformTo("nodebuffer", result);
    },
    /**
     * Returns the content as an Uint8Array.
     * @return {Uint8Array} the content as an Uint8Array.
     */
    asUint8Array: function() {
        var result = getBinaryData(this);
        return utils.transformTo("uint8array", result);
    },
    /**
     * Returns the content as an ArrayBuffer.
     * @return {ArrayBuffer} the content as an ArrayBufer.
     */
    asArrayBuffer: function() {
        return this.asUint8Array().buffer;
    }
};

/**
 * Transform an integer into a string in hexadecimal.
 * @private
 * @param {number} dec the number to convert.
 * @param {number} bytes the number of bytes to generate.
 * @returns {string} the result.
 */
var decToHex = function(dec, bytes) {
    var hex = "",
        i;
    for (i = 0; i < bytes; i++) {
        hex += String.fromCharCode(dec & 0xff);
        dec = dec >>> 8;
    }
    return hex;
};

/**
 * Merge the objects passed as parameters into a new one.
 * @private
 * @param {...Object} var_args All objects to merge.
 * @return {Object} a new object with the data of the others.
 */
var extend = function() {
    var result = {}, i, attr;
    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers
        for (attr in arguments[i]) {
            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                result[attr] = arguments[i][attr];
            }
        }
    }
    return result;
};

/**
 * Transforms the (incomplete) options from the user into the complete
 * set of options to create a file.
 * @private
 * @param {Object} o the options from the user.
 * @return {Object} the complete set of options.
 */
var prepareFileAttrs = function(o) {
    o = o || {};
    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {
        o.binary = true;
    }
    o = extend(o, defaults);
    o.date = o.date || new Date();
    if (o.compression !== null) o.compression = o.compression.toUpperCase();

    return o;
};

/**
 * Add a file in the current folder.
 * @private
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
 * @param {Object} o the options of the file
 * @return {Object} the new file.
 */
var fileAdd = function(name, data, o) {
    // be sure sub folders exist
    var dataType = utils.getTypeOf(data),
        parent;

    o = prepareFileAttrs(o);

    if (typeof o.unixPermissions === "string") {
        o.unixPermissions = parseInt(o.unixPermissions, 8);
    }

    // UNX_IFDIR  0040000 see zipinfo.c
    if (o.unixPermissions && (o.unixPermissions & 0x4000)) {
        o.dir = true;
    }
    // Bit 4    Directory
    if (o.dosPermissions && (o.dosPermissions & 0x0010)) {
        o.dir = true;
    }

    if (o.dir) {
        name = forceTrailingSlash(name);
    }

    if (o.createFolders && (parent = parentFolder(name))) {
        folderAdd.call(this, parent, true);
    }

    if (o.dir || data === null || typeof data === "undefined") {
        o.base64 = false;
        o.binary = false;
        data = null;
        dataType = null;
    }
    else if (dataType === "string") {
        if (o.binary && !o.base64) {
            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask
            if (o.optimizedBinaryString !== true) {
                // this is a string, not in a base64 format.
                // Be sure that this is a correct "binary string"
                data = utils.string2binary(data);
            }
        }
    }
    else { // arraybuffer, uint8array, ...
        o.base64 = false;
        o.binary = true;

        if (!dataType && !(data instanceof CompressedObject)) {
            throw new Error("The data of '" + name + "' is in an unsupported format !");
        }

        // special case : it's way easier to work with Uint8Array than with ArrayBuffer
        if (dataType === "arraybuffer") {
            data = utils.transformTo("uint8array", data);
        }
    }

    var object = new ZipObject(name, data, o);
    this.files[name] = object;
    return object;
};

/**
 * Find the parent folder of the path.
 * @private
 * @param {string} path the path to use
 * @return {string} the parent folder, or ""
 */
var parentFolder = function (path) {
    if (path.slice(-1) == '/') {
        path = path.substring(0, path.length - 1);
    }
    var lastSlash = path.lastIndexOf('/');
    return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
};


/**
 * Returns the path with a slash at the end.
 * @private
 * @param {String} path the path to check.
 * @return {String} the path with a trailing slash.
 */
var forceTrailingSlash = function(path) {
    // Check the name ends with a /
    if (path.slice(-1) != "/") {
        path += "/"; // IE doesn't like substr(-1)
    }
    return path;
};
/**
 * Add a (sub) folder in the current folder.
 * @private
 * @param {string} name the folder's name
 * @param {boolean=} [createFolders] If true, automatically create sub
 *  folders. Defaults to false.
 * @return {Object} the new folder.
 */
var folderAdd = function(name, createFolders) {
    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;

    name = forceTrailingSlash(name);

    // Does this folder already exist?
    if (!this.files[name]) {
        fileAdd.call(this, name, null, {
            dir: true,
            createFolders: createFolders
        });
    }
    return this.files[name];
};

/**
 * Generate a JSZip.CompressedObject for a given zipOject.
 * @param {ZipObject} file the object to read.
 * @param {JSZip.compression} compression the compression to use.
 * @param {Object} compressionOptions the options to use when compressing.
 * @return {JSZip.CompressedObject} the compressed result.
 */
var generateCompressedObjectFrom = function(file, compression, compressionOptions) {
    var result = new CompressedObject(),
        content;

    // the data has not been decompressed, we might reuse things !
    if (file._data instanceof CompressedObject) {
        result.uncompressedSize = file._data.uncompressedSize;
        result.crc32 = file._data.crc32;

        if (result.uncompressedSize === 0 || file.dir) {
            compression = compressions['STORE'];
            result.compressedContent = "";
            result.crc32 = 0;
        }
        else if (file._data.compressionMethod === compression.magic) {
            result.compressedContent = file._data.getCompressedContent();
        }
        else {
            content = file._data.getContent();
            // need to decompress / recompress
            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
        }
    }
    else {
        // have uncompressed data
        content = getBinaryData(file);
        if (!content || content.length === 0 || file.dir) {
            compression = compressions['STORE'];
            content = "";
        }
        result.uncompressedSize = content.length;
        result.crc32 = crc32(content);
        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
    }

    result.compressedSize = result.compressedContent.length;
    result.compressionMethod = compression.magic;

    return result;
};




/**
 * Generate the UNIX part of the external file attributes.
 * @param {Object} unixPermissions the unix permissions or null.
 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
 * @return {Number} a 32 bit integer.
 *
 * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :
 *
 * TTTTsstrwxrwxrwx0000000000ADVSHR
 * ^^^^____________________________ file type, see zipinfo.c (UNX_*)
 *     ^^^_________________________ setuid, setgid, sticky
 *        ^^^^^^^^^________________ permissions
 *                 ^^^^^^^^^^______ not used ?
 *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only
 */
var generateUnixExternalFileAttr = function (unixPermissions, isDir) {

    var result = unixPermissions;
    if (!unixPermissions) {
        // I can't use octal values in strict mode, hence the hexa.
        //  040775 => 0x41fd
        // 0100664 => 0x81b4
        result = isDir ? 0x41fd : 0x81b4;
    }

    return (result & 0xFFFF) << 16;
};

/**
 * Generate the DOS part of the external file attributes.
 * @param {Object} dosPermissions the dos permissions or null.
 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
 * @return {Number} a 32 bit integer.
 *
 * Bit 0     Read-Only
 * Bit 1     Hidden
 * Bit 2     System
 * Bit 3     Volume Label
 * Bit 4     Directory
 * Bit 5     Archive
 */
var generateDosExternalFileAttr = function (dosPermissions, isDir) {

    // the dir flag is already set for compatibility

    return (dosPermissions || 0)  & 0x3F;
};

/**
 * Generate the various parts used in the construction of the final zip file.
 * @param {string} name the file name.
 * @param {ZipObject} file the file content.
 * @param {JSZip.CompressedObject} compressedObject the compressed object.
 * @param {number} offset the current offset from the start of the zip file.
 * @param {String} platform let's pretend we are this platform (change platform dependents fields)
 * @return {object} the zip parts.
 */
var generateZipParts = function(name, file, compressedObject, offset, platform) {
    var data = compressedObject.compressedContent,
        utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
        comment = file.comment || "",
        utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
        useUTF8ForComment = utfEncodedComment.length !== comment.length,
        o = file.options,
        dosTime,
        dosDate,
        extraFields = "",
        unicodePathExtraField = "",
        unicodeCommentExtraField = "",
        dir, date;


    // handle the deprecated options.dir
    if (file._initialMetadata.dir !== file.dir) {
        dir = file.dir;
    } else {
        dir = o.dir;
    }

    // handle the deprecated options.date
    if(file._initialMetadata.date !== file.date) {
        date = file.date;
    } else {
        date = o.date;
    }

    var extFileAttr = 0;
    var versionMadeBy = 0;
    if (dir) {
        // dos or unix, we set the dos dir flag
        extFileAttr |= 0x00010;
    }
    if(platform === "UNIX") {
        versionMadeBy = 0x031E; // UNIX, version 3.0
        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);
    } else { // DOS or other, fallback to DOS
        versionMadeBy = 0x0014; // DOS, version 2.0
        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);
    }

    // date
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html

    dosTime = date.getHours();
    dosTime = dosTime << 6;
    dosTime = dosTime | date.getMinutes();
    dosTime = dosTime << 5;
    dosTime = dosTime | date.getSeconds() / 2;

    dosDate = date.getFullYear() - 1980;
    dosDate = dosDate << 4;
    dosDate = dosDate | (date.getMonth() + 1);
    dosDate = dosDate << 5;
    dosDate = dosDate | date.getDate();

    if (useUTF8ForFileName) {
        // set the unicode path extra field. unzip needs at least one extra
        // field to correctly handle unicode path, so using the path is as good
        // as any other information. This could improve the situation with
        // other archive managers too.
        // This field is usually used without the utf8 flag, with a non
        // unicode path in the header (winrar, winzip). This helps (a bit)
        // with the messy Windows' default compressed folders feature but
        // breaks on p7zip which doesn't seek the unicode path extra field.
        // So for now, UTF-8 everywhere !
        unicodePathExtraField =
            // Version
            decToHex(1, 1) +
            // NameCRC32
            decToHex(crc32(utfEncodedFileName), 4) +
            // UnicodeName
            utfEncodedFileName;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x70" +
            // size
            decToHex(unicodePathExtraField.length, 2) +
            // content
            unicodePathExtraField;
    }

    if(useUTF8ForComment) {

        unicodeCommentExtraField =
            // Version
            decToHex(1, 1) +
            // CommentCRC32
            decToHex(this.crc32(utfEncodedComment), 4) +
            // UnicodeName
            utfEncodedComment;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x63" +
            // size
            decToHex(unicodeCommentExtraField.length, 2) +
            // content
            unicodeCommentExtraField;
    }

    var header = "";

    // version needed to extract
    header += "\x0A\x00";
    // general purpose bit flag
    // set bit 11 if utf8
    header += (useUTF8ForFileName || useUTF8ForComment) ? "\x00\x08" : "\x00\x00";
    // compression method
    header += compressedObject.compressionMethod;
    // last mod file time
    header += decToHex(dosTime, 2);
    // last mod file date
    header += decToHex(dosDate, 2);
    // crc-32
    header += decToHex(compressedObject.crc32, 4);
    // compressed size
    header += decToHex(compressedObject.compressedSize, 4);
    // uncompressed size
    header += decToHex(compressedObject.uncompressedSize, 4);
    // file name length
    header += decToHex(utfEncodedFileName.length, 2);
    // extra field length
    header += decToHex(extraFields.length, 2);


    var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;

    var dirRecord = signature.CENTRAL_FILE_HEADER +
    // version made by (00: DOS)
    decToHex(versionMadeBy, 2) +
    // file header (common to file and central directory)
    header +
    // file comment length
    decToHex(utfEncodedComment.length, 2) +
    // disk number start
    "\x00\x00" +
    // internal file attributes TODO
    "\x00\x00" +
    // external file attributes
    decToHex(extFileAttr, 4) +
    // relative offset of local header
    decToHex(offset, 4) +
    // file name
    utfEncodedFileName +
    // extra field
    extraFields +
    // file comment
    utfEncodedComment;

    return {
        fileRecord: fileRecord,
        dirRecord: dirRecord,
        compressedObject: compressedObject
    };
};


// return the actual prototype of JSZip
var out = {
    /**
     * Read an existing zip and merge the data in the current JSZip object.
     * The implementation is in jszip-load.js, don't forget to include it.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
     * @param {Object} options Options for loading the stream.
     *  options.base64 : is the stream in base64 ? default : false
     * @return {JSZip} the current JSZip object
     */
    load: function(stream, options) {
        throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
    },

    /**
     * Filter nested files/folders with the specified function.
     * @param {Function} search the predicate to use :
     * function (relativePath, file) {...}
     * It takes 2 arguments : the relative path and the file.
     * @return {Array} An array of matching elements.
     */
    filter: function(search) {
        var result = [],
            filename, relativePath, file, fileClone;
        for (filename in this.files) {
            if (!this.files.hasOwnProperty(filename)) {
                continue;
            }
            file = this.files[filename];
            // return a new object, don't let the user mess with our internal objects :)
            fileClone = new ZipObject(file.name, file._data, extend(file.options));
            relativePath = filename.slice(this.root.length, filename.length);
            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
            search(relativePath, fileClone)) { // and the file matches the function
                result.push(fileClone);
            }
        }
        return result;
    },

    /**
     * Add a file to the zip file, or search a file.
     * @param   {string|RegExp} name The name of the file to add (if data is defined),
     * the name of the file to find (if no data) or a regex to match files.
     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
     * @param   {Object} o     File options
     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
     * a file (when searching by string) or an array of files (when searching by regex).
     */
    file: function(name, data, o) {
        if (arguments.length === 1) {
            if (utils.isRegExp(name)) {
                var regexp = name;
                return this.filter(function(relativePath, file) {
                    return !file.dir && regexp.test(relativePath);
                });
            }
            else { // text
                return this.filter(function(relativePath, file) {
                    return !file.dir && relativePath === name;
                })[0] || null;
            }
        }
        else { // more than one argument : we have data !
            name = this.root + name;
            fileAdd.call(this, name, data, o);
        }
        return this;
    },

    /**
     * Add a directory to the zip file, or search.
     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
     */
    folder: function(arg) {
        if (!arg) {
            return this;
        }

        if (utils.isRegExp(arg)) {
            return this.filter(function(relativePath, file) {
                return file.dir && arg.test(relativePath);
            });
        }

        // else, name is a new folder
        var name = this.root + arg;
        var newFolder = folderAdd.call(this, name);

        // Allow chaining by returning a new object with this folder as the root
        var ret = this.clone();
        ret.root = newFolder.name;
        return ret;
    },

    /**
     * Delete a file, or a directory and all sub-files, from the zip
     * @param {string} name the name of the file to delete
     * @return {JSZip} this JSZip object
     */
    remove: function(name) {
        name = this.root + name;
        var file = this.files[name];
        if (!file) {
            // Look for any folders
            if (name.slice(-1) != "/") {
                name += "/";
            }
            file = this.files[name];
        }

        if (file && !file.dir) {
            // file
            delete this.files[name];
        } else {
            // maybe a folder, delete recursively
            var kids = this.filter(function(relativePath, file) {
                return file.name.slice(0, name.length) === name;
            });
            for (var i = 0; i < kids.length; i++) {
                delete this.files[kids[i].name];
            }
        }

        return this;
    },

    /**
     * Generate the complete zip file
     * @param {Object} options the options to generate the zip file :
     * - base64, (deprecated, use type instead) true to generate base64.
     * - compression, "STORE" by default.
     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
     */
    generate: function(options) {
        options = extend(options || {}, {
            base64: true,
            compression: "STORE",
            compressionOptions : null,
            type: "base64",
            platform: "DOS",
            comment: null,
            mimeType: 'application/zip'
        });

        utils.checkSupport(options.type);

        // accept nodejs `process.platform`
        if(
          options.platform === 'darwin' ||
          options.platform === 'freebsd' ||
          options.platform === 'linux' ||
          options.platform === 'sunos'
        ) {
          options.platform = "UNIX";
        }
        if (options.platform === 'win32') {
          options.platform = "DOS";
        }

        var zipData = [],
            localDirLength = 0,
            centralDirLength = 0,
            writer, i,
            utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || ""));

        // first, generate all the zip parts.
        for (var name in this.files) {
            if (!this.files.hasOwnProperty(name)) {
                continue;
            }
            var file = this.files[name];

            var compressionName = file.options.compression || options.compression.toUpperCase();
            var compression = compressions[compressionName];
            if (!compression) {
                throw new Error(compressionName + " is not a valid compression method !");
            }
            var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};

            var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);

            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform);
            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
            centralDirLength += zipPart.dirRecord.length;
            zipData.push(zipPart);
        }

        var dirEnd = "";

        // end of central dir signature
        dirEnd = signature.CENTRAL_DIRECTORY_END +
        // number of this disk
        "\x00\x00" +
        // number of the disk with the start of the central directory
        "\x00\x00" +
        // total number of entries in the central directory on this disk
        decToHex(zipData.length, 2) +
        // total number of entries in the central directory
        decToHex(zipData.length, 2) +
        // size of the central directory   4 bytes
        decToHex(centralDirLength, 4) +
        // offset of start of central directory with respect to the starting disk number
        decToHex(localDirLength, 4) +
        // .ZIP file comment length
        decToHex(utfEncodedComment.length, 2) +
        // .ZIP file comment
        utfEncodedComment;


        // we have all the parts (and the total length)
        // time to create a writer !
        var typeName = options.type.toLowerCase();
        if(typeName==="uint8array"||typeName==="arraybuffer"||typeName==="blob"||typeName==="nodebuffer") {
            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
        }else{
            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
        }

        for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].fileRecord);
            writer.append(zipData[i].compressedObject.compressedContent);
        }
        for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].dirRecord);
        }

        writer.append(dirEnd);

        var zip = writer.finalize();



        switch(options.type.toLowerCase()) {
            // case "zip is an Uint8Array"
            case "uint8array" :
            case "arraybuffer" :
            case "nodebuffer" :
               return utils.transformTo(options.type.toLowerCase(), zip);
            case "blob" :
               return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip), options.mimeType);
            // case "zip is a string"
            case "base64" :
               return (options.base64) ? base64.encode(zip) : zip;
            default : // case "string" :
               return zip;
         }

    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    crc32: function (input, crc) {
        return crc32(input, crc);
    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    utf8encode: function (string) {
        return utils.transformTo("string", utf8.utf8encode(string));
    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    utf8decode: function (input) {
        return utf8.utf8decode(input);
    }
};
module.exports = out;

},{"./base64":171,"./compressedObject":172,"./compressions":173,"./crc32":174,"./defaults":176,"./nodeBuffer":181,"./signature":184,"./stringWriter":186,"./support":187,"./uint8ArrayWriter":189,"./utf8":190,"./utils":191}],184:[function(require,module,exports){
'use strict';
exports.LOCAL_FILE_HEADER = "PK\x03\x04";
exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
exports.DATA_DESCRIPTOR = "PK\x07\x08";

},{}],185:[function(require,module,exports){
'use strict';
var DataReader = require('./dataReader');
var utils = require('./utils');

function StringReader(data, optimizedBinaryString) {
    this.data = data;
    if (!optimizedBinaryString) {
        this.data = utils.string2binary(this.data);
    }
    this.length = this.data.length;
    this.index = 0;
}
StringReader.prototype = new DataReader();
/**
 * @see DataReader.byteAt
 */
StringReader.prototype.byteAt = function(i) {
    return this.data.charCodeAt(i);
};
/**
 * @see DataReader.lastIndexOfSignature
 */
StringReader.prototype.lastIndexOfSignature = function(sig) {
    return this.data.lastIndexOf(sig);
};
/**
 * @see DataReader.readData
 */
StringReader.prototype.readData = function(size) {
    this.checkOffset(size);
    // this will work because the constructor applied the "& 0xff" mask.
    var result = this.data.slice(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = StringReader;

},{"./dataReader":175,"./utils":191}],186:[function(require,module,exports){
'use strict';

var utils = require('./utils');

/**
 * An object to write any content to a string.
 * @constructor
 */
var StringWriter = function() {
    this.data = [];
};
StringWriter.prototype = {
    /**
     * Append any content to the current string.
     * @param {Object} input the content to add.
     */
    append: function(input) {
        input = utils.transformTo("string", input);
        this.data.push(input);
    },
    /**
     * Finalize the construction an return the result.
     * @return {string} the generated string.
     */
    finalize: function() {
        return this.data.join("");
    }
};

module.exports = StringWriter;

},{"./utils":191}],187:[function(require,module,exports){
(function (Buffer){
'use strict';
exports.base64 = true;
exports.array = true;
exports.string = true;
exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
// contains true if JSZip can read/generate nodejs Buffer, false otherwise.
// Browserify will provide a Buffer implementation for browsers, which is
// an augmented Uint8Array (i.e., can be used as either Buffer or U8).
exports.nodebuffer = typeof Buffer !== "undefined";
// contains true if JSZip can read/generate Uint8Array, false otherwise.
exports.uint8array = typeof Uint8Array !== "undefined";

if (typeof ArrayBuffer === "undefined") {
    exports.blob = false;
}
else {
    var buffer = new ArrayBuffer(0);
    try {
        exports.blob = new Blob([buffer], {
            type: "application/zip"
        }).size === 0;
    }
    catch (e) {
        try {
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            exports.blob = builder.getBlob('application/zip').size === 0;
        }
        catch (e) {
            exports.blob = false;
        }
    }
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],188:[function(require,module,exports){
'use strict';
var DataReader = require('./dataReader');

function Uint8ArrayReader(data) {
    if (data) {
        this.data = data;
        this.length = this.data.length;
        this.index = 0;
    }
}
Uint8ArrayReader.prototype = new DataReader();
/**
 * @see DataReader.byteAt
 */
Uint8ArrayReader.prototype.byteAt = function(i) {
    return this.data[i];
};
/**
 * @see DataReader.lastIndexOfSignature
 */
Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
    var sig0 = sig.charCodeAt(0),
        sig1 = sig.charCodeAt(1),
        sig2 = sig.charCodeAt(2),
        sig3 = sig.charCodeAt(3);
    for (var i = this.length - 4; i >= 0; --i) {
        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
            return i;
        }
    }

    return -1;
};
/**
 * @see DataReader.readData
 */
Uint8ArrayReader.prototype.readData = function(size) {
    this.checkOffset(size);
    if(size === 0) {
        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
        return new Uint8Array(0);
    }
    var result = this.data.subarray(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = Uint8ArrayReader;

},{"./dataReader":175}],189:[function(require,module,exports){
'use strict';

var utils = require('./utils');

/**
 * An object to write any content to an Uint8Array.
 * @constructor
 * @param {number} length The length of the array.
 */
var Uint8ArrayWriter = function(length) {
    this.data = new Uint8Array(length);
    this.index = 0;
};
Uint8ArrayWriter.prototype = {
    /**
     * Append any content to the current array.
     * @param {Object} input the content to add.
     */
    append: function(input) {
        if (input.length !== 0) {
            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
            input = utils.transformTo("uint8array", input);
            this.data.set(input, this.index);
            this.index += input.length;
        }
    },
    /**
     * Finalize the construction an return the result.
     * @return {Uint8Array} the generated array.
     */
    finalize: function() {
        return this.data;
    }
};

module.exports = Uint8ArrayWriter;

},{"./utils":191}],190:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var support = require('./support');
var nodeBuffer = require('./nodeBuffer');

/**
 * The following functions come from pako, from pako/lib/utils/strings
 * released under the MIT license, see pako https://github.com/nodeca/pako/
 */

// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new Array(256);
for (var i=0; i<256; i++) {
  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
}
_utf8len[254]=_utf8len[254]=1; // Invalid sequence start

// convert string to array (typed, when possible)
var string2buf = function (str) {
    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

    // count binary size
    for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }

    // allocate buffer
    if (support.uint8array) {
        buf = new Uint8Array(buf_len);
    } else {
        buf = new Array(buf_len);
    }

    // convert
    for (i=0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        if (c < 0x80) {
            /* one byte */
            buf[i++] = c;
        } else if (c < 0x800) {
            /* two bytes */
            buf[i++] = 0xC0 | (c >>> 6);
            buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
            /* three bytes */
            buf[i++] = 0xE0 | (c >>> 12);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        } else {
            /* four bytes */
            buf[i++] = 0xf0 | (c >>> 18);
            buf[i++] = 0x80 | (c >>> 12 & 0x3f);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        }
    }

    return buf;
};

// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = function(buf, max) {
    var pos;

    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }

    // go back from last position, until start of sequence found
    pos = max-1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

    // Fuckup - very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) { return max; }

    // If we came to start of buffer - that means vuffer is too small,
    // return max too.
    if (pos === 0) { return max; }

    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

// convert array to string
var buf2string = function (buf) {
    var str, i, out, c, c_len;
    var len = buf.length;

    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    var utf16buf = new Array(len*2);

    for (out=0, i=0; i<len;) {
        c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }

        c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
            c = (c << 6) | (buf[i++] & 0x3f);
            c_len--;
        }

        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

        if (c < 0x10000) {
            utf16buf[out++] = c;
        } else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
            utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
    }

    // shrinkBuf(utf16buf, out)
    if (utf16buf.length !== out) {
        if(utf16buf.subarray) {
            utf16buf = utf16buf.subarray(0, out);
        } else {
            utf16buf.length = out;
        }
    }

    // return String.fromCharCode.apply(null, utf16buf);
    return utils.applyFromCharCode(utf16buf);
};


// That's all for the pako functions.


/**
 * Transform a javascript string into an array (typed if possible) of bytes,
 * UTF-8 encoded.
 * @param {String} str the string to encode
 * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
 */
exports.utf8encode = function utf8encode(str) {
    if (support.nodebuffer) {
        return nodeBuffer(str, "utf-8");
    }

    return string2buf(str);
};


/**
 * Transform a bytes array (or a representation) representing an UTF-8 encoded
 * string into a javascript string.
 * @param {Array|Uint8Array|Buffer} buf the data de decode
 * @return {String} the decoded string.
 */
exports.utf8decode = function utf8decode(buf) {
    if (support.nodebuffer) {
        return utils.transformTo("nodebuffer", buf).toString("utf-8");
    }

    buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);

    // return buf2string(buf);
    // Chrome prefers to work with "small" chunks of data
    // for the method buf2string.
    // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.
    var result = [], k = 0, len = buf.length, chunk = 65536;
    while (k < len) {
        var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
        if (support.uint8array) {
            result.push(buf2string(buf.subarray(k, nextBoundary)));
        } else {
            result.push(buf2string(buf.slice(k, nextBoundary)));
        }
        k = nextBoundary;
    }
    return result.join("");

};
// vim: set shiftwidth=4 softtabstop=4:

},{"./nodeBuffer":181,"./support":187,"./utils":191}],191:[function(require,module,exports){
'use strict';
var support = require('./support');
var compressions = require('./compressions');
var nodeBuffer = require('./nodeBuffer');
/**
 * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
 * @param {string} str the string to transform.
 * @return {String} the binary string.
 */
exports.string2binary = function(str) {
    var result = "";
    for (var i = 0; i < str.length; i++) {
        result += String.fromCharCode(str.charCodeAt(i) & 0xff);
    }
    return result;
};
exports.arrayBuffer2Blob = function(buffer, mimeType) {
    exports.checkSupport("blob");
	mimeType = mimeType || 'application/zip';

    try {
        // Blob constructor
        return new Blob([buffer], {
            type: mimeType
        });
    }
    catch (e) {

        try {
            // deprecated, browser only, old way
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            return builder.getBlob(mimeType);
        }
        catch (e) {

            // well, fuck ?!
            throw new Error("Bug : can't construct the Blob.");
        }
    }


};
/**
 * The identity function.
 * @param {Object} input the input.
 * @return {Object} the same input.
 */
function identity(input) {
    return input;
}

/**
 * Fill in an array with a string.
 * @param {String} str the string to use.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
 */
function stringToArrayLike(str, array) {
    for (var i = 0; i < str.length; ++i) {
        array[i] = str.charCodeAt(i) & 0xFF;
    }
    return array;
}

/**
 * Transform an array-like object to a string.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
 * @return {String} the result.
 */
function arrayLikeToString(array) {
    // Performances notes :
    // --------------------
    // String.fromCharCode.apply(null, array) is the fastest, see
    // see http://jsperf.com/converting-a-uint8array-to-a-string/2
    // but the stack is limited (and we can get huge arrays !).
    //
    // result += String.fromCharCode(array[i]); generate too many strings !
    //
    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
    var chunk = 65536;
    var result = [],
        len = array.length,
        type = exports.getTypeOf(array),
        k = 0,
        canUseApply = true;
      try {
         switch(type) {
            case "uint8array":
               String.fromCharCode.apply(null, new Uint8Array(0));
               break;
            case "nodebuffer":
               String.fromCharCode.apply(null, nodeBuffer(0));
               break;
         }
      } catch(e) {
         canUseApply = false;
      }

      // no apply : slow and painful algorithm
      // default browser on android 4.*
      if (!canUseApply) {
         var resultStr = "";
         for(var i = 0; i < array.length;i++) {
            resultStr += String.fromCharCode(array[i]);
         }
    return resultStr;
    }
    while (k < len && chunk > 1) {
        try {
            if (type === "array" || type === "nodebuffer") {
                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
            }
            else {
                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
            }
            k += chunk;
        }
        catch (e) {
            chunk = Math.floor(chunk / 2);
        }
    }
    return result.join("");
}

exports.applyFromCharCode = arrayLikeToString;


/**
 * Copy the data from an array-like to an other array-like.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
 */
function arrayLikeToArrayLike(arrayFrom, arrayTo) {
    for (var i = 0; i < arrayFrom.length; i++) {
        arrayTo[i] = arrayFrom[i];
    }
    return arrayTo;
}

// a matrix containing functions to transform everything into everything.
var transform = {};

// string to ?
transform["string"] = {
    "string": identity,
    "array": function(input) {
        return stringToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["string"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return stringToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": function(input) {
        return stringToArrayLike(input, nodeBuffer(input.length));
    }
};

// array to ?
transform["array"] = {
    "string": arrayLikeToString,
    "array": identity,
    "arraybuffer": function(input) {
        return (new Uint8Array(input)).buffer;
    },
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodeBuffer(input);
    }
};

// arraybuffer to ?
transform["arraybuffer"] = {
    "string": function(input) {
        return arrayLikeToString(new Uint8Array(input));
    },
    "array": function(input) {
        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
    },
    "arraybuffer": identity,
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodeBuffer(new Uint8Array(input));
    }
};

// uint8array to ?
transform["uint8array"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return input.buffer;
    },
    "uint8array": identity,
    "nodebuffer": function(input) {
        return nodeBuffer(input);
    }
};

// nodebuffer to ?
transform["nodebuffer"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["nodebuffer"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return arrayLikeToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": identity
};

/**
 * Transform an input into any type.
 * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
 * If no output type is specified, the unmodified input will be returned.
 * @param {String} outputType the output type.
 * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
 * @throws {Error} an Error if the browser doesn't support the requested output type.
 */
exports.transformTo = function(outputType, input) {
    if (!input) {
        // undefined, null, etc
        // an empty string won't harm.
        input = "";
    }
    if (!outputType) {
        return input;
    }
    exports.checkSupport(outputType);
    var inputType = exports.getTypeOf(input);
    var result = transform[inputType][outputType](input);
    return result;
};

/**
 * Return the type of the input.
 * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
 * @param {Object} input the input to identify.
 * @return {String} the (lowercase) type of the input.
 */
exports.getTypeOf = function(input) {
    if (typeof input === "string") {
        return "string";
    }
    if (Object.prototype.toString.call(input) === "[object Array]") {
        return "array";
    }
    if (support.nodebuffer && nodeBuffer.test(input)) {
        return "nodebuffer";
    }
    if (support.uint8array && input instanceof Uint8Array) {
        return "uint8array";
    }
    if (support.arraybuffer && input instanceof ArrayBuffer) {
        return "arraybuffer";
    }
};

/**
 * Throw an exception if the type is not supported.
 * @param {String} type the type to check.
 * @throws {Error} an Error if the browser doesn't support the requested type.
 */
exports.checkSupport = function(type) {
    var supported = support[type.toLowerCase()];
    if (!supported) {
        throw new Error(type + " is not supported by this browser");
    }
};
exports.MAX_VALUE_16BITS = 65535;
exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1

/**
 * Prettify a string read as binary.
 * @param {string} str the string to prettify.
 * @return {string} a pretty string.
 */
exports.pretty = function(str) {
    var res = '',
        code, i;
    for (i = 0; i < (str || "").length; i++) {
        code = str.charCodeAt(i);
        res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
    }
    return res;
};

/**
 * Find a compression registered in JSZip.
 * @param {string} compressionMethod the method magic to find.
 * @return {Object|null} the JSZip compression object, null if none found.
 */
exports.findCompression = function(compressionMethod) {
    for (var method in compressions) {
        if (!compressions.hasOwnProperty(method)) {
            continue;
        }
        if (compressions[method].magic === compressionMethod) {
            return compressions[method];
        }
    }
    return null;
};
/**
* Cross-window, cross-Node-context regular expression detection
* @param  {Object}  object Anything
* @return {Boolean}        true if the object is a regular expression,
* false otherwise
*/
exports.isRegExp = function (object) {
    return Object.prototype.toString.call(object) === "[object RegExp]";
};


},{"./compressions":173,"./nodeBuffer":181,"./support":187}],192:[function(require,module,exports){
'use strict';
var StringReader = require('./stringReader');
var NodeBufferReader = require('./nodeBufferReader');
var Uint8ArrayReader = require('./uint8ArrayReader');
var utils = require('./utils');
var sig = require('./signature');
var ZipEntry = require('./zipEntry');
var support = require('./support');
var jszipProto = require('./object');
//  class ZipEntries {{{
/**
 * All the entries in the zip file.
 * @constructor
 * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntries(data, loadOptions) {
    this.files = [];
    this.loadOptions = loadOptions;
    if (data) {
        this.load(data);
    }
}
ZipEntries.prototype = {
    /**
     * Check that the reader is on the speficied signature.
     * @param {string} expectedSignature the expected signature.
     * @throws {Error} if it is an other signature.
     */
    checkSignature: function(expectedSignature) {
        var signature = this.reader.readString(4);
        if (signature !== expectedSignature) {
            throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
        }
    },
    /**
     * Read the end of the central directory.
     */
    readBlockEndOfCentral: function() {
        this.diskNumber = this.reader.readInt(2);
        this.diskWithCentralDirStart = this.reader.readInt(2);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
        this.centralDirRecords = this.reader.readInt(2);
        this.centralDirSize = this.reader.readInt(4);
        this.centralDirOffset = this.reader.readInt(4);

        this.zipCommentLength = this.reader.readInt(2);
        // warning : the encoding depends of the system locale
        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
        // On a windows machine, this field is encoded with the localized windows code page.
        this.zipComment = this.reader.readString(this.zipCommentLength);
        // To get consistent behavior with the generation part, we will assume that
        // this is utf8 encoded.
        this.zipComment = jszipProto.utf8decode(this.zipComment);
    },
    /**
     * Read the end of the Zip 64 central directory.
     * Not merged with the method readEndOfCentral :
     * The end of central can coexist with its Zip64 brother,
     * I don't want to read the wrong number of bytes !
     */
    readBlockZip64EndOfCentral: function() {
        this.zip64EndOfCentralSize = this.reader.readInt(8);
        this.versionMadeBy = this.reader.readString(2);
        this.versionNeeded = this.reader.readInt(2);
        this.diskNumber = this.reader.readInt(4);
        this.diskWithCentralDirStart = this.reader.readInt(4);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
        this.centralDirRecords = this.reader.readInt(8);
        this.centralDirSize = this.reader.readInt(8);
        this.centralDirOffset = this.reader.readInt(8);

        this.zip64ExtensibleData = {};
        var extraDataSize = this.zip64EndOfCentralSize - 44,
            index = 0,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;
        while (index < extraDataSize) {
            extraFieldId = this.reader.readInt(2);
            extraFieldLength = this.reader.readInt(4);
            extraFieldValue = this.reader.readString(extraFieldLength);
            this.zip64ExtensibleData[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Read the end of the Zip 64 central directory locator.
     */
    readBlockZip64EndOfCentralLocator: function() {
        this.diskWithZip64CentralDirStart = this.reader.readInt(4);
        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
        this.disksCount = this.reader.readInt(4);
        if (this.disksCount > 1) {
            throw new Error("Multi-volumes zip are not supported");
        }
    },
    /**
     * Read the local files, based on the offset read in the central part.
     */
    readLocalFiles: function() {
        var i, file;
        for (i = 0; i < this.files.length; i++) {
            file = this.files[i];
            this.reader.setIndex(file.localHeaderOffset);
            this.checkSignature(sig.LOCAL_FILE_HEADER);
            file.readLocalPart(this.reader);
            file.handleUTF8();
            file.processAttributes();
        }
    },
    /**
     * Read the central directory.
     */
    readCentralDir: function() {
        var file;

        this.reader.setIndex(this.centralDirOffset);
        while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
            file = new ZipEntry({
                zip64: this.zip64
            }, this.loadOptions);
            file.readCentralPart(this.reader);
            this.files.push(file);
        }
    },
    /**
     * Read the end of central directory.
     */
    readEndOfCentral: function() {
        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
        if (offset === -1) {
            // Check if the content is a truncated zip or complete garbage.
            // A "LOCAL_FILE_HEADER" is not required at the beginning (auto
            // extractible zip for example) but it can give a good hint.
            // If an ajax request was used without responseType, we will also
            // get unreadable data.
            var isGarbage = true;
            try {
                this.reader.setIndex(0);
                this.checkSignature(sig.LOCAL_FILE_HEADER);
                isGarbage = false;
            } catch (e) {}

            if (isGarbage) {
                throw new Error("Can't find end of central directory : is this a zip file ? " +
                                "If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html");
            } else {
                throw new Error("Corrupted zip : can't find end of central directory");
            }
        }
        this.reader.setIndex(offset);
        this.checkSignature(sig.CENTRAL_DIRECTORY_END);
        this.readBlockEndOfCentral();


        /* extract from the zip spec :
            4)  If one of the fields in the end of central directory
                record is too small to hold required data, the field
                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                ZIP64 format record should be created.
            5)  The end of central directory record and the
                Zip64 end of central directory locator record must
                reside on the same disk when splitting or spanning
                an archive.
         */
        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
            this.zip64 = true;

            /*
            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
            all numbers as 64-bit double precision IEEE 754 floating point numbers.
            So, we have 53bits for integers and bitwise operations treat everything as 32bits.
            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
            */

            // should look for a zip64 EOCD locator
            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            if (offset === -1) {
                throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
            }
            this.reader.setIndex(offset);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            this.readBlockZip64EndOfCentralLocator();

            // now the zip64 EOCD record
            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
            this.readBlockZip64EndOfCentral();
        }
    },
    prepareReader: function(data) {
        var type = utils.getTypeOf(data);
        if (type === "string" && !support.uint8array) {
            this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
        }
        else if (type === "nodebuffer") {
            this.reader = new NodeBufferReader(data);
        }
        else {
            this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
        }
    },
    /**
     * Read a zip file and create ZipEntries.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
     */
    load: function(data) {
        this.prepareReader(data);
        this.readEndOfCentral();
        this.readCentralDir();
        this.readLocalFiles();
    }
};
// }}} end of ZipEntries
module.exports = ZipEntries;

},{"./nodeBufferReader":182,"./object":183,"./signature":184,"./stringReader":185,"./support":187,"./uint8ArrayReader":188,"./utils":191,"./zipEntry":193}],193:[function(require,module,exports){
'use strict';
var StringReader = require('./stringReader');
var utils = require('./utils');
var CompressedObject = require('./compressedObject');
var jszipProto = require('./object');

var MADE_BY_DOS = 0x00;
var MADE_BY_UNIX = 0x03;

// class ZipEntry {{{
/**
 * An entry in the zip file.
 * @constructor
 * @param {Object} options Options of the current file.
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntry(options, loadOptions) {
    this.options = options;
    this.loadOptions = loadOptions;
}
ZipEntry.prototype = {
    /**
     * say if the file is encrypted.
     * @return {boolean} true if the file is encrypted, false otherwise.
     */
    isEncrypted: function() {
        // bit 1 is set
        return (this.bitFlag & 0x0001) === 0x0001;
    },
    /**
     * say if the file has utf-8 filename/comment.
     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
     */
    useUTF8: function() {
        // bit 11 is set
        return (this.bitFlag & 0x0800) === 0x0800;
    },
    /**
     * Prepare the function used to generate the compressed content from this ZipFile.
     * @param {DataReader} reader the reader to use.
     * @param {number} from the offset from where we should read the data.
     * @param {number} length the length of the data to read.
     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
     */
    prepareCompressedContent: function(reader, from, length) {
        return function() {
            var previousIndex = reader.index;
            reader.setIndex(from);
            var compressedFileData = reader.readData(length);
            reader.setIndex(previousIndex);

            return compressedFileData;
        };
    },
    /**
     * Prepare the function used to generate the uncompressed content from this ZipFile.
     * @param {DataReader} reader the reader to use.
     * @param {number} from the offset from where we should read the data.
     * @param {number} length the length of the data to read.
     * @param {JSZip.compression} compression the compression used on this file.
     * @param {number} uncompressedSize the uncompressed size to expect.
     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
     */
    prepareContent: function(reader, from, length, compression, uncompressedSize) {
        return function() {

            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
            var uncompressedFileData = compression.uncompress(compressedFileData);

            if (uncompressedFileData.length !== uncompressedSize) {
                throw new Error("Bug : uncompressed data size mismatch");
            }

            return uncompressedFileData;
        };
    },
    /**
     * Read the local part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readLocalPart: function(reader) {
        var compression, localExtraFieldsLength;

        // we already know everything from the central dir !
        // If the central dir data are false, we are doomed.
        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
        // The less data we get here, the more reliable this should be.
        // Let's skip the whole header and dash to the data !
        reader.skip(22);
        // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
        // Strangely, the filename here is OK.
        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
        // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
        // Search "unzip mismatching "local" filename continuing with "central" filename version" on
        // the internet.
        //
        // I think I see the logic here : the central directory is used to display
        // content and the local directory is used to extract the files. Mixing / and \
        // may be used to display \ to windows users and use / when extracting the files.
        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
        this.fileNameLength = reader.readInt(2);
        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir
        this.fileName = reader.readString(this.fileNameLength);
        reader.skip(localExtraFieldsLength);

        if (this.compressedSize == -1 || this.uncompressedSize == -1) {
            throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)");
        }

        compression = utils.findCompression(this.compressionMethod);
        if (compression === null) { // no compression found
            throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
        }
        this.decompressed = new CompressedObject();
        this.decompressed.compressedSize = this.compressedSize;
        this.decompressed.uncompressedSize = this.uncompressedSize;
        this.decompressed.crc32 = this.crc32;
        this.decompressed.compressionMethod = this.compressionMethod;
        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);

        // we need to compute the crc32...
        if (this.loadOptions.checkCRC32) {
            this.decompressed = utils.transformTo("string", this.decompressed.getContent());
            if (jszipProto.crc32(this.decompressed) !== this.crc32) {
                throw new Error("Corrupted zip : CRC32 mismatch");
            }
        }
    },

    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readCentralPart: function(reader) {
        this.versionMadeBy = reader.readInt(2);
        this.versionNeeded = reader.readInt(2);
        this.bitFlag = reader.readInt(2);
        this.compressionMethod = reader.readString(2);
        this.date = reader.readDate();
        this.crc32 = reader.readInt(4);
        this.compressedSize = reader.readInt(4);
        this.uncompressedSize = reader.readInt(4);
        this.fileNameLength = reader.readInt(2);
        this.extraFieldsLength = reader.readInt(2);
        this.fileCommentLength = reader.readInt(2);
        this.diskNumberStart = reader.readInt(2);
        this.internalFileAttributes = reader.readInt(2);
        this.externalFileAttributes = reader.readInt(4);
        this.localHeaderOffset = reader.readInt(4);

        if (this.isEncrypted()) {
            throw new Error("Encrypted zip are not supported");
        }

        this.fileName = reader.readString(this.fileNameLength);
        this.readExtraFields(reader);
        this.parseZIP64ExtraField(reader);
        this.fileComment = reader.readString(this.fileCommentLength);
    },

    /**
     * Parse the external file attributes and get the unix/dos permissions.
     */
    processAttributes: function () {
        this.unixPermissions = null;
        this.dosPermissions = null;
        var madeBy = this.versionMadeBy >> 8;

        // Check if we have the DOS directory flag set.
        // We look for it in the DOS and UNIX permissions
        // but some unknown platform could set it as a compatibility flag.
        this.dir = this.externalFileAttributes & 0x0010 ? true : false;

        if(madeBy === MADE_BY_DOS) {
            // first 6 bits (0 to 5)
            this.dosPermissions = this.externalFileAttributes & 0x3F;
        }

        if(madeBy === MADE_BY_UNIX) {
            this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;
            // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);
        }

        // fail safe : if the name ends with a / it probably means a folder
        if (!this.dir && this.fileName.slice(-1) === '/') {
            this.dir = true;
        }
    },

    /**
     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
     * @param {DataReader} reader the reader to use.
     */
    parseZIP64ExtraField: function(reader) {

        if (!this.extraFields[0x0001]) {
            return;
        }

        // should be something, preparing the extra reader
        var extraReader = new StringReader(this.extraFields[0x0001].value);

        // I really hope that these 64bits integer can fit in 32 bits integer, because js
        // won't let us have more.
        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
            this.uncompressedSize = extraReader.readInt(8);
        }
        if (this.compressedSize === utils.MAX_VALUE_32BITS) {
            this.compressedSize = extraReader.readInt(8);
        }
        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
            this.localHeaderOffset = extraReader.readInt(8);
        }
        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
            this.diskNumberStart = extraReader.readInt(4);
        }
    },
    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readExtraFields: function(reader) {
        var start = reader.index,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;

        this.extraFields = this.extraFields || {};

        while (reader.index < start + this.extraFieldsLength) {
            extraFieldId = reader.readInt(2);
            extraFieldLength = reader.readInt(2);
            extraFieldValue = reader.readString(extraFieldLength);

            this.extraFields[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Apply an UTF8 transformation if needed.
     */
    handleUTF8: function() {
        if (this.useUTF8()) {
            this.fileName = jszipProto.utf8decode(this.fileName);
            this.fileComment = jszipProto.utf8decode(this.fileComment);
        } else {
            var upath = this.findExtraFieldUnicodePath();
            if (upath !== null) {
                this.fileName = upath;
            }
            var ucomment = this.findExtraFieldUnicodeComment();
            if (ucomment !== null) {
                this.fileComment = ucomment;
            }
        }
    },

    /**
     * Find the unicode path declared in the extra field, if any.
     * @return {String} the unicode path, null otherwise.
     */
    findExtraFieldUnicodePath: function() {
        var upathField = this.extraFields[0x7075];
        if (upathField) {
            var extraReader = new StringReader(upathField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the filename changed, this field is out of date.
            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
                return null;
            }

            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
        }
        return null;
    },

    /**
     * Find the unicode comment declared in the extra field, if any.
     * @return {String} the unicode comment, null otherwise.
     */
    findExtraFieldUnicodeComment: function() {
        var ucommentField = this.extraFields[0x6375];
        if (ucommentField) {
            var extraReader = new StringReader(ucommentField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the comment changed, this field is out of date.
            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
                return null;
            }

            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
        }
        return null;
    }
};
module.exports = ZipEntry;

},{"./compressedObject":172,"./object":183,"./stringReader":185,"./utils":191}],194:[function(require,module,exports){
// Top level file is just a mixin of submodules & constants
'use strict';

var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":195,"./lib/inflate":196,"./lib/utils/common":197,"./lib/zlib/constants":200}],195:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate.js');
var utils = require('./utils/common');
var strings = require('./utils/strings');
var msg = require('./zlib/messages');
var zstream = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
var Deflate = function(options) {

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }
};

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function(data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function(status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate alrorythm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":197,"./utils/strings":198,"./zlib/deflate.js":202,"./zlib/messages":207,"./zlib/zstream":209}],196:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate.js');
var utils = require('./utils/common');
var strings = require('./utils/strings');
var c = require('./zlib/constants');
var msg = require('./zlib/messages');
var zstream = require('./zlib/zstream');
var gzheader = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
var Inflate = function(options) {

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new zstream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new gzheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
};

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function(data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;
  var next_out_utf8, tail, utf8str;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }
  } while ((strm.avail_in > 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function(status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":197,"./utils/strings":198,"./zlib/constants":200,"./zlib/gzheader":203,"./zlib/inflate.js":205,"./zlib/messages":207,"./zlib/zstream":209}],197:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i=0; i<len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function(chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i=0, l=chunks.length; i<l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i=0, l=chunks.length; i<l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i=0; i<len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function(chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],198:[function(require,module,exports){
// String encode/decode helpers
'use strict';


var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q=0; q<256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254]=_utf8len[254]=1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
      c2 = str.charCodeAt(m_pos+1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i=0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
      c2 = str.charCodeAt(m_pos+1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i=0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function(buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function(str) {
  var buf = new utils.Buf8(str.length);
  for (var i=0, len=buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len*2);

  for (out=0, i=0; i<len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function(buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max-1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":197}],199:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],200:[function(require,module,exports){
module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],201:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n =0; n < 256; n++) {
    c = n;
    for (var k =0; k < 8; k++) {
      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc = crc ^ (-1);

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],202:[function(require,module,exports){
'use strict';

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg   = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2*L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only (s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH-1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH-1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length-1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH-1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
};

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);
  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS+1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  s.d_buf = s.lit_bufsize >> 1;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}

/* =========================================================================
 * Copy the source state to the destination state
 */
//function deflateCopy(dest, source) {
//
//}

exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":197,"./adler32":199,"./crc32":201,"./messages":207,"./trees":208}],203:[function(require,module,exports){
'use strict';


function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],204:[function(require,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  var window;                 /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],205:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var inflate_fast = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function ZSWAP32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window,src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window,src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = ZSWAP32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = {bits: state.lenbits};
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = {bits: state.lenbits};
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = {bits: state.distbits};
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}


exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":197,"./adler32":199,"./crc32":201,"./inffast":204,"./inftrees":206}],206:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i=0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":197}],207:[function(require,module,exports){
'use strict';

module.exports = {
  '2':    'need dictionary',     /* Z_NEED_DICT       2  */
  '1':    'stream end',          /* Z_STREAM_END      1  */
  '0':    '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],208:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2*L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES+2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
};


var static_l_desc;
var static_d_desc;
var static_bl_desc;


var TreeDesc = function(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
};



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short (s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n*2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n-base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length-1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m*2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;
        tree[m*2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits-1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n*2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS+1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES-1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1<<extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length-1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0 ; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1<<extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n*2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n*2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n*2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n*2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES+1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n*2 + 1]/*.Len*/ = 5;
    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n*2;
  var _m2 = m*2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code+LITERALS+1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n*2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node*2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6*2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count-3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count-3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count-11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3*(max_blindex+1) + 5+5+4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes-1,   5);
  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES<<1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len+3+7) >>> 3;
    static_lenb = (s.static_len+3+7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc*2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize-1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":197}],209:[function(require,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],210:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/



/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":212,"./_stream_writable":214,"core-util-is":215,"inherits":216,"process-nextick-args":218}],211:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":213,"core-util-is":215,"inherits":216}],212:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/



/*<replacement>*/
var Stream;
 (function (){try{
Stream = require('st' + 'ream');
}catch(_){Stream = require('events').EventEmitter;}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function')
    this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      processNextTick(emitReadable_, stream);
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    processNextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }; }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":210,"_process":152,"buffer":3,"core-util-is":215,"events":148,"inherits":216,"isarray":217,"process-nextick-args":218,"string_decoder/":219,"util":2}],213:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function')
      this._transform = options.transform;

    if (typeof options.flush === 'function')
      this._flush = options.flush;
  }

  this.once('prefinish', function() {
    if (typeof this._flush === 'function')
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":210,"core-util-is":215,"inherits":216}],214:[function(require,module,exports){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var Stream;
 (function (){try{
Stream = require('st' + 'ream');
}catch(_){Stream = require('events').EventEmitter;}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function (){try {
Object.defineProperty(WritableState.prototype, 'buffer', {
  get: require('util-deprecate')(function() {
    return this.getBuffer();
  }, '_writableState.buffer is deprecated. Use ' +
      '_writableState.getBuffer() instead.')
});
}catch(_){}}());


function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function')
      this._write = options.write;

    if (typeof options.writev === 'function')
      this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = nop;

  if (state.ended)
    writeAfterEnd(this, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.bufferedRequest)
      clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string')
    encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
.indexOf((encoding + '').toLowerCase()) > -1))
    throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync)
    processNextTick(cb, er);
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      processNextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var buffer = [];
    var cbs = [];
    while (entry) {
      cbs.push(entry.callback);
      buffer.push(entry);
      entry = entry.next;
    }

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    state.lastBufferedRequest = null;
    doWrite(stream, state, true, state.length, buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null)
      state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined)
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(state) {
  return (state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      processNextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./_stream_duplex":210,"buffer":3,"core-util-is":215,"events":148,"inherits":216,"process-nextick-args":218,"util-deprecate":220}],215:[function(require,module,exports){
arguments[4][159][0].apply(exports,arguments)
},{"buffer":3,"dup":159}],216:[function(require,module,exports){
arguments[4][149][0].apply(exports,arguments)
},{"dup":149}],217:[function(require,module,exports){
arguments[4][150][0].apply(exports,arguments)
},{"dup":150}],218:[function(require,module,exports){
(function (process){
'use strict';
module.exports = nextTick;

function nextTick(fn) {
  var args = new Array(arguments.length - 1);
  var i = 0;
  while (i < arguments.length) {
    args[i++] = arguments[i];
  }
  process.nextTick(function afterTick() {
    fn.apply(null, args);
  });
}

}).call(this,require('_process'))
},{"_process":152}],219:[function(require,module,exports){
arguments[4][165][0].apply(exports,arguments)
},{"buffer":3,"dup":165}],220:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  if (!global.localStorage) return false;
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],221:[function(require,module,exports){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":210,"./lib/_stream_passthrough.js":211,"./lib/_stream_readable.js":212,"./lib/_stream_transform.js":213,"./lib/_stream_writable.js":214}],222:[function(require,module,exports){
/*
 * Copyright: Vitaly Puzrin
 * Author: Sergey Batishchev <snb2003@rambler.ru>
 *
 * Written for fontello.com project.
 */

'use strict';

var _       = require('lodash');
var SvgPath = require('svgpath');
var ucs2 = require('./lib/ucs2');
var svg     = require('./lib/svg');
var sfnt    = require('./lib/sfnt');

function svg2ttf(svgString, options) {
  var font = new sfnt.Font();
  var svgFont = svg.load(svgString);

  options = options || {};

  font.id = options.id || svgFont.id;
  font.familyName = options.familyname || svgFont.familyName || svgFont.id;
  font.copyright = options.copyright || svgFont.metadata;
  font.sfntNames.push({ id: 2, value: options.subfamilyname || 'Regular' }); // subfamily name
  font.sfntNames.push({ id: 4, value: options.fullname || svgFont.id }); // full name
  font.sfntNames.push({ id: 5, value: 'Version 1.0' }); // version ID for TTF name table
  font.sfntNames.push({ id: 6, value: options.fullname || svgFont.id }); // Postscript name for the font, required for OSX Font Book

  if (typeof options.ts !== 'undefined') {
    font.createdDate = font.modifiedDate = new Date(parseInt(options.ts, 10) * 1000);
  }

  // Try to fill font metrics or guess defaults
  //
  font.unitsPerEm   = svgFont.unitsPerEm || 1000;
  font.horizOriginX = svgFont.horizOriginX || 0;
  font.horizOriginY = svgFont.horizOriginY || 0;
  font.vertOriginX  = svgFont.vertOriginX || 0;
  font.vertOriginY  = svgFont.vertOriginY || 0;
  // need to correctly convert text values, use default (400) until compleete
  //font.weightClass = svgFont.weightClass;
  font.width    = svgFont.width || svgFont.unitsPerEm;
  font.height   = svgFont.height || svgFont.unitsPerEm;
  font.descent  = !isNaN(svgFont.descent) ? svgFont.descent : -font.vertOriginY;
  font.ascent   = svgFont.ascent || (font.unitsPerEm - font.vertOriginY);

  var glyphs = font.glyphs;
  var codePoints = font.codePoints;
  var ligatures = font.ligatures;

  function addCodePoint(codePoint, glyph) {
    if(codePoints[codePoint]) {
      // Ignore code points already defined
      return false;
    }
    codePoints[codePoint] = glyph;
    return true;
  }

  // add SVG glyphs to SFNT font
  _.forEach(svgFont.glyphs, function (svgGlyph) {
    var glyph = new sfnt.Glyph();

    glyph.name = svgGlyph.name;
    glyph.d = svgGlyph.d;
    glyph.height = !isNaN(svgGlyph.height) ? svgGlyph.height : font.height;
    glyph.width = !isNaN(svgGlyph.width) ? svgGlyph.width : font.width;
    glyphs.push(glyph);

    svgGlyph.sfntGlyph = glyph;

    _.forEach(svgGlyph.unicode, function(codePoint) {
      addCodePoint(codePoint, glyph);
    });
  });

  var missingGlyph;

  // add missing glyph to SFNT font
  // also, check missing glyph existance and single instance
  if (svgFont.missingGlyph) {
    missingGlyph = new sfnt.Glyph();
    missingGlyph.d = svgFont.missingGlyph.d;
    missingGlyph.height = !isNaN(svgFont.missingGlyph.height) ? svgFont.missingGlyph.height : font.height;
    missingGlyph.width = !isNaN(svgFont.missingGlyph.width) ? svgFont.missingGlyph.width : font.width;
  } else {
    missingGlyph = _.find(glyphs, function(glyph) {
      return glyph.name === '.notdef';
    });
  }
  if(!missingGlyph) { // no missing glyph and .notdef glyph, we need to create missing glyph
    missingGlyph = new sfnt.Glyph();
  }

  // Create glyphs for all characters used in ligatures
  _.forEach(svgFont.ligatures, function(svgLigature) {
    var ligature = {
        ligature: svgLigature.ligature,
        unicode: svgLigature.unicode,
        glyph: svgLigature.glyph.sfntGlyph
    };
    _.forEach(ligature.unicode, function(charPoint) {
      // We need to have a distinct glyph for each code point so we can reference it in GSUB
      var glyph = new sfnt.Glyph();
      var added = addCodePoint(charPoint, glyph);
      if(added) {
        glyph.name = ucs2.encode([charPoint]);
        glyphs.push(glyph);
      }
    });
    ligatures.push(ligature);
  });

  // Missing Glyph needs to have index 0
  if(glyphs.indexOf(missingGlyph) !== -1) {
    glyphs.splice(glyphs.indexOf(missingGlyph), 1);
  }
  glyphs.unshift(missingGlyph);

  var nextID = 0;
  //add IDs
  _.forEach(glyphs, function(glyph) {
    glyph.id = nextID;
    nextID++;
  });

  _.forEach(glyphs, function (glyph) {

    //SVG transformations
    var svgPath = new SvgPath(glyph.d)
      .abs()
      .unshort()
      .unarc()
      .iterate(svg.cubicToQuad);
    var sfntContours = svg.toSfntCoutours(svgPath);

    // Add contours to SFNT font
    glyph.contours = _.map(sfntContours, function (sfntContour) {
      var contour = new sfnt.Contour();

      contour.points = _.map(sfntContour, function (sfntPoint) {
        var point = new sfnt.Point();
        point.x = sfntPoint.x;
        point.y = sfntPoint.y;
        point.onCurve = sfntPoint.onCurve;
        return point;
      });

      return contour;
    });
  });

  var ttf = sfnt.toTTF(font);
  return ttf;
}

module.exports = svg2ttf;

},{"./lib/sfnt":224,"./lib/svg":226,"./lib/ucs2":240,"lodash":241,"svgpath":246}],223:[function(require,module,exports){
'use strict';

function Point(x, y) {
  this.x = x;
  this.y = y;
}

Point.prototype.add = function (point) {
  return new Point(this.x + point.x, this.y + point.y);
};

Point.prototype.sub = function (point) {
  return new Point(this.x - point.x, this.y - point.y);
};

Point.prototype.mul = function (value) {
  return new Point(this.x * value, this.y * value);
};

Point.prototype.div = function (value) {
  return new Point(this.x / value, this.y / value);
};

Point.prototype.dist = function () {
  return Math.sqrt(this.x*this.x + this.y*this.y);
};

Point.prototype.sqr = function () {
  return this.x*this.x + this.y*this.y;
};


// converts cubic bezier to quad
function toQuad(p1, c1, c2, p2) {
  // Quad control point is (3*c2 - p2 + 3*c1 - p1)/4
  return [p1, c2.mul(3).sub(p2).add(c1.mul(3)).sub(p1).div(4), p2];
}

/*
 * Aproximates cubic curve to 2 quad curves. Returns array of quad curves
 *
 * 1. Split cubic bezier-> 2 cubic beziers, by midpoint
 * 2. Replace each cubic bezier with quad bezier
 *
 * This is a simplified approach. It can be improved by adaptive splitting,
 * but in real life that's not needed.
 *
 * (!) We could use more slices, but FONT SIZE DOES MATTER !!!
 */
function bezierCubicToQuad(p1, c1, c2, p2) {

  // check first, if we can aproximate with quad directly
  // |p2 - 3*c2 + 3*c1 - p1|/2 should be small (zero in ideal)
  // http://www.caffeineowl.com/graphics/2d/vectorial/cubic2quad01.html
  var cpDistance = p2.sub(c2.mul(3)).add(c1.mul(3)).sub(p1).dist()/2;

  if (cpDistance <= 3) {
    return [ toQuad(p1, c1, c2, p2) ];
  }

  // Split to 2 qubic beziers
  // https://www.atalasoft.com/blogs/stevehawley/may-2013/how-to-split-a-cubic-bezier-curve
  // http://www.timotheegroleau.com/Flash/articles/cubic_bezier/bezier_lib.as

  // midpoints of qubic bezier
  // (p2 + 3*c2 + 3*c1 + p1)/8
  var mp = p2.add(c2.mul(3)).add(c1.mul(3)).add(p1).div(8);

  var q1 = toQuad(p1, p1.add(c1).div(2), p1.add(c2).add(c1.mul(2)).div(4), mp);
  var q2 = toQuad(mp, p2.add(c1).add(c2.mul(2)).div(4), p2.add(c2).div(2), p2);

  // now replace each half with quad curve
  return [ q1, q2 ];

}

/*
 * Check if 3 points are in line, and second in the midle.
 * Used to replace quad curves with lines or join lines
 *
 */
function isInLine(p1, m, p2, accuracy) {
  var a = p1.sub(m).sqr();
  var b = p2.sub(m).sqr();
  var c = p1.sub(p2).sqr();

  // control point not between anchors
  if ((a > (b+c)) || (b > (a+c))) {
    return false;
  }

  // count distance via scalar multiplication
  var distance = Math.sqrt(Math.pow((p1.x - m.x)*(p2.y - m.y) - (p2.x - m.x)*(p1.y - m.y), 2) / c);

  return distance < accuracy ? true : false;
}

module.exports.Point = Point;
module.exports.bezierCubicToQuad = bezierCubicToQuad;
module.exports.isInLine = isInLine;

},{}],224:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var Font = function () {
  this.ascent = 850;
  this.copyright = '';
  this.createdDate = new Date();
  this.glyphs = [];
  this.ligatures = [];
  // Maping of code points to glyphs.
  // Keys are actually numeric, thus should be `parseInt`ed.
  this.codePoints = {};
  this.isFixedPitch = 0;
  this.italicAngle = 0;
  this.familyClass = 0; // No Classification
  this.familyName = '';
  this.fsSelection = 0x40; // Characters are in the standard weight/style for the font.
  this.fsType = 8; // No subsetting: When this bit is set, the font may not be subsetted prior to embedding.
  this.lineGap = 90;
  this.lowestRecPPEM = 8;
  this.macStyle = 0;
  this.modifiedDate = new Date();
  this.panose = {
    familyType: 2, // Latin Text
    serifStyle: 0, // any
    weight: 5, // book
    proportion: 3, //modern
    contrast: 0, //any
    strokeVariation: 0, //any,
    armStyle: 0, //any,
    letterform: 0, //any,
    midline: 0, //any,
    xHeight: 0 //any,
  };
  this.revision = 1;
  this.sfntNames = [];
  this.underlineThickness = 0;
  this.unitsPerEm = 1000;
  this.weightClass = 400; // normal
  this.width = 1000;
  this.widthClass = 5; // Medium (normal)
  this.ySubscriptXOffset = 0;
  this.ySuperscriptXOffset = 0;
  this.int_descent = -150;

//getters and setters

  Object.defineProperty(this, 'descent', {
    get: function () {
      return this.int_descent;
    },
    set: function (value) {
      this.int_descent = parseInt(Math.round(-Math.abs(value)), 10);
    }
  });

  this.__defineGetter__('avgCharWidth', function () {
    if (this.glyphs.length === 0) {
      return 0;
    }
    var widths = _.map(this.glyphs, 'width');
    return parseInt(widths.reduce(function (prev, cur) {
      return prev + cur;
    }) / widths.length, 10);
  });

  Object.defineProperty(this, 'ySubscriptXSize', {
    get: function () {
      return parseInt(this.int_ySubscriptXSize !== undefined ? this.int_ySubscriptXSize : (this.width * 0.6347), 10);
    },
    set: function (value) {
      this.int_ySubscriptXSize = value;
    }
  });

  Object.defineProperty(this, 'ySubscriptYSize', {
    get: function () {
      return parseInt(this.int_ySubscriptYSize !== undefined ? this.int_ySubscriptYSize : ((this.ascent - this.descent) * 0.7), 10);
    },
    set: function (value) {
      this.int_ySubscriptYSize = value;
    }
  });

  Object.defineProperty(this, 'ySubscriptYOffset', {
    get: function () {
      return parseInt(this.int_ySubscriptYOffset !== undefined ? this.int_ySubscriptYOffset : ((this.ascent - this.descent) * 0.14), 10);
    },
    set: function (value) {
      this.int_ySubscriptYOffset = value;
    }
  });

  Object.defineProperty(this, 'ySuperscriptXSize', {
    get: function () {
      return parseInt(this.int_ySuperscriptXSize !== undefined ? this.int_ySuperscriptXSize : (this.width * 0.6347), 10);
    },
    set: function (value) {
      this.int_ySuperscriptXSize = value;
    }
  });

  Object.defineProperty(this, 'ySuperscriptYSize', {
    get: function () {
      return parseInt(this.int_ySuperscriptYSize !== undefined ? this.int_ySuperscriptYSize : ((this.ascent - this.descent) * 0.7), 10);
    },
    set: function (value) {
      this.int_ySuperscriptYSize = value;
    }
  });

  Object.defineProperty(this, 'ySuperscriptYOffset', {
    get: function () {
      return parseInt(this.int_ySuperscriptYOffset !== undefined ? this.int_ySuperscriptYOffset : ((this.ascent - this.descent) * 0.48), 10);
    },
    set: function (value) {
      this.int_ySuperscriptYOffset = value;
    }
  });

  Object.defineProperty(this, 'yStrikeoutSize', {
    get: function () {
      return parseInt(this.int_yStrikeoutSize !== undefined ? this.int_yStrikeoutSize : ((this.ascent - this.descent) * 0.049), 10);
    },
    set: function (value) {
      this.int_yStrikeoutSize = value;
    }
  });

  Object.defineProperty(this, 'yStrikeoutPosition', {
    get: function () {
      return parseInt(this.int_yStrikeoutPosition !== undefined ? this.int_yStrikeoutPosition : ((this.ascent - this.descent) * 0.258), 10);
    },
    set: function (value) {
      this.int_yStrikeoutPosition = value;
    }
  });

  Object.defineProperty(this, 'minLsb', {
    get: function () {
      return parseInt(_.min(_.pluck(this.glyphs, 'xMin')), 10);
    }
  });

  Object.defineProperty(this, 'minRsb', {
    get: function () {
      var minRsb = _.reduce(this.glyphs, function (minRsb, glyph) {
        return Math.min(minRsb || 0, glyph.width - glyph.xMax);
      }, minRsb);
      return parseInt(minRsb !== undefined ? minRsb : this.width, 10);
    }
  });

  Object.defineProperty(this, 'xMin', {
    get: function () {
      var xMin = _.reduce(this.glyphs, function (xMin, glyph) {
        return Math.min(xMin || 0, glyph.xMin);
      }, xMin);
      return xMin !== undefined ? xMin : this.width;
    }
  });

  Object.defineProperty(this, 'yMin', {
    get: function () {
      var yMin = _.reduce(this.glyphs, function (yMin, glyph) {
        return Math.min(yMin || 0, glyph.yMin);
      }, yMin);
      return yMin !== undefined ? yMin : this.width;
    }
  });

  Object.defineProperty(this, 'xMax', {
    get: function () {
      var xMax = _.reduce(this.glyphs, function (xMax, glyph) {
        return Math.max(xMax || 0, glyph.xMax);
      }, xMax);
      return xMax !== undefined ? xMax : this.width;
    }
  });

  Object.defineProperty(this, 'yMax', {
    get: function () {
      var yMax = _.reduce(this.glyphs, function (yMax, glyph) {
        return Math.max(yMax || 0, glyph.yMax);
      }, yMax);
      return yMax !== undefined ? yMax : this.width;
    }
  });

  Object.defineProperty(this, 'avgWidth', {
    get: function () {
      var len = this.glyphs.length;
      if (len === 0) {
        return this.width;
      }
      var sumWidth = _.reduce(this.glyphs, function (sumWidth, glyph) {
        return (sumWidth || 0) + glyph.width;
      }, sumWidth);
      return Math.round(sumWidth / len);
    }
  });

  Object.defineProperty(this, 'maxWidth', {
    get: function () {
      var maxWidth = _.reduce(this.glyphs, function (maxWidth, glyph) {
        return Math.max(maxWidth || 0, glyph.width);
      }, maxWidth);
      return maxWidth !== undefined ? maxWidth : this.width;
    }
  });

  Object.defineProperty(this, 'maxExtent', {
    get: function () {
      var maxExtent = _.reduce(this.glyphs, function (maxExtent, glyph) {
        return Math.max(maxExtent || 0, glyph.xMax /*- glyph.xMin*/);
      }, maxExtent);
      return maxExtent !== undefined ? maxExtent : this.width;
    }
  });

  Object.defineProperty(this, 'lineGap', {
    get: function () {
      return parseInt(this.int_lineGap !== undefined ? this.lineGap : ((this.ascent - this.descent) * 0.09), 10);
    },
    set: function (value) {
      this.int_lineGap = value;
    }
  });

  Object.defineProperty(this, 'underlinePosition', {
    get: function () {
      return parseInt(this.int_underlinePosition !== undefined ? this.underlinePosition : ((this.ascent - this.descent) * 0.01), 10);
    },
    set: function (value) {
      this.int_underlinePosition = value;
    }
  });
};


var Glyph = function () {
  this.contours = [];
  this.id = '';
  this.height = 0;
  this.name = '';
  this.width = 0;
};

Object.defineProperty(Glyph.prototype, 'xMin', {
  get: function () {
    var xMin = 0;
    var hasPoints = false;
    _.forEach(this.contours, function (contour) {
      _.forEach(contour.points, function (point) {
        xMin = Math.min(xMin, Math.floor(point.x));
        hasPoints = true;
      });

    });
    return hasPoints ? xMin : 0;
  }
});

Object.defineProperty(Glyph.prototype, 'xMax', {
  get: function () {
    var xMax = 0;
    var hasPoints = false;
    _.forEach(this.contours, function (contour) {
      _.forEach(contour.points, function (point) {
        xMax = Math.max(xMax, -Math.floor(-point.x));
        hasPoints = true;
      });

    });
    return hasPoints ? xMax : this.width;
  }
});

Object.defineProperty(Glyph.prototype, 'yMin', {
  get: function () {
    var yMin = 0;
    var hasPoints = false;
    _.forEach(this.contours, function (contour) {
      _.forEach(contour.points, function (point) {
        yMin = Math.min(yMin, Math.floor(point.y));
        hasPoints = true;
      });

    });
    return hasPoints ? yMin : 0;
  }
});

Object.defineProperty(Glyph.prototype, 'yMax', {
  get: function () {
    var yMax = 0;
    var hasPoints = false;
    _.forEach(this.contours, function (contour) {
      _.forEach(contour.points, function (point) {
        yMax = Math.max(yMax, -Math.floor(-point.y));
        hasPoints = true;
      });

    });
    return hasPoints ? yMax : 0;
  }
});

var Contour = function () {
  this.points = [];
};

var Point = function () {
  this.onCurve = true;
  this.x = 0;
  this.y = 0;
};

var SfntName = function () {
  this.id = 0;
  this.value = '';
};

module.exports.Font = Font;
module.exports.Glyph = Glyph;
module.exports.Contour = Contour;
module.exports.Point = Point;
module.exports.SfntName = SfntName;
module.exports.toTTF = require('./ttf');

},{"./ttf":227,"lodash":241}],225:[function(require,module,exports){
'use strict';

function Str(str) {
  if (!(this instanceof Str)) {
    return new Str(str);
  }

  this.str = str;

  this.toUTF8Bytes = function () {

    var byteArray = [];
    for (var i = 0; i < str.length; i++) {
      if (str.charCodeAt(i) <= 0x7F) {
        byteArray.push(str.charCodeAt(i));
      } else {
        var h = encodeURIComponent(str.charAt(i)).substr(1).split('%');
        for (var j = 0; j < h.length; j++) {
          byteArray.push(parseInt(h[j], 16));
        }
      }
    }
    return byteArray;
  };

  this.toUCS2Bytes = function () {
    // Code is taken here:
    // http://stackoverflow.com/questions/6226189/how-to-convert-a-string-to-bytearray
    var byteArray = [];
    var ch;

    for (var i = 0; i < str.length; ++i) {
      ch = str.charCodeAt(i);  // get char
      /*jshint bitwise:false*/
      byteArray.push(ch >> 8);
      byteArray.push(ch & 0xFF);
      /*jshint bitwise:true*/
    }
    return byteArray;
  };
}

module.exports = Str;
},{}],226:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var DOMParser = require('xmldom').DOMParser;
var math  = require('./math');
var ucs2 = require('./ucs2');

function getGlyph(glyphElem) {
  var glyph = {};

  glyph.d = glyphElem.getAttribute('d').trim();
  glyph.unicode = [];

  if (glyphElem.getAttribute('unicode')) {
    glyph.character = glyphElem.getAttribute('unicode');
    var unicode = ucs2.decode(glyph.character);

    // If more than one code point is involved, the glyph is a ligature glyph
    if(unicode.length > 1) {
      glyph.ligature = glyph.character;
      glyph.ligatureCodes = unicode;
    } else {
      glyph.unicode.push(unicode[0]);
    }
  }

  glyph.name = glyphElem.getAttribute('glyph-name');

  if (glyphElem.getAttribute('horiz-adv-x')) {
    glyph.width = parseInt(glyphElem.getAttribute('horiz-adv-x'), 10);
  }

  return glyph;
}

function deduplicateGlyps(glyphs, ligatures) {
  // Result (the list of unique glyphs)
  var result = [];

  _.forEach(glyphs, function(glyph) {
    // Search for glyphs with the same properties (width and d)
    var canonical = _.find(result, {width: glyph.width, d: glyph.d});
    if(canonical) {
      // Add the code points to the unicode array.
      // The fields “name” and “character” are not that important so we leave them how we first enounter them and throw the rest away
      canonical.unicode = canonical.unicode.concat(glyph.unicode);
      glyph.canonical = canonical;
    } else {
      result.push(glyph);
    }
  });

  // Update ligatures to point to the canonical version
  _.forEach(ligatures, function(ligature) {
    while(_.has(ligature.glyph, 'canonical')) {
      ligature.glyph = ligature.glyph.canonical;
    }
  });

  return result;
}

function load(str) {
  var attrs;

  var doc = (new DOMParser()).parseFromString(str, 'application/xml');

  var metadata, fontElem, fontFaceElem;

  metadata = doc.getElementsByTagName('metadata')[0];
  fontElem = doc.getElementsByTagName('font')[0];

  if (!fontElem) {
    throw new Error("Can't find <font> tag. Make sure you SVG file is font, not image.");
  }

  fontFaceElem = fontElem.getElementsByTagName('font-face')[0];

  var font = {
    id: fontElem.getAttribute('id') || 'fontello',
    familyName: fontFaceElem.getAttribute('font-family') || 'fontello',
    stretch: fontFaceElem.getAttribute('font-stretch') || 'normal'
  };

  // Doesn't work with complex content like <strong>Copyright:></strong><em>Fontello</em>
  if (metadata && metadata.textContent) {
    font.metadata = metadata.textContent;
  }

  // Get <font> numeric attributes
  attrs = {
    width:        'horiz-adv-x',
    //height:       'vert-adv-y',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    vertOriginX:  'vert-origin-x',
    vertOriginY:  'vert-origin-y'
  };
  _.forEach(attrs, function(val, key) {
    if (fontElem.hasAttribute(val)) { font[key] = parseInt(fontElem.getAttribute(val), 10); }
  });

  // Get <font-face> numeric attributes
  attrs = {
    ascent:     'ascent',
    descent:    'descent',
    unitsPerEm: 'units-per-em'
  };
  _.forEach(attrs, function(val, key) {
    if (fontFaceElem.hasAttribute(val)) { font[key] = parseInt(fontFaceElem.getAttribute(val), 10); }
  });

  if (fontFaceElem.hasAttribute('font-weight')) {
    font.weightClass = fontFaceElem.getAttribute('font-weight');
  }

  var missingGlyphElem = fontElem.getElementsByTagName('missing-glyph')[0];
  if (missingGlyphElem) {

    font.missingGlyph = {};
    font.missingGlyph.d = missingGlyphElem.getAttribute('d') || '';

    if (missingGlyphElem.getAttribute('horiz-adv-x')) {
      font.missingGlyph.width = parseInt(missingGlyphElem.getAttribute('horiz-adv-x'), 10);
    }
  }

  var glyphs = [];
  var ligatures = [];

  _.forEach(fontElem.getElementsByTagName('glyph'), function (glyphElem) {
    var glyph = getGlyph(glyphElem);

    if(_.has(glyph, 'ligature')) {
      ligatures.push({
        ligature: glyph.ligature,
        unicode: glyph.ligatureCodes,
        glyph: glyph
      });
    }

    glyphs.push(glyph);
  });

  glyphs = deduplicateGlyps(glyphs, ligatures);

  font.glyphs = glyphs;
  font.ligatures = ligatures;

  return font;
}


function cubicToQuad(segment, index, x, y) {
  if (segment[0] === 'C') {
    var quadCurves = math.bezierCubicToQuad(
      new math.Point(x, y),
      new math.Point(segment[1], segment[2]),
      new math.Point(segment[3], segment[4]),
      new math.Point(segment[5], segment[6]),
      0.3
    );

    var res = [];
    _.forEach(quadCurves, function(curve) {
      res.push(['Q', curve[1].x, curve[1].y, curve[2].x, curve[2].y]);
    });
    return res;
  }
}


// Converts svg points to contours.  All points must be converted
// to relative ones, smooth curves must be converted to generic ones
// before this conversion.
//
function toSfntCoutours(svgPath) {
  var resContours = [];
  var resContour = [];

  svgPath.iterate(function(segment, index, x, y) {

    //start new contour
    if (index === 0 || segment[0] === 'M') {
      resContour = [];
      resContours.push(resContour);
    }

    var name = segment[0];
    if (name === 'Q') {
      //add control point of quad spline, it is not on curve
      resContour.push({ x: segment[1], y: segment[2], onCurve: false });
    }

    // add on-curve point
    if (name === 'H') {
      // vertical line has Y coordinate only, X remains the same
      resContour.push({ x: segment[1], y: y, onCurve: true });
    } else if (name === 'V') {
      // horizontal line has X coordinate only, Y remains the same
      resContour.push({ x: x, y: segment[1], onCurve: true });
    } else if (name !== 'Z') {
      // for all commands (except H and V) X and Y are placed in the end of the segment
      resContour.push({ x: segment[segment.length - 2], y: segment[segment.length - 1], onCurve: true });
    }

  });
  return resContours;
}


module.exports.load = load;
module.exports.cubicToQuad = cubicToQuad;
module.exports.toSfntCoutours = toSfntCoutours;

},{"./math":223,"./ucs2":240,"lodash":241,"xmldom":248}],227:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var ByteBuffer = require('microbuffer');

var createGSUBTable    = require('./ttf/tables/gsub');
var createOS2Table    = require('./ttf/tables/os2');
var createCMapTable   = require('./ttf/tables/cmap');
var createGlyfTable   = require('./ttf/tables/glyf');
var createHeadTable   = require('./ttf/tables/head');
var createHHeadTable  = require('./ttf/tables/hhea');
var createHtmxTable   = require('./ttf/tables/hmtx');
var createLocaTable   = require('./ttf/tables/loca');
var createMaxpTable   = require('./ttf/tables/maxp');
var createNameTable   = require('./ttf/tables/name');
var createPostTable   = require('./ttf/tables/post');

var utils = require('./ttf/utils');

// Tables
var TABLES = [
  { innerName: 'GSUB', order: 4,  create: createGSUBTable  }, // GSUB
  { innerName: 'OS/2', order: 4,  create: createOS2Table   }, // OS/2
  { innerName: 'cmap', order: 6,  create: createCMapTable  }, // cmap
  { innerName: 'glyf', order: 8,  create: createGlyfTable  }, // glyf
  { innerName: 'head', order: 2,  create: createHeadTable  }, // head
  { innerName: 'hhea', order: 1,  create: createHHeadTable }, // hhea
  { innerName: 'hmtx', order: 5,  create: createHtmxTable  }, // hmtx
  { innerName: 'loca', order: 7,  create: createLocaTable  }, // loca
  { innerName: 'maxp', order: 3,  create: createMaxpTable  }, // maxp
  { innerName: 'name', order: 9,  create: createNameTable  }, // name
  { innerName: 'post', order: 10, create: createPostTable  }  // post
];

// Various constants
var CONST = {
  VERSION: 0x10000,
  CHECKSUM_ADJUSTMENT: 0xB1B0AFBA
};

function ulong(t) {
  /*jshint bitwise:false*/
  t &= 0xffffffff;
  if (t < 0) {
    t += 0x100000000;
  }
  return t;
}

function calc_checksum(buf) {
  var sum = 0;
  var nlongs = Math.floor(buf.length / 4);

  for (var i = 0; i < nlongs; ++i) {
    var t = buf.getUint32(i * 4);
    sum = ulong(sum + t);
  }
  var leftBytes = buf.length - nlongs * 4; //extra 1..3 bytes found, because table is not aligned. Need to include them in checksum too.
  if (leftBytes > 0) {
    var leftRes = 0;
    for (i = 0; i < 4; i++) {
      /*jshint bitwise:false*/
      leftRes = (leftRes << 8) + ((i < leftBytes) ? buf.getUint8(nlongs * 4 + i) : 0);
    }
    sum = ulong(sum + leftRes);
  }
  return sum;
}

function generateTTF(font) {

  // Prepare TTF contours objects. Note, that while sfnt countours are classes,
  // ttf contours are just plain arrays of points
  _.forEach(font.glyphs, function (glyph) {
    glyph.ttfContours = _.map(glyph.contours, function (contour) {
      return contour.points;
    });
  });

  // Process ttf contours data
  _.forEach(font.glyphs, function (glyph) {

    // 0.3px accuracy is ok. fo 1000x1000.
    glyph.ttfContours = utils.simplify(glyph.ttfContours, 0.3);
    glyph.ttfContours = utils.simplify(glyph.ttfContours, 0.3); // one pass is not enougth

    // Interpolated points can be removed. 1.1px is acceptable
    // measure - it will give us 1px error after coordinates rounding.
    glyph.ttfContours = utils.interpolate(glyph.ttfContours, 1.1);

    glyph.ttfContours = utils.roundPoints(glyph.ttfContours);
    glyph.ttfContours = utils.removeClosingReturnPoints(glyph.ttfContours);
    glyph.ttfContours = utils.toRelative(glyph.ttfContours);
  });

  // Add tables
  var headerSize = 12 + 16 * TABLES.length; // TTF header plus table headers
  var bufSize = headerSize;
  _.forEach(TABLES, function (table) {
    //store each table in its own buffer
    table.buffer = table.create(font);
    table.length = table.buffer.length;
    table.corLength = table.length + (4 - table.length % 4) % 4; // table size should be divisible to 4
    table.checkSum = calc_checksum(table.buffer);
    bufSize += table.corLength;
  });

  //calculate offsets
  var offset = headerSize;
  _.forEach(_.sortBy(TABLES, 'order'), function (table) {
    table.offset = offset;
    offset += table.corLength;
  });

  //create TTF buffer

  var buf = new ByteBuffer(bufSize);

  //special constants
  var entrySelector = Math.floor(Math.log(TABLES.length)/Math.LN2);
  var searchRange = Math.pow(2, entrySelector) * 16;
  var rangeShift = TABLES.length * 16 - searchRange;

  // Add TTF header
  buf.writeUint32(CONST.VERSION);
  buf.writeUint16(TABLES.length);
  buf.writeUint16(searchRange);
  buf.writeUint16(entrySelector);
  buf.writeUint16(rangeShift);

  _.forEach(TABLES, function (table) {
    buf.writeUint32(utils.identifier(table.innerName)); //inner name
    buf.writeUint32(table.checkSum); //checksum
    buf.writeUint32(table.offset); //offset
    buf.writeUint32(table.length); //length
  });

  var headOffset = 0;
  _.forEach(_.sortBy(TABLES, 'order'), function (table) {
    if (table.innerName === 'head') { //we must store head offset to write font checksum
      headOffset = buf.tell();
    }
    buf.writeBytes(table.buffer.buffer);
    for (var i = table.length; i < table.corLength; i++) { //align table to be divisible to 4
      buf.writeUint8(0);
    }
  });

  // Write font checksum (corrected by magic value) into HEAD table
  buf.setUint32(headOffset + 8, ulong(CONST.CHECKSUM_ADJUSTMENT - calc_checksum(buf)));

  return buf;
}

module.exports = generateTTF;

},{"./ttf/tables/cmap":228,"./ttf/tables/glyf":229,"./ttf/tables/gsub":230,"./ttf/tables/head":231,"./ttf/tables/hhea":232,"./ttf/tables/hmtx":233,"./ttf/tables/loca":234,"./ttf/tables/maxp":235,"./ttf/tables/name":236,"./ttf/tables/os2":237,"./ttf/tables/post":238,"./ttf/utils":239,"lodash":241,"microbuffer":242}],228:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/cmap.htm

var _ = require('lodash');
var ByteBuffer = require('microbuffer');

function getIDByUnicode(font, unicode) {
  return font.codePoints[unicode] ? font.codePoints[unicode].id : 0;
}

// Calculate character segments with non-interruptable chains of unicodes
function getSegments(font, bounds) {
  bounds = bounds || Number.MAX_VALUE;

  var result = [];
  var segment;

  // prevEndCode only changes when a segment closes
  _.forEach(font.codePoints, function(glyph, unicode) {
    unicode = parseInt(unicode, 10);
    if (unicode >= bounds) {
      return false;
    }
    // Initialize first segment or add new segment if code "hole" is found
    if (!segment || unicode !== (segment.end + 1)) {
      if (segment) {
        result.push(segment);
      }
      segment = {
        start: unicode
      };
    }
    segment.end = unicode;
  });

  // Need to finish the last segment
  if (segment) {
    result.push(segment);
  }

  _.forEach(result, function(segment) {
    segment.length = segment.end - segment.start + 1;
  });

  return result;
}

// Returns an array of {unicode, glyph} sets for all valid code points up to bounds
function getCodePoints(codePoints, bounds) {
  bounds = bounds || Number.MAX_VALUE;
  var result = [];
    _.forEach(codePoints, function(glyph, unicode) {
      unicode = parseInt(unicode, 10);
      // Since this is a sparse array, iterating will only yield the valid code points
      if(unicode > bounds) {
        return false;
      }
      result.push({
        unicode: unicode,
        glyph: glyph
      });
    });
    return result;
}

function bufferForTable(format, length) {
  var fieldWidth = format === 8 || format === 10 || format === 12 || format === 13 ? 4 : 2;
  length += (0
    + fieldWidth // Format
    + fieldWidth // Length
    + fieldWidth // Language
  );
  var LANGUAGE = 0;
  var buffer = new ByteBuffer(length);

  var writer = fieldWidth === 4 ? buffer.writeUint32 : buffer.writeUint16;

  // Format specifier
  buffer.writeUint16(format);
  if(fieldWidth === 4) {
    // In case of formats 8.…, 10.…, 12.… and 13.…, this is the decimal part of the format number
    // But since have not been any point releases, this can be zero in that case as well
    buffer.writeUint16(0);
  }
  // Length
  writer.call(buffer, length);
  // Language code (0, only used for legacy quickdraw tables)
  writer.call(buffer, LANGUAGE);

  return buffer;
}

function createFormat0Table(font) {
  var FORMAT = 0;

  var i;

  var length = 0xff + 1; //Format 0 maps only single-byte code points

  var buffer = bufferForTable(FORMAT, length);

  for (i = 0; i < length; i++) {
    buffer.writeUint8(getIDByUnicode(font, i)); // existing char in table 0..255
  }
  return buffer;
}

function createFormat4Table(font) {
  var FORMAT = 4;

  var i;

  var segments = getSegments(font, 0xFFFF);
  var glyphIndexArrays = [];

  _.forEach(segments, function(segment) {
    var glyphIndexArray = [];
    for(var unicode = segment.start;unicode <= segment.end;unicode++) {
      glyphIndexArray.push(getIDByUnicode(font, unicode));
    }
    glyphIndexArrays.push(glyphIndexArray);
  });

  var segCount = segments.length + 1; // + 1 for the 0xFFFF section
  var glyphIndexArrayLength = _.reduce(_.pluck(glyphIndexArrays, 'length'), function(result, count) {return result + count;}, 0);

  var length = (0
    + 2 // segCountX2
    + 2 // searchRange
    + 2 // entrySelector
    + 2 // rangeShift
    + 2 * segCount // endCodes
    + 2 // Padding
    + 2 * segCount //startCodes
    + 2 * segCount //idDeltas
    + 2 * segCount //idRangeOffsets
    + 2 * glyphIndexArrayLength
  );

  var buffer = bufferForTable(FORMAT, length);

  buffer.writeUint16(segCount * 2); // segCountX2
  var maxExponent = Math.floor(Math.log(segCount)/Math.LN2);
  var searchRange = 2 * Math.pow(2, maxExponent);
  buffer.writeUint16(searchRange); // searchRange
  buffer.writeUint16(maxExponent); // entrySelector
  buffer.writeUint16(2 * segCount - searchRange); // rangeShift

  // Array of end counts
  _.forEach(segments, function (segment) {
    buffer.writeUint16(segment.end);
  });
  buffer.writeUint16(0xFFFF); // endCountArray should be finished with 0xFFFF

  buffer.writeUint16(0); // reservedPad

  // Array of start counts
  _.forEach(segments, function (segment) {
    buffer.writeUint16(segment.start); //startCountArray
  });
  buffer.writeUint16(0xFFFF); // startCountArray should be finished with 0xFFFF

  // Array of deltas. Leave it zero to not complicate things when using the glyph index array
  for (i = 0; i < segments.length; i++) {
    buffer.writeUint16(0); // delta is always zero because we use the glyph array
  }
  buffer.writeUint16(1); // idDeltaArray should be finished with 1

  // Array of range offsets
  var offset = 0;
  for (i = 0; i < segments.length; i++) {
    buffer.writeUint16(2 * ((segments.length - i + 1) + offset));
    offset += glyphIndexArrays[i].length;
  }
  buffer.writeUint16(0); // rangeOffsetArray should be finished with 0

  _.forEach(glyphIndexArrays, function(glyphIndexArray) {
    _.forEach(glyphIndexArray, function(glyphId) {
      buffer.writeUint16(glyphId);
    });
  });

  return buffer;
}

function createFormat12Table(font) {
  var FORMAT = 12;

  var codePoints = getCodePoints(font.codePoints);

  var length = (0
    + 4 // nGroups
    + 4 * codePoints.length // startCharCode
    + 4 * codePoints.length // endCharCode
    + 4 * codePoints.length // startGlyphCode
  );

  var buffer = bufferForTable(FORMAT, length);

  buffer.writeUint32(codePoints.length); // nGroups
  _.forEach(codePoints, function (codePoint) {
    buffer.writeUint32(codePoint.unicode); // startCharCode
    buffer.writeUint32(codePoint.unicode); // endCharCode
    buffer.writeUint32(codePoint.glyph.id); // startGlyphCode
  });

  return buffer;
}

function createCMapTable(font) {
  var TABLE_HEAD = (0
    + 2 // platform
    + 2 // encoding
    + 4 // offset
  );

  var singleByteTable = createFormat0Table(font);
  var twoByteTable = createFormat4Table(font);
  var fourByteTable = createFormat12Table(font);

  // Subtable headers must be sorted by platformID, encodingID
  var tableHeaders = [
    // subtable 4, unicode
    {
      platformID: 0,
      encodingID: 3,
      table: twoByteTable
    },
    // subtable 12, unicode
    {
      platformID: 0,
      encodingID: 4,
      table: fourByteTable
    },
    // subtable 0, mac standard
    {
      platformID: 1,
      encodingID: 0,
      table: singleByteTable
    },
    // subtable 4, windows standard, identical to the unicode table
    {
      platformID: 3,
      encodingID: 1,
      table: twoByteTable
    },
    // subtable 12, windows ucs4
    {
      platformID: 3,
      encodingID: 10,
      table: fourByteTable
    }
  ];

  var tables = [
    twoByteTable,
    singleByteTable,
    fourByteTable
  ];

  var tableOffset = (0
    + 2 // version
    + 2 // number of subtable headers
    + tableHeaders.length * TABLE_HEAD
  );

  // Calculate offsets for each table
  _.forEach(tables, function(table) {
    table._tableOffset = tableOffset;
    tableOffset += table.length;
  });

  var length = tableOffset;

  var buffer = new ByteBuffer(length);

  // Write table header.
  buffer.writeUint16(0); // version
  buffer.writeUint16(tableHeaders.length); // count

  // Write subtable headers
  _.forEach(tableHeaders, function(header) {
    buffer.writeUint16(header.platformID); // platform
    buffer.writeUint16(header.encodingID); // encoding
    buffer.writeUint32(header.table._tableOffset); // offset
  });

  // Write subtables
  _.forEach(tables, function(table) {
    buffer.writeBytes(table.buffer);
  });

  return buffer;
}

module.exports = createCMapTable;

},{"lodash":241,"microbuffer":242}],229:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/glyf.htm

var _ = require('lodash');
var ByteBuffer = require('microbuffer');

function getFlags(glyph) {
  var result = [];

  _.forEach(glyph.ttfContours, function (contour) {
    _.forEach(contour, function (point) {
      var flag = point.onCurve ? 1 : 0;
      if (point.x === 0) {
        flag += 16;
      } else {
        if (-0xFF <= point.x && point.x <= 0xFF) {
          flag += 2; // the corresponding x-coordinate is 1 byte long
        }
        if (point.x > 0 && point.x <= 0xFF) {
          flag += 16; // If x-Short Vector is set, this bit describes the sign of the value, with 1 equalling positive and 0 negative
        }
      }
      if (point.y === 0) {
        flag += 32;
      } else {
        if (-0xFF <= point.y && point.y <= 0xFF) {
          flag += 4; // the corresponding y-coordinate is 1 byte long
        }
        if (point.y > 0 && point.y <= 0xFF) {
          flag += 32; // If y-Short Vector is set, this bit describes the sign of the value, with 1 equalling positive and 0 negative.
        }
      }
      result.push(flag);
    });
  });
  return result;
}

//repeating flags can be packed
function compactFlags(flags) {
  var result = [];
  var prevFlag = -1;
  var firstRepeat = false;

  _.forEach(flags, function (flag) {
    if (prevFlag === flag) {
      if (firstRepeat) {
        result[result.length - 1] += 8; //current flag repeats previous one, need to set 3rd bit of previous flag and set 1 to the current one
        result.push(1);
        firstRepeat = false;
      } else {
        result[result.length - 1]++; //when flag is repeating second or more times, we need to increase the last flag value
      }
    } else {
      firstRepeat = true;
      prevFlag = flag;
      result.push(flag);
    }
  });
  return result;
}

function getCoords(glyph, coordName) {
  var result = [];
  _.forEach(glyph.ttfContours, function (contour) {
    result.push.apply(result, _.pluck(contour, coordName));
  });
  return result;
}

function compactCoords(coords) {
  return _.filter(coords, function (coord) {
    return coord !== 0;
  });
}

//calculates length of glyph data in GLYF table
function glyphDataSize(glyph) {
  // Ignore glyphs without outlines. These will get a length of zero in the “loca” table
  if(!glyph.contours.length) {
    return 0;
  }

  var result = 12; //glyph fixed properties
  result += glyph.contours.length * 2; //add contours

  _.forEach(glyph.ttf_x, function (x) {
    //add 1 or 2 bytes for each coordinate depending of its size
    result += ((-0xFF <= x && x <= 0xFF)) ? 1 : 2;
  });

  _.forEach(glyph.ttf_y, function (y) {
    //add 1 or 2 bytes for each coordinate depending of its size
    result += ((-0xFF <= y && y <= 0xFF)) ? 1 : 2;
  });

  // Add flags length to glyph size.
  result += glyph.ttf_flags.length;

  if (result % 4 !== 0) { // glyph size must be divisible by 4.
    result += 4 - result % 4;
  }
  return result;
}

function tableSize(font) {
  var result = 0;
  _.forEach(font.glyphs, function (glyph) {
    glyph.ttf_size = glyphDataSize(glyph);
    result += glyph.ttf_size;
  });
  font.ttf_glyph_size = result; //sum of all glyph lengths
  return result;
}

function createGlyfTable(font) {

  _.forEach(font.glyphs, function (glyph) {
    glyph.ttf_flags = getFlags(glyph);
    glyph.ttf_flags = compactFlags(glyph.ttf_flags);
    glyph.ttf_x = getCoords(glyph, 'x');
    glyph.ttf_x = compactCoords(glyph.ttf_x);
    glyph.ttf_y = getCoords(glyph, 'y');
    glyph.ttf_y = compactCoords(glyph.ttf_y);
  });

  var buf = new ByteBuffer(tableSize(font));

  _.forEach(font.glyphs, function (glyph) {

    // Ignore glyphs without outlines. These will get a length of zero in the “loca” table
    if(!glyph.contours.length) {
      return;
    }

    var offset = buf.tell();
    buf.writeInt16(glyph.contours.length); // numberOfContours
    buf.writeInt16(glyph.xMin); // xMin
    buf.writeInt16(glyph.yMin); // yMin
    buf.writeInt16(glyph.xMax); // xMax
    buf.writeInt16(glyph.yMax); // yMax

    // Array of end points
    var endPtsOfContours = -1;

    var ttfContours = glyph.ttfContours;

    _.forEach(ttfContours, function (contour) {
      endPtsOfContours += contour.length;
      buf.writeInt16(endPtsOfContours);
    });

    buf.writeInt16(0); // instructionLength, is not used here

    // Array of flags
    _.forEach(glyph.ttf_flags, function (flag) {
      buf.writeInt8(flag);
    });

    // Array of X relative coordinates
    _.forEach(glyph.ttf_x, function (x) {
      if (-0xFF <= x && x <= 0xFF) {
        buf.writeUint8(Math.abs(x));
      } else {
        buf.writeInt16(x);
      }
    });

    // Array of Y relative coordinates
    _.forEach(glyph.ttf_y, function (y) {
      if (-0xFF <= y && y <= 0xFF) {
        buf.writeUint8(Math.abs(y));
      } else {
        buf.writeInt16(y);
      }
    });

    var tail = (buf.tell() - offset) % 4;
    if (tail !== 0) { // glyph size must be divisible by 4.
      for (; tail < 4; tail++) {
        buf.writeUint8(0);
      }
    }
  });
  return buf;
}

module.exports = createGlyfTable;

},{"lodash":241,"microbuffer":242}],230:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/GSUB.htm

var _ = require('lodash');
var identifier = require('../utils.js').identifier;
var ByteBuffer = require('microbuffer');


function createScriptList() {
  var header = (0
    + 2 // Script count
    + 4 // Tag[0]
    + 2 // Offset[0]
  );

  var scriptRecord = (0
    + 2 // Script[0] DefaultLangSys Offset
    + 2 // Script[0] LangSysCount (0)
  );

  var langSys = (0
    + 2 // Script[0] DefaultLangSys LookupOrder
    + 2 // Script[0] DefaultLangSys ReqFeatureIndex
    + 2 // Script[0] DefaultLangSys FeatureCount (0?)
    + 2 // Script[0] Optional Feature Index[0]
  );

  var length = (0
    + header
    + scriptRecord
    + langSys
  );

  var buffer = new ByteBuffer(length);

  // Script count
  buffer.writeUint16(1);
  // Script identifier DFLT
  buffer.writeUint32(identifier('DFLT'));
  // Offset to the ScriptRecord
  buffer.writeUint16(header);

  // Script Record
  // Offset to the start of langSys from the start of scriptRecord
  buffer.writeUint16(scriptRecord); // DefaultLangSys
  // Number of LangSys entries other than the default
  buffer.writeUint16(0);

  // LangSys record
  // LookupOrder
  buffer.writeUint16(0);
  // ReqFeatureIndex -> only one required feature: all ligatures
  buffer.writeUint16(0);
  // Number of FeatureIndex values for this language system (excludes the required feature)
  buffer.writeUint16(1);
  // FeatureIndex for the first optional feature
	// Note: Adding the same feature to both the optional
	// and the required features is a clear violation of the spec
	// but it fixes IE not displaying the ligatures.
	// See http://partners.adobe.com/public/developer/opentype/index_table_formats.html, Section “Language System Table”
	// “FeatureCount: Number of FeatureIndex values for this language system-*excludes the required feature*” (emphasis added)
  buffer.writeUint16(0);

  return buffer;
}

// Write one feature containing all ligatures
function createFeatureList() {
  var header = (0
    + 2 // FeatureCount
    + 4 // FeatureTag[0]
    + 2 // Feature Offset[0]
  );

  var length = (0
    + header
    + 2 // FeatureParams[0]
    + 2 // LookupCount[0]
    + 2 // Lookup[0] LookupListIndex[0]
  );

  var buffer = new ByteBuffer(length);
  // FeatureCount
  buffer.writeUint16(1);
  // FeatureTag[0]
  buffer.writeUint32(identifier('liga'));
  // Feature Offset[0]
  buffer.writeUint16(header);
  // FeatureParams[0]
  buffer.writeUint16(0);
  // LookupCount[0]
  buffer.writeUint16(1);
  // Index into lookup table. Since we only have ligatures, the index is always 0
  buffer.writeUint16(0);

  return buffer;
}

function createLigatureCoverage(font, ligatureGroups) {
  var glyphCount = ligatureGroups.length;

  var length = (0
    + 2 // CoverageFormat
    + 2 // GlyphCount
    + 2 * glyphCount // GlyphID[i]
  );

  var buffer = new ByteBuffer(length);

  // CoverageFormat
  buffer.writeUint16(1);

  // Length
  buffer.writeUint16(glyphCount);


  _.forEach(ligatureGroups, function(group) {
    buffer.writeUint16(group.startGlyph.id);
  });

  return buffer;
}

function createLigatureTable(font, ligature) {
  var allCodePoints = font.codePoints;

  var unicode = ligature.unicode;

  var length = (0
    + 2 // LigGlyph
    + 2 // CompCount
    + 2 * (unicode.length - 1)
  );

  var buffer = new ByteBuffer(length);

  // LigGlyph
  var glyph = ligature.glyph;
  buffer.writeUint16(glyph.id);

  // CompCount
  buffer.writeUint16(unicode.length);

  // Compound glyphs (excluding first as it’s already in the coverage table)
  for(var i=1;i<unicode.length;i++) {
    glyph = allCodePoints[unicode[i]];
    buffer.writeUint16(glyph.id);
  }

  return buffer;
}

function createLigatureSet(font, codePoint, ligatures) {
  var ligatureTables = [];
  _.forEach(ligatures, function(ligature) {
  	ligatureTables.push(createLigatureTable(font, ligature));
  });

  var tableLengths = _.reduce(_.pluck(ligatureTables, 'length'), function(result, count) {return result + count;}, 0);

  var offset = (0
    + 2 // LigatureCount
    + 2 * ligatures.length
  );

  var length = (0
    + offset
    + tableLengths
  );

  var buffer = new ByteBuffer(length);

  // LigatureCount
  buffer.writeUint16(ligatures.length);

  // Ligature offsets
  _.forEach(ligatureTables, function(table) {
    // The offset to the current set, from SubstFormat
    buffer.writeUint16(offset);
    offset += table.length;
  });

  // Ligatures
  _.forEach(ligatureTables, function(table) {
    buffer.writeBytes(table.buffer);
  });

  return buffer;
}

function createLigatureList(font, ligatureGroups) {
  var sets = [];
  _.forEach(ligatureGroups, function(group) {
    var set = createLigatureSet(font, group.codePoint, group.ligatures);
    sets.push(set);
  });

  var setLengths = _.reduce(_.pluck(sets, 'length'), function(result, count) {return result + count;}, 0);

  var coverage = createLigatureCoverage(font, ligatureGroups);

  var tableOffset = (0
    + 2 // Lookup type
    + 2 // Lokup flag
    + 2 // SubTableCount
    + 2 // SubTable[0] Offset
  );

  var setOffset = (0
    + 2 // SubstFormat
    + 2 // Coverage offset
    + 2 // LigSetCount
    + 2 * sets.length // LigSet Offsets
  );

  var coverageOffset = setOffset + setLengths;

  var length = (0
    + tableOffset
    + coverageOffset
    + coverage.length
  );

  var buffer = new ByteBuffer(length);

  // Lookup type 4 – ligatures
  buffer.writeUint16(4);

  // Lookup flag – empty
  buffer.writeUint16(0);

  // Subtable count
  buffer.writeUint16(1);

  // Subtable[0] offset
  buffer.writeUint16(tableOffset);

  // SubstFormat
  buffer.writeUint16(1);

  // Coverage
  buffer.writeUint16(coverageOffset);

  // LigSetCount
  buffer.writeUint16(sets.length);

  _.forEach(sets, function(set) {
    // The offset to the current set, from SubstFormat
    buffer.writeUint16(setOffset);
    setOffset += set.length;
  });

  _.forEach(sets, function(set) {
    buffer.writeBytes(set.buffer);
  });

  buffer.writeBytes(coverage.buffer);

  return buffer;
}

// Add a lookup for each ligature
function createLookupList(font) {
  var ligatures = font.ligatures;

  var groupedLigatures = {};

  // Group ligatures by first code point
  _.forEach(ligatures, function(ligature) {
    var first = ligature.unicode[0];
    if(!_.has(groupedLigatures, first)) {
      groupedLigatures[first] = [];
    }
    groupedLigatures[first].push(ligature);
  });

  var ligatureGroups = [];
  _.forEach(groupedLigatures, function(ligatures, codePoint) {
    codePoint = parseInt(codePoint, 10);
    ligatureGroups.push({
      codePoint: codePoint,
      ligatures: ligatures,
      startGlyph: font.codePoints[codePoint]
    });
  });

  ligatureGroups.sort(function(a, b) {
    return a.startGlyph.id - b.startGlyph.id;
  });

  var offset = (0
    + 2 // Lookup count
    + 2 // Lookup[0] offset
  );

  var set = createLigatureList(font, ligatureGroups);

  var length = (0
    + offset
    + set.length
  );

  var buffer = new ByteBuffer(length);

  // Lookup count
  buffer.writeUint16(1);

  // Lookup[0] offset
  buffer.writeUint16(offset);

  // Lookup[0]
  buffer.writeBytes(set.buffer);

  return buffer;
}

function createGSUB(font) {
  var scriptList = createScriptList();
  var featureList = createFeatureList();
  var lookupList = createLookupList(font);

  var lists = [scriptList, featureList, lookupList];

  var offset = (0
    + 4 // Version
    + 2 * lists.length // List offsets
  );

  // Calculate offsets
  _.forEach(lists, function(list) {
    list._listOffset = offset;
    offset += list.length;
  });

  var length = offset;
  var buffer = new ByteBuffer(length);

  // Version
  buffer.writeUint32(0x00010000);

  // Offsets
  _.forEach(lists, function(list) {
    buffer.writeUint16(list._listOffset);
  });

  // List contents
  _.forEach(lists, function(list) {
    buffer.writeBytes(list.buffer);
  });

  return buffer;
}

module.exports = createGSUB;
},{"../utils.js":239,"lodash":241,"microbuffer":242}],231:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/head.htm

var ByteBuffer = require('microbuffer');

function dateToUInt64(date) {
  var startDate = new Date('1904-1-1');
  return Math.floor((date - startDate) / 1000);
}

function createHeadTable(font) {

  var buf = new ByteBuffer(54); // fixed table length

  buf.writeInt32(0x10000); // version
  buf.writeInt32(font.revision * 0x10000); // fontRevision
  buf.writeUint32(0); // checkSumAdjustment
  buf.writeUint32(0x5F0F3CF5); // magicNumber
  // FLag meanings:
  // Bit 0: Baseline for font at y=0;
  // Bit 1: Left sidebearing point at x=0;
  // Bit 3: Force ppem to integer values for all internal scaler math; may use fractional ppem sizes if this bit is clear;
  buf.writeUint16(0x000B); // flags
  buf.writeUint16(font.unitsPerEm); // unitsPerEm
  buf.writeUint64(dateToUInt64(font.createdDate)); // created
  buf.writeUint64(dateToUInt64(font.modifiedDate)); // modified
  buf.writeInt16(font.xMin); // xMin
  buf.writeInt16(font.yMin); // yMin
  buf.writeInt16(font.xMax); // xMax
  buf.writeInt16(font.yMax); // yMax
  buf.writeUint16(font.macStyle); //macStyle
  buf.writeUint16(font.lowestRecPPEM); // lowestRecPPEM
  buf.writeInt16(2); // fontDirectionHint
  buf.writeInt16(font.ttf_glyph_size < 0x20000 ? 0 : 1); // indexToLocFormat, 0 for short offsets, 1 for long offsets
  buf.writeInt16(0); // glyphDataFormat

  return buf;
}

module.exports = createHeadTable;

},{"microbuffer":242}],232:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/hhea.htm

var ByteBuffer = require('microbuffer');

function createHHeadTable(font) {

  var buf = new ByteBuffer(36); // fixed table length

  buf.writeInt32(0x10000); // version
  buf.writeInt16(font.ascent); // ascent
  buf.writeInt16(font.descent); // descend
  buf.writeInt16(font.lineGap); // lineGap
  buf.writeUint16(font.maxWidth); // advanceWidthMax
  buf.writeInt16(font.minLsb); // minLeftSideBearing
  buf.writeInt16(font.minRsb); // minRightSideBearing
  buf.writeInt16(font.maxExtent); // xMaxExtent
  buf.writeInt16(1); // caretSlopeRise
  buf.writeInt16(0); // caretSlopeRun
  buf.writeUint32(0); // reserved1
  buf.writeUint32(0); // reserved2
  buf.writeUint16(0); // reserved3
  buf.writeInt16(0); // metricDataFormat
  buf.writeUint16(font.glyphs.length); // numberOfHMetrics

  return buf;
}

module.exports = createHHeadTable;

},{"microbuffer":242}],233:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/hmtx.htm

var _ = require('lodash');
var ByteBuffer = require('microbuffer');

function createHtmxTable(font) {

  var buf = new ByteBuffer(font.glyphs.length * 4);

  _.forEach(font.glyphs, function (glyph) {
    buf.writeUint16(glyph.width); //advanceWidth
    buf.writeInt16(glyph.xMin); //lsb
  });
  return buf;
}

module.exports = createHtmxTable;

},{"lodash":241,"microbuffer":242}],234:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/loca.htm

var _ = require('lodash');
var ByteBuffer = require('microbuffer');

function tableSize(font, isShortFormat) {
  var result = (font.glyphs.length + 1) * (isShortFormat ? 2 : 4); // by glyph count + tail
  return result;
}

function createLocaTable(font) {

  var isShortFormat = font.ttf_glyph_size < 0x20000;

  var buf = new ByteBuffer(tableSize(font, isShortFormat));

  var location = 0;
  // Array of offsets in GLYF table for each glyph
  _.forEach(font.glyphs, function (glyph) {
    if (isShortFormat) {
      buf.writeUint16(location);
      location += glyph.ttf_size / 2; // actual location must be divided to 2 in short format
    } else {
      buf.writeUint32(location);
      location += glyph.ttf_size; //actual location is stored as is in long format
    }
  });

  // The last glyph location is stored to get last glyph length
  if (isShortFormat) {
    buf.writeUint16(location);
  } else {
    buf.writeUint32(location);
  }

  return buf;
}

module.exports = createLocaTable;

},{"lodash":241,"microbuffer":242}],235:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/maxp.htm

var _ = require('lodash');
var ByteBuffer = require('microbuffer');

// Find max points in glyph TTF contours.
function getMaxPoints(font) {
  return _.max(_.map(font.glyphs, function(glyph) {
    return _.reduce(glyph.ttfContours, function (sum, ctr) { return sum + ctr.length; }, 0);
  }));
}

function getMaxContours(font) {
  return _.max(_.map(font.glyphs, function (glyph) {
    return glyph.ttfContours.length;
  }));
}

function createMaxpTable(font) {

  var buf = new ByteBuffer(32);

  buf.writeInt32(0x10000); // version
  buf.writeUint16(font.glyphs.length); // numGlyphs
  buf.writeUint16(getMaxPoints(font)); // maxPoints
  buf.writeUint16(getMaxContours(font)); // maxContours
  buf.writeUint16(0); // maxCompositePoints
  buf.writeUint16(0); // maxCompositeContours
  buf.writeUint16(2); // maxZones
  buf.writeUint16(0); // maxTwilightPoints
  // It is unclear how to calculate maxStorage, maxFunctionDefs and maxInstructionDefs.
  // These are magic constants now, with values exceeding values from FontForge
  buf.writeUint16(10); // maxStorage
  buf.writeUint16(10); // maxFunctionDefs
  buf.writeUint16(0); // maxInstructionDefs
  buf.writeUint16(255); // maxStackElements
  buf.writeUint16(0); // maxSizeOfInstructions
  buf.writeUint16(0); // maxComponentElements
  buf.writeUint16(0); // maxComponentDepth

  return buf;
}

module.exports = createMaxpTable;

},{"lodash":241,"microbuffer":242}],236:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/name.htm

var _ = require('lodash');
var ByteBuffer = require('microbuffer');
var Str = require('../../str');

var TTF_NAMES = {
  COPYRIGHT: 0,
  FONT_FAMILY: 1,
  ID: 3,
  DESCRIPTION: 10,
  URL_VENDOR: 11
};

function tableSize(names) {
  var result = 6; // table header
  _.forEach(names, function (name) {
    result += 12 + name.data.length; //name header and data
  });
  return result;
}

function getStrings(name, id) {
  var result = [];
  var str = new Str(name);
  result.push({ data: str.toUTF8Bytes(), id: id, platformID : 1, encodingID : 0, languageID : 0 } ); //mac standard
  result.push({ data: str.toUCS2Bytes(), id: id, platformID : 3, encodingID : 1, languageID : 0x409 } ); //windows standard
  return result;
}

// Collect font names
function getNames(font) {
  var result = [];
  if (font.copyright) {
    result.push.apply(result, getStrings(font.copyright, TTF_NAMES.COPYRIGHT));
  }
  if (font.familyName) {
    result.push.apply(result, getStrings(font.familyName, TTF_NAMES.FONT_FAMILY));
  }
  if (font.id) {
    result.push.apply(result, getStrings(font.id, TTF_NAMES.ID));
  }
  result.push.apply(result, getStrings('Generated by svg2ttf from Fontello project.', TTF_NAMES.DESCRIPTION));
  result.push.apply(result, getStrings('http://fontello.com', TTF_NAMES.URL_VENDOR));

  _.forEach(font.sfntNames, function (sfntName) {
    result.push.apply(result, getStrings(sfntName.value, sfntName.id));
  });

  result.sort(function (a, b) {
    var orderFields = ['platformID', 'encodingID', 'languageID', 'id'];
    var i;
    for (i = 0; i < orderFields.length; i++) {
      if (a[orderFields[i]] !== b[orderFields[i]]) {
        return a[orderFields[i]] < b[orderFields[i]] ? -1 : 1;
      }
    }
    return 0;
  });

  return result;
}

function createNameTable(font) {

  var names = getNames(font);

  var buf = new ByteBuffer(tableSize(names));

  buf.writeUint16(0); // formatSelector
  buf.writeUint16(names.length); // nameRecordsCount
  var offsetPosition = buf.tell();
  buf.writeUint16(0); // offset, will be filled later
  var nameOffset = 0;
  _.forEach(names, function (name) {
    buf.writeUint16(name.platformID); // platformID
    buf.writeUint16(name.encodingID); // platEncID
    buf.writeUint16(name.languageID); // languageID, English (USA)
    buf.writeUint16(name.id); // nameID
    buf.writeUint16(name.data.length); // reclength
    buf.writeUint16(nameOffset); // offset
    nameOffset += name.data.length;
  });
  var actualStringDataOffset = buf.tell();
  //Array of bytes with actual string data
  _.forEach(names, function (name) {
    buf.writeBytes(name.data);
  });

  //write actual string data offset
  buf.seek(offsetPosition);
  buf.writeUint16(actualStringDataOffset); // offset

  return buf;
}

module.exports = createNameTable;

},{"../../str":225,"lodash":241,"microbuffer":242}],237:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/os2.htm

var _ = require('lodash');
var identifier = require('../utils.js').identifier;
var ByteBuffer = require('microbuffer');

//get first glyph unicode
function getFirstCharIndex(font) {
  return Math.max(0, Math.min(0xffff, Math.abs(_.min(Object.keys(font.codePoints), function(point) {
    return parseInt(point, 10);
  }))));
}

//get last glyph unicode
function getLastCharIndex(font) {
  return Math.max(0, Math.min(0xffff, Math.abs(_.max(Object.keys(font.codePoints), function(point) {
    return parseInt(point, 10);
  }))));
}

function createOS2Table(font) {

  var buf = new ByteBuffer(86);

  buf.writeUint16(1); //version
  buf.writeInt16(font.avgWidth); // xAvgCharWidth
  buf.writeUint16(font.weightClass); // usWeightClass
  buf.writeUint16(font.widthClass); // usWidthClass
  buf.writeInt16(font.fsType); // fsType
  buf.writeInt16(font.ySubscriptXSize); // ySubscriptXSize
  buf.writeInt16(font.ySubscriptYSize); //ySubscriptYSize
  buf.writeInt16(font.ySubscriptXOffset); // ySubscriptXOffset
  buf.writeInt16(font.ySubscriptYOffset); // ySubscriptYOffset
  buf.writeInt16(font.ySuperscriptXSize); // ySuperscriptXSize
  buf.writeInt16(font.ySuperscriptYSize); // ySuperscriptYSize
  buf.writeInt16(font.ySuperscriptXOffset); // ySuperscriptXOffset
  buf.writeInt16(font.ySuperscriptYOffset); // ySuperscriptYOffset
  buf.writeInt16(font.yStrikeoutSize); // yStrikeoutSize
  buf.writeInt16(font.yStrikeoutPosition); // yStrikeoutPosition
  buf.writeInt16(font.familyClass); // sFamilyClass
  buf.writeUint8(font.panose.familyType); // panose.bFamilyType
  buf.writeUint8(font.panose.serifStyle); // panose.bSerifStyle
  buf.writeUint8(font.panose.weight); // panose.bWeight
  buf.writeUint8(font.panose.proportion); // panose.bProportion
  buf.writeUint8(font.panose.contrast); // panose.bContrast
  buf.writeUint8(font.panose.strokeVariation); // panose.bStrokeVariation
  buf.writeUint8(font.panose.armStyle); // panose.bArmStyle
  buf.writeUint8(font.panose.letterform); // panose.bLetterform
  buf.writeUint8(font.panose.midline); // panose.bMidline
  buf.writeUint8(font.panose.xHeight); // panose.bXHeight
  // TODO: This field is used to specify the Unicode blocks or ranges based on the 'cmap' table.
  buf.writeUint32(0); // ulUnicodeRange1
  buf.writeUint32(0); // ulUnicodeRange2
  buf.writeUint32(0); // ulUnicodeRange3
  buf.writeUint32(0); // ulUnicodeRange4
  buf.writeUint32(identifier('PfEd')); // achVendID, equal to PfEd
  buf.writeUint16(font.fsSelection); // fsSelection
  buf.writeUint16(getFirstCharIndex(font)); // usFirstCharIndex
  buf.writeUint16(getLastCharIndex(font)); // usLastCharIndex
  buf.writeInt16(font.ascent); // sTypoAscender
  buf.writeInt16(font.descent); // sTypoDescender
  buf.writeInt16(font.lineGap); // lineGap
  // Enlarge win acscent/descent to avoid clipping
  buf.writeInt16(Math.max(font.yMax, font.ascent)); // usWinAscent
  buf.writeInt16(-Math.min(font.yMin, font.descent)); // usWinDescent
  buf.writeInt32(1); // ulCodePageRange1, Latin 1
  buf.writeInt32(0); // ulCodePageRange2

  return buf;
}

module.exports = createOS2Table;

},{"../utils.js":239,"lodash":241,"microbuffer":242}],238:[function(require,module,exports){
'use strict';

// See documentation here: http://www.microsoft.com/typography/otspec/post.htm

var _ = require('lodash');
var ByteBuffer = require('microbuffer');

function tableSize(font, names) {
  var result = 36; // table header
  result += font.glyphs.length * 2; // name declarations
  _.forEach(names, function(name) {
    result += name.length;
  });
  return result;
}

function pascalString(str) {
  var bytes = [];
  var len = str ? (str.length < 256 ? str.length : 255) : 0; //length in Pascal string is limited with 255
  bytes.push(len);
  for (var i = 0; i < len; i ++) {
    var char = str.charCodeAt(i);
    bytes.push(char < 128 ? char : 95); //non-ASCII characters are substituted with '_'
  }
  return bytes;
}

function createPostTable(font) {

  var names = [];

  _.forEach(font.glyphs, function(glyph) {
    if (glyph.unicode !== 0) {
      names.push(pascalString(glyph.name));
    }
  });

  var buf = new ByteBuffer(tableSize(font, names));

  buf.writeInt32(0x20000); // formatType,  version 2.0
  buf.writeInt32(font.italicAngle); // italicAngle
  buf.writeInt16(font.underlinePosition); // underlinePosition
  buf.writeInt16(font.underlineThickness); // underlineThickness
  buf.writeUint32(font.isFixedPitch); // isFixedPitch
  buf.writeUint32(0); // minMemType42
  buf.writeUint32(0); // maxMemType42
  buf.writeUint32(0); // minMemType1
  buf.writeUint32(0); // maxMemType1
  buf.writeUint16(font.glyphs.length); // numberOfGlyphs

  // Array of glyph name indexes
  var index = 258; // first index of custom glyph name, it is calculated as glyph name index + 258

  _.forEach(font.glyphs, function(glyph) {
    if (glyph.unicode === 0) {
      buf.writeUint16(0);// missed element should have .notDef name in the Macintosh standard order.
    } else {
      buf.writeUint16(index++);
    }
  });

  // Array of glyph name indexes
  _.forEach(names, function (name) {
    buf.writeBytes(name);
  });

  return buf;
}

module.exports = createPostTable;

},{"lodash":241,"microbuffer":242}],239:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var math = require('../math');

// Remove points, that looks like straight line
function simplify(contours, accuracy) {
  return _.map(contours, function (contour) {
    var i, curr, prev, next;
    var p, pPrev, pNext;
    // run from the end, to simplify array elements removal
    for(i=contour.length-2; i>1; i--) {
      prev = contour[i-1];
      next = contour[i+1];
      curr = contour[i];

      // skip point (both oncurve & offcurve),
      // if [prev,next] is straight line
      if (prev.onCurve && next.onCurve) {
        p = new math.Point(curr.x, curr.y);
        pPrev = new math.Point(prev.x, prev.y);
        pNext = new math.Point(next.x, next.y);
        if (math.isInLine(pPrev, p, pNext, accuracy)) {
          contour.splice(i, 1);
        }
      }
    }
    return contour;
  });
}

// Remove interpolateable oncurve points
// Those should be in the middle of nebor offcurve points
function interpolate(contours, accuracy) {
  return _.map(contours, function (contour) {
    var resContour = [];
    _.forEach(contour, function (point, idx) {
      // Never skip first and last points
      if (idx === 0 || idx === (contour.length - 1)) {
        resContour.push(point);
        return;
      }

      var prev = contour[idx-1];
      var next = contour[idx+1];

      var p, pPrev, pNext;

      // skip interpolateable oncurve points (if exactly between previous and next offcurves)
      if (!prev.onCurve && point.onCurve && !next.onCurve) {
        p = new math.Point(point.x, point.y);
        pPrev = new math.Point(prev.x, prev.y);
        pNext = new math.Point(next.x, next.y);
        if (pPrev.add(pNext).div(2).sub(p).dist() < accuracy) {
          return;
        }
      }
      // keep the rest
      resContour.push(point);
    });
    return resContour;
  });
}

function roundPoints(contours) {
  return _.map(contours, function (contour) {
    return _.map(contour, function (point) {
      return { x: Math.round(point.x), y: Math.round(point.y), onCurve: point.onCurve };
    });
  });
}

// Remove closing point if it is the same as first point of contour.
// TTF doesn't need this point when drawing contours.
function removeClosingReturnPoints(contours) {
  return _.map(contours, function (contour) {
    var length = contour.length;
    if (length > 1 &&
      contour[0].x === contour[length - 1].x &&
      contour[0].y === contour[length - 1].y) {
      contour.splice(length - 1);
    }
    return contour;
  });
}

function toRelative(contours) {
  var prevPoint = { x: 0, y: 0 };
  var resContours = [];
  var resContour;
  _.forEach(contours, function (contour) {
    resContour = [];
    resContours.push(resContour);
    _.forEach(contour, function (point) {
      resContour.push({
        x: point.x - prevPoint.x,
        y: point.y - prevPoint.y,
        onCurve: point.onCurve
      });
      prevPoint = point;
    });
  });
  return resContours;
}

function identifier(string, littleEndian) {
  var result = 0;
  for(var i=0;i<string.length;i++) {
    /*jshint bitwise:false*/
    result = result << 8;
    var index = littleEndian ? string.length - i - 1 : i;
    result += string.charCodeAt(index);
  }

  return result;
}

module.exports.interpolate = interpolate;
module.exports.simplify = simplify;
module.exports.roundPoints = roundPoints;
module.exports.removeClosingReturnPoints = removeClosingReturnPoints;
module.exports.toRelative = toRelative;
module.exports.identifier = identifier;


},{"../math":223,"lodash":241}],240:[function(require,module,exports){
'use strict';

var _ = require('lodash');

// Taken from the punycode library
function ucs2encode(array) {
  return _.map(array, function(value) {
    var output = '';
    if (value > 0xFFFF) {
      value -= 0x10000;
      /*jshint bitwise: false*/
      output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
      value = 0xDC00 | value & 0x3FF;
    }
    output += String.fromCharCode(value);
    return output;
  }).join('');
}

function ucs2decode(string) {
  var output = [],
    counter = 0,
    length = string.length,
    value,
    extra;
  while (counter < length) {
    value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // high surrogate, and there is a next character
      extra = string.charCodeAt(counter++);
      /*jshint bitwise: false*/
      if ((extra & 0xFC00) === 0xDC00) { // low surrogate
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // unmatched surrogate; only append this code unit, in case the next
        // code unit is the high surrogate of a surrogate pair
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}

module.exports = {
  encode: ucs2encode,
  decode: ucs2decode
};
},{"lodash":241}],241:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.9.3 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.9.3';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_DROP_WHILE_FLAG = 0,
      LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [special characters](http://www.regular-expressions.info/characters.html#special).
   * In addition to special characters the forward slash is escaped to allow for
   * easier `eval` use and `Function` compilation.
   */
  var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to detect and test for whitespace. */
  var whitespace = (
    // Basic whitespace characters.
    ' \t\x0b\f\xa0\ufeff' +

    // Line terminators.
    '\n\r\u2028\u2029' +

    // Unicode category "Zs" space separators.
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'document',
    'isFinite', 'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', 'window'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used as an internal `_.debounce` options object by `_.throttle`. */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare to `other`.
   * @param {Object} other The object to compare to `object`.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of each element
   * in a collection and stable sort them in the following order:
   *
   * If `orders` is unspecified, sort in ascending order for all properties.
   * Otherwise, for each property, sort in ascending order if its corresponding value in
   * orders is true, and descending order if false.
   *
   * @private
   * @param {Object} object The object to compare to `other`.
   * @param {Object} other The object to compare to `object`.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        return result * (orders[index] ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to detect DOM support. */
    var document = (document = context.window) ? document.document : null;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = context._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      escapeRegExp(fnToString.call(hasOwnProperty))
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = getNative(context, 'ArrayBuffer'),
        bufferSlice = getNative(ArrayBuffer && new ArrayBuffer(0), 'slice'),
        ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        getPrototypeOf = getNative(Object, 'getPrototypeOf'),
        parseFloat = context.parseFloat,
        push = arrayProto.push,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = getNative(context, 'Uint8Array'),
        WeakMap = getNative(context, 'WeakMap');

    /** Used to clone array buffers. */
    var Float64Array = (function() {
      // Safari 5 errors when using an array buffer to initialize a typed array
      // where the array buffer's `byteLength` is not a multiple of the typed
      // array's `BYTES_PER_ELEMENT`.
      try {
        var func = getNative(context, 'Float64Array'),
            result = new func(new ArrayBuffer(10), 0, 1) && func;
      } catch(e) {}
      return result || null;
    }());

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCreate = getNative(Object, 'create'),
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeNumIsFinite = getNative(Number, 'isFinite'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used as the size, in bytes, of each `Float64Array` element. */
    var FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;

    /**
     * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that return a boolean or single value will
     * automatically end the chain returning the unwrapped value. Explicit chaining
     * may be enabled using `_.chain`. The execution of chained methods is lazy,
     * that is, execution is deferred until `_#value` is implicitly or explicitly
     * called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization that merges iteratees to avoid creating intermediate
     * arrays and reduce the number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`,
     * `difference`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `fill`,
     * `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`, `forEach`,
     * `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`,
     * `groupBy`, `indexBy`, `initial`, `intersection`, `invert`, `invoke`, `keys`,
     * `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `method`, `methodOf`, `mixin`, `negate`, `omit`, `once`,
     * `pairs`, `partial`, `partialRight`, `partition`, `pick`, `plant`, `pluck`,
     * `property`, `propertyOf`, `pull`, `pullAt`, `push`, `range`, `rearg`,
     * `reject`, `remove`, `rest`, `restParam`, `reverse`, `set`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `sortByAll`, `sortByOrder`, `splice`, `spread`,
     * `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`,
     * `thru`, `times`, `toArray`, `toPlainObject`, `transform`, `union`, `uniq`,
     * `unshift`, `unzip`, `unzipWith`, `values`, `valuesIn`, `where`, `without`,
     * `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,
     * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
     * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `get`,
     * `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`, `inRange`, `isArguments`,
     * `isArray`, `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`,
     * `isFinite` `isFunction`, `isMatch`, `isNative`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`,
     * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `lt`, `lte`,
     * `max`, `min`, `noConflict`, `noop`, `now`, `pad`, `padLeft`, `padRight`,
     * `parseInt`, `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`,
     * `runInContext`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,
     * `sortedLastIndex`, `startCase`, `startsWith`, `sum`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    (function(x) {
      var Ctor = function() { this.x = x; },
          object = { '0': x, 'length': x },
          props = [];

      Ctor.prototype = { 'valueOf': x, 'y': x };
      for (var key in new Ctor) { props.push(key); }

      /**
       * Detect if the DOM is supported.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.dom = document.createDocumentFragment().nodeType === 11;
      } catch(e) {
        support.dom = false;
      }
    }(1, 0));

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = null;
      this.__dir__ = 1;
      this.__dropCount__ = 0;
      this.__filtered__ = false;
      this.__iteratees__ = null;
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = null;
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var actions = this.__actions__,
          iteratees = this.__iteratees__,
          views = this.__views__,
          result = new LazyWrapper(this.__wrapped__);

      result.__actions__ = actions ? arrayCopy(actions) : null;
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = iteratees ? arrayCopy(iteratees) : null;
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = views ? arrayCopy(views) : null;
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value();
      if (!isArray(array)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var dir = this.__dir__,
          isRight = dir < 0,
          view = getView(0, array.length, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          takeCount = nativeMin(length, this.__takeCount__),
          iteratees = this.__iteratees__,
          iterLength = iteratees ? iteratees.length : 0,
          resIndex = 0,
          result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type;

          if (type == LAZY_DROP_WHILE_FLAG) {
            if (data.done && (isRight ? (index > data.index) : (index < data.index))) {
              data.count = 0;
              data.done = false;
            }
            data.index = index;
            if (!data.done) {
              var limit = data.limit;
              if (!(data.done = limit > -1 ? (data.count++ >= limit) : !iteratee(value))) {
                continue outer;
              }
            }
          } else {
            var computed = iteratee(value);
            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for iteratees.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     */
    function arraySum(array) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +array[length] || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = isNil ? undefined : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = null;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= 200) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            value = baseFlatten(value, isDeep, isStrict);
          }
          var valIndex = -1,
              valLength = value.length;

          while (++valIndex < valLength) {
            result[++resIndex] = value[valIndex];
          }
        } else if (!isStrict) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined || (key in object))
          : baseIsEqual(srcValue, object[key], undefined, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? null : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= 200,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var args = [result],
            action = actions[index];

        push.apply(args, action.args);
        result = action.func.apply(action.thisArg, args);
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = floor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      return bufferSlice.call(buffer, 0);
    }
    if (!bufferSlice) {
      // PhantomJS has `ArrayBuffer` and `Uint8Array` but not `Float64Array`.
      bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {
        var byteLength = buffer.byteLength,
            floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0,
            offset = floatLength * FLOAT64_BYTES_PER_ELEMENT,
            result = new ArrayBuffer(byteLength);

        if (floatLength) {
          var view = new Float64Array(result, 0, floatLength);
          view.set(new Float64Array(buffer, 0, floatLength));
        }
        if (byteLength != offset) {
          view = new Uint8Array(result, offset);
          view.set(new Uint8Array(buffer, offset));
        }
        return result;
      };
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(argsLength + leftLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an accumulator
     * object composed from the results of running each element in the collection
     * through an iteratee.
     *
     * **Note:** This function is used to create `_.countBy`, `_.groupBy`, `_.indexBy`,
     * and `_.partition`.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that assigns properties of source object(s) to a given
     * destination object.
     *
     * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined,
            guard = length > 2 ? sources[2] : undefined,
            thisArg = length > 1 ? sources[length - 1] : undefined;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
      return new SetCache(values);
    };

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = null;
        }
        var result = createWrapper(func, flag, null, null, null, null, null, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = null;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([]);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : null;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments;
          if (wrapper && args.length == 1 && isArray(args[0])) {
            return wrapper.plant(args[0]).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : args[0];

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, null, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? null : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : null,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : null,
                newHoldersRight = isCurry ? null : argsHolders,
                newPartials = isCurry ? args : null,
                newPartialsRight = isCurry ? null : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, ceil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(argsLength + leftLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = null;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = null;
      }
      var data = isBindKey ? null : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

        if (result !== undefined) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} value The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} [transforms] The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms ? transforms.length : 0;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `_.isPlainObject` which checks if `value`
     * is an object created by the `Object` constructor or has a `[[Prototype]]`
     * of `null`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var Ctor,
          support = lodash.support;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag) ||
          (!hasOwnProperty.call(value, 'constructor') &&
            (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(+size || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(ceil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value),
            other = array[index];

        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? null : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? baseDifference(result, array).concat(baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined,
          thisArg = length > 1 ? arrays[length - 1] : undefined;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
        thisArg = undefined;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapper = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapper = wrapper.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapper.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapper = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapper = wrapper.plant(other);
     *
     * otherWrapper.value();
     * // => [9, 16]
     *
     * wrapper.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        if (this.__actions__.length) {
          value = new LazyWrapper(this);
        }
        return new LodashWrapper(value.reverse(), this.__chain__);
      }
      return this.thru(function(value) {
        return value.reverse();
      });
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = null;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (!length) {
        return false;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex < length && collection.indexOf(target, fromIndex) > -1)
        : (getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : null);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `includes`, `merge`, `sortByAll`, and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = null;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = null;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. A truthy value in `orders` will
     * sort the corresponding property name in ascending order while a falsey
     * value will sort it in descending order.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], [true, false]), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = null;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = null;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, null, null, null, null, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = null;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, null, null, null, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = +wait;
      debounceOptions.trailing = trailing;
      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, null, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) && objToString.call(value) == argsTag;
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) &&
        (objToString.call(value).indexOf('Element') > -1);
    }
    // Fallback for environments without DOM support.
    if (!support.dom) {
      isElement = function(value) {
        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
      };
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    var isFinite = nativeNumIsFinite || function(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    };

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    var isFunction = !(baseIsFunction(/x/) || (Uint8Array && !baseIsFunction(Uint8Array))) ? baseIsFunction : function(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return objToString.call(value) == funcTag;
    };

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (objToString.call(value) == funcTag) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && objToString.call(value) == objectTag)) {
        return false;
      }
      var valueOf = getNative(value, 'valueOf'),
          objProto = valueOf && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObjectLike(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = null;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = restParam(function(args) {
      var object = args[0];
      if (object == null) {
        return object;
      }
      args.push(assignDefaults);
      return assign.apply(undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = null;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? null : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : null);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (typeof end === 'undefined') {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = null;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, '\\$&')
        : string;
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = floor(mid),
          rightLength = ceil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard && isIterateeCall(string, radix, guard)) {
        radix = 0;
      }
      return nativeParseInt(string, radix);
    }
    // Fallback for environments with pre-ES5 implementations.
    if (nativeParseInt(whitespace + '08') != 8) {
      parseInt = function(string, radix, guard) {
        // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
        // Chrome fails to trim leading <BOM> whitespace characters.
        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        string = trim(string);
        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
      };
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = floor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = null;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = null;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = null;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = null;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : null,
            methodNames = (props && props.length) ? baseFunctions(source, props) : null;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              var args = [this.value()];
              push.apply(args, arguments);
              return func.apply(object, args);
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = null;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(ceil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = floor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = null;
      }
      var callback = getCallback(),
          noIteratee = iteratee == null;

      if (!(noIteratee && callback === baseCallback)) {
        noIteratee = false;
        iteratee = callback(iteratee, thisArg, 3);
      }
      return noIteratee
        ? arraySum(isArray(collection) ? collection : toIterable(collection))
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['dropWhile', 'filter', 'map', 'takeWhile'], function(methodName, type) {
      var isFilter = type != LAZY_MAP_FLAG,
          isDropWhile = type == LAZY_DROP_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var filtered = this.__filtered__,
            result = (filtered && isDropWhile) ? new LazyWrapper(this) : this.clone(),
            iteratees = result.__iteratees__ || (result.__iteratees__ = []);

        iteratees.push({
          'done': false,
          'count': 0,
          'index': 0,
          'iteratee': getCallback(iteratee, thisArg, 1),
          'limit': -1,
          'type': type
        });

        result.__filtered__ = filtered || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      var whileName = methodName + 'While';

      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__,
            result = (filtered && !index) ? this.dropWhile() : this.clone();

        n = n == null ? 1 : nativeMax(floor(n) || 0, 0);
        if (filtered) {
          if (index) {
            result.__takeCount__ = nativeMin(result.__takeCount__, n);
          } else {
            last(result.__iteratees__).limit = n;
          }
        } else {
          var views = result.__views__ || (result.__views__ = []);
          views.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };

      LazyWrapper.prototype[methodName + 'RightWhile'] = function(predicate, thisArg) {
        return this.reverse()[whileName](predicate, thisArg).reverse();
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (start < 0) {
        result = this.takeRight(-start);
      } else if (start) {
        result = this.drop(start);
      }
      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.toArray = function() {
      return this.drop(0);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (!lodashFunc) {
        return;
      }
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // avoid lazy use if the iteratee has a "length" value other than `1`
          isLazy = useLazy = false;
        }
        var onlyLazy = isLazy && !isHybrid;
        if (retUnwrapped && !chainAll) {
          return onlyLazy
            ? func.call(value)
            : lodashFunc.call(lodash, this.value());
        }
        var interceptor = function(value) {
          var otherArgs = [value];
          push.apply(otherArgs, args);
          return lodashFunc.apply(lodash, otherArgs);
        };
        if (useLazy) {
          var wrapper = onlyLazy ? value : new LazyWrapper(this),
              result = func.apply(wrapper, args);

          if (!retUnwrapped && (isHybrid || result.__actions__)) {
            var actions = result.__actions__ || (result.__actions__ = []);
            actions.push({ 'func': thru, 'args': [interceptor], 'thisArg': lodash });
          }
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['concat', 'join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(null, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': null }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],242:[function(require,module,exports){
// Light implementation of binary buffer with helpers for easy access.
//
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined');

function createArray(size) {
  return TYPED_OK ? new Uint8Array(size) : Array(size);
}


function MicroBuffer(buffer, start, length) {

  var isInherited = buffer instanceof MicroBuffer;

  this.buffer = isInherited ?
    buffer.buffer
  :
    (typeof buffer === 'number' ? createArray(buffer) : buffer);

  this.start = (start || 0) + (isInherited ? buffer.start : 0);
  this.length = length || (this.buffer.length - this.start);
  this.offset = 0;

  this.isTyped = !Array.isArray(this.buffer);
}


MicroBuffer.prototype.getUint8 = function (pos) {
  return this.buffer[pos + this.start];
};


MicroBuffer.prototype.getUint16 = function (pos, littleEndian) {
  var val;
  if (littleEndian) {
    throw new Error('not implemented');
  } else {
    val = this.buffer[pos + 1 + this.start];
    val += this.buffer[pos + this.start] << 8 >>> 0;
  }
  return val;
};


MicroBuffer.prototype.getUint32 = function (pos, littleEndian) {
  var val;
  if (littleEndian) {
    throw new Error('not implemented');
  } else {
    val = this.buffer[pos + 1 + this.start] << 16;
    val |= this.buffer[pos + 2 + this.start] << 8;
    val |= this.buffer[pos + 3 + this.start];
    val += this.buffer[pos + this.start] << 24 >>> 0;
  }
  return val;
};


MicroBuffer.prototype.setUint8 = function (pos, value) {
  this.buffer[pos + this.start] = value & 0xFF;
};


MicroBuffer.prototype.setUint16 = function (pos, value, littleEndian) {
  var offset = pos + this.start;
  var buf = this.buffer;
  if (littleEndian) {
    buf[offset] = value & 0xFF;
    buf[offset + 1] = (value >>> 8) & 0xFF;
  } else {
    buf[offset] = (value >>> 8) & 0xFF;
    buf[offset + 1] = value & 0xFF;
  }
};


MicroBuffer.prototype.setUint32 = function (pos, value, littleEndian) {
  var offset = pos + this.start;
  var buf = this.buffer;
  if (littleEndian) {
    buf[offset] = value & 0xFF;
    buf[offset + 1] = (value >>> 8) & 0xFF;
    buf[offset + 2] = (value >>> 16) & 0xFF;
    buf[offset + 3] = (value >>> 24) & 0xFF;
  } else {
    buf[offset] = (value >>> 24) & 0xFF;
    buf[offset + 1] = (value >>> 16) & 0xFF;
    buf[offset + 2] = (value >>> 8) & 0xFF;
    buf[offset + 3] = value & 0xFF;
  }
};


MicroBuffer.prototype.writeUint8 = function (value) {
  this.buffer[this.offset + this.start] = value & 0xFF;
  this.offset++;
};


MicroBuffer.prototype.writeInt8 = function (value) {
  this.setUint8(this.offset, (value < 0) ? 0xFF + value + 1 : value);
  this.offset++;
};


MicroBuffer.prototype.writeUint16 = function (value, littleEndian) {
  this.setUint16(this.offset, value, littleEndian);
  this.offset += 2;
};


MicroBuffer.prototype.writeInt16 = function (value, littleEndian) {
  this.setUint16(this.offset, (value < 0) ? 0xFFFF + value + 1 : value, littleEndian);
  this.offset += 2;
};


MicroBuffer.prototype.writeUint32 = function (value, littleEndian) {
  this.setUint32(this.offset, value, littleEndian);
  this.offset += 4;
};


MicroBuffer.prototype.writeInt32 = function (value, littleEndian) {
  this.setUint32(this.offset, (value < 0) ? 0xFFFFFFFF + value + 1 : value, littleEndian);
  this.offset += 4;
};


// get current position
//
MicroBuffer.prototype.tell = function () {
  return this.offset;
};


// set current position
//
MicroBuffer.prototype.seek = function (pos) {
  this.offset = pos;
};


MicroBuffer.prototype.fill = function (value) {
  var index = this.length - 1;
  while (index >= 0) {
    this.buffer[index + this.start] = value;
    index--;
  }
};


MicroBuffer.prototype.writeUint64 = function (value) {
  // we canot use bitwise operations for 64bit values because of JavaScript limitations,
  // instead we should divide it to 2 Int32 numbers
  // 2^32 = 4294967296
  var hi = Math.floor(value / 4294967296);
  var lo = value - hi * 4294967296;
  this.writeUint32(hi);
  this.writeUint32(lo);
};


MicroBuffer.prototype.writeBytes = function (data) {
  var buffer = this.buffer;
  var offset = this.offset + this.start;
  if (this.isTyped) {
    buffer.set(data, offset);
  } else {
    for (var i = 0; i < data.length; i++) {
      buffer[i + offset] = data[i];
    }
  }
  this.offset += data.length;
};


MicroBuffer.prototype.toString = function (offset, length) {
  // default values if not set
  offset = (offset || 0);
  length = length || (this.length - offset);

  // add buffer shift
  var start = offset + this.start;
  var end = start + length;

  var string = '';
  for (var i = start; i < end; i++) {
    string += String.fromCharCode(this.buffer[i]);
  }
  return string;
};


MicroBuffer.prototype.toArray = function () {
  if (this.isTyped) {
    return this.buffer.subarray(this.start, this.start + this.length);
  }

  return this.buffer.slice(this.start, this.start + this.length);
};


module.exports = MicroBuffer;

},{}],243:[function(require,module,exports){
// Convert an arc to a sequence of cubic bézier curves
//

'use strict';

var TAU = Math.PI * 2;

// causes an error in case of a long url in comments
/* eslint-disable max-len */

// spaces are used for grouping throughout this file
/* eslint-disable space-infix-ops */

// Calculate an angle between two vectors
//
function vector_angle(ux, uy, vx, vy) {
  var sign = (ux * vy - uy * vx < 0) ? -1 : 1;
  var umag = Math.sqrt(ux * ux + uy * uy);
  var vmag = Math.sqrt(ux * ux + uy * uy);
  var dot  = ux * vx + uy * vy;
  var div  = dot / (umag * vmag);

  if (div > 1 || div < -1) {
    // rounding errors, e.g. -1.0000000000000002 can screw up this
    div = Math.max(div, -1);
    div = Math.min(div,  1);
  }

  return sign * Math.acos(div);
}

// Correction of out-of-range radii
//
function correct_radii(midx, midy, rx, ry) {
  rx = Math.abs(rx);
  ry = Math.abs(ry);

  var Λ = (midx * midx) / (rx * rx) + (midy * midy) / (ry * ry);
  if (Λ > 1) {
    rx *= Math.sqrt(Λ);
    ry *= Math.sqrt(Λ);
  }

  return [ rx, ry ];
}


// Convert from endpoint to center parameterization,
// see http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
//
// Return [cx, cy, θ1, Δθ]
//
function get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_φ, cos_φ) {
  // Step 1.
  //
  // Moving an ellipse so origin will be the middlepoint between our two
  // points. After that, rotate it to line up ellipse axes with coordinate
  // axes.
  //
  var x1p =  cos_φ*(x1-x2)/2 + sin_φ*(y1-y2)/2;
  var y1p = -sin_φ*(x1-x2)/2 + cos_φ*(y1-y2)/2;

  var rx_sq  =  rx * rx;
  var ry_sq  =  ry * ry;
  var x1p_sq = x1p * x1p;
  var y1p_sq = y1p * y1p;

  // Step 2.
  //
  // Compute coordinates of the centre of this ellipse (cx', cy')
  // in the new coordinate system.
  //
  var radicant = (rx_sq * ry_sq) - (rx_sq * y1p_sq) - (ry_sq * x1p_sq);

  if (radicant < 0) {
    // due to rounding errors it might be e.g. -1.3877787807814457e-17
    radicant = 0;
  }

  radicant /=   (rx_sq * y1p_sq) + (ry_sq * x1p_sq);
  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);

  var cxp = radicant *  rx/ry * y1p;
  var cyp = radicant * -ry/rx * x1p;

  // Step 3.
  //
  // Transform back to get centre coordinates (cx, cy) in the original
  // coordinate system.
  //
  var cx = cos_φ*cxp - sin_φ*cyp + (x1+x2)/2;
  var cy = sin_φ*cxp + cos_φ*cyp + (y1+y2)/2;

  // Step 4.
  //
  // Compute angles (θ1, Δθ).
  //
  var v1x =  (x1p - cxp) / rx;
  var v1y =  (y1p - cyp) / ry;
  var v2x = (-x1p - cxp) / rx;
  var v2y = (-y1p - cyp) / ry;

  var θ1 = vector_angle(1, 0, v1x, v1y);
  var Δθ = vector_angle(v1x, v1y, v2x, v2y);

  if (fs === 0 && Δθ > 0) {
    Δθ -= TAU;
  }
  if (fs === 1 && Δθ < 0) {
    Δθ += TAU;
  }

  return [ cx, cy, θ1, Δθ ];
}

//
// Approximate one unit arc segment with bézier curves,
// see http://math.stackexchange.com/questions/873224/calculate-control-points-of-cubic-bezier-curve-approximating-a-part-of-a-circle
//
function approximate_unit_arc(θ1, Δθ) {
  var α = 4/3 * Math.tan(Δθ/4);

  var x1 = Math.cos(θ1);
  var y1 = Math.sin(θ1);
  var x2 = Math.cos(θ1 + Δθ);
  var y2 = Math.sin(θ1 + Δθ);

  return [ x1, y1, x1 - y1*α, y1 + x1*α, x2 + y2*α, y2 - x2*α, x2, y2 ];
}

module.exports = function a2c(x1, y1, x2, y2, fa, fs, rx, ry, φ) {
  var sin_φ = Math.sin(φ * TAU / 360);
  var cos_φ = Math.cos(φ * TAU / 360);

  // Make sure radii are valid
  //
  var x1p =  cos_φ*(x1-x2)/2 + sin_φ*(y1-y2)/2;
  var y1p = -sin_φ*(x1-x2)/2 + cos_φ*(y1-y2)/2;

  if (x1p === 0 && y1p === 0) {
    // we're asked to draw line to itself
    return [];
  }

  if (rx === 0 || ry === 0) {
    // one of the radii is zero
    return [];
  }

  var radii = correct_radii(x1p, y1p, rx, ry);
  rx = radii[0];
  ry = radii[1];

  // Get center parameters (cx, cy, θ1, Δθ)
  //
  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_φ, cos_φ);

  var result = [];
  var θ1 = cc[2];
  var Δθ = cc[3];

  // Split an arc to multiple segments, so each segment
  // will be less than τ/4 (= 90°)
  //
  var segments = Math.max(Math.ceil(Math.abs(Δθ) / (TAU / 4)), 1);
  Δθ /= segments;

  for (var i = 0; i < segments; i++) {
    result.push(approximate_unit_arc(θ1, Δθ));
    θ1 += Δθ;
  }

  // We have a bezier approximation of a unit circle,
  // now need to transform back to the original ellipse
  //
  return result.map(function (curve) {
    for (var i = 0; i < curve.length; i += 2) {
      var x = curve[i + 0];
      var y = curve[i + 1];

      // scale
      x *= rx;
      y *= ry;

      // rotate
      var xp = cos_φ*x - sin_φ*y;
      var yp = sin_φ*x + cos_φ*y;

      // translate
      curve[i + 0] = xp + cc[0];
      curve[i + 1] = yp + cc[1];
    }

    return curve;
  });
};

},{}],244:[function(require,module,exports){
'use strict';

// combine 2 matrixes
// m1, m2 - [a, b, c, d, e, g]
//
function combine(m1, m2) {
  return [
    m1[0] * m2[0] + m1[2] * m2[1],
    m1[1] * m2[0] + m1[3] * m2[1],
    m1[0] * m2[2] + m1[2] * m2[3],
    m1[1] * m2[2] + m1[3] * m2[3],
    m1[0] * m2[4] + m1[2] * m2[5] + m1[4],
    m1[1] * m2[4] + m1[3] * m2[5] + m1[5]
  ];
}


function Matrix() {
  if (!(this instanceof Matrix)) { return new Matrix(); }
  this.queue = [];   // list of matrixes to apply
  this.cache = null; // combined matrix cache
}


Matrix.prototype.matrix = function (m) {
  if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0) {
    return this;
  }
  this.cache = null;
  this.queue.push(m);
  return this;
};


Matrix.prototype.translate = function (tx, ty) {
  if (tx !== 0 || ty !== 0) {
    this.cache = null;
    this.queue.push([ 1, 0, 0, 1, tx, ty ]);
  }
  return this;
};


Matrix.prototype.scale = function (sx, sy) {
  if (sx !== 1 || sy !== 1) {
    this.cache = null;
    this.queue.push([ sx, 0, 0, sy, 0, 0 ]);
  }
  return this;
};


Matrix.prototype.rotate = function (angle, rx, ry) {
  var rad, cos, sin;

  if (angle !== 0) {
    this.translate(rx, ry);

    rad = angle * Math.PI / 180;
    cos = Math.cos(rad);
    sin = Math.sin(rad);

    this.queue.push([ cos, sin, -sin, cos, 0, 0 ]);
    this.cache = null;

    this.translate(-rx, -ry);
  }
  return this;
};


Matrix.prototype.skewX = function (angle) {
  if (angle !== 0) {
    this.cache = null;
    this.queue.push([ 1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0 ]);
  }
  return this;
};


Matrix.prototype.skewY = function (angle) {
  if (angle !== 0) {
    this.cache = null;
    this.queue.push([ 1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0 ]);
  }
  return this;
};


// Flatten queue
//
Matrix.prototype.toArray = function () {
  if (this.cache) {
    return this.cache;
  }

  if (!this.queue.length) {
    this.cache = [ 1, 0, 0, 1, 0, 0 ];
    return this.cache;
  }

  this.cache = this.queue[0];

  if (this.queue.length === 1) {
    return this.cache;
  }

  for (var i = 1; i < this.queue.length; i++) {
    this.cache = combine(this.cache, this.queue[i]);
  }

  return this.cache;
};


// Apply list of matrixes to (x,y) point.
// If `isRelative` set, `translate` component of matrix will be skipped
//
Matrix.prototype.calc = function (x, y, isRelative) {
  var m, i, len;

  // Don't change point on empty transforms queue
  if (!this.queue.length) { return [ x, y ]; }

  // Calculate final matrix, if not exists
  //
  // NB. if you deside to apply transforms to point one-by-one,
  // they should be taken in reverse order

  if (!this.cache) {
    this.cache = this.toArray();
  }

  m = this.cache;

  // Apply matrix to point
  return [
    x * m[0] + y * m[2] + (isRelative ? 0 : m[4]),
    x * m[1] + y * m[3] + (isRelative ? 0 : m[5])
  ];
};


module.exports = Matrix;

},{}],245:[function(require,module,exports){
'use strict';


var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0 };

var SPECIAL_SPACES = [
  0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006,
  0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF
];

function isSpace(ch) {
  return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029) || // Line terminators
    // White spaces
    (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
    (ch >= 0x1680 && SPECIAL_SPACES.indexOf(ch) >= 0);
}

function isCommand(code) {
  /*eslint-disable no-bitwise*/
  switch (code | 0x20) {
    case 0x6D/* m */:
    case 0x7A/* z */:
    case 0x6C/* l */:
    case 0x68/* h */:
    case 0x76/* v */:
    case 0x63/* c */:
    case 0x73/* s */:
    case 0x71/* q */:
    case 0x74/* t */:
    case 0x61/* a */:
    case 0x72/* r */:
      return true;
  }
  return false;
}

function isDigit(code) {
  return (code >= 48 && code <= 57);   // 0..9
}


function State(path) {
  this.index  = 0;
  this.path   = path;
  this.max    = path.length;
  this.result = [];
  this.param  = 0.0;
  this.err    = '';
  this.segmentStart = 0;
  this.data   = [];
}

function skipSpaces(state) {
  while (state.index < state.max && isSpace(state.path.charCodeAt(state.index))) {
    state.index++;
  }
}


function scanParam(state) {
  var start = state.index,
      index = start,
      max = state.max,
      zeroFirst = false,
      ch;

  ch = state.path.charCodeAt(index);

  if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
    index++;
    ch = (index < max) ? state.path.charCodeAt(index) : 0;
  }

  // This logic is shamelessly borrowed from Esprima
  // https://github.com/ariya/esprimas
  //
  if (!isDigit(ch) && ch !== 0x2E/* . */) {
    state.err = 'SvgPath: param should start with 0..9 or `.` (at pos ' + index + ')';
    return;
  }

  if (ch !== 0x2E/* . */) {
    zeroFirst = (ch === 0x30/* 0 */);
    index++;

    ch = (index < max) ? state.path.charCodeAt(index) : 0;

    if (zeroFirst && index < max) {
      // decimal number starts with '0' such as '09' is illegal.
      if (ch && isDigit(ch)) {
        state.err = 'SvgPath: numbers started with `0` such as `09` are ilegal (at pos ' + start + ')';
        return;
      }
    }

    while (index < max && isDigit(state.path.charCodeAt(index))) {
      index++;
    }
    ch = (index < max) ? state.path.charCodeAt(index) : 0;
  }

  if (ch === 0x2E/* . */) {
    index++;
    while (isDigit(state.path.charCodeAt(index))) {
      index++;
    }
    ch = (index < max) ? state.path.charCodeAt(index) : 0;
  }

  if (ch === 0x65/* e */ || ch === 0x45/* E */) {
    index++;

    ch = (index < max) ? state.path.charCodeAt(index) : 0;
    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
      index++;
    }
    if (index < max && isDigit(state.path.charCodeAt(index))) {
      while (index < max && isDigit(state.path.charCodeAt(index))) {
        index++;
      }
    } else {
      state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';
      return;
    }
  }

  state.index = index;
  state.param = parseFloat(state.path.slice(start, index)) + 0.0;
}


function finalizeSegment(state) {
  var cmd, cmdLC;

  // Process duplicated commands (without comand name)

  // This logic is shamelessly borrowed from Raphael
  // https://github.com/DmitryBaranovskiy/raphael/
  //
  cmd   = state.path[state.segmentStart];
  cmdLC = cmd.toLowerCase();

  var params = state.data;

  if (cmdLC === 'm' && params.length > 2) {
    state.result.push([ cmd, params[0], params[1] ]);
    params = params.slice(2);
    cmdLC = 'l';
    cmd = (cmd === 'm') ? 'l' : 'L';
  }

  if (cmdLC === 'r') {
    state.result.push([ cmd ].concat(params));
  } else {

    while (params.length >= paramCounts[cmdLC]) {
      state.result.push([ cmd ].concat(params.splice(0, paramCounts[cmdLC])));
      if (!paramCounts[cmdLC]) {
        break;
      }
    }
  }
}


function scanSegment(state) {
  var max = state.max, cmdCode, comma_found;

  state.segmentStart = state.index;
  cmdCode = state.path.charCodeAt(state.index);

  if (!isCommand(cmdCode)) {
    state.err = 'SvgPath: bad command ' + state.path[state.index] + ' (at pos ' + state.index + ')';
    return;
  }

  state.index++;
  skipSpaces(state);

  state.data = [];

  comma_found = false;

  while (state.index < max || comma_found) {
    // Stop on next segment (but after comma next param is mandatory)
    if (!comma_found) {
      if (isCommand(state.path.charCodeAt(state.index))) { break; }
    }

    scanParam(state);
    if (state.err.length) { return; }
    state.data.push(state.param);

    skipSpaces(state);
    comma_found = false;

    // after ',' command is mandatory
    if (state.index < max && state.path.charCodeAt(state.index) === 0x2C/* , */) {
      state.index++;
      skipSpaces(state);
      comma_found = true;
    }
  }

  finalizeSegment(state);
}


/* Returns array of segments:
 *
 * [
 *   [ command, coord1, coord2, ... ]
 * ]
 */
module.exports = function pathParse(svgPath) {
  var state = new State(svgPath);
  var max = state.max;

  skipSpaces(state);

  while (state.index < max && !state.err.length) {
    scanSegment(state);
  }

  if (state.err.length) {
    state.result = [];

  } else if (state.result.length) {

    if ('mM'.indexOf(state.result[0][0]) < 0) {
      state.err = 'SvgPath: string should start with `M` or `m`';
      state.result = [];
    } else {
      state.result[0][0] = 'M';
    }
  }

  return {
    err: state.err,
    segments: state.result
  };
};

},{}],246:[function(require,module,exports){
// SVG Path transformations library
//
// Usage:
//
//    SvgPath('...')
//      .translate(-150, -100)
//      .scale(0.5)
//      .translate(-150, -100)
//      .toFixed(1)
//      .toString()
//

'use strict';


var pathParse      = require('./path_parse');
var transformParse = require('./transform_parse');
var matrix         = require('./matrix');
var a2c            = require('./a2c');


// Class constructor
//
function SvgPath(path) {
  if (!(this instanceof SvgPath)) { return new SvgPath(path); }

  var pstate = pathParse(path);

  // Array of path segments.
  // Each segment is array [command, param1, param2, ...]
  this.segments = pstate.segments;

  // Error message on parse error.
  this.err      = pstate.err;

  // Transforms stack for lazy evaluation
  this.__stack    = [];
}


SvgPath.prototype.__matrix = function (m) {
  var self = this,
      ma, sx, sy, angle, arc2line;

  // Quick leave for empty matrix
  if (!m.queue.length) { return; }

  this.iterate(function (s, index, x, y) {
    var p, result, name, isRelative;

    switch (s[0]) {

      // Process 'assymetric' commands separately
      case 'v':
        p      = m.calc(0, s[1], true);
        result = (p[0] === 0) ? [ 'v', p[1] ] : [ 'l', p[0], p[1] ];
        break;

      case 'V':
        p      = m.calc(x, s[1], false);
        result = (p[0] === m.calc(x, y, false)[0]) ? [ 'V', p[1] ] : [ 'L', p[0], p[1] ];
        break;

      case 'h':
        p      = m.calc(s[1], 0, true);
        result = (p[1] === 0) ? [ 'h', p[0] ] : [ 'l', p[0], p[1] ];
        break;

      case 'H':
        p      = m.calc(s[1], y, false);
        result = (p[1] === m.calc(x, y, false)[1]) ? [ 'H', p[0] ] : [ 'L', p[0], p[1] ];
        break;

      case 'a':
      case 'A':
        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]

        // Drop segment if arc is empty (end point === start point)
        if ((s[0] === 'A' && s[6] === x && s[7] === y) ||
            (s[0] === 'a' && s[6] === 0 && s[7] === 0)) {
          return [];
        }

        // Decompose affine matrix and apply components to arc params
        // http://math.stackexchange.com/questions/78137/decomposition-of-a-nonsquare-affine-matrix

        // Fill cache if empty
        if (!ma) {
          ma = m.toArray();

          sx = Math.sqrt(Math.pow(ma[0], 2) + Math.pow(ma[2], 2));
          arc2line = true;

          if (sx !== 0) {
            sy = (ma[0] * ma[3] - ma[1] * ma[2]) / sx;
            if (sy !== 0) {
              if (ma[0] === 0) {
                angle = ma[1] < 0 ? -90 : 90;
              } else {
                angle = Math.atan(ma[1] / ma[0]) * 180 / Math.PI;
              }
              arc2line = false;
            }
          }
        }

        // If scaleX / scaleY / rx / ry === 0 - replace arc with line
        if (arc2line || s[1] === 0 || s[2] === 0) {
          p = m.calc(s[6], s[7], s[0] === 'a');
          result = [ (s[0] === 'a') ? 'l' : 'L', p[0], p[1] ];
          break;
        }

        result = s.slice();

        // Apply scale to rx & ry only
        result[1] = s[1] * sx;
        result[2] = s[2] * sy;

        // Apply rotation angle to x-axis-rotation & normalize result
        result[3] = (s[3] + angle) % 360;

        // Transform end point as usual (without translation for relative notation)
        p = m.calc(s[6], s[7], s[0] === 'a');
        result[6] = p[0];
        result[7] = p[1];
        break;

      default:
        name       = s[0];
        result     = [ name ];
        isRelative = (name.toLowerCase() === name);

        // Apply transformations to the segment
        for (var i = 1; i < s.length; i += 2) {
          p = m.calc(s[i], s[i + 1], isRelative);
          result.push(p[0], p[1]);
        }
    }

    self.segments[index] = result;
  }, true);
};


// Apply stacked commands
//
SvgPath.prototype.__evaluateStack = function () {
  var m, i;

  if (!this.__stack.length) { return; }

  if (this.__stack.length === 1) {
    this.__matrix(this.__stack[0]);
    this.__stack = [];
    return;
  }

  m = matrix();
  i = this.__stack.length;

  while (--i >= 0) {
    m.matrix(this.__stack[i].toArray());
  }

  this.__matrix(m);
  this.__stack = [];
};


// Convert processed SVG Path back to string
//
SvgPath.prototype.toString = function () {
  var elements = [], skipCmd;

  this.__evaluateStack();

  for (var i = 0; i < this.segments.length; i++) {
    // remove repeating commands names
    skipCmd = i > 0 && (this.segments[i][0] === this.segments[i - 1][0]);
    elements = elements.concat(skipCmd ? this.segments[i].slice(1) : this.segments[i]);
  }

  return elements.join(' ')
            // Optimizations: remove spaces around commands & before `-`
            //
            // We could also remove leading zeros for `0.5`-like values,
            // but their count is too small to spend time for.
            .replace(/ ?([achlmqrstvz]) ?/gi, '$1')
            .replace(/ \-/g, '-')
            // workaround for FontForge SVG importing bug
            .replace(/zm/g, 'z m');
};


// Translate path to (x [, y])
//
SvgPath.prototype.translate = function (x, y) {
  this.__stack.push(matrix().translate(x, y || 0));
  return this;
};


// Scale path to (sx [, sy])
// sy = sx if not defined
//
SvgPath.prototype.scale = function (sx, sy) {
  this.__stack.push(matrix().scale(sx, (!sy && (sy !== 0)) ? sx : sy));
  return this;
};


// Rotate path around point (sx [, sy])
// sy = sx if not defined
//
SvgPath.prototype.rotate = function (angle, rx, ry) {
  this.__stack.push(matrix().rotate(angle, rx || 0, ry || 0));
  return this;
};


// Apply matrix transform (array of 6 elements)
//
SvgPath.prototype.matrix = function (m) {
  this.__stack.push(matrix().matrix(m));
  return this;
};


// Transform path according to "transform" attr of SVG spec
//
SvgPath.prototype.transform = function (transformString) {
  if (!transformString.trim()) {
    return this;
  }
  this.__stack.push(transformParse(transformString));
  return this;
};


// Round coords with given decimal precition.
// 0 by default (to integers)
//
SvgPath.prototype.round = function (d) {
  var contourStartDeltaX = 0, contourStartDeltaY = 0, deltaX = 0, deltaY = 0, l;

  d = d || 0;

  this.__evaluateStack();

  this.segments.forEach(function (s) {
    var isRelative = (s[0].toLowerCase() === s[0]), t;

    switch (s[0]) {
      case 'H':
      case 'h':
        if (isRelative) { s[1] += deltaX; }
        deltaX = s[1] - s[1].toFixed(d);
        s[1] = +s[1].toFixed(d);
        return;

      case 'V':
      case 'v':
        if (isRelative) { s[1] += deltaY; }
        deltaY = s[1] - s[1].toFixed(d);
        s[1] = +s[1].toFixed(d);
        return;

      case 'Z':
      case 'z':
        contourStartDeltaX = deltaX;
        contourStartDeltaY = deltaY;
        return;

      case 'M':
      case 'm':
        if (isRelative) {
          s[1] += deltaX;
          s[2] += deltaY;
        }

        deltaX = s[1] - s[1].toFixed(d);
        deltaY = s[2] - s[2].toFixed(d);

        contourStartDeltaX = deltaX;
        contourStartDeltaY = deltaY;

        s[1] = +s[1].toFixed(d);
        s[2] = +s[2].toFixed(d);
        return;

      case 'A':
      case 'a':
        // [cmd, rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]
        if (isRelative) {
          s[6] += deltaX;
          s[7] += deltaY;
        }

        deltaX = s[6] - s[6].toFixed(d);
        deltaY = s[7] - s[7].toFixed(d);

        s[1] = +s[1].toFixed(d);
        s[2] = +s[2].toFixed(d);
        s[3] = +s[3].toFixed(d + 2); // better precision for rotation
        s[6] = +s[6].toFixed(d);
        s[7] = +s[7].toFixed(d);
        return;

      default:
        // a c l q s t
        l = s.length;

        if (isRelative) {
          s[l - 2] += deltaX;
          s[l - 1] += deltaY;
        }

        deltaX = s[l - 2] - s[l - 2].toFixed(d);
        deltaY = s[l - 1] - s[l - 1].toFixed(d);

        s.forEach(function (val, i) {
          if (!i) { return; }
          s[i] = +s[i].toFixed(d);
        });
        return;
    }
  });

  return this;
};


// Apply iterator function to all segments. If function returns result,
// current segment will be replaced to array of returned segments.
// If empty array is returned, current regment will be deleted.
//
SvgPath.prototype.iterate = function (iterator, keepLazyStack) {
  var segments = this.segments,
      replacements = {},
      needReplace = false,
      lastX = 0,
      lastY = 0,
      countourStartX = 0,
      countourStartY = 0;
  var i, j, isRelative, newSegments;

  if (!keepLazyStack) {
    this.__evaluateStack();
  }

  segments.forEach(function (s, index) {

    var res = iterator(s, index, lastX, lastY);

    if (Array.isArray(res)) {
      replacements[index] = res;
      needReplace = true;
    }

    var isRelative = (s[0] === s[0].toLowerCase());

    // calculate absolute X and Y
    switch (s[0]) {
      case 'm':
      case 'M':
        lastX = s[1] + (isRelative ? lastX : 0);
        lastY = s[2] + (isRelative ? lastY : 0);
        countourStartX = lastX;
        countourStartY = lastY;
        return;

      case 'h':
      case 'H':
        lastX = s[1] + (isRelative ? lastX : 0);
        return;

      case 'v':
      case 'V':
        lastY = s[1] + (isRelative ? lastY : 0);
        return;

      case 'z':
      case 'Z':
        // That make sence for multiple contours
        lastX = countourStartX;
        lastY = countourStartY;
        return;

      default:
        lastX = s[s.length - 2] + (isRelative ? lastX : 0);
        lastY = s[s.length - 1] + (isRelative ? lastY : 0);
    }
  });

  // Replace segments if iterator return results

  if (!needReplace) { return this; }

  newSegments = [];

  for (i = 0; i < segments.length; i++) {
    if (typeof replacements[i] !== 'undefined') {
      for (j = 0; j < replacements[i].length; j++) {
        newSegments.push(replacements[i][j]);
      }
    } else {
      newSegments.push(segments[i]);
    }
  }

  this.segments = newSegments;

  return this;
};


// Converts segments from relative to absolute
//
SvgPath.prototype.abs = function () {

  this.iterate(function (s, index, x, y) {
    var name = s[0],
        nameUC = name.toUpperCase(),
        i;

    // Skip absolute commands
    if (name === nameUC) { return; }

    s[0] = nameUC;

    switch (name) {
      case 'v':
        // v has shifted coords parity
        s[1] += y;
        return;

      case 'a':
        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]
        // touch x, y only
        s[6] += x;
        s[7] += y;
        return;

      default:
        for (i = 1; i < s.length; i++) {
          s[i] += i % 2 ? x : y; // odd values are X, even - Y
        }
    }
  }, true);

  return this;
};


// Converts segments from absolute to relative
//
SvgPath.prototype.rel = function () {

  this.iterate(function (s, index, x, y) {
    var name = s[0],
        nameLC = name.toLowerCase(),
        i;

    // Skip relative commands
    if (name === nameLC) { return; }

    s[0] = nameLC;

    switch (name) {
      case 'V':
        // V has shifted coords parity
        s[1] -= y;
        return;

      case 'A':
        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]
        // touch x, y only
        s[6] -= x;
        s[7] -= y;
        return;

      default:
        for (i = 1; i < s.length; i++) {
          s[i] -= i % 2 ? x : y; // odd values are X, even - Y
        }
    }
  }, true);

  return this;
};


// Converts arcs to cubic bézier curves
//
SvgPath.prototype.unarc = function () {
  this.iterate(function (s, index, x, y) {
    var i, new_segments, nextX, nextY, result = [], name = s[0];

    // Skip anything except arcs
    if (name !== 'A' && name !== 'a') { return null; }

    if (name === 'a') {
      // convert relative arc coordinates to absolute
      nextX = x + s[6];
      nextY = y + s[7];
    } else {
      nextX = s[6];
      nextY = s[7];
    }

    new_segments = a2c(x, y, nextX, nextY, s[4], s[5], s[1], s[2], s[3]);

    new_segments.forEach(function (s) {
      result.push([ 'C', s[2], s[3], s[4], s[5], s[6], s[7] ]);
    });

    return result;
  });

  return this;
};


// Converts smooth curves (with missed control point) to generic curves
//
SvgPath.prototype.unshort = function () {
  var segments = this.segments;
  var prevControlX, prevControlY, prevSegment;
  var curControlX, curControlY;

  // TODO: add lazy evaluation flag when relative commands supported

  this.iterate(function (s, idx, x, y) {
    var name = s[0], nameUC = name.toUpperCase(), isRelative;

    // First command MUST be M|m, it's safe to skip.
    // Protect from access to [-1] for sure.
    if (!idx) { return; }

    if (nameUC === 'T') { // quadratic curve
      isRelative = (name === 't');

      prevSegment = segments[idx - 1];

      if (prevSegment[0] === 'Q') {
        prevControlX = prevSegment[1] - x;
        prevControlY = prevSegment[2] - y;
      } else if (prevSegment[0] === 'q') {
        prevControlX = prevSegment[1] - prevSegment[3];
        prevControlY = prevSegment[2] - prevSegment[4];
      } else {
        prevControlX = 0;
        prevControlY = 0;
      }

      curControlX = -prevControlX;
      curControlY = -prevControlY;

      if (!isRelative) {
        curControlX += x;
        curControlY += y;
      }

      segments[idx] = [
        isRelative ? 'q' : 'Q',
        curControlX, curControlY,
        s[1], s[2]
      ];

    } else if (nameUC === 'S') { // cubic curve
      isRelative = (name === 's');

      prevSegment = segments[idx - 1];

      if (prevSegment[0] === 'C') {
        prevControlX = prevSegment[3] - x;
        prevControlY = prevSegment[4] - y;
      } else if (prevSegment[0] === 'c') {
        prevControlX = prevSegment[3] - prevSegment[5];
        prevControlY = prevSegment[4] - prevSegment[6];
      } else {
        prevControlX = 0;
        prevControlY = 0;
      }

      curControlX = -prevControlX;
      curControlY = -prevControlY;

      if (!isRelative) {
        curControlX += x;
        curControlY += y;
      }

      segments[idx] = [
        isRelative ? 'c' : 'C',
        curControlX, curControlY,
        s[1], s[2], s[3], s[4]
      ];
    }
  });

  return this;
};


module.exports = SvgPath;

},{"./a2c":243,"./matrix":244,"./path_parse":245,"./transform_parse":247}],247:[function(require,module,exports){
'use strict';


var Matrix = require('./matrix');

var operations = {
  matrix: true,
  scale: true,
  rotate: true,
  translate: true,
  skewX: true,
  skewY: true
};

var CMD_SPLIT_RE    = /\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*(.+?)\s*\)[\s,]*/;
var PARAMS_SPLIT_RE = /[\s,]+/;


module.exports = function transformParse(transformString) {
  var matrix = new Matrix();
  var cmd, params;

  // Split value into ['', 'translate', '10 50', '', 'scale', '2', '', 'rotate',  '-45', '']
  transformString.split(CMD_SPLIT_RE).forEach(function (item) {

    // Skip empty elements
    if (!item.length) { return; }

    // remember operation
    if (typeof operations[item] !== 'undefined') {
      cmd = item;
      return;
    }

    // extract params & att operation to matrix
    params = item.split(PARAMS_SPLIT_RE).map(function (i) {
      return +i || 0;
    });

    // If params count is not correct - ignore command
    switch (cmd) {
      case 'matrix':
        if (params.length === 6) {
          matrix.matrix(params);
        }
        return;

      case 'scale':
        if (params.length === 1) {
          matrix.scale(params[0], params[0]);
        } else if (params.length === 2) {
          matrix.scale(params[0], params[1]);
        }
        return;

      case 'rotate':
        if (params.length === 1) {
          matrix.rotate(params[0], 0, 0);
        } else if (params.length === 3) {
          matrix.rotate(params[0], params[1], params[2]);
        }
        return;

      case 'translate':
        if (params.length === 1) {
          matrix.translate(params[0], 0);
        } else if (params.length === 2) {
          matrix.translate(params[0], params[1]);
        }
        return;

      case 'skewX':
        if (params.length === 1) {
          matrix.skewX(params[0]);
        }
        return;

      case 'skewY':
        if (params.length === 1) {
          matrix.skewY(params[0]);
        }
        return;
    }
  });

  return matrix;
};

},{"./matrix":244}],248:[function(require,module,exports){
function DOMParser(options){
	this.options = options ||{locator:{}};
	
}
DOMParser.prototype.parseFromString = function(source,mimeType){	
	var options = this.options;
	var sax =  new XMLReader();
	var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
	var errorHandler = options.errorHandler;
	var locator = options.locator;
	var defaultNSMap = options.xmlns||{};
	var entityMap = {'lt':'<','gt':'>','amp':'&','quot':'"','apos':"'"}
	if(locator){
		domBuilder.setDocumentLocator(locator)
	}
	
	sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
	sax.domBuilder = options.domBuilder || domBuilder;
	if(/\/x?html?$/.test(mimeType)){
		entityMap.nbsp = '\xa0';
		entityMap.copy = '\xa9';
		defaultNSMap['']= 'http://www.w3.org/1999/xhtml';
	}
	if(source){
		sax.parse(source,defaultNSMap,entityMap);
	}else{
		sax.errorHandler.error("invalid document source");
	}
	return domBuilder.document;
}
function buildErrorHandler(errorImpl,domBuilder,locator){
	if(!errorImpl){
		if(domBuilder instanceof DOMHandler){
			return domBuilder;
		}
		errorImpl = domBuilder ;
	}
	var errorHandler = {}
	var isCallback = errorImpl instanceof Function;
	locator = locator||{}
	function build(key){
		var fn = errorImpl[key];
		if(!fn){
			if(isCallback){
				fn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;
			}else{
				var i=arguments.length;
				while(--i){
					if(fn = errorImpl[arguments[i]]){
						break;
					}
				}
			}
		}
		errorHandler[key] = fn && function(msg){
			fn(msg+_locator(locator));
		}||function(){};
	}
	build('warning','warn');
	build('error','warn','warning');
	build('fatalError','warn','warning','error');
	return errorHandler;
}
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler 
 * 
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */
function DOMHandler() {
    this.cdata = false;
}
function position(locator,node){
	node.lineNumber = locator.lineNumber;
	node.columnNumber = locator.columnNumber;
}
/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */ 
DOMHandler.prototype = {
	startDocument : function() {
    	this.document = new DOMImplementation().createDocument(null, null, null);
    	if (this.locator) {
        	this.document.documentURI = this.locator.systemId;
    	}
	},
	startElement:function(namespaceURI, localName, qName, attrs) {
		var doc = this.document;
	    var el = doc.createElementNS(namespaceURI, qName||localName);
	    var len = attrs.length;
	    appendElement(this, el);
	    this.currentElement = el;
	    
		this.locator && position(this.locator,el)
	    for (var i = 0 ; i < len; i++) {
	        var namespaceURI = attrs.getURI(i);
	        var value = attrs.getValue(i);
	        var qName = attrs.getQName(i);
			var attr = doc.createAttributeNS(namespaceURI, qName);
			if( attr.getOffset){
				position(attr.getOffset(1),attr)
			}
			attr.value = attr.nodeValue = value;
			el.setAttributeNode(attr)
	    }
	},
	endElement:function(namespaceURI, localName, qName) {
		var current = this.currentElement
	    var tagName = current.tagName;
	    this.currentElement = current.parentNode;
	},
	startPrefixMapping:function(prefix, uri) {
	},
	endPrefixMapping:function(prefix) {
	},
	processingInstruction:function(target, data) {
	    var ins = this.document.createProcessingInstruction(target, data);
	    this.locator && position(this.locator,ins)
	    appendElement(this, ins);
	},
	ignorableWhitespace:function(ch, start, length) {
	},
	characters:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
		//console.log(chars)
		if(this.currentElement && chars){
			if (this.cdata) {
				var charNode = this.document.createCDATASection(chars);
				this.currentElement.appendChild(charNode);
			} else {
				var charNode = this.document.createTextNode(chars);
				this.currentElement.appendChild(charNode);
			}
			this.locator && position(this.locator,charNode)
		}
	},
	skippedEntity:function(name) {
	},
	endDocument:function() {
		this.document.normalize();
	},
	setDocumentLocator:function (locator) {
	    if(this.locator = locator){// && !('lineNumber' in locator)){
	    	locator.lineNumber = 0;
	    }
	},
	//LexicalHandler
	comment:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
	    var comm = this.document.createComment(chars);
	    this.locator && position(this.locator,comm)
	    appendElement(this, comm);
	},
	
	startCDATA:function() {
	    //used in characters() methods
	    this.cdata = true;
	},
	endCDATA:function() {
	    this.cdata = false;
	},
	
	startDTD:function(name, publicId, systemId) {
		var impl = this.document.implementation;
	    if (impl && impl.createDocumentType) {
	        var dt = impl.createDocumentType(name, publicId, systemId);
	        this.locator && position(this.locator,dt)
	        appendElement(this, dt);
	    }
	},
	/**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */
	warning:function(error) {
		console.warn(error,_locator(this.locator));
	},
	error:function(error) {
		console.error(error,_locator(this.locator));
	},
	fatalError:function(error) {
		console.error(error,_locator(this.locator));
	    throw error;
	}
}
function _locator(l){
	if(l){
		return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
	}
}
function _toString(chars,start,length){
	if(typeof chars == 'string'){
		return chars.substr(start,length)
	}else{//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
		if(chars.length >= start+length || start){
			return new java.lang.String(chars,start,length)+'';
		}
		return chars;
	}
}

/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */
"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
	DOMHandler.prototype[key] = function(){return null}
})

/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
function appendElement (hander,node) {
    if (!hander.currentElement) {
        hander.document.appendChild(node);
    } else {
        hander.currentElement.appendChild(node);
    }
}//appendChild and setAttributeNS are preformance key

if(typeof require == 'function'){
	var XMLReader = require('./sax').XMLReader;
	var DOMImplementation = exports.DOMImplementation = require('./dom').DOMImplementation;
	exports.XMLSerializer = require('./dom').XMLSerializer ;
	exports.DOMParser = DOMParser;
}

},{"./dom":249,"./sax":250}],249:[function(require,module,exports){
/*
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 */

function copy(src,dest){
	for(var p in src){
		dest[p] = src[p];
	}
}
/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */
function _extends(Class,Super){
	var pt = Class.prototype;
	if(Object.create){
		var ppt = Object.create(Super.prototype)
		pt.__proto__ = ppt;
	}
	if(!(pt instanceof Super)){
		function t(){};
		t.prototype = Super.prototype;
		t = new t();
		copy(pt,t);
		Class.prototype = pt = t;
	}
	if(pt.constructor != Class){
		if(typeof Class != 'function'){
			console.error("unknow Class:"+Class)
		}
		pt.constructor = Class
	}
}
var htmlns = 'http://www.w3.org/1999/xhtml' ;
// Node Types
var NodeType = {}
var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

// ExceptionCode
var ExceptionCode = {}
var ExceptionMessage = {};
var INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
var DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
var WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
var INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
var NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
var NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
//level2
var INVALID_STATE_ERR        	= ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
var SYNTAX_ERR               	= ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
var INVALID_MODIFICATION_ERR 	= ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
var NAMESPACE_ERR            	= ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
var INVALID_ACCESS_ERR       	= ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);


function DOMException(code, message) {
	if(message instanceof Error){
		var error = message;
	}else{
		error = this;
		Error.call(this, ExceptionMessage[code]);
		this.message = ExceptionMessage[code];
		if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
	}
	error.code = code;
	if(message) this.message = this.message + ": " + message;
	return error;
};
DOMException.prototype = Error.prototype;
copy(ExceptionCode,DOMException)
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */
function NodeList() {
};
NodeList.prototype = {
	/**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */
	length:0, 
	/**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long 
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
	 */
	item: function(index) {
		return this[index] || null;
	}
};
function LiveNodeList(node,refresh){
	this._node = node;
	this._refresh = refresh
	_updateLiveList(this);
}
function _updateLiveList(list){
	var inc = list._node._inc || list._node.ownerDocument._inc;
	if(list._inc != inc){
		var ls = list._refresh(list._node);
		//console.log(ls.length)
		__set__(list,'length',ls.length);
		copy(ls,list);
		list._inc = inc;
	}
}
LiveNodeList.prototype.item = function(i){
	_updateLiveList(this);
	return this[i];
}

_extends(LiveNodeList,NodeList);
/**
 * 
 * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities 
 */
function NamedNodeMap() {
};

function _findNodeIndex(list,node){
	var i = list.length;
	while(i--){
		if(list[i] === node){return i}
	}
}

function _addNamedNode(el,list,newAttr,oldAttr){
	if(oldAttr){
		list[_findNodeIndex(list,oldAttr)] = newAttr;
	}else{
		list[list.length++] = newAttr;
	}
	if(el){
		newAttr.ownerElement = el;
		var doc = el.ownerDocument;
		if(doc){
			oldAttr && _onRemoveAttribute(doc,el,oldAttr);
			_onAddAttribute(doc,el,newAttr);
		}
	}
}
function _removeNamedNode(el,list,attr){
	var i = _findNodeIndex(list,attr);
	if(i>=0){
		var lastIndex = list.length-1
		while(i<lastIndex){
			list[i] = list[++i]
		}
		list.length = lastIndex;
		if(el){
			var doc = el.ownerDocument;
			if(doc){
				_onRemoveAttribute(doc,el,attr);
				attr.ownerElement = null;
			}
		}
	}else{
		throw DOMException(NOT_FOUND_ERR,new Error())
	}
}
NamedNodeMap.prototype = {
	length:0,
	item:NodeList.prototype.item,
	getNamedItem: function(key) {
//		if(key.indexOf(':')>0 || key == 'xmlns'){
//			return null;
//		}
		var i = this.length;
		while(i--){
			var attr = this[i];
			if(attr.nodeName == key){
				return attr;
			}
		}
	},
	setNamedItem: function(attr) {
		var el = attr.ownerElement;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		var oldAttr = this.getNamedItem(attr.nodeName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},
	/* returns Node */
	setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
		var el = attr.ownerElement, oldAttr;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},

	/* returns Node */
	removeNamedItem: function(key) {
		var attr = this.getNamedItem(key);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
		
		
	},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
	
	//for level2
	removeNamedItemNS:function(namespaceURI,localName){
		var attr = this.getNamedItemNS(namespaceURI,localName);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
	},
	getNamedItemNS: function(namespaceURI, localName) {
		var i = this.length;
		while(i--){
			var node = this[i];
			if(node.localName == localName && node.namespaceURI == namespaceURI){
				return node;
			}
		}
		return null;
	}
};
/**
 * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
 */
function DOMImplementation(/* Object */ features) {
	this._features = {};
	if (features) {
		for (var feature in features) {
			 this._features = features[feature];
		}
	}
};

DOMImplementation.prototype = {
	hasFeature: function(/* string */ feature, /* string */ version) {
		var versions = this._features[feature.toLowerCase()];
		if (versions && (!version || version in versions)) {
			return true;
		} else {
			return false;
		}
	},
	// Introduced in DOM Level 2:
	createDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR
		var doc = new Document();
		doc.doctype = doctype;
		if(doctype){
			doc.appendChild(doctype);
		}
		doc.implementation = this;
		doc.childNodes = new NodeList();
		if(qualifiedName){
			var root = doc.createElementNS(namespaceURI,qualifiedName);
			doc.appendChild(root);
		}
		return doc;
	},
	// Introduced in DOM Level 2:
	createDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR
		var node = new DocumentType();
		node.name = qualifiedName;
		node.nodeName = qualifiedName;
		node.publicId = publicId;
		node.systemId = systemId;
		// Introduced in DOM Level 2:
		//readonly attribute DOMString        internalSubset;
		
		//TODO:..
		//  readonly attribute NamedNodeMap     entities;
		//  readonly attribute NamedNodeMap     notations;
		return node;
	}
};


/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */

function Node() {
};

Node.prototype = {
	firstChild : null,
	lastChild : null,
	previousSibling : null,
	nextSibling : null,
	attributes : null,
	parentNode : null,
	childNodes : null,
	ownerDocument : null,
	nodeValue : null,
	namespaceURI : null,
	prefix : null,
	localName : null,
	// Modified in DOM Level 2:
	insertBefore:function(newChild, refChild){//raises 
		return _insertBefore(this,newChild,refChild);
	},
	replaceChild:function(newChild, oldChild){//raises 
		this.insertBefore(newChild,oldChild);
		if(oldChild){
			this.removeChild(oldChild);
		}
	},
	removeChild:function(oldChild){
		return _removeChild(this,oldChild);
	},
	appendChild:function(newChild){
		return this.insertBefore(newChild,null);
	},
	hasChildNodes:function(){
		return this.firstChild != null;
	},
	cloneNode:function(deep){
		return cloneNode(this.ownerDocument||this,this,deep);
	},
	// Modified in DOM Level 2:
	normalize:function(){
		var child = this.firstChild;
		while(child){
			var next = child.nextSibling;
			if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
				this.removeChild(next);
				child.appendData(next.data);
			}else{
				child.normalize();
				child = next;
			}
		}
	},
  	// Introduced in DOM Level 2:
	isSupported:function(feature, version){
		return this.ownerDocument.implementation.hasFeature(feature,version);
	},
    // Introduced in DOM Level 2:
    hasAttributes:function(){
    	return this.attributes.length>0;
    },
    lookupPrefix:function(namespaceURI){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			for(var n in map){
    				if(map[n] == namespaceURI){
    					return n;
    				}
    			}
    		}
    		el = el.nodeType == 2?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    lookupNamespaceURI:function(prefix){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			if(prefix in map){
    				return map[prefix] ;
    			}
    		}
    		el = el.nodeType == 2?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    isDefaultNamespace:function(namespaceURI){
    	var prefix = this.lookupPrefix(namespaceURI);
    	return prefix == null;
    }
};


function _xmlEncoder(c){
	return c == '<' && '&lt;' ||
         c == '>' && '&gt;' ||
         c == '&' && '&amp;' ||
         c == '"' && '&quot;' ||
         '&#'+c.charCodeAt()+';'
}


copy(NodeType,Node);
copy(NodeType,Node.prototype);

/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */
function _visitNode(node,callback){
	if(callback(node)){
		return true;
	}
	if(node = node.firstChild){
		do{
			if(_visitNode(node,callback)){return true}
        }while(node=node.nextSibling)
    }
}



function Document(){
}
function _onAddAttribute(doc,el,newAttr){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value
	}
}
function _onRemoveAttribute(doc,el,newAttr,remove){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		delete el._nsMap[newAttr.prefix?newAttr.localName:'']
	}
}
function _onUpdateChild(doc,el,newChild){
	if(doc && doc._inc){
		doc._inc++;
		//update childNodes
		var cs = el.childNodes;
		if(newChild){
			cs[cs.length++] = newChild;
		}else{
			//console.log(1)
			var child = el.firstChild;
			var i = 0;
			while(child){
				cs[i++] = child;
				child =child.nextSibling;
			}
			cs.length = i;
		}
	}
}

/**
 * attributes;
 * children;
 * 
 * writeable properties:
 * nodeValue,Attr:value,CharacterData:data
 * prefix
 */
function _removeChild(parentNode,child){
	var previous = child.previousSibling;
	var next = child.nextSibling;
	if(previous){
		previous.nextSibling = next;
	}else{
		parentNode.firstChild = next
	}
	if(next){
		next.previousSibling = previous;
	}else{
		parentNode.lastChild = previous;
	}
	_onUpdateChild(parentNode.ownerDocument,parentNode);
	return child;
}
/**
 * preformance key(refChild == null)
 */
function _insertBefore(parentNode,newChild,nextChild){
	var cp = newChild.parentNode;
	if(cp){
		cp.removeChild(newChild);//remove and update
	}
	if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
		var newFirst = newChild.firstChild;
		if (newFirst == null) {
			return newChild;
		}
		var newLast = newChild.lastChild;
	}else{
		newFirst = newLast = newChild;
	}
	var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;

	newFirst.previousSibling = pre;
	newLast.nextSibling = nextChild;
	
	
	if(pre){
		pre.nextSibling = newFirst;
	}else{
		parentNode.firstChild = newFirst;
	}
	if(nextChild == null){
		parentNode.lastChild = newLast;
	}else{
		nextChild.previousSibling = newLast;
	}
	do{
		newFirst.parentNode = parentNode;
	}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
	_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);
	//console.log(parentNode.lastChild.nextSibling == null)
	if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
		newChild.firstChild = newChild.lastChild = null;
	}
	return newChild;
}
function _appendSingleChild(parentNode,newChild){
	var cp = newChild.parentNode;
	if(cp){
		var pre = parentNode.lastChild;
		cp.removeChild(newChild);//remove and update
		var pre = parentNode.lastChild;
	}
	var pre = parentNode.lastChild;
	newChild.parentNode = parentNode;
	newChild.previousSibling = pre;
	newChild.nextSibling = null;
	if(pre){
		pre.nextSibling = newChild;
	}else{
		parentNode.firstChild = newChild;
	}
	parentNode.lastChild = newChild;
	_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);
	return newChild;
	//console.log("__aa",parentNode.lastChild.nextSibling == null)
}
Document.prototype = {
	//implementation : null,
	nodeName :  '#document',
	nodeType :  DOCUMENT_NODE,
	doctype :  null,
	documentElement :  null,
	_inc : 1,
	
	insertBefore :  function(newChild, refChild){//raises 
		if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
			var child = newChild.firstChild;
			while(child){
				var next = child.nextSibling;
				this.insertBefore(child,refChild);
				child = next;
			}
			return newChild;
		}
		if(this.documentElement == null && newChild.nodeType == 1){
			this.documentElement = newChild;
		}
		
		return _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;
	},
	removeChild :  function(oldChild){
		if(this.documentElement == oldChild){
			this.documentElement = null;
		}
		return _removeChild(this,oldChild);
	},
	// Introduced in DOM Level 2:
	importNode : function(importedNode,deep){
		return importNode(this,importedNode,deep);
	},
	// Introduced in DOM Level 2:
	getElementById :	function(id){
		var rtv = null;
		_visitNode(this.documentElement,function(node){
			if(node.nodeType == 1){
				if(node.getAttribute('id') == id){
					rtv = node;
					return true;
				}
			}
		})
		return rtv;
	},
	
	//document factory method:
	createElement :	function(tagName){
		var node = new Element();
		node.ownerDocument = this;
		node.nodeName = tagName;
		node.tagName = tagName;
		node.childNodes = new NodeList();
		var attrs	= node.attributes = new NamedNodeMap();
		attrs._ownerElement = node;
		return node;
	},
	createDocumentFragment :	function(){
		var node = new DocumentFragment();
		node.ownerDocument = this;
		node.childNodes = new NodeList();
		return node;
	},
	createTextNode :	function(data){
		var node = new Text();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createComment :	function(data){
		var node = new Comment();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createCDATASection :	function(data){
		var node = new CDATASection();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createProcessingInstruction :	function(target,data){
		var node = new ProcessingInstruction();
		node.ownerDocument = this;
		node.tagName = node.target = target;
		node.nodeValue= node.data = data;
		return node;
	},
	createAttribute :	function(name){
		var node = new Attr();
		node.ownerDocument	= this;
		node.name = name;
		node.nodeName	= name;
		node.localName = name;
		node.specified = true;
		return node;
	},
	createEntityReference :	function(name){
		var node = new EntityReference();
		node.ownerDocument	= this;
		node.nodeName	= name;
		return node;
	},
	// Introduced in DOM Level 2:
	createElementNS :	function(namespaceURI,qualifiedName){
		var node = new Element();
		var pl = qualifiedName.split(':');
		var attrs	= node.attributes = new NamedNodeMap();
		node.childNodes = new NodeList();
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.tagName = qualifiedName;
		node.namespaceURI = namespaceURI;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		attrs._ownerElement = node;
		return node;
	},
	// Introduced in DOM Level 2:
	createAttributeNS :	function(namespaceURI,qualifiedName){
		var node = new Attr();
		var pl = qualifiedName.split(':');
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.name = qualifiedName;
		node.namespaceURI = namespaceURI;
		node.specified = true;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		return node;
	}
};
_extends(Document,Node);


function Element() {
	this._nsMap = {};
};
Element.prototype = {
	nodeType : ELEMENT_NODE,
	hasAttribute : function(name){
		return this.getAttributeNode(name)!=null;
	},
	getAttribute : function(name){
		var attr = this.getAttributeNode(name);
		return attr && attr.value || '';
	},
	getAttributeNode : function(name){
		return this.attributes.getNamedItem(name);
	},
	setAttribute : function(name, value){
		var attr = this.ownerDocument.createAttribute(name);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	removeAttribute : function(name){
		var attr = this.getAttributeNode(name)
		attr && this.removeAttributeNode(attr);
	},
	
	//four real opeartion method
	appendChild:function(newChild){
		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
			return this.insertBefore(newChild,null);
		}else{
			return _appendSingleChild(this,newChild);
		}
	},
	setAttributeNode : function(newAttr){
		return this.attributes.setNamedItem(newAttr);
	},
	setAttributeNodeNS : function(newAttr){
		return this.attributes.setNamedItemNS(newAttr);
	},
	removeAttributeNode : function(oldAttr){
		return this.attributes.removeNamedItem(oldAttr.nodeName);
	},
	//get real attribute name,and remove it by removeAttributeNode
	removeAttributeNS : function(namespaceURI, localName){
		var old = this.getAttributeNodeNS(namespaceURI, localName);
		old && this.removeAttributeNode(old);
	},
	
	hasAttributeNS : function(namespaceURI, localName){
		return this.getAttributeNodeNS(namespaceURI, localName)!=null;
	},
	getAttributeNS : function(namespaceURI, localName){
		var attr = this.getAttributeNodeNS(namespaceURI, localName);
		return attr && attr.value || '';
	},
	setAttributeNS : function(namespaceURI, qualifiedName, value){
		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
		attr.value = attr.nodeValue = value;
		this.setAttributeNode(attr)
	},
	getAttributeNodeNS : function(namespaceURI, localName){
		return this.attributes.getNamedItemNS(namespaceURI, localName);
	},
	
	getElementsByTagName : function(tagName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
					ls.push(node);
				}
			});
			return ls;
		});
	},
	getElementsByTagNameNS : function(namespaceURI, localName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType === ELEMENT_NODE && node.namespaceURI === namespaceURI && (localName === '*' || node.localName == localName)){
					ls.push(node);
				}
			});
			return ls;
		});
	}
};
Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


_extends(Element,Node);
function Attr() {
};
Attr.prototype.nodeType = ATTRIBUTE_NODE;
_extends(Attr,Node);


function CharacterData() {
};
CharacterData.prototype = {
	data : '',
	substringData : function(offset, count) {
		return this.data.substring(offset, offset+count);
	},
	appendData: function(text) {
		text = this.data+text;
		this.nodeValue = this.data = text;
		this.length = text.length;
	},
	insertData: function(offset,text) {
		this.replaceData(offset,0,text);
	
	},
	appendChild:function(newChild){
		//if(!(newChild instanceof CharacterData)){
			throw new Error(ExceptionMessage[3])
		//}
		return Node.prototype.appendChild.apply(this,arguments)
	},
	deleteData: function(offset, count) {
		this.replaceData(offset,count,"");
	},
	replaceData: function(offset, count, text) {
		var start = this.data.substring(0,offset);
		var end = this.data.substring(offset+count);
		text = start + text + end;
		this.nodeValue = this.data = text;
		this.length = text.length;
	}
}
_extends(CharacterData,Node);
function Text() {
};
Text.prototype = {
	nodeName : "#text",
	nodeType : TEXT_NODE,
	splitText : function(offset) {
		var text = this.data;
		var newText = text.substring(offset);
		text = text.substring(0, offset);
		this.data = this.nodeValue = text;
		this.length = text.length;
		var newNode = this.ownerDocument.createTextNode(newText);
		if(this.parentNode){
			this.parentNode.insertBefore(newNode, this.nextSibling);
		}
		return newNode;
	}
}
_extends(Text,CharacterData);
function Comment() {
};
Comment.prototype = {
	nodeName : "#comment",
	nodeType : COMMENT_NODE
}
_extends(Comment,CharacterData);

function CDATASection() {
};
CDATASection.prototype = {
	nodeName : "#cdata-section",
	nodeType : CDATA_SECTION_NODE
}
_extends(CDATASection,CharacterData);


function DocumentType() {
};
DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
_extends(DocumentType,Node);

function Notation() {
};
Notation.prototype.nodeType = NOTATION_NODE;
_extends(Notation,Node);

function Entity() {
};
Entity.prototype.nodeType = ENTITY_NODE;
_extends(Entity,Node);

function EntityReference() {
};
EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
_extends(EntityReference,Node);

function DocumentFragment() {
};
DocumentFragment.prototype.nodeName =	"#document-fragment";
DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
_extends(DocumentFragment,Node);


function ProcessingInstruction() {
}
ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
_extends(ProcessingInstruction,Node);
function XMLSerializer(){}
XMLSerializer.prototype.serializeToString = function(node){
	var buf = [];
	serializeToString(node,buf);
	return buf.join('');
}
Node.prototype.toString =function(){
	return XMLSerializer.prototype.serializeToString(this);
}
function serializeToString(node,buf){
	switch(node.nodeType){
	case ELEMENT_NODE:
		var attrs = node.attributes;
		var len = attrs.length;
		var child = node.firstChild;
		var nodeName = node.tagName;
		var isHTML = htmlns === node.namespaceURI
		buf.push('<',nodeName);
		for(var i=0;i<len;i++){
			serializeToString(attrs.item(i),buf,isHTML);
		}
		if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
			buf.push('>');
			//if is cdata child node
			if(isHTML && /^script$/i.test(nodeName)){
				if(child){
					buf.push(child.data);
				}
			}else{
				while(child){
					serializeToString(child,buf);
					child = child.nextSibling;
				}
			}
			buf.push('</',nodeName,'>');
		}else{
			buf.push('/>');
		}
		return;
	case DOCUMENT_NODE:
	case DOCUMENT_FRAGMENT_NODE:
		var child = node.firstChild;
		while(child){
			serializeToString(child,buf);
			child = child.nextSibling;
		}
		return;
	case ATTRIBUTE_NODE:
		return buf.push(' ',node.name,'="',node.value.replace(/[<&"]/g,_xmlEncoder),'"');
	case TEXT_NODE:
		return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));
	case CDATA_SECTION_NODE:
		return buf.push( '<![CDATA[',node.data,']]>');
	case COMMENT_NODE:
		return buf.push( "<!--",node.data,"-->");
	case DOCUMENT_TYPE_NODE:
		var pubid = node.publicId;
		var sysid = node.systemId;
		buf.push('<!DOCTYPE ',node.name);
		if(pubid){
			buf.push(' PUBLIC "',pubid);
			if (sysid && sysid!='.') {
				buf.push( '" "',sysid);
			}
			buf.push('">');
		}else if(sysid && sysid!='.'){
			buf.push(' SYSTEM "',sysid,'">');
		}else{
			var sub = node.internalSubset;
			if(sub){
				buf.push(" [",sub,"]");
			}
			buf.push(">");
		}
		return;
	case PROCESSING_INSTRUCTION_NODE:
		return buf.push( "<?",node.target," ",node.data,"?>");
	case ENTITY_REFERENCE_NODE:
		return buf.push( '&',node.nodeName,';');
	//case ENTITY_NODE:
	//case NOTATION_NODE:
	default:
		buf.push('??',node.nodeName);
	}
}
function importNode(doc,node,deep){
	var node2;
	switch (node.nodeType) {
	case ELEMENT_NODE:
		node2 = node.cloneNode(false);
		node2.ownerDocument = doc;
		//var attrs = node2.attributes;
		//var len = attrs.length;
		//for(var i=0;i<len;i++){
			//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
		//}
	case DOCUMENT_FRAGMENT_NODE:
		break;
	case ATTRIBUTE_NODE:
		deep = true;
		break;
	//case ENTITY_REFERENCE_NODE:
	//case PROCESSING_INSTRUCTION_NODE:
	////case TEXT_NODE:
	//case CDATA_SECTION_NODE:
	//case COMMENT_NODE:
	//	deep = false;
	//	break;
	//case DOCUMENT_NODE:
	//case DOCUMENT_TYPE_NODE:
	//cannot be imported.
	//case ENTITY_NODE:
	//case NOTATION_NODE：
	//can not hit in level3
	//default:throw e;
	}
	if(!node2){
		node2 = node.cloneNode(false);//false
	}
	node2.ownerDocument = doc;
	node2.parentNode = null;
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(importNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function cloneNode(doc,node,deep){
	var node2 = new node.constructor();
	for(var n in node){
		var v = node[n];
		if(typeof v != 'object' ){
			if(v != node2[n]){
				node2[n] = v;
			}
		}
	}
	if(node.childNodes){
		node2.childNodes = new NodeList();
	}
	node2.ownerDocument = doc;
	switch (node2.nodeType) {
	case ELEMENT_NODE:
		var attrs	= node.attributes;
		var attrs2	= node2.attributes = new NamedNodeMap();
		var len = attrs.length
		attrs2._ownerElement = node2;
		for(var i=0;i<len;i++){
			node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
		}
		break;;
	case ATTRIBUTE_NODE:
		deep = true;
	}
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(cloneNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}

function __set__(object,key,value){
	object[key] = value
}
//do dynamic
try{
	if(Object.defineProperty){
		Object.defineProperty(LiveNodeList.prototype,'length',{
			get:function(){
				_updateLiveList(this);
				return this.$$length;
			}
		});
		Object.defineProperty(Node.prototype,'textContent',{
			get:function(){
				return getTextContent(this);
			},
			set:function(data){
				switch(this.nodeType){
				case 1:
				case 11:
					while(this.firstChild){
						this.removeChild(this.firstChild);
					}
					if(data || String(data)){
						this.appendChild(this.ownerDocument.createTextNode(data));
					}
					break;
				default:
					//TODO:
					this.data = data;
					this.value = value;
					this.nodeValue = data;
				}
			}
		})
		
		function getTextContent(node){
			switch(node.nodeType){
			case 1:
			case 11:
				var buf = [];
				node = node.firstChild;
				while(node){
					if(node.nodeType!==7 && node.nodeType !==8){
						buf.push(getTextContent(node));
					}
					node = node.nextSibling;
				}
				return buf.join('');
			default:
				return node.nodeValue;
			}
		}
		__set__ = function(object,key,value){
			//console.log(value)
			object['$$'+key] = value
		}
	}
}catch(e){//ie8
}

if(typeof require == 'function'){
	exports.DOMImplementation = DOMImplementation;
	exports.XMLSerializer = XMLSerializer;
}

},{}],250:[function(require,module,exports){
//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]///\u10000-\uEFFFF
var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\u00B7\u0300-\u036F\\ux203F-\u2040]");
var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

//S_TAG,	S_ATTR,	S_EQ,	S_V
//S_ATTR_S,	S_E,	S_S,	S_C
var S_TAG = 0;//tag name offerring
var S_ATTR = 1;//attr name offerring 
var S_ATTR_S=2;//attr name end and space offer
var S_EQ = 3;//=space?
var S_V = 4;//attr value(no quot value only)
var S_E = 5;//attr value end and no space(quot end)
var S_S = 6;//(attr value end || tag end ) && (space offer)
var S_C = 7;//closed el<el />

function XMLReader(){
	
}

XMLReader.prototype = {
	parse:function(source,defaultNSMap,entityMap){
		var domBuilder = this.domBuilder;
		domBuilder.startDocument();
		_copy(defaultNSMap ,defaultNSMap = {})
		parse(source,defaultNSMap,entityMap,
				domBuilder,this.errorHandler);
		domBuilder.endDocument();
	}
}
function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
  function fixedFromCharCode(code) {
		// String.prototype.fromCharCode does not supports
		// > 2 bytes unicode chars directly
		if (code > 0xffff) {
			code -= 0x10000;
			var surrogate1 = 0xd800 + (code >> 10)
				, surrogate2 = 0xdc00 + (code & 0x3ff);

			return String.fromCharCode(surrogate1, surrogate2);
		} else {
			return String.fromCharCode(code);
		}
	}
	function entityReplacer(a){
		var k = a.slice(1,-1);
		if(k in entityMap){
			return entityMap[k]; 
		}else if(k.charAt(0) === '#'){
			return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
		}else{
			errorHandler.error('entity not found:'+a);
			return a;
		}
	}
	function appendText(end){//has some bugs
		var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
		locator&&position(start);
		domBuilder.characters(xt,0,end-start);
		start = end
	}
	function position(start,m){
		while(start>=endPos && (m = linePattern.exec(source))){
			startPos = m.index;
			endPos = startPos + m[0].length;
			locator.lineNumber++;
			//console.log('line++:',locator,startPos,endPos)
		}
		locator.columnNumber = start-startPos+1;
	}
	var startPos = 0;
	var endPos = 0;
	var linePattern = /.+(?:\r\n?|\n)|.*$/g
	var locator = domBuilder.locator;
	
	var parseStack = [{currentNSMap:defaultNSMapCopy}]
	var closeMap = {};
	var start = 0;
	while(true){
		var i = source.indexOf('<',start);
		if(i<0){
			if(!source.substr(start).match(/^\s*$/)){
				var doc = domBuilder.document;
    			var text = doc.createTextNode(source.substr(start));
    			doc.appendChild(text);
    			domBuilder.currentElement = text;
			}
			return;
		}
		if(i>start){
			appendText(i);
		}
		switch(source.charAt(i+1)){
		case '/':
			var end = source.indexOf('>',i+3);
			var tagName = source.substring(i+2,end);
			var config = parseStack.pop();
			var localNSMap = config.localNSMap;
			
	        if(config.tagName != tagName){
	            errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName );
	        }
			domBuilder.endElement(config.uri,config.localName,tagName);
			if(localNSMap){
				for(var prefix in localNSMap){
					domBuilder.endPrefixMapping(prefix) ;
				}
			}
			end++;
			break;
			// end elment
		case '?':// <?...?>
			locator&&position(i);
			end = parseInstruction(source,i,domBuilder);
			break;
		case '!':// <!doctype,<![CDATA,<!--
			locator&&position(i);
			end = parseDCC(source,i,domBuilder,errorHandler);
			break;
		default:
			try{
				locator&&position(i);
				
				var el = new ElementAttributes();
				
				//elStartEnd
				var end = parseElementStartPart(source,i,el,entityReplacer,errorHandler);
				var len = el.length;
				//position fixed
				if(len && locator){
					var backup = copyLocator(locator,{});
					for(var i = 0;i<len;i++){
						var a = el[i];
						position(a.offset);
						a.offset = copyLocator(locator,{});
					}
					copyLocator(backup,locator);
				}
				if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
					el.closed = true;
					if(!entityMap.nbsp){
						errorHandler.warning('unclosed xml attribute');
					}
				}
				appendElement(el,domBuilder,parseStack);
				
				
				if(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){
					end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)
				}else{
					end++;
				}
			}catch(e){
				errorHandler.error('element parse error: '+e);
				end = -1;
			}

		}
		if(end<0){
			//TODO: 这里有可能sax回退，有位置错误风险
			appendText(i+1);
		}else{
			start = end;
		}
	}
}
function copyLocator(f,t){
	t.lineNumber = f.lineNumber;
	t.columnNumber = f.columnNumber;
	return t;
	
}

/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
function parseElementStartPart(source,start,el,entityReplacer,errorHandler){
	var attrName;
	var value;
	var p = ++start;
	var s = S_TAG;//status
	while(true){
		var c = source.charAt(p);
		switch(c){
		case '=':
			if(s === S_ATTR){//attrName
				attrName = source.slice(start,p);
				s = S_EQ;
			}else if(s === S_ATTR_S){
				s = S_EQ;
			}else{
				//fatalError: equal must after attrName or space after attrName
				throw new Error('attribute equal must after attrName');
			}
			break;
		case '\'':
		case '"':
			if(s === S_EQ){//equal
				start = p+1;
				p = source.indexOf(c,start)
				if(p>0){
					value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					el.add(attrName,value,start-1);
					s = S_E;
				}else{
					//fatalError: no end quot match
					throw new Error('attribute value no end \''+c+'\' match');
				}
			}else if(s == S_V){
				value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
				//console.log(attrName,value,start,p)
				el.add(attrName,value,start);
				//console.dir(el)
				errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
				start = p+1;
				s = S_E
			}else{
				//fatalError: no equal before
				throw new Error('attribute value must after "="');
			}
			break;
		case '/':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_E:
			case S_S:
			case S_C:
				s = S_C;
				el.closed = true;
			case S_V:
			case S_ATTR:
			case S_ATTR_S:
				break;
			//case S_EQ:
			default:
				throw new Error("attribute invalid close char('/')")
			}
			break;
		case ''://end document
			//throw new Error('unexpected end of input')
			errorHandler.error('unexpected end of input');
		case '>':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_E:
			case S_S:
			case S_C:
				break;//normal
			case S_V://Compatible state
			case S_ATTR:
				value = source.slice(start,p);
				if(value.slice(-1) === '/'){
					el.closed  = true;
					value = value.slice(0,-1)
				}
			case S_ATTR_S:
				if(s === S_ATTR_S){
					value = attrName;
				}
				if(s == S_V){
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value.replace(/&#?\w+;/g,entityReplacer),start)
				}else{
					errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!')
					el.add(value,value,start)
				}
				break;
			case S_EQ:
				throw new Error('attribute value missed!!');
			}
//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
			return p;
		/*xml space '\x20' | #x9 | #xD | #xA; */
		case '\u0080':
			c = ' ';
		default:
			if(c<= ' '){//space
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));//tagName
					s = S_S;
					break;
				case S_ATTR:
					attrName = source.slice(start,p)
					s = S_ATTR_S;
					break;
				case S_V:
					var value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value,start)
				case S_E:
					s = S_S;
					break;
				//case S_S:
				//case S_EQ:
				//case S_ATTR_S:
				//	void();break;
				//case S_C:
					//ignore warning
				}
			}else{//not space
//S_TAG,	S_ATTR,	S_EQ,	S_V
//S_ATTR_S,	S_E,	S_S,	S_C
				switch(s){
				//case S_TAG:void();break;
				//case S_ATTR:void();break;
				//case S_V:void();break;
				case S_ATTR_S:
					errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead!!')
					el.add(attrName,attrName,start);
					start = p;
					s = S_ATTR;
					break;
				case S_E:
					errorHandler.warning('attribute space is required"'+attrName+'"!!')
				case S_S:
					s = S_ATTR;
					start = p;
					break;
				case S_EQ:
					s = S_V;
					start = p;
					break;
				case S_C:
					throw new Error("elements closed character '/' and '>' must be connected to");
				}
			}
		}
		p++;
	}
}
/**
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
function appendElement(el,domBuilder,parseStack){
	var tagName = el.tagName;
	var localNSMap = null;
	var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
	var i = el.length;
	while(i--){
		var a = el[i];
		var qName = a.qName;
		var value = a.value;
		var nsp = qName.indexOf(':');
		if(nsp>0){
			var prefix = a.prefix = qName.slice(0,nsp);
			var localName = qName.slice(nsp+1);
			var nsPrefix = prefix === 'xmlns' && localName
		}else{
			localName = qName;
			prefix = null
			nsPrefix = qName === 'xmlns' && ''
		}
		//can not set prefix,because prefix !== ''
		a.localName = localName ;
		//prefix == null for no ns prefix attribute 
		if(nsPrefix !== false){//hack!!
			if(localNSMap == null){
				localNSMap = {}
				//console.log(currentNSMap,0)
				_copy(currentNSMap,currentNSMap={})
				//console.log(currentNSMap,1)
			}
			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
			a.uri = 'http://www.w3.org/2000/xmlns/'
			domBuilder.startPrefixMapping(nsPrefix, value) 
		}
	}
	var i = el.length;
	while(i--){
		a = el[i];
		var prefix = a.prefix;
		if(prefix){//no prefix attribute has no namespace
			if(prefix === 'xml'){
				a.uri = 'http://www.w3.org/XML/1998/namespace';
			}if(prefix !== 'xmlns'){
				a.uri = currentNSMap[prefix]
				
				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
			}
		}
	}
	var nsp = tagName.indexOf(':');
	if(nsp>0){
		prefix = el.prefix = tagName.slice(0,nsp);
		localName = el.localName = tagName.slice(nsp+1);
	}else{
		prefix = null;//important!!
		localName = el.localName = tagName;
	}
	//no prefix element has default namespace
	var ns = el.uri = currentNSMap[prefix || ''];
	domBuilder.startElement(ns,localName,tagName,el);
	//endPrefixMapping and startPrefixMapping have not any help for dom builder
	//localNSMap = null
	if(el.closed){
		domBuilder.endElement(ns,localName,tagName);
		if(localNSMap){
			for(prefix in localNSMap){
				domBuilder.endPrefixMapping(prefix) 
			}
		}
	}else{
		el.currentNSMap = currentNSMap;
		el.localNSMap = localNSMap;
		parseStack.push(el);
	}
}
function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
	if(/^(?:script|textarea)$/i.test(tagName)){
		var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
		var text = source.substring(elStartEnd+1,elEndStart);
		if(/[&<]/.test(text)){
			if(/^script$/i.test(tagName)){
				//if(!/\]\]>/.test(text)){
					//lexHandler.startCDATA();
					domBuilder.characters(text,0,text.length);
					//lexHandler.endCDATA();
					return elEndStart;
				//}
			}//}else{//text area
				text = text.replace(/&#?\w+;/g,entityReplacer);
				domBuilder.characters(text,0,text.length);
				return elEndStart;
			//}
			
		}
	}
	return elStartEnd+1;
}
function fixSelfClosed(source,elStartEnd,tagName,closeMap){
	//if(tagName in closeMap){
	var pos = closeMap[tagName];
	if(pos == null){
		//console.log(tagName)
		pos = closeMap[tagName] = source.lastIndexOf('</'+tagName+'>')
	}
	return pos<elStartEnd;
	//} 
}
function _copy(source,target){
	for(var n in source){target[n] = source[n]}
}
function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
	var next= source.charAt(start+2)
	switch(next){
	case '-':
		if(source.charAt(start + 3) === '-'){
			var end = source.indexOf('-->',start+4);
			//append comment source.substring(4,end)//<!--
			if(end>start){
				domBuilder.comment(source,start+4,end-start-4);
				return end+3;
			}else{
				errorHandler.error("Unclosed comment");
				return -1;
			}
		}else{
			//error
			return -1;
		}
	default:
		if(source.substr(start+3,6) == 'CDATA['){
			var end = source.indexOf(']]>',start+9);
			domBuilder.startCDATA();
			domBuilder.characters(source,start+9,end-start-9);
			domBuilder.endCDATA() 
			return end+3;
		}
		//<!DOCTYPE
		//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 
		var matchs = split(source,start);
		var len = matchs.length;
		if(len>1 && /!doctype/i.test(matchs[0][0])){
			var name = matchs[1][0];
			var pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]
			var sysid = len>4 && matchs[4][0];
			var lastMatch = matchs[len-1]
			domBuilder.startDTD(name,pubid && pubid.replace(/^(['"])(.*?)\1$/,'$2'),
					sysid && sysid.replace(/^(['"])(.*?)\1$/,'$2'));
			domBuilder.endDTD();
			
			return lastMatch.index+lastMatch[0].length
		}
	}
	return -1;
}



function parseInstruction(source,start,domBuilder){
	var end = source.indexOf('?>',start);
	if(end){
		var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
		if(match){
			var len = match[0].length;
			domBuilder.processingInstruction(match[1], match[2]) ;
			return end+2;
		}else{//error
			return -1;
		}
	}
	return -1;
}

/**
 * @param source
 */
function ElementAttributes(source){
	
}
ElementAttributes.prototype = {
	setTagName:function(tagName){
		if(!tagNamePattern.test(tagName)){
			throw new Error('invalid tagName:'+tagName)
		}
		this.tagName = tagName
	},
	add:function(qName,value,offset){
		if(!tagNamePattern.test(qName)){
			throw new Error('invalid attribute:'+qName)
		}
		this[this.length++] = {qName:qName,value:value,offset:offset}
	},
	length:0,
	getLocalName:function(i){return this[i].localName},
	getOffset:function(i){return this[i].offset},
	getQName:function(i){return this[i].qName},
	getURI:function(i){return this[i].uri},
	getValue:function(i){return this[i].value}
//	,getIndex:function(uri, localName)){
//		if(localName){
//			
//		}else{
//			var qName = uri
//		}
//	},
//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
//	getType:function(uri,localName){}
//	getType:function(i){},
}




function _set_proto_(thiz,parent){
	thiz.__proto__ = parent;
	return thiz;
}
if(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){
	_set_proto_ = function(thiz,parent){
		function p(){};
		p.prototype = parent;
		p = new p();
		for(parent in thiz){
			p[parent] = thiz[parent];
		}
		return p;
	}
}

function split(source,start){
	var match;
	var buf = [];
	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
	reg.lastIndex = start;
	reg.exec(source);//skip <
	while(match = reg.exec(source)){
		buf.push(match);
		if(match[1])return buf;
	}
}

if(typeof require == 'function'){
	exports.XMLReader = XMLReader;
}


},{}],251:[function(require,module,exports){
(function (Buffer){
// wrapper for non-node envs
;(function (sax) {

sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
sax.SAXParser = SAXParser
sax.SAXStream = SAXStream
sax.createStream = createStream

// When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
// When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
// since that's the earliest that a buffer overrun could occur.  This way, checks are
// as rare as required, but as often as necessary to ensure never crossing this bound.
// Furthermore, buffers are only tested at most once per write(), so passing a very
// large string into write() might have undesirable effects, but this is manageable by
// the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
// edge case, result in creating at most one complete copy of the string passed in.
// Set to Infinity to have unlimited buffers.
sax.MAX_BUFFER_LENGTH = 64 * 1024

var buffers = [
  "comment", "sgmlDecl", "textNode", "tagName", "doctype",
  "procInstName", "procInstBody", "entity", "attribName",
  "attribValue", "cdata", "script"
]

sax.EVENTS = // for discoverability.
  [ "text"
  , "processinginstruction"
  , "sgmldeclaration"
  , "doctype"
  , "comment"
  , "attribute"
  , "opentag"
  , "closetag"
  , "opencdata"
  , "cdata"
  , "closecdata"
  , "error"
  , "end"
  , "ready"
  , "script"
  , "opennamespace"
  , "closenamespace"
  ]

function SAXParser (strict, opt) {
  if (!(this instanceof SAXParser)) return new SAXParser(strict, opt)

  var parser = this
  clearBuffers(parser)
  parser.q = parser.c = ""
  parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
  parser.opt = opt || {}
  parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
  parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase"
  parser.tags = []
  parser.closed = parser.closedRoot = parser.sawRoot = false
  parser.tag = parser.error = null
  parser.strict = !!strict
  parser.noscript = !!(strict || parser.opt.noscript)
  parser.state = S.BEGIN
  parser.strictEntities = parser.opt.strictEntities
  parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
  parser.attribList = []

  // namespaces form a prototype chain.
  // it always points at the current tag,
  // which protos to its parent tag.
  if (parser.opt.xmlns) parser.ns = Object.create(rootNS)

  // mostly just for error reporting
  parser.trackPosition = parser.opt.position !== false
  if (parser.trackPosition) {
    parser.position = parser.line = parser.column = 0
  }
  emit(parser, "onready")
}

if (!Object.create) Object.create = function (o) {
  function f () { this.__proto__ = o }
  f.prototype = o
  return new f
}

if (!Object.getPrototypeOf) Object.getPrototypeOf = function (o) {
  return o.__proto__
}

if (!Object.keys) Object.keys = function (o) {
  var a = []
  for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
  return a
}

function checkBufferLength (parser) {
  var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
    , maxActual = 0
  for (var i = 0, l = buffers.length; i < l; i ++) {
    var len = parser[buffers[i]].length
    if (len > maxAllowed) {
      // Text/cdata nodes can get big, and since they're buffered,
      // we can get here under normal conditions.
      // Avoid issues by emitting the text node now,
      // so at least it won't get any bigger.
      switch (buffers[i]) {
        case "textNode":
          closeText(parser)
        break

        case "cdata":
          emitNode(parser, "oncdata", parser.cdata)
          parser.cdata = ""
        break

        case "script":
          emitNode(parser, "onscript", parser.script)
          parser.script = ""
        break

        default:
          error(parser, "Max buffer length exceeded: "+buffers[i])
      }
    }
    maxActual = Math.max(maxActual, len)
  }
  // schedule the next check for the earliest possible buffer overrun.
  parser.bufferCheckPosition = (sax.MAX_BUFFER_LENGTH - maxActual)
                             + parser.position
}

function clearBuffers (parser) {
  for (var i = 0, l = buffers.length; i < l; i ++) {
    parser[buffers[i]] = ""
  }
}

function flushBuffers (parser) {
  closeText(parser)
  if (parser.cdata !== "") {
    emitNode(parser, "oncdata", parser.cdata)
    parser.cdata = ""
  }
  if (parser.script !== "") {
    emitNode(parser, "onscript", parser.script)
    parser.script = ""
  }
}

SAXParser.prototype =
  { end: function () { end(this) }
  , write: write
  , resume: function () { this.error = null; return this }
  , close: function () { return this.write(null) }
  , flush: function () { flushBuffers(this) }
  }

try {
  var Stream = require("stream").Stream
} catch (ex) {
  var Stream = function () {}
}


var streamWraps = sax.EVENTS.filter(function (ev) {
  return ev !== "error" && ev !== "end"
})

function createStream (strict, opt) {
  return new SAXStream(strict, opt)
}

function SAXStream (strict, opt) {
  if (!(this instanceof SAXStream)) return new SAXStream(strict, opt)

  Stream.apply(this)

  this._parser = new SAXParser(strict, opt)
  this.writable = true
  this.readable = true


  var me = this

  this._parser.onend = function () {
    me.emit("end")
  }

  this._parser.onerror = function (er) {
    me.emit("error", er)

    // if didn't throw, then means error was handled.
    // go ahead and clear error, so we can write again.
    me._parser.error = null
  }

  this._decoder = null;

  streamWraps.forEach(function (ev) {
    Object.defineProperty(me, "on" + ev, {
      get: function () { return me._parser["on" + ev] },
      set: function (h) {
        if (!h) {
          me.removeAllListeners(ev)
          return me._parser["on"+ev] = h
        }
        me.on(ev, h)
      },
      enumerable: true,
      configurable: false
    })
  })
}

SAXStream.prototype = Object.create(Stream.prototype,
  { constructor: { value: SAXStream } })

SAXStream.prototype.write = function (data) {
  if (typeof Buffer === 'function' &&
      typeof Buffer.isBuffer === 'function' &&
      Buffer.isBuffer(data)) {
    if (!this._decoder) {
      var SD = require('string_decoder').StringDecoder
      this._decoder = new SD('utf8')
    }
    data = this._decoder.write(data);
  }

  this._parser.write(data.toString())
  this.emit("data", data)
  return true
}

SAXStream.prototype.end = function (chunk) {
  if (chunk && chunk.length) this.write(chunk)
  this._parser.end()
  return true
}

SAXStream.prototype.on = function (ev, handler) {
  var me = this
  if (!me._parser["on"+ev] && streamWraps.indexOf(ev) !== -1) {
    me._parser["on"+ev] = function () {
      var args = arguments.length === 1 ? [arguments[0]]
               : Array.apply(null, arguments)
      args.splice(0, 0, ev)
      me.emit.apply(me, args)
    }
  }

  return Stream.prototype.on.call(me, ev, handler)
}



// character classes and tokens
var whitespace = "\r\n\t "
  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  , number = "0124356789"
  , letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  // (Letter | "_" | ":")
  , quote = "'\""
  , entity = number+letter+"#"
  , attribEnd = whitespace + ">"
  , CDATA = "[CDATA["
  , DOCTYPE = "DOCTYPE"
  , XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace"
  , XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/"
  , rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

// turn all the string character sets into character class objects.
whitespace = charClass(whitespace)
number = charClass(number)
letter = charClass(letter)

// http://www.w3.org/TR/REC-xml/#NT-NameStartChar
// This implementation works on strings, a single character at a time
// as such, it cannot ever support astral-plane characters (10000-EFFFF)
// without a significant breaking change to either this  parser, or the
// JavaScript language.  Implementation of an emoji-capable xml parser
// is left as an exercise for the reader.
var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

quote = charClass(quote)
entity = charClass(entity)
attribEnd = charClass(attribEnd)

function charClass (str) {
  return str.split("").reduce(function (s, c) {
    s[c] = true
    return s
  }, {})
}

function isRegExp (c) {
  return Object.prototype.toString.call(c) === '[object RegExp]'
}

function is (charclass, c) {
  return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
}

function not (charclass, c) {
  return !is(charclass, c)
}

var S = 0
sax.STATE =
{ BEGIN                     : S++ // leading byte order mark or whitespace
, BEGIN_WHITESPACE          : S++ // leading whitespace
, TEXT                      : S++ // general stuff
, TEXT_ENTITY               : S++ // &amp and such.
, OPEN_WAKA                 : S++ // <
, SGML_DECL                 : S++ // <!BLARG
, SGML_DECL_QUOTED          : S++ // <!BLARG foo "bar
, DOCTYPE                   : S++ // <!DOCTYPE
, DOCTYPE_QUOTED            : S++ // <!DOCTYPE "//blah
, DOCTYPE_DTD               : S++ // <!DOCTYPE "//blah" [ ...
, DOCTYPE_DTD_QUOTED        : S++ // <!DOCTYPE "//blah" [ "foo
, COMMENT_STARTING          : S++ // <!-
, COMMENT                   : S++ // <!--
, COMMENT_ENDING            : S++ // <!-- blah -
, COMMENT_ENDED             : S++ // <!-- blah --
, CDATA                     : S++ // <![CDATA[ something
, CDATA_ENDING              : S++ // ]
, CDATA_ENDING_2            : S++ // ]]
, PROC_INST                 : S++ // <?hi
, PROC_INST_BODY            : S++ // <?hi there
, PROC_INST_ENDING          : S++ // <?hi "there" ?
, OPEN_TAG                  : S++ // <strong
, OPEN_TAG_SLASH            : S++ // <strong /
, ATTRIB                    : S++ // <a
, ATTRIB_NAME               : S++ // <a foo
, ATTRIB_NAME_SAW_WHITE     : S++ // <a foo _
, ATTRIB_VALUE              : S++ // <a foo=
, ATTRIB_VALUE_QUOTED       : S++ // <a foo="bar
, ATTRIB_VALUE_CLOSED       : S++ // <a foo="bar"
, ATTRIB_VALUE_UNQUOTED     : S++ // <a foo=bar
, ATTRIB_VALUE_ENTITY_Q     : S++ // <foo bar="&quot;"
, ATTRIB_VALUE_ENTITY_U     : S++ // <foo bar=&quot;
, CLOSE_TAG                 : S++ // </a
, CLOSE_TAG_SAW_WHITE       : S++ // </a   >
, SCRIPT                    : S++ // <script> ...
, SCRIPT_ENDING             : S++ // <script> ... <
}

sax.XML_ENTITIES =
{ "amp" : "&"
, "gt" : ">"
, "lt" : "<"
, "quot" : "\""
, "apos" : "'"
}

sax.ENTITIES =
{ "amp" : "&"
, "gt" : ">"
, "lt" : "<"
, "quot" : "\""
, "apos" : "'"
, "AElig" : 198
, "Aacute" : 193
, "Acirc" : 194
, "Agrave" : 192
, "Aring" : 197
, "Atilde" : 195
, "Auml" : 196
, "Ccedil" : 199
, "ETH" : 208
, "Eacute" : 201
, "Ecirc" : 202
, "Egrave" : 200
, "Euml" : 203
, "Iacute" : 205
, "Icirc" : 206
, "Igrave" : 204
, "Iuml" : 207
, "Ntilde" : 209
, "Oacute" : 211
, "Ocirc" : 212
, "Ograve" : 210
, "Oslash" : 216
, "Otilde" : 213
, "Ouml" : 214
, "THORN" : 222
, "Uacute" : 218
, "Ucirc" : 219
, "Ugrave" : 217
, "Uuml" : 220
, "Yacute" : 221
, "aacute" : 225
, "acirc" : 226
, "aelig" : 230
, "agrave" : 224
, "aring" : 229
, "atilde" : 227
, "auml" : 228
, "ccedil" : 231
, "eacute" : 233
, "ecirc" : 234
, "egrave" : 232
, "eth" : 240
, "euml" : 235
, "iacute" : 237
, "icirc" : 238
, "igrave" : 236
, "iuml" : 239
, "ntilde" : 241
, "oacute" : 243
, "ocirc" : 244
, "ograve" : 242
, "oslash" : 248
, "otilde" : 245
, "ouml" : 246
, "szlig" : 223
, "thorn" : 254
, "uacute" : 250
, "ucirc" : 251
, "ugrave" : 249
, "uuml" : 252
, "yacute" : 253
, "yuml" : 255
, "copy" : 169
, "reg" : 174
, "nbsp" : 160
, "iexcl" : 161
, "cent" : 162
, "pound" : 163
, "curren" : 164
, "yen" : 165
, "brvbar" : 166
, "sect" : 167
, "uml" : 168
, "ordf" : 170
, "laquo" : 171
, "not" : 172
, "shy" : 173
, "macr" : 175
, "deg" : 176
, "plusmn" : 177
, "sup1" : 185
, "sup2" : 178
, "sup3" : 179
, "acute" : 180
, "micro" : 181
, "para" : 182
, "middot" : 183
, "cedil" : 184
, "ordm" : 186
, "raquo" : 187
, "frac14" : 188
, "frac12" : 189
, "frac34" : 190
, "iquest" : 191
, "times" : 215
, "divide" : 247
, "OElig" : 338
, "oelig" : 339
, "Scaron" : 352
, "scaron" : 353
, "Yuml" : 376
, "fnof" : 402
, "circ" : 710
, "tilde" : 732
, "Alpha" : 913
, "Beta" : 914
, "Gamma" : 915
, "Delta" : 916
, "Epsilon" : 917
, "Zeta" : 918
, "Eta" : 919
, "Theta" : 920
, "Iota" : 921
, "Kappa" : 922
, "Lambda" : 923
, "Mu" : 924
, "Nu" : 925
, "Xi" : 926
, "Omicron" : 927
, "Pi" : 928
, "Rho" : 929
, "Sigma" : 931
, "Tau" : 932
, "Upsilon" : 933
, "Phi" : 934
, "Chi" : 935
, "Psi" : 936
, "Omega" : 937
, "alpha" : 945
, "beta" : 946
, "gamma" : 947
, "delta" : 948
, "epsilon" : 949
, "zeta" : 950
, "eta" : 951
, "theta" : 952
, "iota" : 953
, "kappa" : 954
, "lambda" : 955
, "mu" : 956
, "nu" : 957
, "xi" : 958
, "omicron" : 959
, "pi" : 960
, "rho" : 961
, "sigmaf" : 962
, "sigma" : 963
, "tau" : 964
, "upsilon" : 965
, "phi" : 966
, "chi" : 967
, "psi" : 968
, "omega" : 969
, "thetasym" : 977
, "upsih" : 978
, "piv" : 982
, "ensp" : 8194
, "emsp" : 8195
, "thinsp" : 8201
, "zwnj" : 8204
, "zwj" : 8205
, "lrm" : 8206
, "rlm" : 8207
, "ndash" : 8211
, "mdash" : 8212
, "lsquo" : 8216
, "rsquo" : 8217
, "sbquo" : 8218
, "ldquo" : 8220
, "rdquo" : 8221
, "bdquo" : 8222
, "dagger" : 8224
, "Dagger" : 8225
, "bull" : 8226
, "hellip" : 8230
, "permil" : 8240
, "prime" : 8242
, "Prime" : 8243
, "lsaquo" : 8249
, "rsaquo" : 8250
, "oline" : 8254
, "frasl" : 8260
, "euro" : 8364
, "image" : 8465
, "weierp" : 8472
, "real" : 8476
, "trade" : 8482
, "alefsym" : 8501
, "larr" : 8592
, "uarr" : 8593
, "rarr" : 8594
, "darr" : 8595
, "harr" : 8596
, "crarr" : 8629
, "lArr" : 8656
, "uArr" : 8657
, "rArr" : 8658
, "dArr" : 8659
, "hArr" : 8660
, "forall" : 8704
, "part" : 8706
, "exist" : 8707
, "empty" : 8709
, "nabla" : 8711
, "isin" : 8712
, "notin" : 8713
, "ni" : 8715
, "prod" : 8719
, "sum" : 8721
, "minus" : 8722
, "lowast" : 8727
, "radic" : 8730
, "prop" : 8733
, "infin" : 8734
, "ang" : 8736
, "and" : 8743
, "or" : 8744
, "cap" : 8745
, "cup" : 8746
, "int" : 8747
, "there4" : 8756
, "sim" : 8764
, "cong" : 8773
, "asymp" : 8776
, "ne" : 8800
, "equiv" : 8801
, "le" : 8804
, "ge" : 8805
, "sub" : 8834
, "sup" : 8835
, "nsub" : 8836
, "sube" : 8838
, "supe" : 8839
, "oplus" : 8853
, "otimes" : 8855
, "perp" : 8869
, "sdot" : 8901
, "lceil" : 8968
, "rceil" : 8969
, "lfloor" : 8970
, "rfloor" : 8971
, "lang" : 9001
, "rang" : 9002
, "loz" : 9674
, "spades" : 9824
, "clubs" : 9827
, "hearts" : 9829
, "diams" : 9830
}

Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key]
    var s = typeof e === 'number' ? String.fromCharCode(e) : e
    sax.ENTITIES[key] = s
})

for (var S in sax.STATE) sax.STATE[sax.STATE[S]] = S

// shorthand
S = sax.STATE

function emit (parser, event, data) {
  parser[event] && parser[event](data)
}

function emitNode (parser, nodeType, data) {
  if (parser.textNode) closeText(parser)
  emit(parser, nodeType, data)
}

function closeText (parser) {
  parser.textNode = textopts(parser.opt, parser.textNode)
  if (parser.textNode) emit(parser, "ontext", parser.textNode)
  parser.textNode = ""
}

function textopts (opt, text) {
  if (opt.trim) text = text.trim()
  if (opt.normalize) text = text.replace(/\s+/g, " ")
  return text
}

function error (parser, er) {
  closeText(parser)
  if (parser.trackPosition) {
    er += "\nLine: "+parser.line+
          "\nColumn: "+parser.column+
          "\nChar: "+parser.c
  }
  er = new Error(er)
  parser.error = er
  emit(parser, "onerror", er)
  return parser
}

function end (parser) {
  if (parser.sawRoot && !parser.closedRoot) strictFail(parser, "Unclosed root tag")
  if ((parser.state !== S.BEGIN) &&
      (parser.state !== S.BEGIN_WHITESPACE) &&
      (parser.state !== S.TEXT))
    error(parser, "Unexpected end")
  closeText(parser)
  parser.c = ""
  parser.closed = true
  emit(parser, "onend")
  SAXParser.call(parser, parser.strict, parser.opt)
  return parser
}

function strictFail (parser, message) {
  if (typeof parser !== 'object' || !(parser instanceof SAXParser))
    throw new Error('bad call to strictFail');
  if (parser.strict) error(parser, message)
}

function newTag (parser) {
  if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
  var parent = parser.tags[parser.tags.length - 1] || parser
    , tag = parser.tag = { name : parser.tagName, attributes : {} }

  // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
  if (parser.opt.xmlns) tag.ns = parent.ns
  parser.attribList.length = 0
}

function qname (name, attribute) {
  var i = name.indexOf(":")
    , qualName = i < 0 ? [ "", name ] : name.split(":")
    , prefix = qualName[0]
    , local = qualName[1]

  // <x "xmlns"="http://foo">
  if (attribute && name === "xmlns") {
    prefix = "xmlns"
    local = ""
  }

  return { prefix: prefix, local: local }
}

function attrib (parser) {
  if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]()

  if (parser.attribList.indexOf(parser.attribName) !== -1 ||
      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
    return parser.attribName = parser.attribValue = ""
  }

  if (parser.opt.xmlns) {
    var qn = qname(parser.attribName, true)
      , prefix = qn.prefix
      , local = qn.local

    if (prefix === "xmlns") {
      // namespace binding attribute; push the binding into scope
      if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
        strictFail( parser
                  , "xml: prefix must be bound to " + XML_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
        strictFail( parser
                  , "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else {
        var tag = parser.tag
          , parent = parser.tags[parser.tags.length - 1] || parser
        if (tag.ns === parent.ns) {
          tag.ns = Object.create(parent.ns)
        }
        tag.ns[local] = parser.attribValue
      }
    }

    // defer onattribute events until all attributes have been seen
    // so any new bindings can take effect; preserve attribute order
    // so deferred events can be emitted in document order
    parser.attribList.push([parser.attribName, parser.attribValue])
  } else {
    // in non-xmlns mode, we can emit the event right away
    parser.tag.attributes[parser.attribName] = parser.attribValue
    emitNode( parser
            , "onattribute"
            , { name: parser.attribName
              , value: parser.attribValue } )
  }

  parser.attribName = parser.attribValue = ""
}

function openTag (parser, selfClosing) {
  if (parser.opt.xmlns) {
    // emit namespace binding events
    var tag = parser.tag

    // add namespace info to tag
    var qn = qname(parser.tagName)
    tag.prefix = qn.prefix
    tag.local = qn.local
    tag.uri = tag.ns[qn.prefix] || ""

    if (tag.prefix && !tag.uri) {
      strictFail(parser, "Unbound namespace prefix: "
                       + JSON.stringify(parser.tagName))
      tag.uri = qn.prefix
    }

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (tag.ns && parent.ns !== tag.ns) {
      Object.keys(tag.ns).forEach(function (p) {
        emitNode( parser
                , "onopennamespace"
                , { prefix: p , uri: tag.ns[p] } )
      })
    }

    // handle deferred onattribute events
    // Note: do not apply default ns to attributes:
    //   http://www.w3.org/TR/REC-xml-names/#defaulting
    for (var i = 0, l = parser.attribList.length; i < l; i ++) {
      var nv = parser.attribList[i]
      var name = nv[0]
        , value = nv[1]
        , qualName = qname(name, true)
        , prefix = qualName.prefix
        , local = qualName.local
        , uri = prefix == "" ? "" : (tag.ns[prefix] || "")
        , a = { name: name
              , value: value
              , prefix: prefix
              , local: local
              , uri: uri
              }

      // if there's any attributes with an undefined namespace,
      // then fail on them now.
      if (prefix && prefix != "xmlns" && !uri) {
        strictFail(parser, "Unbound namespace prefix: "
                         + JSON.stringify(prefix))
        a.uri = prefix
      }
      parser.tag.attributes[name] = a
      emitNode(parser, "onattribute", a)
    }
    parser.attribList.length = 0
  }

  parser.tag.isSelfClosing = !!selfClosing

  // process the tag
  parser.sawRoot = true
  parser.tags.push(parser.tag)
  emitNode(parser, "onopentag", parser.tag)
  if (!selfClosing) {
    // special case for <script> in non-strict mode.
    if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
      parser.state = S.SCRIPT
    } else {
      parser.state = S.TEXT
    }
    parser.tag = null
    parser.tagName = ""
  }
  parser.attribName = parser.attribValue = ""
  parser.attribList.length = 0
}

function closeTag (parser) {
  if (!parser.tagName) {
    strictFail(parser, "Weird empty close tag.")
    parser.textNode += "</>"
    parser.state = S.TEXT
    return
  }

  if (parser.script) {
    if (parser.tagName !== "script") {
      parser.script += "</" + parser.tagName + ">"
      parser.tagName = ""
      parser.state = S.SCRIPT
      return
    }
    emitNode(parser, "onscript", parser.script)
    parser.script = ""
  }

  // first make sure that the closing tag actually exists.
  // <a><b></c></b></a> will close everything, otherwise.
  var t = parser.tags.length
  var tagName = parser.tagName
  if (!parser.strict) tagName = tagName[parser.looseCase]()
  var closeTo = tagName
  while (t --) {
    var close = parser.tags[t]
    if (close.name !== closeTo) {
      // fail the first time in strict mode
      strictFail(parser, "Unexpected close tag")
    } else break
  }

  // didn't find it.  we already failed for strict, so just abort.
  if (t < 0) {
    strictFail(parser, "Unmatched closing tag: "+parser.tagName)
    parser.textNode += "</" + parser.tagName + ">"
    parser.state = S.TEXT
    return
  }
  parser.tagName = tagName
  var s = parser.tags.length
  while (s --> t) {
    var tag = parser.tag = parser.tags.pop()
    parser.tagName = parser.tag.name
    emitNode(parser, "onclosetag", parser.tagName)

    var x = {}
    for (var i in tag.ns) x[i] = tag.ns[i]

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (parser.opt.xmlns && tag.ns !== parent.ns) {
      // remove namespace bindings introduced by tag
      Object.keys(tag.ns).forEach(function (p) {
        var n = tag.ns[p]
        emitNode(parser, "onclosenamespace", { prefix: p, uri: n })
      })
    }
  }
  if (t === 0) parser.closedRoot = true
  parser.tagName = parser.attribValue = parser.attribName = ""
  parser.attribList.length = 0
  parser.state = S.TEXT
}

function parseEntity (parser) {
  var entity = parser.entity
    , entityLC = entity.toLowerCase()
    , num
    , numStr = ""
  if (parser.ENTITIES[entity])
    return parser.ENTITIES[entity]
  if (parser.ENTITIES[entityLC])
    return parser.ENTITIES[entityLC]
  entity = entityLC
  if (entity.charAt(0) === "#") {
    if (entity.charAt(1) === "x") {
      entity = entity.slice(2)
      num = parseInt(entity, 16)
      numStr = num.toString(16)
    } else {
      entity = entity.slice(1)
      num = parseInt(entity, 10)
      numStr = num.toString(10)
    }
  }
  entity = entity.replace(/^0+/, "")
  if (numStr.toLowerCase() !== entity) {
    strictFail(parser, "Invalid character entity")
    return "&"+parser.entity + ";"
  }

  return String.fromCodePoint(num)
}

function write (chunk) {
  var parser = this
  if (this.error) throw this.error
  if (parser.closed) return error(parser,
    "Cannot write after close. Assign an onready handler.")
  if (chunk === null) return end(parser)
  var i = 0, c = ""
  while (parser.c = c = chunk.charAt(i++)) {
    if (parser.trackPosition) {
      parser.position ++
      if (c === "\n") {
        parser.line ++
        parser.column = 0
      } else parser.column ++
    }
    switch (parser.state) {

      case S.BEGIN:
        parser.state = S.BEGIN_WHITESPACE
        if (c === "\uFEFF") {
          continue;
        }
      // no continue - fall through

      case S.BEGIN_WHITESPACE:
        if (c === "<") {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else if (not(whitespace,c)) {
          // have to process this as a text node.
          // weird, but happens.
          strictFail(parser, "Non-whitespace before first tag.")
          parser.textNode = c
          parser.state = S.TEXT
        }
      continue

      case S.TEXT:
        if (parser.sawRoot && !parser.closedRoot) {
          var starti = i-1
          while (c && c!=="<" && c!=="&") {
            c = chunk.charAt(i++)
            if (c && parser.trackPosition) {
              parser.position ++
              if (c === "\n") {
                parser.line ++
                parser.column = 0
              } else parser.column ++
            }
          }
          parser.textNode += chunk.substring(starti, i-1)
        }
        if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else {
          if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot))
            strictFail(parser, "Text data outside of root node.")
          if (c === "&") parser.state = S.TEXT_ENTITY
          else parser.textNode += c
        }
      continue

      case S.SCRIPT:
        // only non-strict
        if (c === "<") {
          parser.state = S.SCRIPT_ENDING
        } else parser.script += c
      continue

      case S.SCRIPT_ENDING:
        if (c === "/") {
          parser.state = S.CLOSE_TAG
        } else {
          parser.script += "<" + c
          parser.state = S.SCRIPT
        }
      continue

      case S.OPEN_WAKA:
        // either a /, ?, !, or text is coming next.
        if (c === "!") {
          parser.state = S.SGML_DECL
          parser.sgmlDecl = ""
        } else if (is(whitespace, c)) {
          // wait for it...
        } else if (is(nameStart,c)) {
          parser.state = S.OPEN_TAG
          parser.tagName = c
        } else if (c === "/") {
          parser.state = S.CLOSE_TAG
          parser.tagName = ""
        } else if (c === "?") {
          parser.state = S.PROC_INST
          parser.procInstName = parser.procInstBody = ""
        } else {
          strictFail(parser, "Unencoded <")
          // if there was some whitespace, then add that in.
          if (parser.startTagPosition + 1 < parser.position) {
            var pad = parser.position - parser.startTagPosition
            c = new Array(pad).join(" ") + c
          }
          parser.textNode += "<" + c
          parser.state = S.TEXT
        }
      continue

      case S.SGML_DECL:
        if ((parser.sgmlDecl+c).toUpperCase() === CDATA) {
          emitNode(parser, "onopencdata")
          parser.state = S.CDATA
          parser.sgmlDecl = ""
          parser.cdata = ""
        } else if (parser.sgmlDecl+c === "--") {
          parser.state = S.COMMENT
          parser.comment = ""
          parser.sgmlDecl = ""
        } else if ((parser.sgmlDecl+c).toUpperCase() === DOCTYPE) {
          parser.state = S.DOCTYPE
          if (parser.doctype || parser.sawRoot) strictFail(parser,
            "Inappropriately located doctype declaration")
          parser.doctype = ""
          parser.sgmlDecl = ""
        } else if (c === ">") {
          emitNode(parser, "onsgmldeclaration", parser.sgmlDecl)
          parser.sgmlDecl = ""
          parser.state = S.TEXT
        } else if (is(quote, c)) {
          parser.state = S.SGML_DECL_QUOTED
          parser.sgmlDecl += c
        } else parser.sgmlDecl += c
      continue

      case S.SGML_DECL_QUOTED:
        if (c === parser.q) {
          parser.state = S.SGML_DECL
          parser.q = ""
        }
        parser.sgmlDecl += c
      continue

      case S.DOCTYPE:
        if (c === ">") {
          parser.state = S.TEXT
          emitNode(parser, "ondoctype", parser.doctype)
          parser.doctype = true // just remember that we saw it.
        } else {
          parser.doctype += c
          if (c === "[") parser.state = S.DOCTYPE_DTD
          else if (is(quote, c)) {
            parser.state = S.DOCTYPE_QUOTED
            parser.q = c
          }
        }
      continue

      case S.DOCTYPE_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.q = ""
          parser.state = S.DOCTYPE
        }
      continue

      case S.DOCTYPE_DTD:
        parser.doctype += c
        if (c === "]") parser.state = S.DOCTYPE
        else if (is(quote,c)) {
          parser.state = S.DOCTYPE_DTD_QUOTED
          parser.q = c
        }
      continue

      case S.DOCTYPE_DTD_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.state = S.DOCTYPE_DTD
          parser.q = ""
        }
      continue

      case S.COMMENT:
        if (c === "-") parser.state = S.COMMENT_ENDING
        else parser.comment += c
      continue

      case S.COMMENT_ENDING:
        if (c === "-") {
          parser.state = S.COMMENT_ENDED
          parser.comment = textopts(parser.opt, parser.comment)
          if (parser.comment) emitNode(parser, "oncomment", parser.comment)
          parser.comment = ""
        } else {
          parser.comment += "-" + c
          parser.state = S.COMMENT
        }
      continue

      case S.COMMENT_ENDED:
        if (c !== ">") {
          strictFail(parser, "Malformed comment")
          // allow <!-- blah -- bloo --> in non-strict mode,
          // which is a comment of " blah -- bloo "
          parser.comment += "--" + c
          parser.state = S.COMMENT
        } else parser.state = S.TEXT
      continue

      case S.CDATA:
        if (c === "]") parser.state = S.CDATA_ENDING
        else parser.cdata += c
      continue

      case S.CDATA_ENDING:
        if (c === "]") parser.state = S.CDATA_ENDING_2
        else {
          parser.cdata += "]" + c
          parser.state = S.CDATA
        }
      continue

      case S.CDATA_ENDING_2:
        if (c === ">") {
          if (parser.cdata) emitNode(parser, "oncdata", parser.cdata)
          emitNode(parser, "onclosecdata")
          parser.cdata = ""
          parser.state = S.TEXT
        } else if (c === "]") {
          parser.cdata += "]"
        } else {
          parser.cdata += "]]" + c
          parser.state = S.CDATA
        }
      continue

      case S.PROC_INST:
        if (c === "?") parser.state = S.PROC_INST_ENDING
        else if (is(whitespace, c)) parser.state = S.PROC_INST_BODY
        else parser.procInstName += c
      continue

      case S.PROC_INST_BODY:
        if (!parser.procInstBody && is(whitespace, c)) continue
        else if (c === "?") parser.state = S.PROC_INST_ENDING
        else parser.procInstBody += c
      continue

      case S.PROC_INST_ENDING:
        if (c === ">") {
          emitNode(parser, "onprocessinginstruction", {
            name : parser.procInstName,
            body : parser.procInstBody
          })
          parser.procInstName = parser.procInstBody = ""
          parser.state = S.TEXT
        } else {
          parser.procInstBody += "?" + c
          parser.state = S.PROC_INST_BODY
        }
      continue

      case S.OPEN_TAG:
        if (is(nameBody, c)) parser.tagName += c
        else {
          newTag(parser)
          if (c === ">") openTag(parser)
          else if (c === "/") parser.state = S.OPEN_TAG_SLASH
          else {
            if (not(whitespace, c)) strictFail(
              parser, "Invalid character in tag name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.OPEN_TAG_SLASH:
        if (c === ">") {
          openTag(parser, true)
          closeTag(parser)
        } else {
          strictFail(parser, "Forward-slash in opening tag not followed by >")
          parser.state = S.ATTRIB
        }
      continue

      case S.ATTRIB:
        // haven't read the attribute name yet.
        if (is(whitespace, c)) continue
        else if (c === ">") openTag(parser)
        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
        else if (is(nameStart, c)) {
          parser.attribName = c
          parser.attribValue = ""
          parser.state = S.ATTRIB_NAME
        } else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (c === ">") {
          strictFail(parser, "Attribute without value")
          parser.attribValue = parser.attribName
          attrib(parser)
          openTag(parser)
        }
        else if (is(whitespace, c)) parser.state = S.ATTRIB_NAME_SAW_WHITE
        else if (is(nameBody, c)) parser.attribName += c
        else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME_SAW_WHITE:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (is(whitespace, c)) continue
        else {
          strictFail(parser, "Attribute without value")
          parser.tag.attributes[parser.attribName] = ""
          parser.attribValue = ""
          emitNode(parser, "onattribute",
                   { name : parser.attribName, value : "" })
          parser.attribName = ""
          if (c === ">") openTag(parser)
          else if (is(nameStart, c)) {
            parser.attribName = c
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, "Invalid attribute name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.ATTRIB_VALUE:
        if (is(whitespace, c)) continue
        else if (is(quote, c)) {
          parser.q = c
          parser.state = S.ATTRIB_VALUE_QUOTED
        } else {
          strictFail(parser, "Unquoted attribute value")
          parser.state = S.ATTRIB_VALUE_UNQUOTED
          parser.attribValue = c
        }
      continue

      case S.ATTRIB_VALUE_QUOTED:
        if (c !== parser.q) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_Q
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        parser.q = ""
        parser.state = S.ATTRIB_VALUE_CLOSED
      continue

      case S.ATTRIB_VALUE_CLOSED:
        if (is(whitespace, c)) {
          parser.state = S.ATTRIB
        } else if (c === ">") openTag(parser)
        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
        else if (is(nameStart, c)) {
          strictFail(parser, "No whitespace between attributes")
          parser.attribName = c
          parser.attribValue = ""
          parser.state = S.ATTRIB_NAME
        } else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_VALUE_UNQUOTED:
        if (not(attribEnd,c)) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_U
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        if (c === ">") openTag(parser)
        else parser.state = S.ATTRIB
      continue

      case S.CLOSE_TAG:
        if (!parser.tagName) {
          if (is(whitespace, c)) continue
          else if (not(nameStart, c)) {
            if (parser.script) {
              parser.script += "</" + c
              parser.state = S.SCRIPT
            } else {
              strictFail(parser, "Invalid tagname in closing tag.")
            }
          } else parser.tagName = c
        }
        else if (c === ">") closeTag(parser)
        else if (is(nameBody, c)) parser.tagName += c
        else if (parser.script) {
          parser.script += "</" + parser.tagName
          parser.tagName = ""
          parser.state = S.SCRIPT
        } else {
          if (not(whitespace, c)) strictFail(parser,
            "Invalid tagname in closing tag")
          parser.state = S.CLOSE_TAG_SAW_WHITE
        }
      continue

      case S.CLOSE_TAG_SAW_WHITE:
        if (is(whitespace, c)) continue
        if (c === ">") closeTag(parser)
        else strictFail(parser, "Invalid characters in closing tag")
      continue

      case S.TEXT_ENTITY:
      case S.ATTRIB_VALUE_ENTITY_Q:
      case S.ATTRIB_VALUE_ENTITY_U:
        switch(parser.state) {
          case S.TEXT_ENTITY:
            var returnState = S.TEXT, buffer = "textNode"
          break

          case S.ATTRIB_VALUE_ENTITY_Q:
            var returnState = S.ATTRIB_VALUE_QUOTED, buffer = "attribValue"
          break

          case S.ATTRIB_VALUE_ENTITY_U:
            var returnState = S.ATTRIB_VALUE_UNQUOTED, buffer = "attribValue"
          break
        }
        if (c === ";") {
          parser[buffer] += parseEntity(parser)
          parser.entity = ""
          parser.state = returnState
        }
        else if (is(entity, c)) parser.entity += c
        else {
          strictFail(parser, "Invalid character entity")
          parser[buffer] += "&" + parser.entity + c
          parser.entity = ""
          parser.state = returnState
        }
      continue

      default:
        throw new Error(parser, "Unknown state: " + parser.state)
    }
  } // while
  // cdata blocks can get very big under normal conditions. emit and move on.
  // if (parser.state === S.CDATA && parser.cdata) {
  //   emitNode(parser, "oncdata", parser.cdata)
  //   parser.cdata = ""
  // }
  if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser)
  return parser
}

/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
if (!String.fromCodePoint) {
        (function() {
                var stringFromCharCode = String.fromCharCode;
                var floor = Math.floor;
                var fromCodePoint = function() {
                        var MAX_SIZE = 0x4000;
                        var codeUnits = [];
                        var highSurrogate;
                        var lowSurrogate;
                        var index = -1;
                        var length = arguments.length;
                        if (!length) {
                                return '';
                        }
                        var result = '';
                        while (++index < length) {
                                var codePoint = Number(arguments[index]);
                                if (
                                        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                                        codePoint < 0 || // not a valid Unicode code point
                                        codePoint > 0x10FFFF || // not a valid Unicode code point
                                        floor(codePoint) != codePoint // not an integer
                                ) {
                                        throw RangeError('Invalid code point: ' + codePoint);
                                }
                                if (codePoint <= 0xFFFF) { // BMP code point
                                        codeUnits.push(codePoint);
                                } else { // Astral code point; split in surrogate halves
                                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                                        codePoint -= 0x10000;
                                        highSurrogate = (codePoint >> 10) + 0xD800;
                                        lowSurrogate = (codePoint % 0x400) + 0xDC00;
                                        codeUnits.push(highSurrogate, lowSurrogate);
                                }
                                if (index + 1 == length || codeUnits.length > MAX_SIZE) {
                                        result += stringFromCharCode.apply(null, codeUnits);
                                        codeUnits.length = 0;
                                }
                        }
                        return result;
                };
                if (Object.defineProperty) {
                        Object.defineProperty(String, 'fromCodePoint', {
                                'value': fromCodePoint,
                                'configurable': true,
                                'writable': true
                        });
                } else {
                        String.fromCodePoint = fromCodePoint;
                }
        }());
}

})(typeof exports === "undefined" ? sax = {} : exports);

}).call(this,require("buffer").Buffer)
},{"buffer":3,"stream":164,"string_decoder":165}],252:[function(require,module,exports){
arguments[4][154][0].apply(exports,arguments)
},{"./_stream_readable":254,"./_stream_writable":256,"_process":152,"core-util-is":257,"dup":154,"inherits":258}],253:[function(require,module,exports){
arguments[4][155][0].apply(exports,arguments)
},{"./_stream_transform":255,"core-util-is":257,"dup":155,"inherits":258}],254:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = false;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // In streams that never have any data, and do push(null) right away,
  // the consumer can miss the 'end' event if they do some I/O before
  // consuming the stream.  So, we don't emit('end') until some reading
  // happens.
  this.calledRead = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (typeof chunk === 'string' && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null || chunk === undefined) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) {
        state.buffer.unshift(chunk);
      } else {
        state.reading = false;
        state.buffer.push(chunk);
      }

      if (state.needReadable)
        emitReadable(stream);

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  var state = this._readableState;
  state.calledRead = true;
  var nOrig = n;
  var ret;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    ret = null;

    // In cases where the decoder did not receive enough data
    // to produce a full chunk, then immediately received an
    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
    // howMuchToRead will see this and coerce the amount to
    // read to zero (because it's looking at the length of the
    // first <Buffer > in state.buffer), and we'll end up here.
    //
    // This can only happen via state.decoder -- no other venue
    // exists for pushing a zero-length chunk into state.buffer
    // and triggering this behavior. In this case, we return our
    // remaining data and end the stream, if appropriate.
    if (state.length > 0 && state.decoder) {
      ret = fromList(n, state);
      state.length -= ret.length;
    }

    if (state.length === 0)
      endReadable(this);

    return ret;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length - n <= state.highWaterMark)
    doRead = true;

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading)
    doRead = false;

  if (doRead) {
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read called its callback synchronously, then `reading`
  // will be false, and we need to re-evaluate how much data we
  // can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we happened to read() exactly the remaining amount in the
  // buffer, and the EOF has been seen at this point, then make sure
  // that we emit 'end' on the very next tick.
  if (state.ended && !state.endEmitted && state.length === 0)
    endReadable(this);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // if we've ended and we have some data left, then emit
  // 'readable' now to make sure it gets picked up.
  if (state.length > 0)
    emitReadable(stream);
  else
    endReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (state.emittedReadable)
    return;

  state.emittedReadable = true;
  if (state.sync)
    process.nextTick(function() {
      emitReadable_(stream);
    });
  else
    emitReadable_(stream);
}

function emitReadable_(stream) {
  stream.emit('readable');
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    if (readable !== src) return;
    cleanup();
  }

  function onend() {
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (!dest._writableState || dest._writableState.needDrain)
      ondrain();
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    // the handler that waits for readable events after all
    // the data gets sucked out in flow.
    // This would be easier to follow with a .once() handler
    // in flow(), but that is too slow.
    this.on('readable', pipeOnReadable);

    state.flowing = true;
    process.nextTick(function() {
      flow(src);
    });
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var dest = this;
    var state = src._readableState;
    state.awaitDrain--;
    if (state.awaitDrain === 0)
      flow(src);
  };
}

function flow(src) {
  var state = src._readableState;
  var chunk;
  state.awaitDrain = 0;

  function write(dest, i, list) {
    var written = dest.write(chunk);
    if (false === written) {
      state.awaitDrain++;
    }
  }

  while (state.pipesCount && null !== (chunk = src.read())) {

    if (state.pipesCount === 1)
      write(state.pipes, 0, null);
    else
      forEach(state.pipes, write);

    src.emit('data', chunk);

    // if anyone needs a drain, then we have to wait for that.
    if (state.awaitDrain > 0)
      return;
  }

  // if every destination was unpiped, either before entering this
  // function, or in the while loop, then stop flowing.
  //
  // NB: This is a pretty rare edge case.
  if (state.pipesCount === 0) {
    state.flowing = false;

    // if there were data event listeners added, then switch to old mode.
    if (EE.listenerCount(src, 'data') > 0)
      emitDataEvents(src);
    return;
  }

  // at this point, no one needed a drain, so we just ran out of data
  // on the next readable event, start it over again.
  state.ranOut = true;
}

function pipeOnReadable() {
  if (this._readableState.ranOut) {
    this._readableState.ranOut = false;
    flow(this);
  }
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data' && !this._readableState.flowing)
    emitDataEvents(this);

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        this.read(0);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  emitDataEvents(this);
  this.read(0);
  this.emit('resume');
};

Readable.prototype.pause = function() {
  emitDataEvents(this, true);
  this.emit('pause');
};

function emitDataEvents(stream, startPaused) {
  var state = stream._readableState;

  if (state.flowing) {
    // https://github.com/isaacs/readable-stream/issues/16
    throw new Error('Cannot switch to old mode now.');
  }

  var paused = startPaused || false;
  var readable = false;

  // convert to an old-style stream.
  stream.readable = true;
  stream.pipe = Stream.prototype.pipe;
  stream.on = stream.addListener = Stream.prototype.on;

  stream.on('readable', function() {
    readable = true;

    var c;
    while (!paused && (null !== (c = stream.read())))
      stream.emit('data', c);

    if (c === null) {
      readable = false;
      stream._readableState.needReadable = true;
    }
  });

  stream.pause = function() {
    paused = true;
    this.emit('pause');
  };

  stream.resume = function() {
    paused = false;
    if (readable)
      process.nextTick(function() {
        stream.emit('readable');
      });
    else
      this.read(0);
    this.emit('resume');
  };

  // now make it start, just in case it hadn't already.
  stream.emit('readable');
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    //if (state.objectMode && util.isNullOrUndefined(chunk))
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (typeof stream[i] === 'function' &&
        typeof this[i] === 'undefined') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted && state.calledRead) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"_process":152,"buffer":3,"core-util-is":257,"events":148,"inherits":258,"isarray":259,"stream":164,"string_decoder/":260}],255:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  var ts = this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('finish', function() {
    if ('function' === typeof this._flush)
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var rs = stream._readableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":252,"core-util-is":257,"inherits":258}],256:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb))
    ret = writeOrBuffer(this, state, chunk, encoding, cb);

  return ret;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      cb(er);
    });
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.bufferProcessing && state.buffer.length)
      clearBuffer(stream, state);

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  cb();
  if (finished)
    finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  for (var c = 0; c < state.buffer.length; c++) {
    var entry = state.buffer[c];
    var chunk = entry.chunk;
    var encoding = entry.encoding;
    var cb = entry.callback;
    var len = state.objectMode ? 1 : chunk.length;

    doWrite(stream, state, len, chunk, encoding, cb);

    // if we didn't call the onwrite immediately, then
    // it means that we need to wait until it does.
    // also, that means that the chunk and cb are currently
    // being processed, so move the buffer counter past them.
    if (state.writing) {
      c++;
      break;
    }
  }

  state.bufferProcessing = false;
  if (c < state.buffer.length)
    state.buffer = state.buffer.slice(c);
  else
    state.buffer.length = 0;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (typeof chunk !== 'undefined' && chunk !== null)
    this.write(chunk, encoding);

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    state.finished = true;
    stream.emit('finish');
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":252,"_process":152,"buffer":3,"core-util-is":257,"inherits":258,"stream":164}],257:[function(require,module,exports){
arguments[4][159][0].apply(exports,arguments)
},{"buffer":3,"dup":159}],258:[function(require,module,exports){
arguments[4][149][0].apply(exports,arguments)
},{"dup":149}],259:[function(require,module,exports){
arguments[4][150][0].apply(exports,arguments)
},{"dup":150}],260:[function(require,module,exports){
arguments[4][165][0].apply(exports,arguments)
},{"buffer":3,"dup":165}],261:[function(require,module,exports){
var Stream = require('stream'); // hack to fix a circular dependency issue when used with browserify
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":252,"./lib/_stream_passthrough.js":253,"./lib/_stream_readable.js":254,"./lib/_stream_transform.js":255,"./lib/_stream_writable.js":256,"stream":164}],262:[function(require,module,exports){
function SVGPathData(content) {
  this.commands = SVGPathData.parse(content);
}

SVGPathData.prototype.encode = function() {
  return SVGPathData.encode(this.commands);
};

SVGPathData.prototype.round = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.ROUND].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.toAbs = function() {
  return this.transform(SVGPathData.Transformer.TO_ABS);
};

SVGPathData.prototype.toRel = function() {
  return this.transform(SVGPathData.Transformer.TO_REL);
};

SVGPathData.prototype.translate = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.TRANSLATE].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.scale = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.SCALE].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.rotate = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.ROTATE].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.matrix = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.MATRIX].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.skewX = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.SKEW_X].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.skewY = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.SKEW_Y].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.xSymetry = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.X_AXIS_SIMETRY].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.ySymetry = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.Y_AXIS_SIMETRY].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.aToC = function() {
  return this.transform.apply(this, [SVGPathData.Transformer.A_TO_C].concat(
    [].slice.call(arguments, 0)));
};

SVGPathData.prototype.transform = function(transformFunction) {
  var newCommands = []
    , transformFunction = transformFunction.apply(null, [].slice.call(arguments, 1))
    , curCommands = []
    , commands = this.commands;
  for(var i=0, ii=commands.length; i<ii; i++) {
    curCommands = transformFunction(commands[i]);
    if(curCommands instanceof Array) {
      newCommands = newCommands.concat(curCommands);
    } else {
      newCommands.push(curCommands);
    }
  }
  this.commands = newCommands;
  return this;
};

// Static methods
SVGPathData.encode = function(commands) {
  var content = '', encoder = new SVGPathData.Encoder();
  encoder.on('readable', function () {
    var str;
    do {
      str = encoder.read();
      if(str !== null) {
        content += str;
      }
    } while(str !== null);
  });
  encoder.write(commands);
  encoder.end();
  return content;
};

SVGPathData.parse = function(content) {
  var commands = [], parser = new SVGPathData.Parser();
  parser.on('readable', function () {
    var command;
    do {
      command = parser.read();
      if(command !== null) {
        commands.push(command);
      }
    } while(command !== null);
  });
  parser.write(content);
  parser.end();
  return commands;
};

// Commands static vars
SVGPathData.CLOSE_PATH = 1;
SVGPathData.MOVE_TO = 2;
SVGPathData.HORIZ_LINE_TO = 4;
SVGPathData.VERT_LINE_TO = 8;
SVGPathData.LINE_TO = 16;
SVGPathData.CURVE_TO = 32;
SVGPathData.SMOOTH_CURVE_TO = 64;
SVGPathData.QUAD_TO = 128;
SVGPathData.SMOOTH_QUAD_TO = 256;
SVGPathData.ARC = 512;
SVGPathData.DRAWING_COMMANDS =
  SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO | SVGPathData.LINE_TO |
  SVGPathData.CURVE_TO | SVGPathData.SMOOTH_CURVE_TO | SVGPathData.QUAD_TO |
  SVGPathData.SMOOTH_QUAD_TO | SVGPathData.ARC;

// Export the main contructor first (tests are failing otherwise)
module.exports = SVGPathData;

// Expose the internal constructors
SVGPathData.Parser = require('./SVGPathDataParser.js');
SVGPathData.Encoder = require('./SVGPathDataEncoder.js');
SVGPathData.Transformer = require('./SVGPathDataTransformer.js');


},{"./SVGPathDataEncoder.js":263,"./SVGPathDataParser.js":264,"./SVGPathDataTransformer.js":265}],263:[function(require,module,exports){
(function (Buffer){
// Encode SVG PathData
// http://www.w3.org/TR/SVG/paths.html#PathDataBNF

// Access to SVGPathData constructor
var SVGPathData = require('./SVGPathData.js')

// TransformStream inherance required modules
  , TransformStream = require('readable-stream').Transform
  , util = require('util')

// Private consts : Char groups
  , WSP = ' ';

// Inherit of writeable stream
util.inherits(SVGPathDataEncoder, TransformStream);

// Constructor
function SVGPathDataEncoder(options) {

  // Ensure new were used
  if(!(this instanceof SVGPathDataEncoder)) {
    return new SVGPathDataEncoder(options);
  }

  // Parent constructor
  TransformStream.call(this, {
    objectMode: true
  });

  // Setting objectMode separately
  this._writableState.objectMode = true;
  this._readableState.objectMode = false;

}


// Read method
SVGPathDataEncoder.prototype._transform = function(commands, encoding, done) {
  var str = '';
  if(!(commands instanceof Array)) {
    commands = [commands];
  }
  for(var i=0, j=commands.length; i<j; i++) {
    // Horizontal move to command
    if(commands[i].type === SVGPathData.CLOSE_PATH) {
      str += 'z';
      continue;
    // Horizontal move to command
    } else if(commands[i].type === SVGPathData.HORIZ_LINE_TO) {
      str += (commands[i].relative?'h':'H')
        + commands[i].x;
    // Vertical move to command
    } else if(commands[i].type === SVGPathData.VERT_LINE_TO) {
      str += (commands[i].relative?'v':'V')
        + commands[i].y;
    // Move to command
    } else if(commands[i].type === SVGPathData.MOVE_TO) {
      str += (commands[i].relative?'m':'M')
        + commands[i].x + WSP + commands[i].y;
    // Line to command
    } else if(commands[i].type === SVGPathData.LINE_TO) {
      str += (commands[i].relative?'l':'L')
        + commands[i].x + WSP + commands[i].y;
    // Curve to command
    } else if(commands[i].type === SVGPathData.CURVE_TO) {
      str += (commands[i].relative?'c':'C')
        + commands[i].x2 + WSP + commands[i].y2
        + WSP + commands[i].x1 + WSP + commands[i].y1
        + WSP + commands[i].x + WSP + commands[i].y;
    // Smooth curve to command
    } else if(commands[i].type === SVGPathData.SMOOTH_CURVE_TO) {
      str += (commands[i].relative?'s':'S')
        + commands[i].x2 + WSP + commands[i].y2
        + WSP + commands[i].x + WSP + commands[i].y;
    // Quadratic bezier curve to command
    } else if(commands[i].type === SVGPathData.QUAD_TO) {
      str += (commands[i].relative?'q':'Q')
        + commands[i].x1 + WSP + commands[i].y1
        + WSP + commands[i].x + WSP + commands[i].y;
    // Smooth quadratic bezier curve to command
    } else if(commands[i].type === SVGPathData.SMOOTH_QUAD_TO) {
      str += (commands[i].relative?'t':'T')
        + commands[i].x + WSP + commands[i].y;
    // Elliptic arc command
    } else if(commands[i].type === SVGPathData.ARC) {
      str += (commands[i].relative?'a':'A')
        + commands[i].rX + WSP + commands[i].rY
        + WSP + commands[i].xRot
        + WSP + commands[i].lArcFlag + WSP + commands[i].sweepFlag
        + WSP + commands[i].x + WSP + commands[i].y;
    // Unkown command
    } else {
      this.emit('error', new Error('Unexpected command type "'
        + commands[i].type + '" at index ' + i + '.'));
    }
  }
  this.push(new Buffer(str, 'utf8'));
  done();
};

module.exports = SVGPathDataEncoder;


}).call(this,require("buffer").Buffer)
},{"./SVGPathData.js":262,"buffer":3,"readable-stream":261,"util":167}],264:[function(require,module,exports){
(function (Buffer){
// Parse SVG PathData
// http://www.w3.org/TR/SVG/paths.html#PathDataBNF

// Access to SVGPathData constructor
var SVGPathData = require('./SVGPathData.js')

// TransformStream inherance required modules
  , TransformStream = require('readable-stream').Transform
  , util = require('util')

// Private consts : Char groups
  , WSP = [' ', '\t', '\r', '\n']
  , DIGITS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
  , SIGNS = ['-', '+']
  , EXPONENTS = ['e', 'E']
  , DECPOINT = ['.']
  , FLAGS = ['0', '1']
  , COMMA = [',']
  , COMMANDS = ['m', 'M', 'z', 'Z', 'l', 'L', 'h', 'H', 'v', 'V', 'c', 'C',
    's', 'S', 'q', 'Q', 't', 'T', 'a', 'A']
;

// Inherit of transform stream
util.inherits(SVGPathDataParser, TransformStream);

// Constructor
function SVGPathDataParser(options) {

  // Ensure new were used
  if(!(this instanceof SVGPathDataParser)) {
    return new SVGPathDataParser(options);
  }

  // Parent constructor
  TransformStream.call(this, {
    objectMode: true
  });

  // Setting objectMode separately
  this._writableState.objectMode = false;
  this._readableState.objectMode = true;

  // Parsing vars
  this.state = SVGPathDataParser.STATE_COMMAS_WSPS;
  this.curNumber = '';
  this.curCommand = null;
  this._flush = function(callback) {
    this._transform(new Buffer(' '), 'utf-8', function() {});
    // Adding residual command
    if(null !== this.curCommand) {
      if(this.curCommand.invalid) {
        this.emit('error',
          new SyntaxError('Unterminated command at the path end.'));
      }
      this.push(this.curCommand);
      this.curCommand = null;
      this.state ^= this.state&SVGPathDataParser.STATE_COMMANDS_MASK;
    }
    callback();
  };
  this._transform = function(chunk, encoding, callback) {
    var str = chunk.toString(encoding !== 'buffer' ? encoding : 'utf8');
    for(var i=0, j=str.length; i<j; i++) {
      // White spaces parsing
      if(this.state&SVGPathDataParser.STATE_WSP
        || this.state&SVGPathDataParser.STATE_WSPS) {
          if(-1 !== WSP.indexOf(str[i])) {
            this.state ^= this.state&SVGPathDataParser.STATE_WSP;
            // any space stops current number parsing
            if('' !== this.curNumber) {
              this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;
            } else {
              continue;
            }
          }
      }
      // Commas parsing
      if(this.state&SVGPathDataParser.STATE_COMMA
        || this.state&SVGPathDataParser.STATE_COMMAS) {
          if(-1 !== COMMA.indexOf(str[i])) {
            this.state ^= this.state&SVGPathDataParser.STATE_COMMA;
            // any comma stops current number parsing
            if('' !== this.curNumber) {
              this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;
            } else {
              continue;
            }
          }
      }
      // Numbers parsing : -125.25e-125
      if(this.state&SVGPathDataParser.STATE_NUMBER) {
        // Reading the sign
        if((this.state&SVGPathDataParser.STATE_NUMBER_MASK) ===
          SVGPathDataParser.STATE_NUMBER) {
          this.state |= SVGPathDataParser.STATE_NUMBER_INT |
            SVGPathDataParser.STATE_NUMBER_DIGITS;
          if(-1 !== SIGNS.indexOf(str[i])) {
            this.curNumber += str[i];
            continue;
          }
        }
        // Reading the exponent sign
        if(this.state&SVGPathDataParser.STATE_NUMBER_EXPSIGN) {
          this.state ^= SVGPathDataParser.STATE_NUMBER_EXPSIGN;
          this.state |= SVGPathDataParser.STATE_NUMBER_DIGITS;
          if(-1 !== SIGNS.indexOf(str[i])) {
            this.curNumber += str[i];
            continue;
          }
        }
        // Reading digits
        if(this.state&SVGPathDataParser.STATE_NUMBER_DIGITS) {
          if(-1 !== DIGITS.indexOf(str[i])) {
            this.curNumber += str[i];
            continue;
          }
          this.state ^= SVGPathDataParser.STATE_NUMBER_DIGITS;
        }
        // Ended reading left side digits
        if(this.state&SVGPathDataParser.STATE_NUMBER_INT) {
          this.state ^= SVGPathDataParser.STATE_NUMBER_INT;
          // if got a point, reading right side digits
          if(-1 !== DECPOINT.indexOf(str[i])) {
            this.curNumber += str[i];
            this.state |= SVGPathDataParser.STATE_NUMBER_FLOAT |
              SVGPathDataParser.STATE_NUMBER_DIGITS;
            continue;
          // if got e/E, reading the exponent
          } else if(-1 !== EXPONENTS.indexOf(str[i])) {
            this.curNumber += str[i];
            this.state |= SVGPathDataParser.STATE_NUMBER_EXP |
              SVGPathDataParser.STATE_NUMBER_EXPSIGN;
            continue;
          }
          // else we're done with that number
          this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;
        }
        // Ended reading decimal digits
        if(this.state&SVGPathDataParser.STATE_NUMBER_FLOAT) {
          this.state ^= SVGPathDataParser.STATE_NUMBER_FLOAT;
          // if got e/E, reading the exponent
          if(-1 !== EXPONENTS.indexOf(str[i])) {
            this.curNumber += str[i];
            this.state |= SVGPathDataParser.STATE_NUMBER_EXP |
              SVGPathDataParser.STATE_NUMBER_EXPSIGN;
            continue;
          }
          // else we're done with that number
          this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;
        }
        // Ended reading exponent digits
        if(this.state&SVGPathDataParser.STATE_NUMBER_EXP) {
          // we're done with that number
          this.state ^= this.state&SVGPathDataParser.STATE_NUMBER_MASK;
        }
      }
      // New number
      if(this.curNumber) {
        // Horizontal move to command (x)
        if(this.state&SVGPathDataParser.STATE_HORIZ_LINE_TO) {
          if(null === this.curCommand) {
            this.push({
              type: SVGPathData.HORIZ_LINE_TO,
              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
              x: Number(this.curNumber)
            });
          } else {
            this.curCommand.x = Number(this.curNumber);
            delete this.curCommand.invalid;
            this.push(this.curCommand);
            this.curCommand = null;
          }
          this.state |= SVGPathDataParser.STATE_NUMBER;
        // Vertical move to command (y)
        } else if(this.state&SVGPathDataParser.STATE_VERT_LINE_TO) {
          if(null === this.curCommand) {
            this.push({
              type: SVGPathData.VERT_LINE_TO,
              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
              y: Number(this.curNumber)
            });
          } else {
            this.curCommand.y = Number(this.curNumber);
            delete this.curCommand.invalid;
            this.push(this.curCommand);
            this.curCommand = null;
          }
          this.state |= SVGPathDataParser.STATE_NUMBER;
        // Move to / line to / smooth quadratic curve to commands (x, y)
        } else if(this.state&SVGPathDataParser.STATE_MOVE_TO
          || this.state&SVGPathDataParser.STATE_LINE_TO
          || this.state&SVGPathDataParser.STATE_SMOOTH_QUAD_TO) {
          if(null === this.curCommand) {
            this.curCommand = {
              type: (this.state&SVGPathDataParser.STATE_MOVE_TO ?
                SVGPathData.MOVE_TO :
                  (this.state&SVGPathDataParser.STATE_LINE_TO ?
                    SVGPathData.LINE_TO : SVGPathData.SMOOTH_QUAD_TO
                  )
                ),
              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
              x: Number(this.curNumber)
            };
          } else if('undefined' === typeof this.curCommand.x) {
            this.curCommand.x = Number(this.curNumber);
          } else {
            delete this.curCommand.invalid;
            this.curCommand.y = Number(this.curNumber);
            this.push(this.curCommand);
            this.curCommand = null;
            // Switch to line to state
            if(this.state&SVGPathDataParser.STATE_MOVE_TO) {
              this.state ^= SVGPathDataParser.STATE_MOVE_TO;
              this.state |= SVGPathDataParser.STATE_LINE_TO;
            }
          }
          this.state |= SVGPathDataParser.STATE_NUMBER;
        // Curve to commands (x1, y1, x2, y2, x, y)
        } else if(this.state&SVGPathDataParser.STATE_CURVE_TO) {
          if(null === this.curCommand) {
            this.curCommand = {
              type: SVGPathData.CURVE_TO,
              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
              invalid: true,
              x2:  Number(this.curNumber)
            };
          } else if('undefined' === typeof this.curCommand.x2) {
            this.curCommand.x2 = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.y2) {
            this.curCommand.y2 = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.x1) {
            this.curCommand.x1 = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.y1) {
            this.curCommand.y1 = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.x) {
            this.curCommand.x = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.y) {
            this.curCommand.y = Number(this.curNumber);
            delete this.curCommand.invalid;
            this.push(this.curCommand);
            this.curCommand = null;
          }
          this.state |= SVGPathDataParser.STATE_NUMBER;
        // Smooth curve to commands (x1, y1, x, y)
        } else if(this.state&SVGPathDataParser.STATE_SMOOTH_CURVE_TO) {
          if(null === this.curCommand) {
            this.curCommand = {
              type: SVGPathData.SMOOTH_CURVE_TO,
              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
              invalid: true,
              x2:  Number(this.curNumber)
            };
          } else if('undefined' === typeof this.curCommand.x2) {
            this.curCommand.x2 = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.y2) {
            this.curCommand.y2 = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.x) {
            this.curCommand.x = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.y) {
            this.curCommand.y = Number(this.curNumber);
            delete this.curCommand.invalid;
            this.push(this.curCommand);
            this.curCommand = null;
          }
          this.state |= SVGPathDataParser.STATE_NUMBER;
        // Quadratic bezier curve to commands (x1, y1, x, y)
        } else if(this.state&SVGPathDataParser.STATE_QUAD_TO) {
          if(null === this.curCommand) {
            this.curCommand = {
              type: SVGPathData.QUAD_TO,
              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
              invalid: true,
              x1:  Number(this.curNumber)
            };
          } else if('undefined' === typeof this.curCommand.x1) {
            this.curCommand.x1 = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.y1) {
            this.curCommand.y1 = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.x) {
            this.curCommand.x = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.y) {
            this.curCommand.y = Number(this.curNumber);
            delete this.curCommand.invalid;
            this.push(this.curCommand);
            this.curCommand = null;
          }
          this.state |= SVGPathDataParser.STATE_NUMBER;
        // Elliptic arc commands (rX, rY, xRot, lArcFlag, sweepFlag, x, y)
        } else if(this.state&SVGPathDataParser.STATE_ARC) {
          if(null === this.curCommand) {
            this.curCommand = {
              type: SVGPathData.ARC,
              relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
              invalid: true,
              rX:  Number(this.curNumber)
            };
          } else if('undefined' === typeof this.curCommand.rX) {
            if(Number(this.curNumber) < 0) {
              this.emit('error', new SyntaxError('Expected positive number, got "'
                + this.curNumber + '" at index "' + i + '"'));
            }
            this.curCommand.rX = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.rY) {
            if(Number(this.curNumber) < 0) {
              this.emit('error', new SyntaxError('Expected positive number, got "'
                + this.curNumber + '" at index "' + i + '"'));
            }
            this.curCommand.rY = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.xRot) {
            this.curCommand.xRot = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.lArcFlag) {
            if('0' !== this.curNumber && '1' !== this.curNumber) {
              this.emit('error', new SyntaxError('Expected a flag, got "' +
                this.curNumber + '" at index "' + i + '"'));
            }
            this.curCommand.lArcFlag = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.sweepFlag) {
            if('0' !== this.curNumber && '1' !== this.curNumber) {
              this.emit('error', new SyntaxError('Expected a flag, got "'
                + this.curNumber +'" at index "' + i + '"'));
            }
            this.curCommand.sweepFlag = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.x) {
            this.curCommand.x = Number(this.curNumber);
          } else if('undefined' === typeof this.curCommand.y) {
            this.curCommand.y = Number(this.curNumber);
            delete this.curCommand.invalid;
            this.push(this.curCommand);
            this.curCommand = null;
          }
          this.state |= SVGPathDataParser.STATE_NUMBER;
        }
        this.curNumber = '';
        // Continue if a white space or a comma was detected
        if(-1 !== WSP.indexOf(str[i]) || -1 !== COMMA.indexOf(str[i])) {
          continue;
        }
        // if a sign is detected, then parse the new number
        if(-1 !== SIGNS.indexOf(str[i])) {
          this.curNumber = str[i];
          this.state |= SVGPathDataParser.STATE_NUMBER_INT |
            SVGPathDataParser.STATE_NUMBER_DIGITS;
          continue;
        }
        // if the decpoint is detected, then parse the new number
        if(-1 !== DECPOINT.indexOf(str[i])) {
          this.curNumber = str[i];
          this.state |= SVGPathDataParser.STATE_NUMBER_FLOAT |
            SVGPathDataParser.STATE_NUMBER_DIGITS;
          continue;
        }
      }
      // End of a command
      if(-1 !== COMMANDS.indexOf(str[i])) {
        // Adding residual command
        if(null !== this.curCommand) {
          if(this.curCommand.invalid) {
            this.emit('error',
              new SyntaxError('Unterminated command at index ' + i + '.'));
          }
          this.push(this.curCommand);
          this.curCommand = null;
          this.state ^= this.state&SVGPathDataParser.STATE_COMMANDS_MASK;
        }
      }
      // Detecting the next command
      this.state ^= this.state&SVGPathDataParser.STATE_COMMANDS_MASK;
      // Is the command relative
      if(str[i]===str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_RELATIVE;
      } else {
        this.state ^= this.state&SVGPathDataParser.STATE_RELATIVE;
      }
      // Horizontal move to command
      if('z' === str[i].toLowerCase()) {
        this.push({
          type: SVGPathData.CLOSE_PATH
        });
        this.state = SVGPathDataParser.STATE_COMMAS_WSPS;
        continue;
      // Horizontal move to command
      } else if('h' === str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_HORIZ_LINE_TO;
        this.curCommand = {
          type: SVGPathData.HORIZ_LINE_TO,
          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
          invalid: true
        };
      // Vertical move to command
      } else if('v' === str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_VERT_LINE_TO;
        this.curCommand = {
          type: SVGPathData.VERT_LINE_TO,
          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
          invalid: true
        };
      // Move to command
      } else if('m' === str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_MOVE_TO;
        this.curCommand = {
          type: SVGPathData.MOVE_TO,
          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
          invalid: true
        };
      // Line to command
      } else if('l' === str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_LINE_TO;
        this.curCommand = {
          type: SVGPathData.LINE_TO,
          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
          invalid: true
        };
      // Curve to command
      } else if('c' === str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_CURVE_TO;
        this.curCommand = {
          type: SVGPathData.CURVE_TO,
          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
          invalid: true
        };
      // Smooth curve to command
      } else if('s' === str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_SMOOTH_CURVE_TO;
        this.curCommand = {
          type: SVGPathData.SMOOTH_CURVE_TO,
          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
          invalid: true
        };
      // Quadratic bezier curve to command
      } else if('q' === str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_QUAD_TO;
        this.curCommand = {
          type: SVGPathData.QUAD_TO,
          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
          invalid: true
        };
      // Smooth quadratic bezier curve to command
      } else if('t' === str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_SMOOTH_QUAD_TO;
        this.curCommand = {
          type: SVGPathData.SMOOTH_QUAD_TO,
          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
          invalid: true
        };
      // Elliptic arc command
      } else if('a' === str[i].toLowerCase()) {
        this.state |= SVGPathDataParser.STATE_ARC;
        this.curCommand = {
          type: SVGPathData.ARC,
          relative: !!(this.state&SVGPathDataParser.STATE_RELATIVE),
          invalid: true
        };
      // Unkown command
      } else {
        this.emit('error', new SyntaxError('Unexpected character "' + str[i]
          + '" at index ' + i + '.'));
      }
      // White spaces can follow a command
      this.state |= SVGPathDataParser.STATE_COMMAS_WSPS |
        SVGPathDataParser.STATE_NUMBER;
    }
    callback();
  };
}

// Static consts
// Parsing states
SVGPathDataParser.STATE_WSP = 1;
SVGPathDataParser.STATE_WSPS = 2;
SVGPathDataParser.STATE_COMMA = 4;
SVGPathDataParser.STATE_COMMAS = 8;
SVGPathDataParser.STATE_COMMAS_WSPS =
  SVGPathDataParser.STATE_WSP | SVGPathDataParser.STATE_WSPS |
  SVGPathDataParser.STATE_COMMA | SVGPathDataParser.STATE_COMMAS;
SVGPathDataParser.STATE_NUMBER = 16;
SVGPathDataParser.STATE_NUMBER_DIGITS = 32;
SVGPathDataParser.STATE_NUMBER_INT = 64;
SVGPathDataParser.STATE_NUMBER_FLOAT = 128;
SVGPathDataParser.STATE_NUMBER_EXP = 256;
SVGPathDataParser.STATE_NUMBER_EXPSIGN = 512;
SVGPathDataParser.STATE_NUMBER_MASK = SVGPathDataParser.STATE_NUMBER |
  SVGPathDataParser.STATE_NUMBER_DIGITS | SVGPathDataParser.STATE_NUMBER_INT |
  SVGPathDataParser.STATE_NUMBER_EXP | SVGPathDataParser.STATE_NUMBER_FLOAT;
SVGPathDataParser.STATE_RELATIVE = 1024;
SVGPathDataParser.STATE_CLOSE_PATH = 2048; // Close path command (z/Z)
SVGPathDataParser.STATE_MOVE_TO = 4096; // Move to command (m/M)
SVGPathDataParser.STATE_LINE_TO = 8192; // Line to command (l/L=)
SVGPathDataParser.STATE_HORIZ_LINE_TO = 16384; // Horizontal line to command (h/H)
SVGPathDataParser.STATE_VERT_LINE_TO = 32768; // Vertical line to command (v/V)
SVGPathDataParser.STATE_CURVE_TO = 65536; // Curve to command (c/C)
SVGPathDataParser.STATE_SMOOTH_CURVE_TO = 131072; // Smooth curve to command (s/S)
SVGPathDataParser.STATE_QUAD_TO = 262144; // Quadratic bezier curve to command (q/Q)
SVGPathDataParser.STATE_SMOOTH_QUAD_TO = 524288; // Smooth quadratic bezier curve to command (t/T)
SVGPathDataParser.STATE_ARC = 1048576; // Elliptic arc command (a/A)
SVGPathDataParser.STATE_COMMANDS_MASK =
  SVGPathDataParser.STATE_CLOSE_PATH | SVGPathDataParser.STATE_MOVE_TO |
  SVGPathDataParser.STATE_LINE_TO | SVGPathDataParser.STATE_HORIZ_LINE_TO |
  SVGPathDataParser.STATE_VERT_LINE_TO | SVGPathDataParser.STATE_CURVE_TO |
  SVGPathDataParser.STATE_SMOOTH_CURVE_TO | SVGPathDataParser.STATE_QUAD_TO |
  SVGPathDataParser.STATE_SMOOTH_QUAD_TO | SVGPathDataParser.STATE_ARC;

module.exports = SVGPathDataParser;


}).call(this,require("buffer").Buffer)
},{"./SVGPathData.js":262,"buffer":3,"readable-stream":261,"util":167}],265:[function(require,module,exports){
// Transform SVG PathData
// http://www.w3.org/TR/SVG/paths.html#PathDataBNF

// Access to SVGPathData constructor
var SVGPathData = require('./SVGPathData.js')

// TransformStream inherance required modules
  , TransformStream = require('readable-stream').Transform
  , util = require('util')
;

// Inherit of transform stream
util.inherits(SVGPathDataTransformer, TransformStream);

function SVGPathDataTransformer(transformFunction) {
  // Ensure new were used
  if(!(this instanceof SVGPathDataTransformer)) {
    return new (SVGPathDataTransformer.bind.apply(SVGPathDataTransformer,
      [SVGPathDataTransformer].concat([].slice.call(arguments, 0))));
  }

  // Transform function needed
  if('function' !== typeof transformFunction) {
    throw new Error('Please provide a transform callback to receive commands.')
  }
  this._transformer = transformFunction.apply(null, [].slice.call(arguments, 1));
  if('function' !== typeof this._transformer) {
    throw new Error('Please provide a valid transform (returning a function).')
  }

  // Parent constructor
  TransformStream.call(this, {
    objectMode: true
  });
}

SVGPathDataTransformer.prototype._transform = function(commands, encoding, done) {
  if(!(commands instanceof Array)) {
    commands = [commands];
  }
  for(var i=0, j=commands.length; i<j; i++) {
    this.push(this._transformer(commands[i]));
  }
  done();
};

// Predefined transforming functions
// Rounds commands values
SVGPathDataTransformer.ROUND = function roundGenerator(roundVal) {
  roundVal = roundVal || 10e12;
  return function round(command) {
    // x1/y1 values
    if('undefined' !== typeof command.x1) {
      command.x1 = Math.round(command.x1*roundVal)/roundVal;
    }
    if('undefined' !== typeof command.y1) {
      command.y1 = Math.round(command.y1*roundVal)/roundVal;
    }
    // x2/y2 values
    if('undefined' !== typeof command.x2) {
      command.x2 = Math.round(command.x2*roundVal)/roundVal;
    }
    if('undefined' !== typeof command.y2) {
      command.y2 = Math.round(command.y2*roundVal)/roundVal;
    }
    // Finally x/y values
    if('undefined' !== typeof command.x) {
      command.x = Math.round(command.x*roundVal,12)/roundVal;
    }
    if('undefined' !== typeof command.y) {
      command.y = Math.round(command.y*roundVal,12)/roundVal;
    }
    return command;
  };
};

// Relative to absolute commands
SVGPathDataTransformer.TO_ABS = function toAbsGenerator() {
  var prevX = 0, prevY = 0, pathStartX = NaN, pathStartY = NaN;
  return function toAbs(command) {
    if(isNaN(pathStartX) && (command.type&SVGPathData.DRAWING_COMMANDS)) {
      pathStartX = prevX;
      pathStartY = prevY;
    }
    if((command.type&SVGPathData.CLOSE_PATH) && !isNaN(pathStartX)) {
      prevX = isNaN(pathStartX) ? 0 : pathStartX;
      prevY = isNaN(pathStartY) ? 0 : pathStartY;
      pathStartX = NaN;
      pathStartY = NaN;
    }
    if(command.relative) {
      // x1/y1 values
      if('undefined' !== typeof command.x1) {
        command.x1 = prevX + command.x1;
      }
      if('undefined' !== typeof command.y1) {
        command.y1 = prevY + command.y1;
      }
      // x2/y2 values
      if('undefined' !== typeof command.x2) {
        command.x2 = prevX + command.x2;
      }
      if('undefined' !== typeof command.y2) {
        command.y2 = prevY + command.y2;
      }
      // Finally x/y values
      if('undefined' !== typeof command.x) {
        command.x = prevX + command.x;
      }
      if('undefined' !== typeof command.y) {
        command.y = prevY + command.y;
      }
      command.relative = false;
    }
    prevX = ('undefined' !== typeof command.x ? command.x : prevX);
    prevY = ('undefined' !== typeof command.y ? command.y : prevY);
    return command;
  };
};

// Absolute to relative commands
SVGPathDataTransformer.TO_REL = function toRelGenerator() {
  var prevX = 0, prevY = 0;
  return function toRel(command) {
    if(!command.relative) {
      // x1/y1 values
      if('undefined' !== typeof command.x1) {
        command.x1 = command.x1 - prevX;
      }
      if('undefined' !== typeof command.y1) {
        command.y1 = command.y1 - prevY;
      }
      // x2/y2 values
      if('undefined' !== typeof command.x2) {
        command.x2 = command.x2 - prevX;
      }
      if('undefined' !== typeof command.y2) {
        command.y2 = command.y2 - prevY;
      }
      // Finally x/y values
      if('undefined' !== typeof command.x) {
        command.x = command.x - prevX;
      }
      if('undefined' !== typeof command.y) {
        command.y = command.y - prevY;
      }
    command.relative = true;
    }
    prevX = ('undefined' !== typeof command.x ? prevX + command.x : prevX);
    prevY = ('undefined' !== typeof command.y ? prevY + command.y : prevY);
    return command;
  };
};

// SVG Transforms : http://www.w3.org/TR/SVGTiny12/coords.html#TransformList
// Matrix : http://apike.ca/prog_svg_transform.html
SVGPathDataTransformer.MATRIX = function matrixGenerator(a, b, c, d, e, f) {
  var prevX, prevY;
  if('number' !== typeof a, 'number' !== typeof b,
    'number' !== typeof c, 'number' !== typeof d,
    'number' !== typeof e, 'number' !== typeof f) {
    throw new Error('A matrix transformation requires parameters [a,b,c,d,e,f]'
      +' to be set and to be numbers.');
  }
  return function matrix(command) {
    var origX = command.x, origX1 = command.x1, origX2 = command.x2;
    if('undefined' !== typeof command.x) {
      command.x =  command.x * a +
        ('undefined' !== typeof command.y ?
          command.y : (command.relative ? 0 : prevY || 0)
        ) * c
        + (command.relative && 'undefined' !== typeof prevX ? 0 : e);
    }
    if('undefined' !== typeof command.y) {
      command.y = ('undefined' !== typeof origX ?
          origX : (command.relative ? 0 : prevX || 0)
        ) * b
        + command.y * d
        + (command.relative && 'undefined' !== typeof prevY ? 0 : f);
    }
    if('undefined' !== typeof command.x1) {
      command.x1 = command.x1 * a + command.y1 * c
        + (command.relative && 'undefined' !== typeof prevX ? 0 : e);
    }
    if('undefined' !== typeof command.y1) {
      command.y1 = origX1 * b + command.y1 * d
        + (command.relative && 'undefined' !== typeof prevY ? 0 : f);
    }
    if('undefined' !== typeof command.x2) {
      command.x2 = command.x2 * a + command.y2 * c
        + (command.relative && 'undefined' !== typeof prevX ? 0 : e);
    }
    if('undefined' !== typeof command.y2) {
      command.y2 = origX2 * b + command.y2 * d
        + (command.relative && 'undefined' !== typeof prevY ? 0 : f);
    }
    prevX = ('undefined' !== typeof command.x ?
      (command.relative ? (prevX || 0) + command.x : command.x) :
      prevX || 0);
    prevY = ('undefined' !== typeof command.y ?
      (command.relative ? (prevY || 0) + command.y : command.y) :
      prevY || 0);
    return command;
  };
};

// Rotation
SVGPathDataTransformer.ROTATE = function rotateGenerator(a, x, y) {
  if('number' !== typeof a) {
    throw new Error('A rotate transformation requires the parameter a'
      +' to be set and to be a number.');
  }
  return (function(toOrigin, doRotate, fromOrigin) {
    return function rotate(command) {
      return fromOrigin(doRotate(toOrigin(command)));
    };
  })(SVGPathDataTransformer.TRANSLATE(-(x || 0), -(y || 0))
   , SVGPathDataTransformer.MATRIX(Math.cos(a), Math.sin(a),
      -Math.sin(a), Math.cos(a), 0, 0)
   , SVGPathDataTransformer.TRANSLATE(x || 0, y || 0)
  );
};

// Translation
SVGPathDataTransformer.TRANSLATE = function translateGenerator(dX, dY) {
  if('number' !== typeof dX) {
    throw new Error('A translate transformation requires the parameter dX'
      +' to be set and to be a number.');
  }
  return SVGPathDataTransformer.MATRIX(1, 0, 0, 1, dX, dY || 0);
};

// Scaling
SVGPathDataTransformer.SCALE = function scaleGenerator(dX, dY) {
  if('number' !== typeof dX) {
    throw new Error('A scale transformation requires the parameter dX'
      +' to be set and to be a number.');
  }
  return SVGPathDataTransformer.MATRIX(dX, 0, 0, dY || dX, 0, 0);
};

// Skew
SVGPathDataTransformer.SKEW_X = function skewXGenerator(a) {
  if('number' !== typeof a) {
    throw new Error('A skewX transformation requires the parameter x'
      +' to be set and to be a number.');
  }
  return SVGPathDataTransformer.MATRIX(1, 0, Math.atan(a), 1, 0, 0);
}
SVGPathDataTransformer.SKEW_Y = function skewYGenerator(a) {
  if('number' !== typeof a) {
    throw new Error('A skewY transformation requires the parameter y'
      +' to be set and to be a number.');
  }
  return SVGPathDataTransformer.MATRIX(1, Math.atan(a), 0, 1, 0, 0);
}

// Symetry througth the X axis
SVGPathDataTransformer.X_AXIS_SIMETRY = function xSymetryGenerator(xDecal) {
  return (function(toAbs, scale, translate) {
    return function xSymetry(command) {
      return translate(scale(toAbs(command)));
    };
  })(SVGPathDataTransformer.TO_ABS(),
    SVGPathDataTransformer.SCALE(-1, 1),
    SVGPathDataTransformer.TRANSLATE(xDecal || 0, 0)
  );
};

// Symetry througth the Y axis
SVGPathDataTransformer.Y_AXIS_SIMETRY = function ySymetryGenerator(yDecal) {
  return (function(toAbs, scale, translate) {
    return function ySymetry(command) {
      return translate(scale(toAbs(command)));
    };
  })(SVGPathDataTransformer.TO_ABS(),
    SVGPathDataTransformer.SCALE(1, -1),
    SVGPathDataTransformer.TRANSLATE(0, yDecal || 0)
  );
};

// Convert arc commands to curve commands
SVGPathDataTransformer.A_TO_C = function a2CGenerator() {
  var prevX = 0, prevY = 0, args;
  return (function(toAbs) {
    return function a2C(command) {
      var commands = [];
      command = toAbs(command);
      if(command.type === SVGPathData.ARC) {
        args = a2c(prevX, prevY, command.rX, command.rX, command.xRot,
          command.lArcFlag, command.sweepFlag, command.x, command.y);
        prevX = command.x; prevY = command.y;
        for(var i=0, ii=args.length; i<ii; i+=6) {
          commands.push({
            type: SVGPathData.CURVE_TO,
            relative: false,
            x2: args[i],
            y2: args[i+1],
            x1: args[i+2],
            y1: args[i+3],
            x: args[i+4],
            y: args[i+5]
          });
        }
        return commands;
      } else {
        prevX = command.x; prevY = command.y;
        return command;
      }
    };
  })(SVGPathDataTransformer.TO_ABS());
};

function a2c (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
  var PI = Math.PI
  // Borrowed from https://github.com/PPvG/svg-path/blob/master/lib/Path.js#L208
  // that were borrowed from https://github.com/DmitryBaranovskiy/raphael/blob/4d97d4ff5350bb949b88e6d78b877f76ea8b5e24/raphael.js#L2216-L2304
  // (MIT licensed; http://raphaeljs.com/license.html).
  // --------------------------------------------------------------------------
  // for more information of where this math came from visit:
  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
  var _120 = PI * 120 / 180,
      rad = PI / 180 * (+angle || 0),
      res = [],
      xy,
      rotate = function (x, y, rad) {
        var X = x * Math.cos(rad) - y * Math.sin(rad),
        Y = x * Math.sin(rad) + y * Math.cos(rad);
        return {x: X, y: Y};
      };
  if (!recursive) {
    xy = rotate(x1, y1, -rad);
    x1 = xy.x;
    y1 = xy.y;
    xy = rotate(x2, y2, -rad);
    x2 = xy.x;
    y2 = xy.y;
    var cos = Math.cos(PI / 180 * angle),
        sin = Math.sin(PI / 180 * angle),
        x = (x1 - x2) / 2,
        y = (y1 - y2) / 2;
    var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);
    if (h > 1) {
      h = Math.sqrt(h);
      rx = h * rx;
      ry = h * ry;
    }
    var rx2 = rx * rx,
        ry2 = ry * ry,
        k = (large_arc_flag == sweep_flag ? -1 : 1) *
          Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) /
          (rx2 * y * y + ry2 * x * x))),
        cx = k * rx * y / ry + (x1 + x2) / 2,
        cy = k * -ry * x / rx + (y1 + y2) / 2,
        f1 = Math.asin(((y1 - cy) / ry).toFixed(9)),
        f2 = Math.asin(((y2 - cy) / ry).toFixed(9));

    f1 = x1 < cx ? PI - f1 : f1;
    f2 = x2 < cx ? PI - f2 : f2;
    f1 < 0 && (f1 = PI * 2 + f1);
    f2 < 0 && (f2 = PI * 2 + f2);
    if (sweep_flag && f1 > f2) {
      f1 = f1 - PI * 2;
    }
    if (!sweep_flag && f2 > f1) {
      f2 = f2 - PI * 2;
    }
  } else {
    f1 = recursive[0];
    f2 = recursive[1];
    cx = recursive[2];
    cy = recursive[3];
  }
  var df = f2 - f1;
  if (Math.abs(df) > _120) {
    var f2old = f2,
        x2old = x2,
        y2old = y2;
    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
    x2 = cx + rx * Math.cos(f2);
    y2 = cy + ry * Math.sin(f2);
    res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old,
      [f2, f2old, cx, cy]);
  }
  df = f2 - f1;
  var c1 = Math.cos(f1),
      s1 = Math.sin(f1),
      c2 = Math.cos(f2),
      s2 = Math.sin(f2),
      t = Math.tan(df / 4),
      hx = 4 / 3 * rx * t,
      hy = 4 / 3 * ry * t,
      m1 = [x1, y1],
      m2 = [x1 + hx * s1, y1 - hy * c1],
      m3 = [x2 + hx * s2, y2 - hy * c2],
      m4 = [x2, y2];
  m2[0] = 2 * m1[0] - m2[0];
  m2[1] = 2 * m1[1] - m2[1];
  if (recursive) {
    return [m2, m3, m4].concat(res);
  } else {
    res = [m2, m3, m4].concat(res).join().split(',');
    var newres = [];
    for (var i = 0, ii = res.length; i < ii; i++) {
      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y :
        rotate(res[i], res[i + 1], rad).x;
    }
    return newres;
  }
}

module.exports = SVGPathDataTransformer;


},{"./SVGPathData.js":262,"readable-stream":261,"util":167}],266:[function(require,module,exports){
/*
 * svgicons2svgfont
 * https://github.com/nfroidure/svgicons2svgfont
 *
 * Copyright (c) 2013-2015 Nicolas Froidure and contributors
 * Licensed under the MIT license.
 */
"use strict";

// Transform helpers (will move elsewhere later)
function parseTransforms(value) {
 return value.match(
  /(rotate|translate|scale|skewX|skewY|matrix)\s*\(([^\)]*)\)\s*/g
 ).map(function(transform) {
  return transform.match(/[\w\.\-]+/g);
 });
}
function transformPath(path, transforms) {
  transforms.forEach(function(transform) {
    path[transform[0]].apply(path, transform.slice(1).map(function(n) {
      return parseFloat(n, 10);
    }));
  });
  return path;
}
function applyTransforms(d, parents) {
  var transforms = [];
  parents.forEach(function(parent) {
    if('undefined' !== typeof parent.attributes.transform) {
      transforms = transforms.concat(parseTransforms(parent.attributes.transform));
    }
  });
  return transformPath(new SVGPathData(d), transforms).encode();
}

// Rendering
function tagShouldRender(tag, parents) {
  return !parents.some(function(tag) {
    if('undefined' !== typeof tag.attributes.display &&
      'none' == tag.attributes.display.toLowerCase()) {
      return true;
    }
    if('undefined' !== typeof tag.attributes.width &&
      0 === parseFloat(tag.attributes.width, 0)) {
      return true;
    }
    if('undefined' !== typeof tag.attributes.height &&
      0 === parseFloat(tag.attributes.height, 0)) {
      return true;
    }
    if('undefined' !== typeof tag.attributes.viewBox) {
      var values = tag.attributes.viewBox.split(/\s*,*\s|\s,*\s*|,/);
      if(0 === parseFloat(values[2]) || 0 === parseFloat(values[3])) {
        return true;
      }
    }
  });
}

// Shapes helpers (should also move elsewhere)
function rectToPath(attributes) {
  var x = 'undefined' !== typeof attributes.x ?
    parseFloat(attributes.x, 10) :
    0;
  var y = 'undefined' !== typeof attributes.y ?
    parseFloat(attributes.y, 10) :
    0;
  var width = 'undefined' !== typeof attributes.width ?
    parseFloat(attributes.width, 10) :
    0;
  var height = 'undefined' !== typeof attributes.height ?
    parseFloat(attributes.height, 10) :
    0;
  var rx = 'undefined' !== typeof attributes.rx ?
    parseFloat(attributes.rx, 10) :
    0;
  var ry = 'undefined' !== typeof attributes.ry ?
    parseFloat(attributes.ry, 10) :
    0;

  return '' +
    // start at the left corner
    'M' + (x + rx) + ' ' + y +
    // top line
    'h' + (width - (rx * 2)) +
    // upper right corner
    ( rx || ry ?
      'a ' + rx + ' ' + ry + ' 0 0 1 ' + rx + ' ' + ry :
      ''
    ) +
    // Draw right side
    'v' + (height - (ry * 2)) +
    // Draw bottom right corner
    ( rx || ry ?
      'a ' + rx + ' ' + ry + ' 0 0 1 ' + (rx * -1) + ' ' + ry :
      ''
    ) +
    // Down the down side
    'h' + ((width  - (rx * 2)) * -1) +
    // Draw bottom right corner
    ( rx || ry ?
      'a ' + rx + ' ' + ry + ' 0 0 1 ' + (rx * -1) + ' ' + (ry * -1) :
      ''
    ) +
    // Down the left side
    'v' + ((height  - (ry * 2)) * -1) +
    // Draw bottom right corner
    ( rx || ry ?
      'a ' + rx + ' ' + ry + ' 0 0 1 ' + rx + ' ' + (ry * -1) :
      ''
    ) +
    // Close path
    'z';
}

function polylineToPath(attributes) {
  return 'M' + attributes.points;
}

function lineToPath(attributes) {
  // Move to the line start
  return '' +
  'M' + (parseFloat(attributes.x1,10)||0).toString(10) +
  ' ' + (parseFloat(attributes.y1,10)||0).toString(10) +
  ' ' + ((parseFloat(attributes.x1,10)||0)+1).toString(10) +
  ' ' + ((parseFloat(attributes.y1,10)||0)+1).toString(10) +
  ' ' + ((parseFloat(attributes.x2,10)||0)+1).toString(10) +
  ' ' + ((parseFloat(attributes.y2,10)||0)+1).toString(10) +
  ' ' + (parseFloat(attributes.x2,10)||0).toString(10) +
  ' ' + (parseFloat(attributes.y2,10)||0).toString(10) +
  'Z';
}


// http://www.whizkidtech.redprince.net/bezier/circle/
var KAPPA = ((Math.sqrt(2)-1)/3)*4;

function circleToPath(attributes) {
  var cx = parseFloat(attributes.cx, 10);
  var cy = parseFloat(attributes.cy, 10);
  var rx = 'undefined' !== typeof attributes.rx ?
    parseFloat(attributes.rx, 10) :
    parseFloat(attributes.r, 10);
  var ry = 'undefined' !== typeof attributes.ry ?
    parseFloat(attributes.ry, 10) :
    parseFloat(attributes.r, 10);
  return '' +
    'M' + (cx - rx) + ',' + cy +
    'C' + (cx - rx) + ',' + (cy + ry*KAPPA) +
    ' ' + (cx - rx*KAPPA) + ',' + (cy + ry) +
    ' ' + cx + ',' + (cy + ry) +
    'C' + (cx + rx*KAPPA) + ',' + (cy+ry) +
    ' ' + (cx + rx) + ',' + (cy + ry*KAPPA) +
    ' ' + (cx + rx) + ',' + cy +
    'C' + (cx + rx) + ',' + (cy - ry*KAPPA) +
    ' ' + (cx + rx*KAPPA) + ',' + (cy - ry) +
    ' ' + cx + ',' + (cy - ry) +
    'C' + (cx - rx*KAPPA) + ',' + (cy - ry) +
    ' ' + (cx - rx) + ',' + (cy - ry*KAPPA) +
    ' ' + (cx - rx) + ',' + cy +
    'Z';
}

function polygonToPath(attributes) {
  return 'M' + attributes.points + 'Z';
}

// Required modules
var util = require("util");
var Stream = require("readable-stream");
var Sax = require("sax");
var SVGPathData = require("svg-pathdata");

// Inherit of duplex stream
util.inherits(SVGIcons2SVGFontStream, Stream.Transform);

// Constructor
function SVGIcons2SVGFontStream(options) {
  var _this = this;
  var glyphs = [];
  var log;
  var error;

  options = options || {};
  options.fontName = options.fontName || 'iconfont';
  options.fixedWidth = options.fixedWidth || false;
  options.descent = options.descent || 0;
  options.round = options.round || 10e12;
  options.metadata = options.metadata || '';

  log = (options.log || console.log.bind(console));
  error = options.error || console.error.bind(console);

  // Ensure new were used
  if(!(this instanceof SVGIcons2SVGFontStream)) {
    return new SVGIcons2SVGFontStream(options);
  }

  // Parent constructor
  Stream.Transform.call(this, {
    objectMode: true
  });

  // Setting objectMode separately
  this._writableState.objectMode = true;
  this._readableState.objectMode = false;

  // Parse input
  this._transform = function _svgIcons2SVGFontStreamTransform(
    svgIconStream, unused, svgIconStreamCallback
  ) {
    // Parsing each icons asynchronously
    var saxStream = Sax.createStream(true);
    var parents = [];
    var glyph = svgIconStream.metadata || {};
    glyph.d = [];
    glyphs.push(glyph);

    if('string' !== typeof glyph.name) {
      _this.emit('error', new Error('Please provide a name for the glyph at' +
        ' index ' + (glyphs.length - 1)));
    }
    if(glyphs.some(function(anotherGlyph) {
      return (anotherGlyph !== glyph && anotherGlyph.name === glyph.name);
    })) {
      _this.emit('error', new Error('The glyph name "' + glyph.name +
        '" must be unique.'));
    }
    if(glyph.unicode && glyph.unicode instanceof Array && glyph.unicode.length) {
      if(glyph.unicode.some(function(unicodeA, i) {
        return glyph.unicode.some(function(unicodeB, j) {
          return i !== j && unicodeA === unicodeB;
        });
      })) {
        _this.emit('error', new Error('Given codepoints for the glyph "' +
          glyph.name + '" contain duplicates.'));
      }
    } else if('string' !== typeof glyph.unicode) {
      _this.emit('error', new Error('Please provide a codepoint for the glyph "' +
        glyph.name + '"'));
    }

    if(glyphs.some(function(anotherGlyph) {
      return (anotherGlyph !== glyph && anotherGlyph.unicode === glyph.unicode);
    })) {
      _this.emit('error', new Error('The glyph "' + glyph.name +
        '" codepoint seems to be used already elsewhere.'));
    }

    saxStream.on('opentag', function(tag) {
      parents.push(tag);
      // Checking if any parent rendering is disabled and exit if so
      if(!tagShouldRender(tag, parents)) {
        return;
      }
      // Save the view size
      if('svg' === tag.name) {
        glyph.dX = 0;
        glyph.dY = 0;
        if('viewBox' in tag.attributes) {
          var values = tag.attributes.viewBox.split(/\s*,*\s|\s,*\s*|,/);
          glyph.dX = parseFloat(values[0], 10);
          glyph.dY = parseFloat(values[1], 10);
          glyph.width = parseFloat(values[2], 10);
          glyph.height = parseFloat(values[3], 10);
        }
        if('width' in tag.attributes) {
          glyph.width = parseFloat(tag.attributes.width, 10);
        }
        if('height' in tag.attributes) {
          glyph.height = parseFloat(tag.attributes.height, 10);
        }
        if(!glyph.width || !glyph.height) {
          log('Glyph "' + glyph.name + '" has no size attribute on which to' +
            ' get the gylph dimensions (heigh and width or viewBox' +
            ' attributes)');
          glyph.width = 150;
          glyph.height = 150;
        }
      // Clipping path unsupported
      } else if('clipPath' === tag.name) {
        log('Found a clipPath element in the icon "' + glyph.name + '" the' +
          'result may be different than expected.');
      // Change rect elements to the corresponding path
      } else if('rect' === tag.name && 'none' !== tag.attributes.fill) {
        glyph.d.push(applyTransforms(rectToPath(tag.attributes), parents));
      } else if('line' === tag.name && 'none' !== tag.attributes.fill) {
        log('Found a line element in the icon "' + glyph.name + '" the result' +
          ' could be different than expected.');
        glyph.d.push(applyTransforms(lineToPath(tag.attributes), parents));
      } else if('polyline' === tag.name && 'none' !== tag.attributes.fill) {
        log('Found a polyline element in the icon "' + glyph.name + '" the' +
          ' result could be different than expected.');
        glyph.d.push(applyTransforms(polylineToPath(tag.attributes), parents));
      } else if('polygon' === tag.name && 'none' !== tag.attributes.fill) {
        glyph.d.push(applyTransforms(polygonToPath(tag.attributes), parents));
      } else if('circle' === tag.name || 'ellipse' === tag.name &&
        'none' !== tag.attributes.fill) {
        glyph.d.push(applyTransforms(circleToPath(tag.attributes), parents));
      } else if('path' === tag.name && tag.attributes.d &&
        'none' !== tag.attributes.fill) {
        glyph.d.push(applyTransforms(tag.attributes.d, parents));
      }
    });

    saxStream.on('error', function (error) {
      _this.emit('error', error);
    });

    saxStream.on('closetag', function(tag) {
      parents.pop();
    });

    saxStream.on('end', function() {
      svgIconStreamCallback();
    });

    svgIconStream.pipe(saxStream);
  };

  // Output data
  this._flush = function _svgIcons2SVGFontStreamFlush(svgFontFlushCallback) {
    var fontWidth = (
      glyphs.length > 1 ?
      glyphs.reduce(function (curMax, glyph) {
        return Math.max(curMax, glyph.width);
      }, 0) :
      glyphs[0].width);
    var fontHeight = options.fontHeight || (
      glyphs.length > 1 ? glyphs.reduce(function (curMax, glyph) {
        return Math.max(curMax, glyph.height);
      }, 0) :
      glyphs[0].height);
    if(
      (!options.normalize) &&
      fontHeight>(glyphs.length > 1 ?
        glyphs.reduce(function (curMin, glyph) {
          return Math.min(curMin, glyph.height);
        }, Infinity) :
        glyphs[0].height
      )
    ) {
      log('The provided icons does not have the same height it could lead' +
        ' to unexpected results. Using the normalize option could' +
        ' solve the problem.');
    }
    // Output the SVG file
    // (find a SAX parser that allows modifying SVG on the fly)
    _this.push('\
<?xml version="1.0" standalone="no"?> \n\
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" >\n\
<svg xmlns="http://www.w3.org/2000/svg">\n' + (
  options.metadata ? '<metadata>' + options.metadata + '</metadata>\n' : ''
) + '\
<defs>\n\
  <font id="' + options.fontName + '" horiz-adv-x="' + fontWidth + '">\n\
    <font-face font-family="' + options.fontName + '"\n\
      units-per-em="' + fontHeight + '" ascent="' + (fontHeight - options.descent) + '"\n\
      descent="' + options.descent + '" />\n\
    <missing-glyph horiz-adv-x="0" />\n');
        glyphs.forEach(function(glyph) {
          var ratio = fontHeight / glyph.height
            , d = '';
          if(options.fixedWidth) {
            glyph.width = fontWidth;
          }
          if(options.normalize) {
            glyph.height = fontHeight;
            if(!options.fixedWidth) {
              glyph.width *= ratio;
            }
          }
          glyph.d.forEach(function(cD) {
            try {
              d += ' ' + new SVGPathData(cD)
                .toAbs()
                .translate(-glyph.dX, -glyph.dY)
                .scale(
                  options.normalize ? ratio : 1,
                  options.normalize ? ratio : 1)
                .ySymetry(glyph.height - options.descent)
                .round(options.round)
                .encode();
              } catch(err) {
                _this.emit('error', 'Got an error parsing the glyph "' +
                  glyph.name + '" path data: ' + cD + '.');
              }
          });
          if(options.centerHorizontally) {
            // Naive bounds calculation (should draw, then calculate bounds...)
            var pathData = new SVGPathData(d);
            var bounds = {
              x1:Infinity,
              y1:Infinity,
              x2:0,
              y2:0
            };
            pathData.toAbs().commands.forEach(function(command) {
              bounds.x1 = 'undefined' != typeof command.x && command.x < bounds.x1 ? command.x : bounds.x1;
              bounds.y1 = 'undefined' != typeof command.y && command.y < bounds.y1 ? command.y : bounds.y1;
              bounds.x2 = 'undefined' != typeof command.x && command.x > bounds.x2 ? command.x : bounds.x2;
              bounds.y2 = 'undefined' != typeof command.y && command.y > bounds.y2 ? command.y : bounds.y2;
            });
            d = pathData
              .translate(((glyph.width - (bounds.x2 - bounds.x1)) / 2) - bounds.x1)
              .round(options.round)
              .encode();
          }
          delete glyph.d;
          delete glyph.running;
          glyph.unicode.forEach(function(unicode, i){
            _this.push('\
    <glyph glyph-name="' + glyph.name + (i == 0 ? '' : '-' + i) + '"\n\
      unicode="' + unicode.split('').map(function(char) {
        return '&#x' + char.charCodeAt(0).toString(16).toUpperCase() + ';';
      }).join('') + '"\n\
      horiz-adv-x="' + glyph.width + '" d="' + d +'" />\n');
          });
    });
    _this.push('\
  </font>\n\
</defs>\n\
</svg>\n');
    log("Font created");
    'function' === (typeof options.callback) && (options.callback)(glyphs);
    svgFontFlushCallback();
  };

}

module.exports = SVGIcons2SVGFontStream;

},{"readable-stream":221,"sax":251,"svg-pathdata":262,"util":167}],267:[function(require,module,exports){
/*
    Author: Viktor Semykin <thesame.ml@gmail.com>

    Written for fontello.com project.
*/

'use strict';

var ByteBuffer = require('./lib/byte_buffer.js');

/**
 * Offsets in EOT file structure. Refer to EOTPrefix in OpenTypeUtilities.cpp
 */
var EOT_OFFSET = {
    LENGTH:         0
  , FONT_LENGTH:    4
  , VERSION:        8
  , CHARSET:        26
  , MAGIC:          34
  , FONT_PANOSE:    16
  , ITALIC:         27
  , WEIGHT:         28
  , UNICODE_RANGE:  36
  , CODEPAGE_RANGE: 52
  , CHECKSUM_ADJUSTMENT: 60
  };

/**
 * Offsets in different SFNT (TTF) structures. See OpenTypeUtilities.cpp
 */
var SFNT_OFFSET = {
    // sfntHeader:
    NUMTABLES:      4

    // TableDirectoryEntry
  , TABLE_TAG:      0
  , TABLE_OFFSET:   8
  , TABLE_LENGTH:   12

    // OS2Table
  , OS2_WEIGHT:         4
  , OS2_FONT_PANOSE:    32
  , OS2_UNICODE_RANGE:  42
  , OS2_FS_SELECTION:   62
  , OS2_CODEPAGE_RANGE: 78

    // headTable
  , HEAD_CHECKSUM_ADJUSTMENT:   8

    // nameTable
  , NAMETABLE_FORMAT:   0
  , NAMETABLE_COUNT:    2
  , NAMETABLE_STRING_OFFSET:    4

    // nameRecord
  , NAME_PLATFORM_ID:   0
  , NAME_ENCODING_ID:   2
  , NAME_LANGUAGE_ID:   4
  , NAME_NAME_ID:       6
  , NAME_LENGTH:        8
  , NAME_OFFSET:        10
  };

/**
 * Sizes of structures
 */
var SIZEOF = {
    SFNT_TABLE_ENTRY:   16
  , SFNT_HEADER:        12
  , SFNT_NAMETABLE:          6
  , SFNT_NAMETABLE_ENTRY:    12
  , EOT_PREFIX: 82
  };

/**
 * Magic numbers
 */
var MAGIC = {
    EOT_VERSION:    0x00020001
  , EOT_MAGIC:      0x504c
  , EOT_CHARSET:    1
  , LANGUAGE_ENGLISH:   0x0409
  };

/**
 * Utility function to convert buffer of utf16be chars to buffer of utf16le
 * chars prefixed with length and suffixed with zero
 */
function strbuf(str) {
  var b = new ByteBuffer(new Array(str.length + 4));

  b.setUint16 (0, str.length, true);

  for (var i = 0; i < str.length; i += 2) {
    b.setUint16 (i+2, str.getUint16 (i), true);
  }

  b.setUint16 (b.length - 2, 0, true);

  return b;
}

// Takes TTF font on input and returns ByteBuffer with EOT font
//
// Params:
//
// - arr(Array|Uint8Array)
//
function ttf2eot(arr) {
  var buf = new ByteBuffer(arr);
  var out = new ByteBuffer(new Array(SIZEOF.EOT_PREFIX))
    , i, j;

  out.fill(0);
  out.setUint32(EOT_OFFSET.FONT_LENGTH, buf.length, true);
  out.setUint32(EOT_OFFSET.VERSION, MAGIC.EOT_VERSION, true);
  out.setUint8(EOT_OFFSET.CHARSET, MAGIC.EOT_CHARSET);
  out.setUint16(EOT_OFFSET.MAGIC, MAGIC.EOT_MAGIC, true);

  var familyName = []
    , subfamilyName = []
    , fullName = []
    , versionString = []
    ;

  var haveOS2 = false
    , haveName = false
    , haveHead = false
    ;

  var numTables = buf.getUint16 (SFNT_OFFSET.NUMTABLES);

  for (i = 0; i < numTables; ++i)
  {
    var data = new ByteBuffer(buf, SIZEOF.SFNT_HEADER + i*SIZEOF.SFNT_TABLE_ENTRY);
    var tableEntry = {
      tag: data.toString (SFNT_OFFSET.TABLE_TAG, SFNT_OFFSET.TABLE_TAG + 4),
      offset: data.getUint32 (SFNT_OFFSET.TABLE_OFFSET),
      length: data.getUint32 (SFNT_OFFSET.TABLE_LENGTH)
    };

    var table = new ByteBuffer(buf, tableEntry.offset, tableEntry.length);

    if (tableEntry.tag === 'OS/2') {
      haveOS2 = true;

      for (j = 0; j < 10; ++j) {
        out.setUint8 (EOT_OFFSET.FONT_PANOSE + j, table.getUint8 (SFNT_OFFSET.OS2_FONT_PANOSE + j));
      }

      /*jshint bitwise:false */
      out.setUint8 (EOT_OFFSET.ITALIC, table.getUint16 (SFNT_OFFSET.OS2_FS_SELECTION) & 0x01);
      out.setUint32 (EOT_OFFSET.WEIGHT, table.getUint16 (SFNT_OFFSET.OS2_WEIGHT), true);

      for (j = 0; j < 4; ++j) {
        out.setUint32 (EOT_OFFSET.UNICODE_RANGE + j*4, table.getUint32 (SFNT_OFFSET.OS2_UNICODE_RANGE + j*4), true);
      }

      for (j = 0; j < 2; ++j) {
        out.setUint32 (EOT_OFFSET.CODEPAGE_RANGE + j*4, table.getUint32 (SFNT_OFFSET.OS2_CODEPAGE_RANGE + j*4), true);
      }

    } else if (tableEntry.tag === 'head') {

      haveHead = true;
      out.setUint32 (EOT_OFFSET.CHECKSUM_ADJUSTMENT, table.getUint32 (SFNT_OFFSET.HEAD_CHECKSUM_ADJUSTMENT), true);

    } else if (tableEntry.tag === 'name') {

      haveName = true;

      var nameTable = {
          format: table.getUint16 (SFNT_OFFSET.NAMETABLE_FORMAT)
        , count: table.getUint16 (SFNT_OFFSET.NAMETABLE_COUNT)
        , stringOffset: table.getUint16 (SFNT_OFFSET.NAMETABLE_STRING_OFFSET)
        };

      for (j = 0; j < nameTable.count; ++j) {
        var nameRecord = new ByteBuffer(table, SIZEOF.SFNT_NAMETABLE + j*SIZEOF.SFNT_NAMETABLE_ENTRY);
        var name = {
            platformID: nameRecord.getUint16 (SFNT_OFFSET.NAME_PLATFORM_ID)
          , encodingID: nameRecord.getUint16 (SFNT_OFFSET.NAME_ENCODING_ID)
          , languageID: nameRecord.getUint16 (SFNT_OFFSET.NAME_LANGUAGE_ID)
          , nameID: nameRecord.getUint16 (SFNT_OFFSET.NAME_NAME_ID)
          , length: nameRecord.getUint16 (SFNT_OFFSET.NAME_LENGTH)
          , offset: nameRecord.getUint16 (SFNT_OFFSET.NAME_OFFSET)
          };

        if (name.platformID === 3 && name.encodingID === 1 && name.languageID === MAGIC.LANGUAGE_ENGLISH) {
          var s = strbuf (new ByteBuffer(table, nameTable.stringOffset + name.offset, name.length));

          switch (name.nameID) {
          case 1:
            familyName = s;
            break;
          case 2:
            subfamilyName = s;
            break;
          case 4:
            fullName = s;
            break;
          case 5:
            versionString = s;
            break;
          }
        }
      }
    }
    if (haveOS2 && haveName && haveHead) { break; }
  }

  if (!(haveOS2 && haveName && haveHead)) {
    throw new Error ('Required section not found');
  }

  // Calculate final length
  var len =
   out.length +
   familyName.length +
   subfamilyName.length +
   versionString.length +
   fullName.length +
   2 +
   buf.length;

  // Create final buffer with the the same array type as input one.
  var eot = new ByteBuffer(Array.isArray(arr) ? new Array(len) : new Uint8Array(len));

  eot.writeBytes(out.buffer);
  eot.writeBytes(familyName.buffer);
  eot.writeBytes(subfamilyName.buffer);
  eot.writeBytes(versionString.buffer);
  eot.writeBytes(fullName.buffer);
  eot.writeBytes([0, 0]);
  eot.writeBytes(buf.buffer);

  eot.setUint32(EOT_OFFSET.LENGTH, len, true); // Calculate overall length

  return eot;
}

module.exports = ttf2eot;

},{"./lib/byte_buffer.js":268}],268:[function(require,module,exports){
//
// Light version of byte buffer
//

'use strict';

// wraps and reuses buffer, possibly cropped (offset, length)
var ByteBuffer = function (buffer, start, length) {
  /*jshint bitwise:false*/

  var isByteBuffer = buffer.start !== undefined; // is buffer of type ByteBuffer?
  this.buffer = isByteBuffer ? buffer.buffer : buffer;
  this.start = (start || 0) + (isByteBuffer ? buffer.start : 0);
  this.length = length !== undefined ? length : (this.buffer.length - this.start);
  this.offset = 0;

  // get current position
  //
  this.tell = function() {
    return this.offset;
  };

  // set current position
  //
  this.seek = function(pos) {
    this.offset = pos;
  };

  this.fill = function(value) {
    var index = this.byteLength - 1;
    while (index >= 0) {
      this.buffer[index + this.start] = value;
      index--;
    }
  };

  this.getUint8 = function(pos) {
    return this.buffer[pos + this.start];
  };

  this.getUint16 = function(pos, littleEndian) {
    if (littleEndian) {
      return this._getUint16LE(pos);
    } else {
      return this._getUint16BE(pos);
    }
  };

  this.getUint32 = function(pos, littleEndian) {
    if (littleEndian) {
      return this._getUint32LE(pos);
    } else {
      return this._getUint32BE(pos);
    }
  };

  this.setUint8 = function(pos, value) {
    this.offset = pos;
    this.writeUint8(value);
  };

  this.setUint16 = function(pos, value, littleEndian) {
    if (littleEndian) {
      return this._setUint16LE(pos, value);
    } else {
      return this._setUint16BE(pos, value);
    }
  };

  this.setUint32 = function(pos, value, littleEndian) {
    if (littleEndian) {
      return this._setUint32LE(pos, value);
    } else {
      return this._setUint32BE(pos, value);
    }
  };

  this.writeUint8 = function(value) {
    this.buffer[this.offset + this.start] = value & 0xFF;
    this.offset++;
  };

  this.writeInt8 = function(value) {
    this.writeUint8((value < 0) ? 0xFF + value + 1 : value);
  };

  this.writeUint16 = function(value, littleEndian) {
    if (littleEndian) {
      return this._writeUint16LE(value);
    } else {
      return this._writeUint16BE(value);
    }
  };

  this.writeInt16 = function(value) {
    this.writeUint16((value < 0) ? 0xFFFF + value + 1 : value);
  };


  this.writeUint32 = function(value, littleEndian) {
    if (littleEndian) {
      return this._writeUint32LE(value);
    } else {
      return this._writeUint32BE(value);
    }
  };

  this.writeInt32 = function(value) {
    this.writeUint32((value < 0) ? 0xFFFFFFFF + value + 1 : value);
  };

  this.writeUint64 = function(value) {
    // we canot use bitwise operations for 64bit values because of JavaScript limitations,
    // instead we should divide it to 2 Int32 numbers
    // 2^32 = 4294967296
    var hi = Math.floor(value / 4294967296);
    var lo = value - hi * 4294967296;
    this.writeUint32(hi);
    this.writeUint32(lo);
  };

  this.writeBytes = function(data) {
    var buffer = this.buffer;
    var offset = this.offset + this.start;
    for (var i = 0; i < data.length; i++) {
      buffer[i + offset] = data[i];
    }
    this.offset += data.length;
  };

  this.toString = function(start, end) {
    var string = "";
    for (var i = start; i < end; i++) {
      string += String.fromCharCode(this.buffer[i + this.start]);
    }
    return string;
  };

  // private methods

  this._getUint16BE = function(pos) {
    var val = this.buffer[pos + 1 + this.start];
    val = val + (this.buffer[pos + this.start] << 8 >>> 0);
    return val;
  };

  this._getUint32BE = function(pos) {
    var val = this.buffer[pos + 1 + this.start] << 16;
    val |= this.buffer[pos + 2 + this.start] << 8;
    val |= this.buffer[pos + 3 + this.start];
    val = val + (this.buffer[pos + this.start] << 24 >>> 0);
    return val;
  };

  this._setUint16LE = function(pos, value) {
    this.offset = pos;
    this._writeUint16LE(value);
  };

  this._setUint32BE = function(pos, value) {
    this.offset = pos;
    this.writeUint32(value);
  };

  this._setUint32LE = function(pos, value) {
    this.offset = pos;
    this._writeUint32LE(value);
  };

  this._writeUint16BE = function(value) {
    this.buffer[this.offset + this.start] = (value >>> 8) & 0xFF;
    this.buffer[this.offset + 1 + this.start] = value & 0xFF;
    this.offset += 2;
  };

  this._writeUint16LE = function(value) {
    this.buffer[this.offset + this.start] = value & 0xFF;
    this.buffer[this.offset + 1 + this.start] = (value >>> 8) & 0xFF;
    this.offset += 2;
  };

  this._writeUint32BE = function(value) {
    this.buffer[this.offset + this.start] = (value >>> 24) & 0xFF;
    this.buffer[this.offset + 1 + this.start] = (value >>> 16) & 0xFF;
    this.buffer[this.offset + 2 + this.start] = (value >>> 8) & 0xFF;
    this.buffer[this.offset + 3 + this.start] = value & 0xFF;
    this.offset += 4;
  };

  this._writeUint32LE = function(value) {
    this.buffer[this.offset + this.start] = value & 0xFF;
    this.buffer[this.offset + 1 + this.start] = (value >>> 8) & 0xFF;
    this.buffer[this.offset + 2 + this.start] = (value >>> 16) & 0xFF;
    this.buffer[this.offset + 3 + this.start] = (value >>> 24) & 0xFF;
    this.offset += 4;
  };
};

module.exports = ByteBuffer;

},{}],269:[function(require,module,exports){
/*
    Author: Viktor Semykin <thesame.ml@gmail.com>

    Written for fontello.com project.
*/

'use strict';


var ByteBuffer = require('./lib/byte_buffer.js');
var deflate = require('pako/lib/deflate.js').deflate;


function ulong(t) {
  /*jshint bitwise:false*/
  t &= 0xffffffff;
  if (t < 0) {
    t += 0x100000000;
  }
  return t;
}

function longAlign(n) {
  /*jshint bitwise:false*/
  return (n+3) & ~3;
}

function calc_checksum(buf) {
  var sum = 0;
  var nlongs = buf.length / 4;

  for (var i = 0; i < nlongs; ++i) {
    var t = buf.getUint32(i*4);
    sum = ulong(sum + t);
  }
  return sum;
}

var WOFF_OFFSET = {
  MAGIC: 0,
  FLAVOR: 4,
  SIZE: 8,
  NUM_TABLES: 12,
  RESERVED: 14,
  SFNT_SIZE: 16,
  VERSION_MAJ: 20,
  VERSION_MIN: 22,
  META_OFFSET: 24,
  META_LENGTH: 28,
  META_ORIG_LENGTH: 32,
  PRIV_OFFSET: 36,
  PRIV_LENGTH: 40
};

var WOFF_ENTRY_OFFSET = {
  TAG: 0,
  OFFSET: 4,
  COMPR_LENGTH: 8,
  LENGTH: 12,
  CHECKSUM: 16
};

var SFNT_OFFSET = {
  TAG: 0,
  CHECKSUM: 4,
  OFFSET: 8,
  LENGTH: 12
};

var SFNT_ENTRY_OFFSET = {
  FLAVOR: 0,
  VERSION_MAJ: 4,
  VERSION_MIN: 6,
  CHECKSUM_ADJUSTMENT: 8
};

var MAGIC = {
  WOFF: 0x774F4646,
  CHECKSUM_ADJUSTMENT: 0xB1B0AFBA
};

var SIZEOF = {
  WOFF_HEADER: 44,
  WOFF_ENTRY: 20,
  SFNT_HEADER: 12,
  SFNT_TABLE_ENTRY: 16
};

function woffAppendMetadata(src, metadata) {

  var zdata =  deflate(metadata);
  src.setUint32(WOFF_OFFSET.SIZE, src.length + zdata.length);
  src.setUint32(WOFF_OFFSET.META_OFFSET, src.length);
  src.setUint32(WOFF_OFFSET.META_LENGTH, zdata.length);
  src.setUint32(WOFF_OFFSET.META_ORIG_LENGTH, metadata.length);

  //concatenate src and zdata
  var buf = ByteBuffer.prototype.create(src.length + zdata.length);
  buf.writeBytes(src.toArray());
  buf.writeBytes(zdata);

  return buf;
}

function ttf2woff(arr, options) {
  var buf = new ByteBuffer(arr);
  options = options || {};

  var version = {
    maj: 0,
    min: 1
  };
  var numTables = buf.getUint16(4);
  //var sfntVersion = buf.getUint32 (0);
  var flavor = 0x10000;

  var woffHeader = ByteBuffer.prototype.create(SIZEOF.WOFF_HEADER);
  woffHeader.setUint32(WOFF_OFFSET.MAGIC, MAGIC.WOFF);
  woffHeader.setUint16(WOFF_OFFSET.NUM_TABLES, numTables);
  woffHeader.setUint16(WOFF_OFFSET.RESERVED, 0);
  woffHeader.setUint32(WOFF_OFFSET.SFNT_SIZE, 0);
  woffHeader.setUint32(WOFF_OFFSET.META_OFFSET, 0);
  woffHeader.setUint32(WOFF_OFFSET.META_LENGTH, 0);
  woffHeader.setUint32(WOFF_OFFSET.META_ORIG_LENGTH, 0);
  woffHeader.setUint32(WOFF_OFFSET.PRIV_OFFSET, 0);
  woffHeader.setUint32(WOFF_OFFSET.PRIV_LENGTH, 0);

  var entries = [];

  var i, tableEntry;

  for (i = 0; i < numTables; ++i) {
    var data = new ByteBuffer(buf.buffer, SIZEOF.SFNT_HEADER + i*SIZEOF.SFNT_TABLE_ENTRY);
    tableEntry = {
      Tag: new ByteBuffer(data, SFNT_OFFSET.TAG, 4),
      checkSum: data.getUint32(SFNT_OFFSET.CHECKSUM),
      Offset: data.getUint32(SFNT_OFFSET.OFFSET),
      Length: data.getUint32(SFNT_OFFSET.LENGTH)
    };
    entries.push (tableEntry);
  }
  entries = entries.sort(function (a, b) {
    var aStr = a.Tag.toString();
    var bStr = b.Tag.toString();
    return aStr === bStr ? 0 : aStr < bStr ? -1 : 1;
  });

  var offset = SIZEOF.WOFF_HEADER + numTables * SIZEOF.WOFF_ENTRY;
  var woffSize = offset;
  var sfntSize = SIZEOF.SFNT_HEADER + numTables * SIZEOF.SFNT_TABLE_ENTRY;

  var tableBuf = ByteBuffer.prototype.create(numTables * SIZEOF.WOFF_ENTRY);
  for (i = 0; i < numTables; ++i) {
    tableEntry = entries[i];

    if (tableEntry.Tag.toString() !== 'head') {
      var algntable = new ByteBuffer(buf.buffer, tableEntry.Offset, longAlign(tableEntry.Length));
      if (calc_checksum(algntable) !== tableEntry.checkSum) {
        throw 'Checksum error in ' + tableEntry.Tag.toString();
      }
    }

    tableBuf.setUint32(i*SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.TAG, tableEntry.Tag.getUint32(0));
    tableBuf.setUint32(i*SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.LENGTH, tableEntry.Length);
    tableBuf.setUint32(i*SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.CHECKSUM, tableEntry.checkSum);
    sfntSize += longAlign(tableEntry.Length);
  }

  var sfntOffset = SIZEOF.SFNT_HEADER + entries.length * SIZEOF.SFNT_TABLE_ENTRY;
  var csum = calc_checksum (new ByteBuffer(buf.buffer, 0, SIZEOF.SFNT_HEADER));

  for (i = 0; i < entries.length; ++i) {
    tableEntry = entries[i];
    var b = ByteBuffer.prototype.create(SIZEOF.SFNT_TABLE_ENTRY);
    b.setUint32(SFNT_OFFSET.TAG, tableEntry.Tag.getUint32(0));
    b.setUint32(SFNT_OFFSET.CHECKSUM, tableEntry.checkSum);
    b.setUint32(SFNT_OFFSET.OFFSET, sfntOffset);
    b.setUint32(SFNT_OFFSET.LENGTH, tableEntry.Length);
    sfntOffset += longAlign(tableEntry.Length);
    csum += calc_checksum (b);
    csum += tableEntry.checkSum;
  }

  var checksumAdjustment = ulong(MAGIC.CHECKSUM_ADJUSTMENT - csum);

  var len, woffDataChains = [];

  for (i = 0; i < entries.length; ++i) {
    tableEntry = entries[i];
    var sfntData = new ByteBuffer(buf.buffer, tableEntry.Offset, tableEntry.Length);
    if (tableEntry.Tag.toString() === 'head') {
      version.maj = sfntData.getUint16(SFNT_ENTRY_OFFSET.VERSION_MAJ);
      version.min = sfntData.getUint16(SFNT_ENTRY_OFFSET.VERSION_MIN);
      flavor = sfntData.getUint32(SFNT_ENTRY_OFFSET.FLAVOR);
      sfntData.setUint32 (SFNT_ENTRY_OFFSET.CHECKSUM_ADJUSTMENT, checksumAdjustment);
    }

    var res = deflate(sfntData.toArray());

    var compLength;

    // We should use compression only if it really save space (standard requirement).
    // Also, data should be aligned to long (with zeros?).
    compLength = Math.min(res.length, sfntData.length);
    len = longAlign(compLength);

    var woffData = ByteBuffer.prototype.create(len);
    woffData.fill(0);

    if (res.length >= sfntData.length) {
      woffData.writeBytes(sfntData.toArray());
    } else {
      woffData.writeBytes(res);
    }

    tableBuf.setUint32(i*SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.OFFSET, offset);

    offset += woffData.length;
    woffSize += woffData.length;

    tableBuf.setUint32(i*SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.COMPR_LENGTH, compLength);

    woffDataChains.push(woffData);
  }

  woffHeader.setUint32(WOFF_OFFSET.SIZE, woffSize);
  woffHeader.setUint32(WOFF_OFFSET.SFNT_SIZE, sfntSize);
  woffHeader.setUint16(WOFF_OFFSET.VERSION_MAJ, version.maj);
  woffHeader.setUint16(WOFF_OFFSET.VERSION_MIN, version.min);
  woffHeader.setUint32(WOFF_OFFSET.FLAVOR, flavor);

  var out = ByteBuffer.prototype.create(woffSize);

  out.writeBytes(woffHeader.buffer);
  out.writeBytes(tableBuf.buffer);
  for (i = 0; i < woffDataChains.length; i++) {
    out.writeBytes(woffDataChains[i].buffer);
  }

  if (!options.metadata) {
    return out;
  } else {
    return woffAppendMetadata(out, options.metadata);
  }
}

module.exports = ttf2woff;

},{"./lib/byte_buffer.js":270,"pako/lib/deflate.js":271}],270:[function(require,module,exports){
//
// Light version of byte buffer
//

'use strict';

// wraps and reuses buffer, possibly cropped (offset, length)
var ByteBuffer = function (buffer, start, length) {
  /*jshint bitwise:false*/

  var isNested = buffer instanceof ByteBuffer;

  this.buffer = isNested ? buffer.buffer : buffer;
  this.start = (start || 0) + (isNested ? buffer.start : 0);
  this.length = length || (this.buffer.length - this.start);
  this.offset = 0;

  this.isTyped = this.buffer instanceof Uint8Array;

  this.getUint8 = function (pos) {
    return this.buffer[pos + this.start];
  };

  this.getUint16 = function (pos, littleEndian) {
    var val;
    if (littleEndian) {
      throw new Error('not implemented');
    } else {
      val = this.buffer[pos + 1 + this.start];
      val = val + (this.buffer[pos + this.start] << 8 >>> 0);
    }
    return val;
  };

  this.getUint32 = function (pos, littleEndian) {
    var val;
    if (littleEndian) {
      throw new Error('not implemented');
    } else {
      val = this.buffer[pos + 1 + this.start] << 16;
      val |= this.buffer[pos + 2 + this.start] << 8;
      val |= this.buffer[pos + 3 + this.start];
      val = val + (this.buffer[pos + this.start] << 24 >>> 0);
    }
    return val;
  };

  this.setUint8 = function (pos, value) {
    this.buffer[pos + this.start] = value & 0xFF;
  };

  this.setUint16 = function (pos, value, littleEndian) {
    var offset = pos + this.start;
    var buf = this.buffer;
    if (littleEndian) {
      buf[offset] = value & 0xFF;
      buf[offset + 1] = (value >>> 8) & 0xFF;
    } else {
      buf[offset] = (value >>> 8) & 0xFF;
      buf[offset + 1] = value & 0xFF;
    }
  };

  this.setUint32 = function (pos, value, littleEndian) {
    var offset = pos + this.start;
    var buf = this.buffer;
    if (littleEndian) {
      buf[offset] = value & 0xFF;
      buf[offset + 1] = (value >>> 8) & 0xFF;
      buf[offset + 2] = (value >>> 16) & 0xFF;
      buf[offset + 3] = (value >>> 24) & 0xFF;
    } else {
      buf[offset] = (value >>> 24) & 0xFF;
      buf[offset + 1] = (value >>> 16) & 0xFF;
      buf[offset + 2] = (value >>> 8) & 0xFF;
      buf[offset + 3] = value & 0xFF;
    }
  };

  this.writeUint8 = function (value) {
    this.buffer[this.offset + this.start] = value & 0xFF;
    this.offset++;
  };

  this.writeInt8 = function (value) {
    this.setUint8(this.offset, (value < 0) ? 0xFF + value + 1 : value);
    this.offset++;
  };

  this.writeUint16 = function (value, littleEndian) {
    this.setUint16(this.offset, value, littleEndian);
    this.offset += 2;
  };

  this.writeInt16 = function (value, littleEndian) {
    this.setUint16(this.offset, (value < 0) ? 0xFFFF + value + 1 : value, littleEndian);
    this.offset += 2;
  };

  this.writeUint32 = function (value, littleEndian) {
    this.setUint32(this.offset, value, littleEndian);
    this.offset += 4;
  };

  this.writeInt32 = function (value, littleEndian) {
    this.setUint32(this.offset, (value < 0) ? 0xFFFFFFFF + value + 1 : value, littleEndian);
    this.offset += 4;
  };

};


// get current position
//
ByteBuffer.prototype.tell = function() {
  return this.offset;
};

// set current position
//
ByteBuffer.prototype.seek = function (pos) {
  this.offset = pos;
};

ByteBuffer.prototype.fill = function (value) {
  var index = this.length - 1;
  while (index >= 0) {
    this.buffer[index + this.start] = value;
    index--;
  }
};

ByteBuffer.prototype.create = function (size) {
  var buf = Uint8Array ? new Uint8Array(size) : new Array(size);
  return new ByteBuffer(buf);
};

ByteBuffer.prototype.writeUint64 = function (value) {
  // we canot use bitwise operations for 64bit values because of JavaScript limitations,
  // instead we should divide it to 2 Int32 numbers
  // 2^32 = 4294967296
  var hi = Math.floor(value / 4294967296);
  var lo = value - hi * 4294967296;
  this.writeUint32(hi);
  this.writeUint32(lo);
};

ByteBuffer.prototype.writeBytes = function (data) {
  var buffer = this.buffer;
  var offset = this.offset + this.start;
  if (this.isTyped) {
    //console.log('fast  write');
    buffer.set(data, offset);
  } else {
    for (var i = 0; i < data.length; i++) {
      buffer[i + offset] = data[i];
    }
  }
  this.offset += data.length;
};

ByteBuffer.prototype.toString = function (offset, length) {
  // default values if not set
  offset = (offset || 0);
  length = length || (this.length - offset);

  // add buffer shift
  var start = offset + this.start;
  var end = start + length;

  var string = '';
  for (var i = start; i < end; i++) {
    string += String.fromCharCode(this.buffer[i]);
  }
  return string;
};

ByteBuffer.prototype.toArray = function () {
  if (this.isTyped) {
    return this.buffer.subarray(this.start, this.start + this.length);
  } else {
    return this.buffer.slice(this.start, this.start + this.length);
  }
};



module.exports = ByteBuffer;

},{}],271:[function(require,module,exports){
arguments[4][195][0].apply(exports,arguments)
},{"./utils/common":272,"./utils/strings":273,"./zlib/deflate.js":276,"./zlib/messages":277,"./zlib/zstream":279,"dup":195}],272:[function(require,module,exports){
arguments[4][197][0].apply(exports,arguments)
},{"dup":197}],273:[function(require,module,exports){
arguments[4][198][0].apply(exports,arguments)
},{"./common":272,"dup":198}],274:[function(require,module,exports){
arguments[4][199][0].apply(exports,arguments)
},{"dup":199}],275:[function(require,module,exports){
arguments[4][201][0].apply(exports,arguments)
},{"dup":201}],276:[function(require,module,exports){
arguments[4][202][0].apply(exports,arguments)
},{"../utils/common":272,"./adler32":274,"./crc32":275,"./messages":277,"./trees":278,"dup":202}],277:[function(require,module,exports){
arguments[4][207][0].apply(exports,arguments)
},{"dup":207}],278:[function(require,module,exports){
arguments[4][208][0].apply(exports,arguments)
},{"../utils/common":272,"dup":208}],279:[function(require,module,exports){
arguments[4][209][0].apply(exports,arguments)
},{"dup":209}],280:[function(require,module,exports){
(function (Buffer){
var theTTFToWOFF2Module = require('./ttf2woff2');

module.exports = function ttf2woff2(inputContent) {

  // Prepare input
  var inputBuffer = theTTFToWOFF2Module._malloc(inputContent.length + 1);
  var outputSizePtr = theTTFToWOFF2Module._malloc(4);
  theTTFToWOFF2Module.writeArrayToMemory(inputContent, inputBuffer);

  // Run
  var outputBufferPtr = theTTFToWOFF2Module._convertTTFToWOFF2(inputBuffer, inputContent.length + 1, outputSizePtr);

  // Retrieve output
  var outputSize = theTTFToWOFF2Module.getValue(outputSizePtr, 'i32');
  var outputContent = new Buffer(outputSize);

  for(var i = 0; i < outputSize; i++ ) {
    outputContent[i] = theTTFToWOFF2Module.getValue(outputBufferPtr + i, 'i8');
  }

  theTTFToWOFF2Module._free(inputBuffer);
  theTTFToWOFF2Module._free(outputSizePtr);
  theTTFToWOFF2Module._freeTTFToWOFF2(outputBufferPtr);

  return outputContent;
};

}).call(this,require("buffer").Buffer)
},{"./ttf2woff2":281,"buffer":3}],281:[function(require,module,exports){
(function (process,Buffer,__dirname){
var Module;if(!Module)Module=(typeof Module!=="undefined"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window==="object";var ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB;var ENVIRONMENT_IS_WORKER=typeof importScripts==="function";var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=function print(x){process["stdout"].write(x+"\n")};if(!Module["printErr"])Module["printErr"]=function printErr(x){process["stderr"].write(x+"\n")};var nodeFS=require("fs");var nodePath=require("path");Module["read"]=function read(filename,binary){filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);if(!ret&&filename!=nodePath["resolve"](filename)){filename=path.join(__dirname,"..","src",filename);ret=nodeFS["readFileSync"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module["readBinary"]=function readBinary(filename){return Module["read"](filename,true)};Module["load"]=function load(f){globalEval(read(f))};if(!Module["thisProgram"]){if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}else{Module["thisProgram"]="unknown-program"}}Module["arguments"]=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function read(){throw"no read() available (jsc?)"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function printErr(x){console.log(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module["load"]=importScripts}if(typeof Module["setWindowTitle"]==="undefined"){Module["setWindowTitle"]=(function(title){document.title=title})}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){eval.call(null,x)}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type==="double"||type==="i64"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module["dynCall_"+sig].apply(null,args)}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){DYNAMICTOP=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module["Runtime"]=Runtime;var __THREW__=0;var ABORT=false;var EXITSTATUS=0;var undef=0;var tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempDouble,tempFloat;var tempI64,tempI64b;var tempRet0,tempRet1,tempRet2,tempRet3,tempRet4,tempRet5,tempRet6,tempRet7,tempRet8,tempRet9;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}var globalScope=this;function getCFunc(ident){var func=Module["_"+ident];if(!func){try{func=eval("_"+ident)}catch(e){}}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var cwrap,ccall;((function(){var JSfuncs={"stackSave":(function(){Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore()}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};var sourceRegex=/^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type==="number"}));var numericRet=returnType!=="string";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return"$"+i}));var funcstr="(function("+argNames.join(",")+") {";var nargs=argTypes.length;if(!numericArgs){funcstr+="var stack = "+JSsource["stackSave"].body+";";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type==="number")continue;var convertCode=JSsource[type+"ToC"];funcstr+="var "+convertCode.arguments+" = "+arg+";";funcstr+=convertCode.body+";";funcstr+=arg+"="+convertCode.returnValue+";"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+="var ret = "+cfuncname+"("+argNames.join(",")+");";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+="ret = "+strgfy+"(ret);"}if(!numericArgs){funcstr+=JSsource["stackRestore"].body.replace("()","(stack)")+";"}funcstr+="return ret})";return eval(funcstr)}}))();Module["cwrap"]=cwrap;Module["ccall"]=ccall;function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}Module["setValue"]=setValue;function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}Module["getValue"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;Module["ALLOC_STACK"]=ALLOC_STACK;Module["ALLOC_STATIC"]=ALLOC_STATIC;Module["ALLOC_DYNAMIC"]=ALLOC_DYNAMIC;Module["ALLOC_NONE"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module["allocate"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(typeof _sbrk!=="undefined"&&!_sbrk.called||!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module["getMemory"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module["UTF8ToString"](ptr)}Module["Pointer_stringify"]=Pointer_stringify;function AsciiToString(ptr){var str="";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module["AsciiToString"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module["stringToAscii"]=stringToAscii;function UTF8ArrayToString(u8Array,idx){var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}Module["UTF8ArrayToString"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module["UTF8ToString"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module["stringToUTF8Array"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module["stringToUTF8"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module["lengthBytesUTF8"]=lengthBytesUTF8;function UTF16ToString(ptr){var i=0;var str="";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)return str;++i;str+=String.fromCharCode(codeUnit)}}Module["UTF16ToString"]=UTF16ToString;function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}Module["stringToUTF16"]=stringToUTF16;function lengthBytesUTF16(str){return str.length*2}Module["lengthBytesUTF16"]=lengthBytesUTF16;function UTF32ToString(ptr){var i=0;var str="";while(1){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)return str;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}}Module["UTF32ToString"]=UTF32ToString;function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}Module["stringToUTF32"]=stringToUTF32;function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}Module["lengthBytesUTF32"]=lengthBytesUTF32;function demangle(func){var hasLibcxxabi=!!Module["___cxa_demangle"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module["___cxa_demangle"](buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}var i=3;var basicTypes={"v":"void","b":"bool","c":"char","s":"short","i":"int","l":"long","f":"float","d":"double","w":"wchar_t","a":"signed char","h":"unsigned char","t":"unsigned short","j":"unsigned int","m":"unsigned long","x":"long long","y":"unsigned long long","z":"..."};var subs=[];var first=true;function dump(x){if(x)Module.print(x);Module.print(func);var pre="";for(var a=0;a<i;a++)pre+=" ";Module.print(pre+"^")}function parseNested(){i++;if(func[i]==="K")i++;var parts=[];while(func[i]!=="E"){if(func[i]==="S"){i++;var next=func.indexOf("_",i);var num=func.substring(i,next)||0;parts.push(subs[num]||"?");i=next+1;continue}if(func[i]==="C"){parts.push(parts[parts.length-1]);i+=2;continue}var size=parseInt(func.substr(i));var pre=size.toString().length;if(!size||!pre){i--;break}var curr=func.substr(i+pre,size);parts.push(curr);subs.push(curr);i+=pre+size}i++;return parts}function parse(rawList,limit,allowVoid){limit=limit||Infinity;var ret="",list=[];function flushList(){return"("+list.join(", ")+")"}var name;if(func[i]==="N"){name=parseNested().join("::");limit--;if(limit===0)return rawList?[name]:name}else{if(func[i]==="K"||first&&func[i]==="L")i++;var size=parseInt(func.substr(i));if(size){var pre=size.toString().length;name=func.substr(i+pre,size);i+=pre+size}}first=false;if(func[i]==="I"){i++;var iList=parse(true);var iRet=parse(true,1,true);ret+=iRet[0]+" "+name+"<"+iList.join(", ")+">"}else{ret=name}paramLoop:while(i<func.length&&limit-->0){var c=func[i++];if(c in basicTypes){list.push(basicTypes[c])}else{switch(c){case"P":list.push(parse(true,1,true)[0]+"*");break;case"R":list.push(parse(true,1,true)[0]+"&");break;case"L":{i++;var end=func.indexOf("E",i);var size=end-i;list.push(func.substr(i,size));i+=size+2;break};case"A":{var size=parseInt(func.substr(i));i+=size.toString().length;if(func[i]!=="_")throw"?";i++;list.push(parse(true,1,true)[0]+" ["+size+"]");break};case"E":break paramLoop;default:ret+="?"+c;break paramLoop}}}if(!allowVoid&&list.length===1&&list[0]==="void")list=[];if(rawList){if(ret){list.push(ret+"?")}return list}else{return ret+flushList()}}var parsed=func;try{if(func=="Object._main"||func=="_main"){return"main()"}if(typeof func==="number")func=Pointer_stringify(func);if(func[0]!=="_")return func;if(func[1]!=="_")return func;if(func[2]!=="Z")return func;switch(func[3]){case"n":return"operator new()";case"d":return"operator delete()"}parsed=parse()}catch(e){parsed+="?"}if(parsed.indexOf("?")>=0&&!hasLibcxxabi){Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling")}return parsed}function demangleAll(text){return text.replace(/__Z[\w\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module["stackTrace"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){if(x%4096>0){x+=4096-x%4096}return x}var HEAP;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function enlargeMemory(){var OLD_TOTAL_MEMORY=TOTAL_MEMORY;var LIMIT=Math.pow(2,31);if(DYNAMICTOP>=LIMIT)return false;while(TOTAL_MEMORY<=DYNAMICTOP){if(TOTAL_MEMORY<LIMIT/2){TOTAL_MEMORY=alignMemoryPage(2*TOTAL_MEMORY)}else{var last=TOTAL_MEMORY;TOTAL_MEMORY=alignMemoryPage((3*TOTAL_MEMORY+LIMIT)/4);if(TOTAL_MEMORY<=last)return false}}TOTAL_MEMORY=Math.max(TOTAL_MEMORY,16*1024*1024);if(TOTAL_MEMORY>=LIMIT)return false;try{if(ArrayBuffer.transfer){buffer=ArrayBuffer.transfer(buffer,TOTAL_MEMORY)}else{var oldHEAP8=HEAP8;buffer=new ArrayBuffer(TOTAL_MEMORY)}}catch(e){return false}var success=_emscripten_replace_memory(buffer);if(!success)return false;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer);if(!ArrayBuffer.transfer){HEAP8.set(oldHEAP8)}return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,"byteLength").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||536870912;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}totalMemory=Math.max(totalMemory,16*1024*1024);if(totalMemory!==TOTAL_MEMORY){Module.printErr("increasing TOTAL_MEMORY to "+totalMemory+" to be compliant with the asm.js spec (and given that TOTAL_STACK="+TOTAL_STACK+")");TOTAL_MEMORY=totalMemory}assert(typeof Int32Array!=="undefined"&&typeof Float64Array!=="undefined"&&!!(new Int32Array(1))["subarray"]&&!!(new Int32Array(1))["set"],"JS engine does not provide full typed array support");var buffer;buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(HEAPU8[0]===255&&HEAPU8[3]===0,"Typed arrays 2 must be run on a little-endian system");Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Runtime.dynCall("v",func)}else{Runtime.dynCall("vi",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module["addOnPreRun"]=Module.addOnPreRun=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module["addOnInit"]=Module.addOnInit=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module["addOnPreMain"]=Module.addOnPreMain=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module["addOnExit"]=Module.addOnExit=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module["addOnPostRun"]=Module.addOnPostRun=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module["intArrayFromString"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}Module["intArrayToString"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module["writeStringToMemory"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer++>>0]=array[i]}}Module["writeArrayToMemory"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module["writeAsciiToMemory"]=writeAsciiToMemory;function unSign(value,bits,ignore){if(value>=0){return value}return bits<=32?2*Math.abs(1<<bits-1)+value:Math.pow(2,bits)+value}function reSign(value,bits,ignore){if(value<=0){return value}var half=bits<=32?Math.abs(1<<bits-1):Math.pow(2,bits-1);if(value>=half&&(bits<=32||value>half)){value=-2*half+value}return value}if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];if(!Math["clz32"])Math["clz32"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math["clz32"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var Math_clz32=Math.clz32;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}Module["addRunDependency"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["removeRunDependency"]=removeRunDependency;Module["preloadedImages"]={};Module["preloadedAudios"]={};var memoryInitializer=null;var ASM_CONSTS=[];STATIC_BASE=8;STATICTOP=STATIC_BASE+319760;__ATINIT__.push();allocate([70,111,110,116,32,110,111,114,109,97,108,105,122,97,116,105,111,110,32,102,97,105,108,101,100,46,10,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,102,105,120,32,99,104,101,99,107,115,117,109,115,10,0,0,0,0,0,0,0,0,112,97,109,99,100,97,101,104,97,101,104,104,120,116,109,104,112,120,97,109,101,109,97,110,50,47,83,79,116,115,111,112,32,116,118,99,109,103,112,102,102,121,108,103,97,99,111,108,112,101,114,112,32,70,70,67,71,82,79,86,84,68,66,69,67,76,66,69,112,115,97,103,120,109,100,104,110,114,101,107,72,83,84,76,84,76,67,80,88,77,68,86,97,101,104,118,120,116,109,118,69,83,65,66,70,69,68,71,83,79,80,71,66,85,83,71,67,83,66,69,70,84,83,74,72,84,65,77,84,68,66,67,67,76,66,67,82,76,79,67,76,65,80,67,32,71,86,83,120,105,98,115,116,110,99,97,114,97,118,97,116,97,100,98,99,111,108,98,110,108,115,98,114,97,118,99,99,115,100,102,116,97,101,102,120,116,109,102,114,97,118,102,114,97,118,103,121,116,115,104,116,115,117,106,114,97,99,108,116,114,111,109,120,114,111,109,100,98,112,111,112,111,114,112,107,97,114,116,102,112,97,90,102,108,105,83,116,97,108,71,99,111,108,71,116,97,101,70,108,108,105,83,0,0,0,0,80,97,114,115,105,110,103,32,111,102,32,116,104,101,32,105,110,112,117,116,32,102,111,110,116,32,102,97,105,108,101,100,46,10,0,0,0,0,0,0,70,111,110,116,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,102,97,105,108,101,100,46,10,0,0,0,0,67,111,109,112,114,101,115,115,105,111,110,32,111,102,32,99,111,109,98,105,110,101,100,32,116,97,98,108,101,32,102,97,105,108,101,100,46,10,0,0,67,111,109,112,114,101,115,115,105,111,110,32,111,102,32,101,120,116,101,110,100,101,100,32,109,101,116,97,100,97,116,97,32,102,97,105,108,101,100,46,10,0,0,0,0,0,0,0,109,97,112,58,58,97,116,58,32,32,107,101,121,32,110,111,116,32,102,111,117,110,100,0,82,101,115,117,108,116,32,97,108,108,111,99,97,116,105,111,110,32,119,97,115,32,116,111,111,32,115,109,97,108,108,32,40,37,122,100,32,118,115,32,37,122,100,32,98,121,116,101,115,41,46,10,0,0,0,0,77,105,115,115,105,110,103,32,116,97,98,108,101,32,105,110,100,101,120,32,102,111,114,32,111,102,102,115,101,116,32,48,120,37,48,56,120,10,0,0,77,105,115,109,97,116,99,104,32,98,101,116,119,101,101,110,32,99,111,109,112,117,116,101,100,32,97,110,100,32,97,99,116,117,97,108,32,108,101,110,103,116,104,32,40,37,122,100,32,118,115,32,37,122,100,41,10,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,219,249,126,106,188,116,163,63,219,249,126,106,188,116,147,63,57,180,200,118,190,159,138,63,252,169,241,210,77,98,80,63,252,169,241,210,77,98,80,63,252,169,241,210,77,98,80,63,252,169,241,210,77,98,80,63,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,254,255,255,255,2,0,0,0,253,255,255,255,3,0,0,0,255,255,255,255,1,0,0,0,254,255,255,255,2,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,24,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,18,0,0,0,22,0,0,0,30,0,0,0,38,0,0,0,54,0,0,0,70,0,0,0,102,0,0,0,134,0,0,0,198,0,0,0,70,1,0,0,70,2,0,0,70,4,0,0,70,8,0,0,51,51,51,51,51,51,227,191,102,102,102,102,102,102,238,63,184,30,133,235,81,184,242,63,82,184,30,133,235,81,244,63,195,245,40,92,143,194,237,63,195,245,40,92,143,194,237,63,184,30,133,235,81,184,238,63,184,30,133,235,81,184,238,63,174,71,225,122,20,174,239,63,174,71,225,122,20,174,239,63,205,204,204,204,204,204,240,63,205,204,204,204,204,204,240,63,102,102,102,102,102,102,242,63,102,102,102,102,102,102,242,63,0,0,0,0,0,0,244,63,0,0,0,0,0,0,244,63,72,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,158,0,0,0,0,0,0,0,0,0,0,230,178,0,0,0,0,0,0,0,0,0,0,0,0,75,17,0,0,0,0,0,0,0,0,100,19,172,26,164,30,0,0,4,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,70,101,75,0,0,0,0,0,0,132,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,104,205,8,0,0,0,0,100,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,14,0,0,0,0,0,0,0,0,200,89,0,0,0,0,0,0,0,0,0,0,0,0,38,188,0,0,199,133,0,0,0,0,0,0,0,0,0,0,102,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,76,0,0,0,0,196,93,0,0,0,0,0,0,100,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,80,100,9,0,0,37,81,104,57,134,34,0,0,4,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,26,38,28,0,0,0,0,232,85,199,89,0,0,0,0,201,13,0,0,72,7,0,0,0,0,0,0,0,0,0,0,0,0,38,43,0,0,0,0,232,95,0,0,0,0,0,0,107,25,0,0,0,0,70,144,72,84,167,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,159,0,0,0,0,0,0,230,153,200,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,31,0,0,0,0,9,100,0,0,0,0,0,0,168,3,132,14,141,12,71,61,0,0,0,0,0,0,0,0,0,0,39,205,0,0,229,67,0,0,0,0,0,0,0,0,40,5,165,22,0,0,37,82,0,0,0,0,72,25,39,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,52,0,0,0,0,0,0,40,14,0,0,0,0,0,0,234,115,100,120,0,0,5,122,0,0,196,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,87,0,0,70,146,0,0,0,0,0,0,0,0,72,28,167,1,0,0,36,96,201,84,228,68,0,0,0,0,0,0,0,0,0,0,0,0,41,7,0,0,0,0,0,0,72,1,133,23,0,0,0,0,0,0,6,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,242,82,16,0,0,0,0,0,0,0,0,68,47,169,33,0,0,0,0,4,66,0,0,70,143,0,0,0,0,0,0,38,138,0,0,6,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,82,0,0,134,242,0,0,0,0,0,0,0,0,0,0,5,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,57,72,17,71,101,0,0,0,0,0,0,0,0,137,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,120,230,11,42,51,198,50,0,0,0,0,0,0,164,59,0,0,134,158,8,118,166,242,0,0,0,0,0,0,164,78,0,0,0,0,0,0,0,0,0,0,196,30,0,0,0,0,0,0,134,204,0,0,0,0,0,0,0,0,41,6,0,0,203,49,68,35,0,0,0,0,0,0,0,0,0,0,4,103,0,0,0,0,0,0,0,0,0,0,197,14,0,0,0,0,8,70,7,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,126,197,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,184,203,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,9,231,199,0,0,0,0,10,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,219,138,46,0,0,17,2,0,0,232,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,32,0,0,0,0,136,112,198,224,200,16,197,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,243,0,0,0,0,232,38,100,14,0,0,69,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,65,37,0,0,0,70,92,72,12,69,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,31,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,43,0,0,0,0,0,0,0,0,133,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,104,0,0,0,0,168,99,132,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,66,0,0,0,0,0,0,166,107,0,0,0,0,202,36,0,0,0,0,0,0,180,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,148,73,36,69,33,0,0,0,0,0,0,0,0,41,15,68,6,136,93,0,0,0,0,68,58,237,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,47,0,0,233,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,83,232,43,198,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,22,0,0,0,0,164,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,50,228,4,0,0,0,0,106,73,196,63,234,60,167,3,141,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,71,0,0,166,70,0,0,6,183,0,0,0,0,0,0,0,0,0,0,0,0,137,46,0,0,0,0,100,98,236,49,134,47,9,25,0,0,0,0,0,0,0,0,132,64,0,0,132,105,235,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,102,0,0,0,0,0,0,40,38,231,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,98,68,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,127,0,0,0,0,0,0,0,0,0,0,133,85,0,0,0,0,0,0,0,0,0,0,166,127,0,0,0,0,0,0,102,3,0,0,0,0,0,0,102,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,101,232,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,7,0,0,0,0,0,0,104,34,198,42,0,0,0,0,0,0,0,0,0,0,164,113,0,0,100,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,85,0,0,0,0,0,0,198,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,20,38,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,214,72,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,201,0,0,0,0,0,0,0,0,0,0,101,14,0,0,0,0,0,0,0,0,78,39,196,36,0,0,0,0,0,0,228,122,76,22,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,106,134,224,0,0,0,0,0,0,0,0,0,0,0,0,172,27,0,0,232,70,68,15,0,0,0,0,0,0,0,0,235,72,0,0,0,0,101,22,0,0,0,0,0,0,0,0,0,0,68,8,0,0,166,96,0,0,7,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,4,0,0,9,19,0,0,0,0,166,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,74,0,0,0,0,133,70,0,0,0,0,0,0,166,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,69,0,0,102,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,89,7,68,168,79,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,115,0,0,38,144,0,0,0,0,0,0,164,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,162,0,0,0,0,40,121,38,216,72,39,132,7,0,0,0,0,0,0,0,0,0,0,6,143,0,0,103,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,52,167,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,103,0,0,197,100,0,0,0,0,0,0,0,0,0,0,0,0,73,54,100,6,0,0,0,0,0,0,0,0,0,0,231,19,0,0,0,0,0,0,197,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,33,0,0,0,0,0,0,0,0,41,100,132,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,52,138,68,5,19,43,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,3,71,4,0,0,165,94,0,0,0,0,72,112,39,194,0,0,37,90,0,0,0,0,0,0,0,0,136,126,0,0,0,0,0,0,0,0,164,98,0,0,68,112,234,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,30,165,34,0,0,0,0,0,0,100,54,0,0,0,0,0,0,0,0,0,0,230,163,0,0,0,0,0,0,0,0,0,0,0,0,110,26,165,54,0,0,0,0,0,0,37,33,0,0,0,0,202,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,251,0,0,196,87,0,0,5,101,0,0,0,0,0,0,0,0,104,92,197,20,0,0,0,0,0,0,0,0,0,0,0,0,169,44,228,14,137,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,101,233,40,0,0,0,0,68,56,0,0,0,0,0,0,166,74,0,0,0,0,0,0,70,200,0,0,0,0,106,41,68,94,0,0,0,0,0,0,0,0,0,0,6,171,0,0,0,0,170,69,0,0,0,0,0,0,232,99,69,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,113,0,0,0,0,0,0,0,0,0,0,114,2,196,7,108,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,174,0,0,0,0,0,0,0,0,8,15,199,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,75,36,25,0,0,0,0,136,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,155,0,0,0,0,0,0,0,0,8,121,0,0,0,0,0,0,0,0,0,0,0,0,70,110,0,0,0,0,0,0,100,113,42,41,133,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,22,72,3,133,79,0,0,0,0,40,33,6,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,15,70,76,0,0,0,0,0,0,0,0,232,14,102,249,0,0,0,0,0,0,0,0,0,0,0,0,76,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,69,0,0,0,0,0,0,0,0,0,0,0,0,198,197,0,0,71,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,99,0,0,0,0,0,0,7,54,0,0,0,0,0,0,0,0,0,0,0,0,136,10,199,15,0,0,0,0,0,0,0,0,200,98,0,0,44,47,6,8,0,0,38,191,0,0,0,0,0,0,0,0,73,66,38,40,171,33,7,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,122,0,0,0,0,0,0,73,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,3,134,212,0,0,0,0,202,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,22,102,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,96,0,0,0,0,0,0,103,247,0,0,164,112,206,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,17,0,0,0,0,0,0,0,0,0,0,8,55,164,4,0,0,132,63,0,0,0,0,0,0,4,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,30,0,0,0,0,164,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,94,5,115,0,0,7,131,0,0,37,19,0,0,0,0,234,48,0,0,0,0,7,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,15,0,0,0,0,0,0,0,0,6,80,0,0,100,60,169,8,7,202,0,0,0,0,0,0,0,0,0,0,199,91,0,0,0,0,0,0,0,0,0,0,0,0,10,60,0,0,233,61,0,0,9,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,109,169,28,0,0,0,0,0,0,0,0,134,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,126,132,93,0,0,102,69,0,0,0,0,0,0,0,0,0,0,0,0,40,24,0,0,8,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,123,0,0,0,0,0,0,133,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,10,6,196,0,0,0,0,11,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,20,133,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,45,50,15,0,0,0,0,132,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,20,4,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,115,0,0,0,0,0,0,0,0,105,103,0,0,72,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,112,229,79,0,0,0,0,0,0,0,0,0,0,198,201,0,0,0,0,0,0,135,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,120,196,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,112,0,0,36,71,0,0,0,0,0,0,0,0,104,99,166,255,0,0,0,0,0,0,0,0,0,0,0,0,9,13,134,6,0,0,0,0,0,0,0,0,0,0,164,37,0,0,0,0,0,0,0,0,104,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,4,0,0,0,0,0,0,0,0,198,61,0,0,166,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,126,0,0,166,119,0,0,0,0,8,9,198,38,0,0,0,0,0,0,71,71,0,0,0,0,40,56,0,0,8,8,166,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,87,70,206,237,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,42,0,0,0,0,0,0,0,0,230,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,112,0,0,0,0,82,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,101,230,86,0,0,0,0,0,0,0,0,104,67,167,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,32,0,0,108,125,0,0,0,0,0,0,136,30,228,25,0,0,133,64,0,0,0,0,12,120,0,0,136,18,133,0,0,0,135,158,203,3,134,93,0,0,0,0,203,67,0,0,0,0,0,0,204,0,0,0,0,0,4,106,203,72,39,173,200,107,36,118,0,0,0,0,0,0,0,0,72,87,164,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,76,11,124,0,0,0,0,198,109,0,0,231,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,47,0,0,134,175,0,0,0,0,0,0,0,0,72,123,0,0,137,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,74,135,71,0,0,103,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,87,135,93,0,0,0,0,0,0,0,0,0,0,0,0,233,10,0,0,0,0,229,15,0,0,0,0,108,10,198,24,0,0,0,0,0,0,0,0,0,0,0,0,10,108,133,34,0,0,0,0,0,0,0,0,200,90,6,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,133,0,0,133,95,0,0,0,0,0,0,0,0,107,85,0,0,202,68,166,38,0,0,0,0,72,109,134,151,0,0,0,0,0,0,134,170,0,0,71,123,170,47,102,90,0,0,0,0,0,0,167,196,0,0,0,0,0,0,0,0,0,0,38,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,194,0,0,0,0,0,0,0,0,170,61,70,24,0,0,0,0,0,0,0,0,8,53,5,3,0,0,0,0,0,0,0,0,0,0,0,0,40,67,197,1,171,67,0,0,104,79,196,15,0,0,0,0,0,0,132,39,0,0,0,0,0,0,0,0,169,107,196,124,40,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,44,4,8,0,0,0,0,0,0,0,0,10,38,39,197,0,0,0,0,0,0,0,0,0,0,102,138,0,0,0,0,0,0,0,0,0,0,38,116,0,0,0,0,0,0,199,142,0,0,0,0,0,0,0,0,41,36,230,21,0,0,5,54,0,0,230,34,0,0,0,0,0,0,0,0,0,0,39,98,0,0,0,0,107,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,10,0,0,0,0,0,0,0,0,0,0,0,0,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,165,0,0,0,0,0,0,0,0,203,65,0,0,232,69,197,96,237,15,0,0,0,0,0,0,203,116,231,145,0,0,103,120,0,0,134,32,0,0,0,0,0,0,166,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,72,132,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,145,0,0,0,0,201,122,70,240,0,0,230,7,0,0,0,0,0,0,0,0,0,0,37,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,8,201,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,48,105,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,142,0,0,0,0,0,0,0,0,137,42,164,31,0,0,39,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,111,0,0,0,0,0,0,0,0,69,102,136,98,4,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,58,0,0,103,30,0,0,198,108,0,0,0,0,0,0,166,220,170,106,0,0,0,0,0,0,138,22,164,75,0,0,197,102,139,114,68,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,112,0,0,0,0,0,0,0,0,200,56,134,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,165,0,0,4,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,67,167,5,0,0,0,0,235,32,134,189,78,18,0,0,0,0,0,0,0,0,0,0,138,58,0,0,168,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,36,231,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,8,135,123,173,16,0,0,0,0,0,0,0,0,0,0,0,0,167,17,0,0,0,0,8,109,70,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,32,100,77,0,0,0,0,0,0,0,0,168,23,197,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,35,101,4,0,0,164,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,67,198,26,104,83,0,0,76,9,0,0,0,0,167,15,0,0,0,0,0,0,0,0,0,0,37,95,106,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,167,206,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,56,0,0,197,80,232,12,199,10,42,80,135,253,0,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,108,242,10,166,34,136,47,102,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,117,36,98,0,0,0,0,0,0,0,0,200,69,7,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,178,0,0,0,0,171,91,71,126,0,0,0,0,41,46,7,207,0,0,0,0,0,0,198,129,104,122,70,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,125,0,0,0,0,51,15,0,0,0,0,0,0,105,27,133,2,0,0,0,0,0,0,0,0,0,0,0,0,203,106,7,180,0,0,0,0,0,0,69,61,0,0,198,133,0,0,0,0,75,65,0,0,0,0,0,0,0,0,228,54,168,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,95,0,0,0,0,0,0,0,0,0,0,134,83,0,0,0,0,104,68,36,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,77,0,0,39,78,0,0,0,0,0,0,100,25,175,3,0,0,0,0,69,42,0,0,0,0,0,0,0,0,74,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,38,70,96,0,0,0,0,0,0,0,0,0,0,71,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,86,103,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,0,0,0,0,0,0,6,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,95,0,0,196,109,0,0,0,0,0,0,36,122,0,0,132,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,57,0,0,0,0,0,0,0,0,235,77,69,45,0,0,0,0,8,37,229,57,46,17,0,0,0,0,196,56,0,0,0,0,0,0,231,190,81,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,74,5,6,0,0,0,0,0,0,0,0,0,0,37,91,0,0,0,0,0,0,69,55,0,0,0,0,0,0,0,0,16,5,38,56,0,0,164,106,0,0,0,0,0,0,0,0,0,0,0,0,108,28,0,0,0,0,0,0,0,0,0,0,0,0,102,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,20,229,6,0,0,69,56,0,0,198,146,202,7,0,0,236,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,108,0,0,0,0,0,0,0,0,8,10,164,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,44,167,47,0,0,0,0,104,93,0,0,0,0,0,0,72,119,0,0,0,0,38,134,0,0,135,69,0,0,0,0,0,0,133,86,0,0,230,23,0,0,132,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,103,68,88,0,0,0,0,74,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,154,0,0,0,0,0,0,0,0,0,0,70,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,18,0,0,0,0,0,0,201,112,132,25,0,0,0,0,40,104,0,0,233,35,199,45,0,0,0,0,0,0,0,0,0,0,0,0,8,124,134,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,98,0,0,0,0,233,70,199,78,0,0,0,0,0,0,102,67,0,0,0,0,110,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,123,0,0,0,0,100,29,42,95,68,24,0,0,198,135,0,0,0,0,0,0,0,0,0,0,0,0,8,127,0,0,0,0,135,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,70,233,33,229,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,87,196,58,172,5,103,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,89,0,0,229,40,0,0,0,0,0,0,0,0,0,0,0,0,137,75,6,69,107,0,228,27,0,0,0,0,0,0,0,0,8,57,5,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,252,200,0,164,56,0,0,0,0,0,0,0,0,232,121,0,0,42,120,0,0,0,0,0,0,0,0,0,0,137,114,102,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,43,165,12,105,99,196,38,0,0,0,0,0,0,101,73,232,122,198,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,80,0,0,0,0,0,0,102,106,0,0,0,0,0,0,0,0,0,0,68,62,136,17,39,27,0,0,0,0,0,0,6,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,80,4,57,0,0,6,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,218,0,0,0,0,0,0,0,0,0,0,101,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,11,0,0,0,0,166,195,0,0,102,11,12,99,100,117,200,20,4,2,0,0,0,0,0,0,0,0,240,11,0,0,0,0,0,0,0,0,231,68,106,68,228,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,83,0,0,0,0,0,0,0,0,0,0,4,111,10,46,164,18,0,0,0,0,40,13,68,19,0,0,231,122,0,0,0,0,73,57,228,3,0,0,102,80,0,0,0,0,0,0,4,39,0,0,133,92,0,0,0,0,0,0,71,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,104,138,8,0,0,0,0,0,0,0,0,0,0,107,108,36,10,0,0,0,0,0,0,0,0,72,81,36,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,143,0,0,228,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,83,228,8,0,0,0,0,0,0,0,0,107,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,12,231,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,245,0,0,0,0,0,0,36,99,0,0,0,0,235,108,36,5,0,0,0,0,43,41,199,11,0,0,0,0,0,0,0,0,41,26,0,0,0,0,38,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,12,0,0,0,0,0,0,228,57,0,0,0,0,0,0,0,0,110,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,123,0,0,0,0,0,0,0,0,0,0,196,22,0,0,0,0,0,0,0,0,0,0,0,0,169,25,68,5,0,0,38,100,0,0,0,0,0,0,0,0,0,0,100,79,0,0,0,0,171,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,34,0,0,70,160,0,0,0,0,0,0,37,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,44,233,109,102,58,0,0,167,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,115,0,0,0,0,0,0,0,0,136,105,102,224,0,0,0,0,0,0,0,0,105,38,4,118,107,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,13,0,0,165,61,0,0,196,21,40,52,0,0,0,0,0,0,0,0,0,0,233,72,167,91,0,0,0,0,0,0,0,0,0,0,0,0,10,2,4,4,0,0,0,0,0,0,0,0,168,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,38],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);allocate([40,37,197,15,0,0,0,0,43,45,231,193,0,0,0,0,0,0,0,0,0,0,0,0,232,108,68,118,0,0,0,0,0,0,0,0,0,0,228,21,0,0,164,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,99,0,0,38,93,0,0,165,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,54,132,31,73,103,0,0,0,0,0,0,0,0,0,0,0,0,228,98,0,0,0,0,0,0,0,0,170,63,229,28,169,34,39,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,5,231,198,0,0,0,0,0,0,0,0,0,0,103,210,0,0,0,0,0,0,0,0,40,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,69,228,49,0,0,196,49,0,0,0,0,0,0,199,128,0,0,0,0,0,0,0,0,0,0,0,0,13,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,121,0,0,68,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,51,71,74,0,0,167,136,0,0,228,84,40,114,0,0,0,0,0,0,0,0,134,186,136,67,199,171,73,89,199,185,0,0,0,0,0,0,0,0,40,103,230,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,119,0,0,0,0,8,92,229,17,0,0,132,87,0,0,134,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,194,0,0,0,0,0,0,133,107,169,75,198,52,0,0,0,0,235,100,0,0,0,0,0,0,0,0,0,0,105,16,101,64,0,0,196,80,0,0,0,0,0,0,0,0,169,14,132,49,72,20,38,15,0,0,0,0,0,0,0,0,0,0,0,0,170,44,0,0,0,0,0,0,0,0,0,0,0,0,165,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,89,138,43,6,192,0,0,102,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,54,0,0,0,0,0,0,0,0,0,0,0,0,202,45,103,71,41,64,0,0,0,0,0,0,0,0,0,0,0,0,132,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,109,0,0,0,0,0,0,0,0,103,21,0,0,38,78,200,68,103,13,139,73,228,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,96,235,12,0,0,0,0,0,0,0,0,0,0,0,0,228,99,0,0,0,0,0,0,196,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,34,0,0,36,55,0,0,0,0,11,60,36,1,0,0,0,0,0,0,199,147,0,0,70,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,85,0,0,0,0,134,125,15,3,0,0,0,0,6,121,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,96,0,0,0,0,0,0,73,72,71,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,14,69,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,69,0,0,0,0,0,0,0,0,0,0,0,0,8,2,166,164,0,0,0,0,50,12,0,0,0,0,0,0,234,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,111,0,0,0,0,0,0,102,196,0,0,0,0,73,53,70,23,0,0,166,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,117,36,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,68,164,11,0,0,0,0,0,0,0,0,169,93,0,0,73,20,0,0,0,0,164,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,78,36,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,79,0,0,0,0,0,0,0,0,135,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,104,200,49,0,0,168,80,0,0,0,0,0,0,233,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,2,0,0,4,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,249,0,0,0,0,0,0,0,0,40,96,0,0,0,0,0,0,75,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,178,0,0,0,0,0,0,0,0,139,7,0,0,0,0,0,0,41,80,71,234,0,0,134,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,219,0,0,0,0,0,0,0,0,0,0,39,117,0,0,135,206,0,0,198,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,72,0,0,0,0,0,0,0,0,0,0,198,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,168,0,0,0,0,114,11,0,0,136,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,16,0,0,164,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,122,0,0,0,0,0,0,0,0,0,0,176,2,0,0,0,0,0,0,0,0,0,0,112,6,0,0,0,0,0,0,0,0,71,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,35,38,35,0,0,166,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,222,0,0,0,0,0,0,0,0,0,0,6,191,0,0,100,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,9,68,17,0,0,0,0,0,0,0,0,204,79,165,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,47,36,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,107,0,0,0,0,74,118,6,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,101,0,0,0,0,0,0,42,29,0,0,0,0,134,123,0,0,70,55,0,0,0,0,0,0,7,112,0,0,0,0,0,0,0,0,0,0,0,0,104,60,0,0,0,0,0,0,0,0,166,213,0,0,0,0,0,0,0,0,0,0,0,0,243,14,0,0,0,0,0,0,171,8,0,0,169,38,0,0,0,0,0,0,0,0,0,0,73,18,7,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,86,0,0,0,0,0,0,40,6,68,2,140,127,0,0,0,0,164,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,116,102,228,0,0,69,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,26,229,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,33,0,0,0,0,0,0,229,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,62,0,0,0,0,0,0,0,0,39,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,31,36,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,95,0,0,0,0,73,19,0,0,0,0,0,0,232,31,0,0,108,52,100,40,0,0,0,0,0,0,0,0,0,0,4,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,68,71,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,100,166,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,119,0,0,0,0,69,74,0,0,0,0,0,0,0,0,0,0,0,0,205,0,230,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,102,38,205,0,0,134,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,37,0,0,0,0,0,0,0,0,0,0,134,18,0,0,0,0,137,84,0,0,0,0,0,0,0,0,0,0,0,0,70,209,0,0,0,0,0,0,0,0,0,0,0,0,75,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,17,166,48,0,0,0,0,0,0,0,0,104,11,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,218,0,0,0,0,0,0,0,0,0,0,7,3,0,0,6,169,202,19,71,191,0,0,0,0,73,76,228,62,170,18,38,175,0,0,0,0,0,0,0,0,0,0,71,243,232,82,0,0,0,0,0,0,0,0,230,200,0,0,0,0,0,0,0,0,0,0,0,0,74,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,52,0,0,0,0,0,0,4,49,41,79,37,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,2,70,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,85,135,17,0,0,0,0,0,0,0,0,43,31,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,152,0,0,101,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,63,135,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,76,231,117,0,0,167,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,80,0,0,0,0,0,0,0,0,9,35,0,0,0,0,0,0,214,2,0,0,0,0,0,0,0,0,0,0,73,23,68,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,92,0,0,0,0,41,41,231,18,168,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,115,0,0,0,0,168,64,39,104,0,0,68,63,0,0,0,0,136,54,103,31,8,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,86,196,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,24,230,221,72,64,167,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,92,0,0,0,0,0,0,0,0,0,0,0,0,139,36,0,0,0,0,0,0,105,28,103,160,204,96,36,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,6,37,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,114,198,238,0,0,0,0,0,0,71,228,75,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,145,200,10,199,3,0,0,0,0,0,0,38,90,234,104,0,0,0,0,0,0,41,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,21,134,53,0,0,0,0,0,0,0,0,0,0,6,206,170,79,167,150,0,0,0,0,0,0,135,199,0,0,0,0,136,0,68,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,34,167,19,232,48,134,75,0,0,0,0,43,89,39,118,170,109,164,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,107,228,70,136,78,199,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,95,0,0,0,0,10,98,0,0,0,0,0,0,0,0,69,37,0,0,0,0,233,95,39,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,99,0,0,0,0,171,37,0,0,0,0,71,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,154,0,0,0,0,0,0,0,0,0,0,0,0,140,80,39,46,243,1,0,0,8,20,230,8,0,0,0,0,0,0,0,0,0,0,230,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,91,230,156,136,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,104,0,0,0,0,0,0,0,0,0,0,199,202,0,0,0,0,236,91,0,0,0,0,0,0,0,0,38,200,137,100,198,173,78,49,0,0,0,0,0,0,0,0,0,0,0,0,6,12,0,0,100,81,0,0,0,0,104,4,7,86,0,0,0,0,0,0,102,83,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,88,0,0,134,190,0,0,199,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,53,0,0,135,149,0,0,0,0,202,6,0,0,233,1,5,58,0,0,70,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,113,0,0,0,0,0,0,0,0,0,0,0,0,76,24,230,220,0,0,0,0,0,0,0,0,0,0,5,105,0,0,134,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,179,0,0,0,0,0,0,0,0,73,80,102,84,0,0,0,0,0,0,0,0,0,0,0,0,40,34,132,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,103,228,11,0,0,0,0,141,2,103,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,106,0,0,0,0,196,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,108,10,81,5,108,0,0,5,116,75,11,0,0,136,41,0,0,0,0,0,0,0,0,230,131,0,0,0,0,0,0,0,0,0,0,0,0,75,123,0,0,0,0,0,0,0,0,0,0,136,5,135,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,42,197,64,233,103,134,138,0,0,0,0,0,0,132,104,0,0,135,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,105,164,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,30,0,0,0,0,0,0,72,76,196,116,0,0,0,0,8,12,0,0,0,0,0,0,8,30,199,81,169,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,48,0,0,102,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,9,0,0,205,45,230,101,0,0,0,0,233,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,84,73,106,198,82,0,0,228,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,90,132,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,18,0,0,104,53,0,0,0,0,198,47,0,0,0,0,0,0,36,41,0,0,0,0,233,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,113,0,0,0,0,200,45,102,105,0,0,102,180,0,0,135,171,10,124,0,0,136,4,100,15,0,0,36,81,0,0,0,0,0,0,0,0,0,0,229,95,0,0,70,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,9,106,60,0,0,0,0,39,168,0,0,0,0,0,0,165,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,248,0,0,0,0,136,27,165,14,0,0,0,0,0,0,197,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,95,135,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,181,0,0,0,0,232,45,7,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,35,6,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,44,0,0,0,0,0,0,0,0,0,0,4,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,116,0,0,70,131,0,0,100,18,75,24,0,0,0,0,102,42,0,0,0,0,0,0,0,0,0,0,197,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,42,199,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,144,0,0,0,0,0,0,230,105,0,0,0,0,0,0,0,0,0,0,0,0,105,85,0,0,105,108,6,118,0,0,0,0,0,0,0,0,0,0,39,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,49,70,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,77,228,66,0,0,39,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,97,0,0,0,0,0,0,0,0,0,0,196,5,0,0,101,101,0,0,0,0,233,50,71,182,0,0,71,117,136,88,70,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,55,0,0,0,0,0,0,0,0,0,0,0,0,39,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,57,0,0,0,0,0,0,0,0,168,65,0,0,0,0,37,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,62,167,90,0,0,0,0,0,0,0,0,172,2,0,0,0,0,0,0,0,0,167,96,0,0,0,0,0,0,132,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,117,228,72,107,82,199,182,0,0,133,27,0,0,0,0,0,0,0,0,107,100,0,0,0,0,4,68,80,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,22,5,22,0,0,7,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,3,0,0,0,0,0,0,0,0,0,0,0,0,7,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,98,0,0,0,0,0,0,0,0,0,0,230,106,0,0,0,0,0,0,0,0,168,76,228,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,94,198,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,8,69,20,0,0,196,81,9,6,132,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,84,71,247,0,0,0,0,203,12,135,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,45,0,0,164,57,0,0,0,0,0,0,4,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,93,38,113,0,0,0,0,0,0,101,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,39,101,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,106,0,0,0,0,201,104,230,78,0,0,0,0,0,0,0,0,0,0,5,118,0,0,0,0,0,0,0,0,0,0,4,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,69,230,30,0,0,0,0,136,124,0,0,0,0,167,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,65,71,93,0,0,0,0,43,43,0,0,0,0,0,0,40,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,81,133,53,0,0,0,0,0,0,71,145,205,28,231,40,74,68,4,99,0,0,0,0,0,0,102,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,84,170,23,0,0,0,0,0,0,0,0,0,0,0,0,101,12,0,0,0,0,0,0,166,131,0,0,0,0,0,0,0,0,0,0,0,0,104,69,164,49,0,0,0,0,0,0,0,0,0,0,166,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,49,164,60,0,0,198,45,0,0,0,0,106,98,0,0,0,0,0,0,73,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,19,0,0,166,117,0,0,0,0,0,0,0,0,0,0,7,167,0,0,0,0,136,14,0,0,0,0,0,0,0,0,0,0,0,0,102,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,21,5,20,0,0,230,226,0,0,0,0,0,0,0,0,0,0,68,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,86,0,0,0,0,0,0,0,0,137,102,0,0,75,62,132,13,0,0,0,0,0,0,230,139,0,0,0,0,0,0,133,30,44,76,167,125,0,0,132,51,0,0,0,0,0,0,0,0,0,0,228,111,0,0,0,0,0,0,71,237,0,0,0,0,0,0,0,0,0,0,196,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,67,8,78,198,36,170,37,0,0,0,0,0,0,73,37,0,0,0,0,164,94,0,0,0,0,0,0,0,0,0,0,230,157,0,0,132,102,0,0,69,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,123,0,0,0,0,0,0,0,0,139,15,103,234,0,0,0,0,0,0,133,40,0,0,0,0,0,0,134,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,113,0,0,68,119,0,0,0,0,0,0,0,0,40,41,0,0,0,0,0,0,0,0,165,64,0,0,0,0,0,0,0,0,0,0,4,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,75,197,18,0,0,0,0,0,0,0,0,0,0,133,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,13,0,0,0,0,0,0,0,0,135,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,222,0,0,0,0,240,6,164,61,0,0,0,0,43,10,0,0,40,40,134,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,45,6,71,0,0,68,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,78,0,0,0,0,0,0,0,0,0,0,0,0,136,34,6,2,0,0,0,0,168,7,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,24,228,36,0,0,0,0,0,0,0,0,0,0,0,0,105,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,26,165,38,168,9,165,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,98,165,21,0,0,229,54,139,20,7,81,0,0,0,0,236,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,46,4,1,0,0,103,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,71,0,0,0,0,0,0,198,64,0,0,0,0,0,0,198,87,0,0,0,0,0,0,0,0,0,0,0,0,232,10,0,0,0,0,0,0,202,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,82,164,8,0,0,0,0,0,0,71,225,0,0,0,0,0,0,0,0,0,0,0,0,107,62,0,0,0,0,0,0,234,10,135,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,105,110,35,0,0,0,0,0,0,0,0,134,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,13,101,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,75,110,40,164,14,0,0,0,0,0,0,0,0,235,58,68,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,59,68,64,0,0,198,221,0,0,0,0,9,11,0,0,201,54,133,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,35,70,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,79,68,32,0,0,0,0,200,97,37,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,126,4,83,0,0,198,117,0,0,166,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,44,0,0,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,26,36,36,0,0,230,246,168,13,70,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,88,0,0,0,0,5,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,154,0,0,0,0,205,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,116,6,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,28,39,97,0,0,70,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,81,196,51,0,0,39,2,0,0,0,0,0,0,199,168,0,0,103,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,110,4,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,53,36,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,114,0,0,0,0,0,0,0,0,202,62,6,35,11,56,165,5,0,0,0,0,0,0,0,0,40,97,0,0,0,0,0,0,0,0,68,51,0,0,199,138,0,0,0,0,0,0,0,0,0,0,0,0,203,51,165,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,98,0,0,0,0,0,0,132,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,198,169,76,38,47,11,12,0,0,0,0,0,0,0,0,100,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,85,0,0,103,60,138,114,0,0,0,0,0,0,0,0,0,0,0,0,38,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,10,0,0,0,0,231,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,62,0,0,0,0,0,0,0,0,0,0,0,0,168,115,36,14,10,13,132,40,0,0,135,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,116,104,42,165,33,169,60,38,214,170,118,228,52,0,0,135,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,252,204,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,127,0,0,0,0,0,0,0,0,238,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,65,0,0,0,0,0,0,0,0,0,0,0,0,37,78,0,0,0,0,40,53,167,4,0,0,0,0,0,0,231,242,0,0,0,0,0,0,0,0,0,0,164,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,21,0,0,0,0,72,126,0,0,0,0,70,249,0,0,0,0,0,0,103,11,0,0,0,0,0,0,0,0,138,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,30,230,1,0,0,0,0,0,0,102,153,0,0,198,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,81,73,70,36,18,0,0,0,0,0,0,164,62,104,127,0,0,0,0,0,0,0,0,166,63,107,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,137,0,0,0,0,0,0,0,0,0,0,0,0,138,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,61,68,14,0,0,0,0,235,34,164,9,0,0,166,214,0,0,0,0,0,0,0,0,72,10,135,96,0,0,135,90,0,0,0,0,0,0,0,0,0,0,166,141,0,0,0,0,0,0,0,0,0,0,0,0,42,124,38,105,0,0,164,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,41,167,46,182,4,0,0,0,0,0,0,0,0,132,70,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,36,103,0,0,0,0,105,112,0,0,0,0,70,97,0,0,0,0,204,47,39,177,0,0,135,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,14,38,68,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,87,0,0,0,0,104,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,94,229,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,46,0,0,167,154,0,0,0,0,0,0,0,0,0,0,0,0,77,37,228,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,13,0,0,0,0,0,0,0,0,0,0,0,0,199,101,236,123,0,0,169,94,36,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,67,0,0,0,0,0,0,0,0,8,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,126,0,0,0,0,0,0,36,26,0,0,0,0,0,0,0,0,40,69,230,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,69,232,65,0,0,0,0,0,0,0,0,0,0,234,63,0,0,0,0,101,84,0,0,0,0,139,19,0,0,0,0,0,0,0,0,0,0,0,0,165,88,0,0,70,87,0,0,0,0,0,0,38,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,25,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,159,0,0,0,0,0,0,0,0,0,0,102,132,0,0,0,0,0,0,0,0,0,0,0,0,200,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,118,0,0,0,0,0,0,0,0,0,0,0,0,232,21,0,0,0,0,0,0,0,0,0,0,0,0,196,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,69,0,0,0,0,0,0,0,0,5,98,136,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,49,198,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,96,135,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,105,201,1,0,0,140,89,228,120,72,74,0,0,41,21,135,178,0,0,37,20,0,0,196,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,8,0,0,0,0,0,0,0,0,0,0,202,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,130,0,0,6,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,102,230,79,0,0,199,226,170,124,0,0,0,0,0,0,0,0,132,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,29,103,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,6,0,0,0,0,0,0,4,32],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+10252);allocate([233,43,0,0,108,119,166,235,0,0,68,89,0,0,0,0,0,0,198,158,0,0,4,93,0,0,38,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,50,39,121,0,0,0,0,0,0,0,0,0,0,0,0,72,6,0,0,0,0,0,0,0,0,132,71,0,0,0,0,0,0,0,0,234,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,31,102,5,0,0,37,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,95,0,0,101,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,84,0,0,0,0,44,51,70,32,84,10,37,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,4,37,49,0,0,133,98,0,0,0,0,0,0,38,160,173,63,230,161,0,0,0,0,0,0,0,0,107,65,164,7,0,0,0,0,0,0,166,73,0,0,0,0,205,6,103,132,0,0,0,0,0,0,0,0,0,0,0,0,9,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,114,0,0,199,199,0,0,0,0,0,0,0,0,0,0,228,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,6,228,31,0,0,0,0,0,0,0,0,0,0,6,41,0,0,0,0,0,0,0,0,169,21,0,0,0,0,0,0,0,0,0,0,51,8,102,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,55,0,0,75,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,105,70,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,111,0,0,0,0,132,35,0,0,0,0,0,0,0,0,40,66,0,0,0,0,0,0,233,100,0,0,47,17,68,27,0,0,134,180,0,0,0,0,0,0,0,0,0,0,196,33,172,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,74,167,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,60,103,47,0,0,0,0,0,0,0,0,0,0,101,125,200,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,92,8,38,196,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,99,167,115,136,60,228,58,0,0,0,0,0,0,0,0,8,86,0,0,0,0,0,0,0,0,36,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,146,236,93,0,0,0,0,0,0,138,56,39,116,0,0,165,27,0,0,166,179,0,0,0,0,0,0,0,0,104,119,132,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,24,0,0,132,16,0,0,0,0,0,0,0,0,0,0,228,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,95,104,16,70,5,0,0,0,0,0,0,71,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,46,134,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,71,172,3,0,0,0,0,0,0,0,0,0,0,0,0,102,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,191,0,0,0,0,0,0,0,0,0,0,0,0,108,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,208,0,0,0,0,0,0,0,0,0,0,0,0,140,16,230,63,0,0,5,71,72,32,132,127,0,0,0,0,232,2,164,70,0,0,6,43,0,0,0,0,0,0,0,0,0,0,68,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,30,0,0,0,0,233,51,102,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,50,0,0,0,0,70,94,237,3,132,89,0,0,197,122,104,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,111,0,0,0,0,0,0,9,105,229,105,0,0,0,0,233,102,0,0,0,0,0,0,0,0,0,0,0,0,38,98,0,0,0,0,8,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,66,0,0,0,0,39,85,0,0,0,0,76,39,0,0,8,48,132,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,36,199,13,0,0,70,227,232,125,0,0,42,40,0,0,73,8,7,45,0,0,0,0,0,0,37,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,112,40,9,197,31,0,0,0,0,0,0,0,0,104,85,231,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,10,0,0,0,0,164,90,0,0,0,0,0,0,0,0,0,0,134,24,0,0,0,0,0,0,0,0,0,0,229,103,0,0,0,0,0,0,0,0,104,90,0,0,0,0,0,0,0,0,0,0,72,124,4,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,95,5,106,0,0,0,0,0,0,0,0,170,25,132,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,118,0,0,0,0,0,0,228,110,78,56,0,0,0,0,135,77,138,48,166,20,0,0,0,0,0,0,0,0,0,0,228,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,97,165,66,0,0,0,0,0,0,0,0,41,83,36,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,5,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,75,0,0,0,0,0,0,0,0,0,0,0,0,8,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,169,77,4,75,0,0,229,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,70,0,0,230,69,0,0,38,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,84,169,19,0,0,0,0,0,0,0,0,71,89,0,0,0,0,0,0,0,0,0,0,6,57,0,0,165,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,2,0,0,0,0,0,0,0,0,198,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,8,231,57,0,0,0,0,106,6,38,24,107,51,230,58,0,0,0,0,0,0,0,0,40,79,0,0,0,0,0,0,0,0,0,0,0,0,135,143,44,16,70,69,200,67,103,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,54,0,0,0,0,0,0,0,0,0,0,0,0,100,109,0,0,0,0,0,0,0,0,0,0,164,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,70,0,0,0,0,0,0,74,18,132,55,0,0,0,0,201,27,135,157,0,0,0,0,0,0,0,0,0,0,0,0,41,95,0,0,0,0,102,87,0,0,0,0,0,0,0,0,0,0,134,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,103,76,30,0,0,0,0,38,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,25,135,4,12,28,0,0,0,0,0,0,0,0,0,0,0,0,198,178,0,0,198,225,0,0,100,65,0,0,0,0,201,119,38,236,0,0,0,0,0,0,102,103,0,0,0,0,0,0,0,0,0,0,102,255,8,13,70,30,0,0,0,0,0,0,0,0,0,0,0,0,136,35,135,18,78,1,0,0,0,0,0,0,0,0,0,0,0,0,38,156,0,0,0,0,0,0,228,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,11,0,0,0,0,0,0,200,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,63,71,163,0,0,0,0,138,95,133,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,212,0,0,0,0,0,0,0,0,233,19,132,120,232,72,0,0,0,0,0,0,0,0,0,0,0,0,100,64,0,0,0,0,8,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,0,0,0,0,0,0,0,0,0,0,198,222,0,0,0,0,137,5,231,160,0,0,0,0,0,0,0,0,0,0,133,91,0,0,0,0,0,0,0,0,40,39,231,84,0,0,0,0,42,45,0,0,0,0,0,0,0,0,102,74,0,0,0,0,0,0,0,0,0,0,0,0,41,94,102,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,17,0,0,0,0,0,0,0,0,197,51,0,0,71,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,218,0,0,0,0,0,0,102,203,0,0,4,61,0,0,0,0,0,0,0,0,0,0,100,10,0,0,0,0,0,0,0,0,140,84,0,0,0,0,231,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,34,0,0,0,0,0,0,0,0,0,0,0,0,44,12,0,0,208,1,166,135,0,0,0,0,0,0,0,0,0,0,0,0,171,97,135,48,0,0,36,106,104,7,167,28,0,0,0,0,0,0,0,0,0,0,102,139,0,0,0,0,0,0,0,0,208,11,0,0,0,0,0,0,0,0,134,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,82,42,92,103,129,0,0,0,0,0,0,0,0,0,0,0,0,41,27,71,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,126,0,0,0,0,0,0,0,0,0,0,0,0,73,24,164,91,0,0,0,0,42,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,117,166,247,53,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,122,0,0,0,0,0,0,0,0,0,0,101,76,0,0,0,0,0,0,0,0,0,0,69,22,0,0,0,0,0,0,68,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,48,0,0,0,0,0,0,198,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,61,0,0,0,0,178,4,0,0,0,0,0,0,0,0,134,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,12,39,192,0,0,0,0,11,21,37,59,0,0,0,0,0,0,37,13,0,0,0,0,0,0,0,0,201,86,197,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,1,6,157,0,0,0,0,0,0,71,203,0,0,100,97,0,0,0,0,0,0,0,0,40,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,38,0,0,0,0,0,0,0,0,0,0,167,92,0,0,228,83,0,0,0,0,0,0,0,0,40,81,199,18,0,0,0,0,105,12,38,65,0,0,0,0,110,0,101,42,0,0,0,0,0,0,230,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,29,102,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,203,0,0,196,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,103,0,0,0,0,0,0,167,180,0,0,0,0,0,0,197,60,0,0,0,0,0,0,0,0,40,2,103,204,0,0,0,0,0,0,0,0,202,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,170,0,0,0,0,0,0,0,0,0,0,229,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,11,0,0,0,0,0,0,0,0,0,0,0,0,230,55,0,0,0,0,105,59,39,72,0,0,0,0,0,0,0,0,0,0,0,0,110,38,0,0,9,68,36,76,0,0,0,0,0,0,68,116,0,0,0,0,0,0,0,0,174,2,101,117,0,0,0,0,0,0,0,0,0,0,69,120,72,21,101,81,0,0,0,0,0,0,0,0,140,61,196,50,0,0,0,0,0,0,0,0,0,0,167,74,0,0,0,0,0,0,0,0,0,0,164,122,0,0,0,0,0,0,36,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,110,38,2,0,0,0,0,49,2,0,0,106,113,0,0,0,0,0,0,200,13,0,0,0,0,0,0,179,6,69,57,8,0,231,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,115,134,230,0,0,6,154,0,0,0,0,0,0,0,0,202,8,228,64,0,0,36,124,0,0,0,0,0,0,0,0,0,0,0,0,8,74,230,3,0,0,101,113,0,0,0,0,0,0,0,0,0,0,166,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,6,0,0,8,51,4,26,12,7,0,0,0,0,166,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,55,0,0,41,56,6,116,0,0,0,0,0,0,0,0,0,0,36,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,190,0,0,100,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,21,45,23,0,0,9,58,103,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,139,40,20,132,56,0,0,0,0,72,90,0,0,0,0,0,0,0,0,0,0,182,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,7,38,36,110,5,0,0,0,0,0,0,0,0,0,0,0,0,199,211,0,0,0,0,0,0,0,0,136,52,0,0,0,0,0,0,0,0,39,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,38,0,0,0,0,230,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,98,0,0,0,0,40,93,69,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,36,139,8,228,29,181,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,86,73,7,135,68,0,0,0,0,0,0,0,0,0,0,0,0,236,85,0,0,0,0,0,0,0,0,167,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,125,164,82,0,0,0,0,0,0,0,0,0,0,0,0,169,55,0,0,0,0,0,0,84,9,0,0,0,0,0,0,0,0,167,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,95,0,0,0,0,171,23,7,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,193,9,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,48,228,93,0,0,36,51,0,0,0,0,0,0,0,0,0,0,0,0,42,32,71,200,49,13,38,59,0,0,0,0,0,0,0,0,0,0,0,0,143,19,166,243,0,0,103,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,61,0,0,37,77,0,0,0,0,75,6,0,0,203,86,199,189,41,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,2,0,0,0,0,0,0,0,0,6,127,0,0,0,0,0,0,36,39,0,0,0,0,0,0,0,0,0,0,0,0,8,23,231,116,73,14,6,90,0,0,0,0,76,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,50,0,0,0,0,0,0,0,0,0,0,232,11,197,110,0,0,36,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,90,0,0,165,127,0,0,0,0,0,0,0,0,0,0,198,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,99,0,0,100,73,0,0,0,0,232,86,198,74,0,0,38,241,41,72,165,119,0,0,36,16,105,94,199,58,0,0,0,0,72,56,133,18,0,0,0,0,0,0,198,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,31,0,0,107,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,5,0,0,0,0,228,109,0,0,198,100,0,0,135,233,0,0,0,0,0,0,0,0,0,0,166,229,0,0,0,0,0,0,70,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,120,0,0,0,0,0,0,0,0,72,63,0,0,0,0,0,0,79,1,0,0,0,0,0,0,202,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,116,6,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,106,0,0,0,0,0,0,0,0,139,79,0,0,0,0,0,0,10,4,199,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,117,0,0,0,0,0,0,0,0,101,54,0,0,0,0,0,0,0,0,0,0,0,0,232,8,165,10,0,0,0,0,0,0,0,0,0,0,0,0,12,86,135,92,201,11,101,86,0,0,0,0,234,84,229,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,67,0,0,136,85,39,249,0,0,0,0,0,0,102,82,0,0,230,72,0,0,100,100,0,0,5,88,0,0,0,0,0,0,0,0,0,0,100,22,168,22,103,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,170,50,101,25,0,0,0,0,107,12,70,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,61,0,0,197,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,0,36,83,169,43,4,31,0,0,0,0,0,0,0,0,139,76,199,158,0,0,0,0,0,0,0,0,0,0,101,46,0,0,0,0,0,0,71,103,0,0,0,0,0,0,0,0,183,2,230,191,75,107,196,46,0,0,0,0,0,0,0,0,0,0,0,0,233,38,0,0,0,0,0,0,234,123,6,246,0,0,0,0,0,0,0,0,201,61,230,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,96,0,0,0,0,0,0,0,0,0,0,70,80,0,0,0,0,9,91,102,15,0,0,0,0,0,0,103,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,9,0,0,0,0,0,0,0,0,0,0,0,0,38,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,13,100,88,203,60,102,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,94,100,23,0,0,0,0,0,0,198,172,0,0,0,0,0,0,229,21,0,0,166,186,0,0,230,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,27,0,0,0,0,0,0,0,0,104,64,197,72,0,0,101,106,0,0,0,0,0,0,0,0,0,0,198,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,125,202,122,0,0,72,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,107,68,12,0,0,0,0,0,0,0,0,0,0,0,0,74,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,5,0,0,0,0,0,0,105,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,7,37,26,0,0,36,69,0,0,0,0,142,2,165,74,0,0,199,201,0,0,0,0,0,0,0,0,0,0,196,18,48,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,24,0,0,0,0,71,98,207,16,0,0,0,0,0,0,73,17,198,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,5,135,25,0,0,196,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,18,100,0,0,0,0,0,0,0,0,0,200,117,0,0,0,0,100,127,0,0,0,0,0,0,0,0,0,0,0,0,105,8,165,35,0,0,0,0,23,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,43,164,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,211,0,0,0,0,0,0,0,0,41,69,165,62,0,0,0,0,0,0,0,0,136,123,0,0,0,0,0,0,238,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,63,103,140,0,0,0,0,0,0,0,0,0,0,135,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,251,0,0,0,0,0,0,230,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,36,3,171,77,7,156,41,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,55,196,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,105,0,0,0,0,0,0,0,0,0,0,172,86,0,0,74,81,69,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,110,0,0,104,59,0,0,0,0,5,127,104,22,71,75,234,13,38,41,0,0,0,0,0,0,7,233,0,0,0,0,0,0,0,0,41,119,6,236,0,0,0,0,137,97,0,0,0,0,0,0,76,10,0,0,0,0,0,0,0,0,165,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,119,10,14,0,0,0,0,0,0,9,88,100,66,0,0,0,0,0,0,0,0,0,0,0,0,41,42,38,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,114,38,233,0,0,0,0,40,32,5,2,0,0,196,60,0,0,0,0,0,0,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,29,0,0,0,0,229,101,0,0,0,0,232,92,103,248,168,25,166,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,27,134,56,170,73,0,0,9,22,164,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,138,235,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,107,0,0,0,0,134,37,0,0,166,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,0,231,16,105,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,78,0,0,0,0,0,0,0,0,0,0,0,0,106,104,0,0,0,0,0,0,200,75,199,50,0,0,102,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,19,132,46,0,0,197,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,186,0,0,0,0,0,0,38,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,91,167,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,33,229,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,102,0,0,0,0,0,0,102,89,0,0,0,0,0,0,134,108,0,0,230,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,131,0,0,0,0,0,0,197,118,0,0,38,135,0,0,103,199,0,0,0,0,0,0,0,0,116,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,5,137,85,0,0,0,0,0,0,0,0,0,0,0,0,198,200,0,0,38,97,0,0,135,127,0,0,0,0,0,0,199,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,43,0,0,0,0,0,0,0,0,0,0,0,0,109,32,135,226,0,0,0,0,0,0,229,120,0,0,0,0,8,101,36,59,202,35,0,0,0,0,0,0,0,0,0,0,0,0,196,99,168,78,196,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,64,37,42,77,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,18,0,0,0,0,199,205,0,0,0,0,0,0,0,0,0,0,36,58,0,0,0,0,0,0,164,65,0,0,0,0,0,0,0,0,0,0,0,0,106,37,167,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,133,0,0,0,0,0,0,0,0,0,0,132,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,29,70,10,0,0,39,154,200,111,68,120,0,0,0,0,0,0,0,0,169,91,229,61,0,0,0,0,0,0,0,0,0,0,134,150,0,0,0,0,0,0,229,69,105,62,0,0,8,28,166,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,12,199,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,91,0,0,0,0,168,70,228,90,0,0,134,243,0,0,0,0,0,0,229,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,149,0,0,0,0,0,0,0,0,0,0,0,0,204,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,40,68,50,139,72,0,0,0,0,101,7,0,0,0,0,82,4,0,0,8,112,36,120,0,0,166,160,0,0,0,0,212,5,0,0,237,59,0,0,0,0,0,0,0,0,164,10,0,0,228,82,0,0,0,0,0,0,0,0,0,0,228,97,40,8,68,85,0,0,0,0,0,0,0,0,0,0,102,1,0,0,0,0,0,0,0,0,0,0,68,65,0,0,0,0,0,0,132,6,0,0,0,0,0,0,0,0,0,0,228,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,42,0,0,0,0,0,0,0,0,0,0,169,49,36,35,0,0,0,0,105,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,14,0,0,110,6,0,0,0,0,68,107,0,0,102,134,232,66,5,56,0,0,0,0,0,0,0,0,0,0,71,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,33,42,84,228,39,168,56,6,42,0,0,230,68,0,0,0,0,73,27,199,175,170,8,5,32,0,0,0,0,8,119,134,247,0,0,36,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,10,0,0,0,0,0,0,14,44,71,79,0,0,0,0,0,0,0,0,0,0,68,77,0,0,0,0,0,0,0,0,0,0,0,0,49,9,100,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,21,228,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,134,0,0,0,0,0,0,0,0,0,0,0,0,72,60,38,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,48,5,42,0,0,0,0,0,0,102,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,115,0,0,39,9,0,0,0,0,0,0,0,0,0,0,103,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,182,0,0,133,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,5,36,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,19,0,0,0,0,0,0,0,0,0,0,6,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,3,0,0,0,0,39,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,59,0,0,0,0,0,0,0,0,0,0,0,0,108,11,167,182,104,26,68,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,133,0,0,0,0,137,15,164,1,0,0,0,0,0,0,199,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,91,138,101,0,0,0,0,68,21,0,0,0,0,0,0,5,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,65,0,0,0,0,18,18,71,91,0,0,0,0,168,122,0,0,0,0,229,13,0,0,0,0,138,16,0,0,0,0,0,0,0,0,0,0,0,0,70,111,0,0,0,0,0,0,0,0,0,0,133,55,0,0,103,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,15,0,0,0,0,0,0,0,0,38,255,136,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,117,0,0,102,124,0,0,0,0,234,31,0,0,0,0,69,17,234,107,164,120,0,0,0,0,236,78,0,0,0,0,0,0,0,0,70,174,8,40,132,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,112,0,0,132,86,0,0,0,0,0,0,0,0,0,0,71,115,0,0,101,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,119,0,0,0,0,0,0,0,0,0,0,0,0,165,114,0,0,135,137,0,0,0,0,0,0,166,146,0,0,70,241,136,33,101,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,48,69,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,78,0,0,0,0,0,0,229,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,140,0,0,0,0,0,0,68,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,82,165,4,0,0,0,0,0,0,134,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,41,167,56,0,0,0,0,0,0,0,0,233,65,0,0,0,0,0,0,0,0,70,12,0,0,0,0,11,72,0,0,0,0,0,0,0,0,0,0,141,10,0,0,104,24,166,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,36,0,0,0,0,74,95,198,8,0,0,0,0,0,0,103,164,0,0,102,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,26,103,16,0,0,0,0,0,0,0,0,171,99,0,0,207,4,0,0,110,22,7,61,0,0,4,117,0,0,165,56,0,0,0,0,0,0,0,0,0,0,103,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,81,0,0,39,63,0,0,0,0,0,0,230,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,54,0,0,0,0,68,39,0,0,0,0,0,0,0,0,8,29,7,171,201,66,0,0,0,0,0,0,0,0,0,0,105,3,0,0,0,0,0,0,142,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,33,7,92,0,0,38,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,105,0,0,231,15,0,0,0,0,0,0,6,148,0,0,198,161,0,0,0,0,0,0,0,0,136,45,0,0,0,0,0,0,0,0,0,0,171,15,230,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,106,196,78,0,0,0,0,0,0,0,0,0,0,4,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,180,136,15,199,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,15,100,12,0,0,0,0,169,64,100,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,10,0,0,0,0,0,0,0,0,0,0,0,0,230,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,183,0,0,69,119,0,0,0,0,72,52,6,38,73,51,0,0,0,0,0,0,0,0,198,91,0,0,0,0,0,0,0,0,0,0,198,227,0,0,0,0,0,0,199,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,1,0,0,0,0,0,0,0,0,0,0,0,0,43,20,37,14,172,8,0,0,0,0,0,0,0,0,0,0,0,0,68,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,67,0,0,101,78],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+20492);allocate([199,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,75,0,0,0,0,0,0,0,0,0,0,0,0,197,81,0,0,0,0,138,23,38,34,0,0,0,0,0,0,228,67,0,0,71,51,75,12,0,0,0,0,164,117,0,0,0,0,75,23,68,31,0,0,38,223,0,0,0,0,0,0,0,0,0,0,102,167,200,57,39,120,0,0,132,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,66,0,0,0,0,0,0,0,0,0,0,0,0,72,59,135,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,58,133,118,0,0,0,0,0,0,0,0,44,82,38,94,0,0,0,0,0,0,0,0,171,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,66,43,123,165,104,0,0,167,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,36,68,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,80,0,0,0,0,0,0,38,154,73,30,0,0,105,110,0,0,74,34,6,251,0,0,228,87,172,35,0,0,0,0,100,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,102,37,109,74,62,39,77,0,0,228,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,35,0,0,41,50,0,0,201,16,166,97,11,53,37,4,0,0,199,250,0,0,0,0,72,34,0,0,0,0,71,235,0,0,68,99,0,0,0,0,0,0,7,231,0,0,0,0,0,0,0,0,0,0,0,0,8,56,230,5,0,0,0,0,0,0,230,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,77,0,0,0,0,0,0,0,0,11,58,0,0,0,0,0,0,0,0,6,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,55,0,0,74,116,0,0,0,0,0,0,0,0,0,0,72,55,134,8,0,0,0,0,0,0,0,0,0,0,6,141,139,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,61,0,0,0,0,0,0,0,0,0,0,0,0,230,88,0,0,0,0,48,1,0,0,10,105,100,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,20,135,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,84,201,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,141,0,0,0,0,0,0,0,0,0,0,38,92,0,0,135,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,42,196,71,0,0,0,0,0,0,0,0,0,0,6,137,106,61,167,50,0,0,0,0,0,0,0,0,0,0,39,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,209,0,0,230,150,0,0,0,0,0,0,0,0,0,0,0,0,9,118,69,44,0,0,0,0,0,0,0,0,200,74,0,0,41,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,221,234,93,0,0,173,4,0,0,0,0,134,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,32,233,23,196,72,0,0,0,0,0,0,0,0,0,0,0,0,202,98,0,0,0,0,0,0,0,0,0,0,168,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,16,70,38,107,126,0,0,0,0,0,0,0,0,0,0,105,37,0,0,0,0,0,0,0,0,0,0,0,0,164,104,0,0,0,0,0,0,0,0,0,0,0,0,136,32,37,41,0,0,0,0,0,0,0,0,0,0,6,165,0,0,0,0,0,0,0,0,0,0,0,0,210,19,36,82,0,0,231,148,0,0,0,0,0,0,0,0,0,0,0,0,248,0,0,0,200,121,102,242,0,0,39,208,0,0,0,0,0,0,0,0,15,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,36,69,8,0,0,0,0,0,0,0,0,202,61,231,21,0,0,102,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,71,164,2,74,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,15,0,0,0,0,230,155,0,0,0,0,200,6,134,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,105,228,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,51,0,0,4,10,239,3,0,0,0,0,0,0,0,0,167,83,0,0,39,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,162,10,88,101,37,0,0,0,0,0,0,102,34,0,0,0,0,8,27,100,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,164,0,0,0,0,140,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,64,0,0,0,0,0,0,0,0,0,0,0,0,46,6,228,6,210,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,45,0,0,0,0,0,0,0,0,107,47,0,0,73,38,132,9,137,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,157,0,0,0,0,0,0,70,132,0,0,0,0,0,0,0,0,0,0,4,82,0,0,0,0,0,0,0,0,0,0,7,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,171,77,1,71,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,104,0,0,133,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,19,102,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,42,0,0,0,0,0,0,0,0,0,0,70,101,0,0,0,0,0,0,0,0,0,0,0,0,235,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,32,0,0,73,68,6,31,0,0,196,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,70,168,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,87,0,0,0,0,0,0,36,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,114,198,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,35,0,0,0,0,8,5,199,54,0,0,0,0,0,0,0,0,0,0,198,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,121,230,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,121,0,0,102,44,0,0,0,0,0,0,36,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,33,229,65,11,13,0,0,0,0,0,0,0,0,166,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,110,0,0,196,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,5,0,0,0,0,230,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,244,74,56,228,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,142,0,0,166,148,0,0,0,0,0,0,229,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,105,0,0,0,0,10,66,0,0,40,58,69,47,0,0,0,0,0,0,0,0,0,0,0,0,174,40,103,112,9,85,7,235,0,0,70,221,0,0,0,0,0,0,0,0,0,0,4,81,0,0,0,0,0,0,0,0,0,0,0,0,8,103,37,118,0,0,198,255,0,0,0,0,0,0,0,0,0,0,0,0,8,44,167,205,0,0,4,19,0,0,0,0,0,0,102,76,0,0,0,0,0,0,0,0,0,0,197,125,0,0,0,0,0,0,0,0,0,0,133,52,0,0,0,0,0,0,7,104,0,0,0,0,0,0,0,0,0,0,229,43,0,0,0,0,0,0,0,0,200,9,5,5,0,0,0,0,136,7,0,0,0,0,0,0,0,0,70,169,41,93,132,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,95,231,243,104,27,135,13,233,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,62,229,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,235,233,88,165,25,0,0,0,0,168,120,38,108,0,0,0,0,0,0,197,66,0,0,0,0,0,0,0,0,105,86,0,0,0,0,0,0,169,29,102,55,0,0,102,194,0,0,0,0,0,0,0,0,0,0,70,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,72,0,0,0,0,0,0,0,0,42,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,102,0,0,101,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,115,0,0,0,0,0,0,37,83,0,0,0,0,0,0,0,0,0,0,167,237,0,0,0,0,0,0,0,0,0,0,36,33,108,33,165,11,0,0,0,0,0,0,103,181,0,0,0,0,0,0,0,0,0,0,103,93,137,103,134,98,107,38,7,23,0,0,199,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,36,37,29,0,0,0,0,0,0,69,122,105,105,36,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,106,196,121,0,0,0,0,0,0,0,0,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,63,0,0,0,0,0,0,0,0,0,0,102,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,25,0,0,0,0,0,0,39,130,0,0,0,0,0,0,6,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,86,75,29,198,96,0,0,4,42,0,0,231,174,212,2,0,0,168,100,69,100,41,97,229,20,169,98,0,0,0,0,38,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,1,201,72,101,1,0,0,0,0,136,25,4,33,0,0,0,0,10,7,0,0,0,0,166,239,0,0,197,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,89,0,0,0,0,233,114,0,0,0,0,0,0,72,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,108,0,0,0,0,136,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,23,0,0,0,0,0,0,0,0,0,0,70,133,0,0,0,0,0,0,0,0,110,8,0,0,210,21,132,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,95,0,0,0,0,0,0,0,0,105,9,38,17,0,0,132,94,0,0,0,0,0,0,0,0,0,0,0,0,8,126,68,105,107,80,0,0,0,0,0,0,107,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,16,164,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,92,0,0,170,48,231,39,0,0,0,0,74,98,0,0,0,0,0,0,0,0,0,0,0,0,134,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,128,0,0,0,0,0,0,102,135,0,0,0,0,0,0,0,0,0,0,70,153,0,0,0,0,0,0,0,0,136,44,68,7,169,22,164,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,59,0,0,0,0,0,0,100,53,0,0,166,51,0,0,68,91,0,0,0,0,0,0,0,0,0,0,165,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,99,0,0,0,0,0,0,39,224,0,0,0,0,0,0,68,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,11,71,36,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,84,40,113,134,232,0,0,0,0,0,0,37,92,0,0,0,0,0,0,70,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,18,140,15,135,110,0,0,0,0,0,0,0,0,0,0,100,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,84,0,0,199,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,85,0,0,229,114,0,0,0,0,180,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,12,68,10,0,0,0,0,0,0,0,0,0,0,196,119,0,0,0,0,0,0,229,112,0,0,0,0,0,0,0,0,108,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,45,0,0,0,0,0,0,0,0,70,86,0,0,36,88,105,81,0,0,0,0,231,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,157,0,0,0,0,44,62,102,154,0,0,167,53,0,0,0,0,0,0,0,0,10,113,0,0,137,96,166,15,0,0,0,0,0,0,36,105,0,0,0,0,0,0,0,0,0,0,134,107,72,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,96,0,0,73,96,6,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,89,0,0,137,80,167,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,80,7,38,0,0,228,78,0,0,0,0,0,0,0,0,8,110,39,189,0,0,0,0,0,0,0,0,0,0,167,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,54,0,0,0,0,0,0,0,0,0,0,198,68,0,0,0,0,138,59,71,116,10,103,37,69,0,0,0,0,136,56,0,0,232,18,0,0,0,0,0,0,0,0,0,0,0,0,132,96,0,0,133,36,234,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,63,0,0,0,0,38,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,97,0,0,0,0,0,0,0,0,0,0,0,0,106,75,103,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,29,4,114,0,0,0,0,0,0,0,0,0,0,38,122,0,0,0,0,136,89,71,12,0,0,0,0,0,0,0,0,0,0,165,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,2,0,0,0,0,0,0,0,0,133,83,0,0,4,45,0,0,0,0,0,0,0,0,0,0,0,0,12,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,1,199,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,0,166,158,0,0,0,0,233,57,0,0,0,0,0,0,0,0,0,0,0,0,199,181,0,0,230,160,11,75,0,0,168,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,13,135,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,132,0,0,0,0,0,0,0,0,72,0,100,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,57,0,0,0,0,0,0,0,0,0,0,132,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,73,40,78,0,0,0,0,0,0,0,0,134,9,136,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,95,0,0,196,77,0,0,0,0,0,0,165,31,0,0,71,68,0,0,0,0,41,9,0,0,10,32,7,78,0,0,0,0,108,4,133,26,0,0,0,0,73,93,0,0,0,0,0,0,202,18,0,0,0,0,70,183,0,0,0,0,0,0,102,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,153,0,0,0,0,0,0,5,102,0,0,0,0,0,0,0,0,0,0,0,0,236,19,0,0,0,0,0,0,0,0,0,0,200,91,165,108,8,7,196,67,0,0,0,0,0,0,0,0,0,0,0,0,73,25,4,29,0,0,0,0,0,0,0,0,136,26,0,0,0,0,0,0,0,0,0,0,232,13,134,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,214,0,0,0,0,14,27,0,0,0,0,0,0,0,0,164,16,0,0,0,0,0,0,0,0,0,0,70,81,0,0,0,0,0,0,0,0,49,7,102,12,0,0,0,0,0,0,0,0,41,99,198,30,0,0,0,0,0,0,0,0,232,127,0,0,0,0,199,37,0,0,231,233,0,0,4,91,137,31,0,0,0,0,166,57,0,0,0,0,0,0,102,40,0,0,0,0,0,0,0,0,0,0,0,0,232,96,167,57,0,0,0,0,0,0,0,0,0,0,0,0,139,21,0,0,0,0,4,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,9,231,90,0,0,228,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,54,164,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,99,0,0,0,0,0,0,0,0,232,19,0,0,203,55,199,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,49,0,0,0,0,0,0,0,0,43,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,21,0,0,0,0,70,53,10,76,0,0,0,0,0,0,0,0,0,0,41,122,0,0,74,31,0,0,0,0,0,0,0,0,0,0,139,12,0,0,0,0,0,0,0,0,198,247,0,0,0,0,0,0,0,0,0,0,133,59,0,0,0,0,0,0,0,0,0,0,0,0,73,82,133,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,55,0,0,0,0,0,0,0,0,196,65,0,0,0,0,233,124,132,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,45,228,34,0,0,0,0,0,0,231,217,0,0,68,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,109,0,0,230,103,0,0,0,0,9,104,70,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,244,0,0,0,0,0,0,0,0,138,64,7,109,0,0,0,0,41,39,4,28,0,0,0,0,11,3,0,0,104,1,69,68,0,0,0,0,0,0,39,242,72,30,37,30,214,5,0,0,0,0,0,0,201,103,38,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,103,234,40,196,125,0,0,0,0,0,0,0,0,0,0,135,197,137,64,196,45,0,0,0,0,0,0,0,0,0,0,6,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,241,0,0,68,103,0,0,0,0,0,0,0,0,232,77,102,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,36,0,0,134,114,0,0,0,0,0,0,0,0,0,0,7,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,183,0,0,70,196,0,0,68,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,241,0,0,199,71,0,0,68,82,169,97,0,0,0,0,0,0,0,0,0,0,200,46,0,0,0,0,0,0,0,0,231,91,0,0,0,0,0,0,0,0,0,0,0,0,107,40,4,43,0,0,71,73,0,0,0,0,0,0,0,0,105,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,77,40,107,0,0,0,0,0,0,0,0,0,0,136,86,0,0,0,0,0,0,0,0,0,0,0,0,230,102,0,0,0,0,0,0,36,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,85,0,0,0,0,0,0,0,0,104,76,197,26,136,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,2,0,0,0,0,230,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,180,0,0,0,0,113,2,70,89,0,0,0,0,0,0,0,0,74,12,36,92,0,0,0,0,8,65,198,219,0,0,0,0,74,30,229,5,0,0,0,0,106,67,101,17,0,0,0,0,0,0,0,0,141,48,0,0,0,0,0,0,0,0,166,31,0,0,0,0,0,0,0,0,0,0,0,0,138,31,0,0,44,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,54,100,13,0,0,228,108,0,0,0,0,0,0,164,28,0,0,0,0,0,0,0,0,0,0,228,112,0,0,0,0,236,8,0,0,0,0,165,68,201,0,228,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,122,40,108,37,88,0,0,0,0,0,0,39,20,0,0,0,0,0,0,0,0,232,17,7,67,0,0,0,0,0,0,134,173,42,38,133,90,0,0,0,0,0,0,101,2,0,0,0,0,0,0,101,49,0,0,0,0,0,0,0,0,0,0,196,105,74,9,0,0,0,0,0,0,136,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,86,40,117,39,62,0,0,0,0,0,0,0,0,0,0,198,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,197,0,0,0,0,0,0,0,0,0,0,0,0,72,2,133,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,74,0,0,0,0,0,0,4,126,0,0,0,0,0,0,100,101,139,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,40,231,241,0,0,0,0,0,0,199,251,169,12,231,250,0,0,0,0,75,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,3,167,134,0,0,0,0,0,0,166,152,0,0,0,0,203,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,83,0,0,106,62,38,208,0,0,0,0,40,12,196,2,0,0,0,0,0,0,0,0,0,0,37,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,4,198,16,104,19,199,60,0,0,230,173,0,0,0,0,0,0,0,0,0,0,229,73,0,0,0,0,0,0,0,0,0,0,0,0,200,38,133,47,0,0,0,0,0,0,0,0,41,51,132,45,0,0,0,0,0,0,70,60,0,0,0,0,232,32,164,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,11,0,0,228,51,0,0,133,43,0,0,0,0,0,0,132,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,20,102,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,51,0,0,0,0,0,0,0,0,0,0,0,0,41,32,38,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,142,0,0,0,0,0,0,36,31,0,0,0,0,0,0,5,72,0,0,0,0,0,0,0,0,238,28,0,0,0,0,0,0,9,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,54,166,123,43,118,7,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,10,0,0,0,0,0,0,0,0,0,0,108,97,71,67,0,0,0,0,0,0,165,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,61,0,0,0,0,0,0,0,0,0,0,8,39,199,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,66,134,58,0,0,0,0,0,0,0,0,0,0,134,185,0,0,0,0,0,0,0,0,0,0,0,0,233,101,38,76,0,0,0,0,0,0,0,0,0,0,134,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,112,0,0,0,0,0,0,0,0,231,166,0,0,134,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,137,0,0,7,188,236,81,38,120,0,0,0,0,0,0,0,0,0,0,37,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,154,0,0,0,0,168,53,4,60,0,0,0,0,0,0,0,0,106,92,199,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,88,0,0,0,0,0,0,0,0,0,0,6,230,44,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,252,0,0,0,0,0,0,0,0,0,0,6,186,0,0,0,0,0,0,198,198,0,0,0,0,0,0,0,0,0,0,102,157,144,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,5,0,0,145,4,0,0,206,2,71,180,72,47,0,0,0,0,0,0,0,0,0,0,0,0,102,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,4,0,0,0,0,198,131,168,90,102,45,0,0,134,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,116,230,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,100,0,0,0,0,0,0,0,0,165,101,0,0,0,0,0,0,0,0,43,2,5,89,0,0,36,77,233,6,6,40,232,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,55,0,0,11,23,231,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,42,0,0,0,0,0,0,76,63,0,0,0,0,0,0,0,0,0,0,106,105,165,9,0,0,68,57,0,0,0,0,0,0,0,0,0,0,135,177,202,47,166,13,203,17,70,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,11,0,0,0,0,0,0,139,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,154,0,0,0,0,0,0,0,0,0,0,0,0,107,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,131,0,0,39,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,248,0,0,0,0,72,15,0,0,0,0,68,29,0,0,0,0,0,0,6,122,0,0,0,0,0,0,0,0,0,0,0,0,168,68,167,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,65,197,53,0,0,0,0,174,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,63,0,0,0,0,0,0,0,0,105,101,198,78,0,0,0,0,0,0,228,42,0,0,0,0,0,0,0,0,0,0,4,56,234,73,231,56,0,0,167,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,71,0,0,0,0,0,0,0,0,0,0,230,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,81,0,0,0,0,0,0,38,220,0,0,198,149,0,0,0,0,0,0,0,0,42,37,231,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,84,0,0,0,0,112,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,4,0,0,173,5,0,0,0,0,0,0,0,0,0,0,42,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,15,0,0,0,0,0,0,198,202,0,0,0,0,0,0,0,0,0,0,36,90,40,18,0,0,0,0,0,0,104,18,7,99,0,0,0,0,0,0,100,89,0,0,0,0,0,0,0,0,0,0,231,249,0,0,0,0,72,9,5,21,0,0,0,0,48,8,0,0,0,0,0,0,45,13,134,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,120,0,0,0,0,0,0,0,0,20,0,0,0,139,53,164,125,0,0,0,0,40,50,7,12,0,0,0,0,0,0,0,0,0,0,102,199,145,14,0,0,168,127,0,0,0,0,0,0,0,0,0,0,200,18,39,245,0,0,0,0,8,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,37,0,0,0,0,230,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,74,0,0,101,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,152,0,0,0,0,0,0,132,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,16,0,0,0,0,0,0,0,0,104,23,0,0,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,53,0,0,168,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,16,6,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,117,0,0,0,0,73,109,0,0,0,0,0,0,0,0,0,0,200,96,0,0,0,0,0,0,0,0,0,0,146,11,0,0,0,0,0,0,0,0,0,0,0,0,196,103,169,87,0,0,0,0,0,0,0,0,0,0,72,53,228,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,75,102,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,55,104,20,230,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,100,0,0,0,0,0,0,0,0,0,0,0,0,46,29,0,0,0,0,0,0,0,0,71,249,0,0,102,217,0,0,0,0,40,49,0,0,238,44,37,37,0,0,0,0,0,0,167,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,45,0,0,0,0,0,0,238,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,83,0,0,0,0,103,209,0,0,230,81,0,0,0,0,0,0,7,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,35,204,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,31,0,0,0,0,169,13,198,31,0,0,197,32,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,83,136,121,164,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,111,0,0,0,0,0,0,199,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,45,71,25,0,0,0,0,0,0,0,0,168,48,6,70,0,0,0,0,0,0,39,105,0,0,0,0,200,70,0,0,0,0,0,0,72,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,114,0,0,0,0,0,0,39,170,0,0,0,0,0,0,0,0,0,0,0,0,136,61,133,29,0,0,198,231,0,0,0,0,200,39,197,23,0,0,7,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,43,0,0,0,0,0,0,0,0,232,118,134,246,0,0,0,0,0,0,0,0,0,0,0,0,9,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,2,0,0,40,73,167,10,0,0,228,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,18,0,0,115,10,0,0,0,0,164,126,0,0,0,0,0,0,71,240,0,0,0,0,42,57,132,15,75,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,149,80,10,0,0,10,44,197,56,50,7,0,0,0,0,167,166,137,49,102,13,0,0,69,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,25,0,0,0,0,0,0,0,0,0,0,69,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,49,100,4,0,0,0,0,0,0,0,0,0,0,36,115,0,0,0,0,0,0,7,212,0,0,230,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,122,0,0,0,0,0,0,0,0,6,134,0,0,0,0,0,0,4,89,0,0,166,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,147,0,0,0,0,0,0,7,201,23,2,0,0,0,0,0,0,0,0,165,60,0,0,0,0,0,0,0,0,0,0,0,0,40,19,164,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,6,0,0,180,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,102,0,0,0,0,0,0,0,0,0,0,171,114,0,0,0,0,0,0,0,0,7,98,0,0,0,0,0,0,0,0,239,16],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+30738);allocate([202,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,104,230,214,0,0,0,0,0,0,0,0,0,0,135,106,0,0,0,0,0,0,0,0,0,0,4,119,0,0,0,0,0,0,0,0,10,71,0,0,0,0,0,0,0,0,0,0,9,56,0,0,0,0,0,0,104,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,228,42,82,0,0,43,91,70,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,50,0,0,0,0,11,19,0,0,0,0,0,0,0,0,7,114,0,0,0,0,0,0,0,0,0,0,0,0,104,6,7,40,0,0,164,55,0,0,0,0,0,0,0,0,106,69,0,0,0,0,0,0,0,0,0,0,75,48,0,0,0,0,229,29,0,0,0,0,72,16,103,10,0,0,228,17,0,0,101,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,119,0,0,0,0,0,0,0,0,0,0,68,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,165,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,117,0,0,133,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,110,107,73,101,27,202,49,36,24,0,0,167,145,0,0,0,0,8,104,38,30,233,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,31,68,70,0,0,68,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,61,6,27,0,0,0,0,0,0,0,0,107,27,167,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,16,199,216,106,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,87,133,75,0,0,0,0,8,107,0,0,105,24,196,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,208,0,0,0,0,0,0,230,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,153,0,0,0,0,0,0,0,0,0,0,228,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,32,71,15,0,0,0,0,0,0,166,104,0,0,0,0,0,0,0,0,0,0,0,0,168,126,0,0,0,0,38,72,0,0,0,0,0,0,134,57,104,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,3,69,10,0,0,0,0,0,0,166,75,0,0,0,0,0,0,198,155,0,0,0,0,0,0,0,0,137,8,197,34,168,20,100,20,168,97,0,0,0,0,0,0,0,0,0,0,0,0,38,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,139,0,0,0,0,8,90,39,244,106,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,53,198,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,73,135,164,0,0,0,0,0,0,0,0,0,0,5,52,0,0,0,0,0,0,134,162,0,0,231,105,0,0,0,0,202,82,197,44,0,0,0,0,0,0,0,0,232,104,230,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,81,70,190,0,0,0,0,0,0,0,0,0,0,0,0,107,20,0,0,0,0,0,0,0,0,0,0,77,39,68,122,0,0,0,0,0,0,36,75,0,0,0,0,0,0,0,0,0,0,69,118,72,54,0,0,0,0,0,0,232,78,103,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,103,183,235,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,8,0,0,0,0,0,0,0,0,167,175,0,0,0,0,0,0,0,0,0,0,0,0,137,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,41,0,0,0,0,0,0,0,0,0,0,101,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,63,0,0,197,40,0,0,0,0,105,4,100,86,202,81,0,0,0,0,0,0,168,4,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,14,6,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,72,0,0,0,0,0,0,0,0,168,49,198,15,42,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,25,197,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,66,7,154,0,0,0,0,0,0,0,0,0,0,230,117,0,0,197,83,235,28,4,110,0,0,38,202,0,0,0,0,0,0,167,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,52,0,0,0,0,200,1,69,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,58,0,0,0,0,0,0,0,0,0,0,73,104,6,86,169,51,164,44,0,0,0,0,0,0,196,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,5,37,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,24,0,0,0,0,171,70,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,86,0,0,0,0,0,0,196,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,114,140,14,0,0,0,0,0,0,0,0,6,170,0,0,0,0,0,0,68,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,84,134,38,0,0,164,88,73,124,134,234,0,0,132,28,0,0,0,0,0,0,7,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,196,0,0,231,254,8,17,134,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,112,0,0,0,0,73,117,198,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,183,0,0,229,124,0,0,100,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,93,0,0,0,0,0,0,0,0,0,0,5,57,0,0,0,0,0,0,38,182,136,22,167,86,0,0,0,0,0,0,0,0,0,0,0,0,18,6,100,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,42,0,0,0,0,0,0,0,0,102,136,0,0,0,0,0,0,0,0,236,86,0,0,0,0,7,183,0,0,0,0,0,0,0,0,0,0,231,121,0,0,0,0,237,41,0,0,0,0,102,247,0,0,0,0,0,0,0,0,168,33,199,195,201,78,68,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,226,202,23,5,0,0,0,0,0,200,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,1,6,29,0,0,199,119,0,0,0,0,104,72,196,47,0,0,132,26,0,0,0,0,0,0,0,0,104,121,36,85,0,0,0,0,11,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,81,0,0,0,0,0,0,0,0,113,8,0,0,0,0,0,0,0,0,0,0,0,0,230,93,0,0,0,0,0,0,0,0,232,52,230,28,0,0,0,0,10,127,133,37,0,0,0,0,0,0,0,0,136,12,166,29,0,0,0,0,0,0,70,171,0,0,0,0,0,0,7,151,0,0,0,0,0,0,0,0,0,0,102,152,45,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,24,0,0,0,0,108,53,0,0,0,0,0,0,0,0,166,118,40,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,86,0,0,0,0,0,0,0,0,0,0,70,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,73,6,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,18,0,0,0,0,0,0,0,0,132,73,152,0,0,0,0,0,0,0,0,0,0,0,204,51,228,28,0,0,0,0,170,94,230,32,0,0,132,76,0,0,0,0,0,0,4,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,28,0,0,0,0,0,0,0,0,78,7,164,50,0,0,197,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,124,107,16,228,65,9,2,0,0,200,73,135,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,17,199,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,143,0,0,0,0,0,0,6,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,25,229,50,232,37,71,152,0,0,0,0,0,0,0,0,168,0,165,40,0,0,0,0,0,0,0,0,138,1,7,100,0,0,231,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,63,166,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,115,0,0,4,47,0,0,0,0,0,0,0,0,0,0,70,27,40,80,0,0,8,96,199,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,138,84,0,0,0,0,0,0,0,0,0,0,0,0,134,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,81,166,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,28,230,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,1,0,0,0,0,134,226,0,0,0,0,21,1,0,0,0,0,0,0,233,17,167,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,165,0,0,0,0,0,0,0,0,233,71,198,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,111,0,0,0,0,0,0,229,119,0,0,0,0,0,0,0,0,0,0,231,219,168,21,0,0,0,0,0,0,0,0,70,33,174,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,178,0,0,0,0,136,37,38,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,73,0,0,0,0,0,0,0,0,136,6,101,53,0,0,0,0,43,27,231,29,0,0,38,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,91,6,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,52,0,0,0,0,0,0,165,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,79,0,0,0,0,168,10,7,4,0,0,0,0,0,0,0,0,168,113,197,86,235,0,167,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,20,0,0,0,0,0,0,0,0,8,35,197,7,0,0,0,0,42,4,0,0,0,0,228,44,9,41,135,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,74,0,0,0,0,0,0,101,26,0,0,0,0,13,42,38,18,0,0,70,141,0,0,39,109,0,0,0,0,8,105,228,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,19,0,0,0,0,0,0,232,25,228,74,0,0,0,0,0,0,0,0,0,0,135,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,74,0,0,0,0,0,0,0,0,0,0,6,174,0,0,0,0,0,0,0,0,211,15,0,0,0,0,0,0,0,0,102,147,0,0,0,0,0,0,0,0,0,0,68,20,0,0,0,0,0,0,0,0,0,0,166,95,0,0,101,23,0,0,199,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,79,0,0,0,0,72,111,228,26,0,0,0,0,0,0,166,145,0,0,0,0,45,12,135,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,37,0,0,0,0,0,0,0,0,0,0,0,0,206,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,82,70,135,0,0,0,0,0,0,0,0,0,0,71,250,0,0,0,0,0,0,0,0,0,0,0,0,43,104,132,3,0,0,0,0,0,0,0,0,0,0,198,206,0,0,0,0,106,66,0,0,0,0,0,0,0,0,0,0,0,0,70,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,106,171,71,38,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,65,0,0,0,0,0,0,0,0,102,177,0,0,0,0,0,0,0,0,0,0,0,0,136,2,39,6,0,0,0,0,0,0,69,107,0,0,0,0,0,0,5,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,62,167,65,0,0,0,0,0,0,0,0,201,7,134,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,61,39,24,0,0,0,0,0,0,0,0,74,13,0,0,0,0,102,107,0,0,0,0,237,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,101,166,115,0,0,0,0,232,27,166,76,40,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,83,0,0,0,0,9,5,7,27,0,0,0,0,0,0,0,0,0,0,0,0,107,32,0,0,0,0,0,0,201,38,71,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,7,4,37,0,0,0,0,140,23,100,17,0,0,164,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,196,0,0,0,0,0,0,0,0,245,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,93,0,0,5,29,0,0,0,0,233,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,65,196,1,0,0,0,0,0,0,0,0,0,0,166,92,0,0,0,0,0,0,6,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,13,0,0,0,0,36,53,0,0,0,0,0,0,0,0,0,0,167,98,0,0,0,0,0,0,38,199,0,0,6,221,0,0,0,0,43,29,0,0,0,0,0,0,0,0,229,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,119,40,28,165,30,0,0,0,0,0,0,0,0,0,0,0,0,46,30,0,0,0,0,0,0,0,0,230,242,0,0,0,0,0,0,134,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,88,0,0,0,0,0,0,0,0,0,0,0,0,72,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,195,0,0,0,0,0,0,100,55,0,0,0,0,0,0,0,0,0,0,0,0,14,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,91,0,0,0,0,0,0,132,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,94,9,106,68,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,103,198,177,174,23,133,20,0,0,0,0,9,79,135,101,0,0,0,0,139,69,0,0,0,0,0,0,0,0,0,0,105,76,132,21,75,66,133,105,13,29,6,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,67,0,0,0,0,0,0,0,0,0,0,100,107,0,0,0,0,73,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,185,9,71,197,28,0,0,0,0,0,0,198,32,238,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,94,169,68,4,0,0,0,0,0,0,0,0,0,0,0,5,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,104,0,0,0,0,0,0,0,0,0,0,100,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,69,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,38,134,55,0,0,0,0,0,0,0,0,0,0,0,0,232,93,134,22,0,0,0,0,11,103,228,22,0,0,0,0,107,113,100,2,0,0,231,151,0,0,0,0,0,0,0,0,0,0,0,0,104,48,230,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,205,168,82,134,11,0,0,100,57,0,0,0,0,76,41,166,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,68,70,2,0,0,0,0,0,0,198,217,0,0,0,0,0,0,165,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,22,0,0,0,0,42,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,121,0,0,0,0,0,0,0,0,0,0,7,41,0,0,0,0,137,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,223,0,0,0,0,72,120,6,166,0,0,0,0,0,0,135,38,139,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,73,0,0,0,0,0,0,0,0,0,0,0,0,197,76,232,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,99,231,89,0,0,0,0,200,40,69,26,0,0,0,0,0,0,164,87,201,94,5,59,0,0,0,0,0,0,103,243,202,34,230,134,0,0,0,0,0,0,0,0,0,0,0,0,168,50,68,48,0,0,0,0,72,79,197,5,40,120,0,0,72,101,132,65,0,0,0,0,202,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,66,0,0,165,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,162,0,0,197,97,0,0,0,0,0,0,68,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,86,231,227,0,0,0,0,0,0,231,94,0,0,0,0,0,0,0,0,0,0,135,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,49,196,9,0,0,0,0,0,0,135,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,65,0,0,0,0,0,0,0,0,0,0,0,0,9,53,230,26,0,0,0,0,0,0,0,0,232,83,5,41,0,0,36,66,0,0,0,0,0,0,0,0,0,0,134,89,0,0,166,188,73,44,102,8,0,0,0,0,0,0,0,0,105,7,166,17,0,0,0,0,0,0,0,0,0,0,0,0,232,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,119,0,0,0,0,0,0,0,0,203,5,199,53,73,52,69,75,168,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,169,176,6,0,0,0,0,0,0,0,0,198,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,57,0,0,0,0,230,217,0,0,0,0,8,47,196,123,0,0,0,0,0,0,0,0,0,0,102,200,0,0,0,0,76,31,0,0,0,0,0,0,0,0,0,0,200,80,69,27,0,0,7,189,11,0,0,0,0,0,101,71,0,0,228,56,0,0,0,0,0,0,134,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,74,38,20,0,0,164,43,0,0,134,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,93,6,54,0,0,0,0,0,0,0,0,0,0,0,0,170,40,229,27,0,0,0,0,0,0,0,0,0,0,196,70,0,0,0,0,0,0,100,7,43,60,134,54,0,0,4,6,40,57,69,76,137,94,164,96,0,0,0,0,0,0,101,94,0,0,39,152,0,0,0,0,0,0,0,0,0,0,164,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,68,132,44,110,13,101,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,125,0,0,0,0,0,0,0,0,207,1,0,0,0,0,134,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,20,0,0,0,0,0,0,0,0,0,0,0,0,41,101,166,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,62,0,0,0,0,0,0,76,38,37,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,54,42,90,69,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,25,0,0,228,119,0,0,0,0,0,0,6,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,179,0,0,38,60,0,0,0,0,0,0,0,0,0,0,0,0,138,9,132,10,0,0,0,0,0,0,0,0,0,0,229,126,0,0,0,0,0,0,100,39,0,0,0,0,0,0,0,0,0,0,0,0,233,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,89,0,0,0,0,0,0,70,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,27,0,0,200,116,68,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,159,74,67,71,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,0,0,0,0,0,0,0,0,0,0,231,53,42,12,230,52,8,83,167,29,0,0,0,0,0,0,7,33,0,0,0,0,168,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,56,0,0,0,0,0,0,72,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,78,0,0,200,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,44,0,0,0,0,0,0,199,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,8,103,29,168,114,196,117,0,0,0,0,0,0,167,119,0,0,197,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,2,0,0,0,0,5,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,68,233,29,4,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,135,134,0,0,0,0,44,69,0,0,0,0,0,0,235,59,71,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,62,0,0,0,0,41,58,167,32,0,0,0,0,0,0,0,0,168,1,0,0,0,0,0,0,0,0,0,0,0,0,230,98,72,31,71,80,0,0,0,0,0,0,167,178,170,110,164,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,122,132,125,0,0,0,0,0,0,0,0,42,68,0,0,0,0,0,0,0,0,0,0,0,0,102,118,0,0,134,148,0,0,0,0,0,0,0,0,0,0,4,113,0,0,0,0,0,0,0,0,0,0,134,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,86,43,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,86,0,0,0,0,42,89,71,48,0,0,0,0,0,0,0,0,104,5,230,0,0,0,0,0,0,0,0,0,0,0,0,0,13,53,167,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,113,0,0,0,0,0,0,0,0,0,0,9,69,70,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,10,6,226,44,6,0,0,0,0,0,0,0,0,6,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,52,0,0,0,0,73,55,230,51,0,0,0,0,43,36,0,0,0,0,0,0,0,0,0,0,234,51,196,13,0,0,0,0,0,0,0,0,0,0,167,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,64,103,192,0,0,0,0,0,0,0,0,0,0,134,167,0,0,100,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,39,0,0,0,0,0,0,0,0,20,14,135,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,60,133,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,4,196,104,0,0,0,0,0,0,101,47,72,27,5,1,138,82,36,127,0,0,0,0,0,0,0,0,0,0,0,0,237,13,102,48,233,80,6,28,0,0,0,0,201,63,199,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,57,0,0,0,0,0,0,0,0,0,0,0,0,70,119,0,0,0,0,0,0,71,49,0,0,230,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,4,135,15,232,101,165,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,90,132,78,0,0,0,0,0,0,0,0,136,100,71,33,0,0,0,0,0,0,0,0,0,0,7,26,0,0,230,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,88,0,0,198,186,169,102,70,106,0,0,0,0,236,16,100,58,0,0,0,0,72,22,134,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,60,0,0,0,0,0,0,70,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,98,40,4,199,85,41,107,0,0,104,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,55,0,0,0,0,0,0,0,0,0,0,0,0,202,88,4,16,0,0,0,0,0,0,0,0,0,0,0,0,104,73,0,0,0,0,0,0,138,86,102,53,0,0,100,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,85,0,0,0,0,40,43,0,0,0,0,0,0,0,0,0,0,0,0,165,45,0,0,102,210,0,0,0,0,10,59,0,0,46,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,3,0,0,0,0,0,0,172,124,0,0,72,72,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,28,0,0,0,0,0,0,0,0,200,12,0,0,0,0,0,0,0,0,70,108,200,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,6,0,0,104,14,0,0,0,0,0,0,0,0,38,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,216,82,3,132,60,0,0,0,0,0,0,39,23,74,77,38,52,0,0,102,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,59,202,32,0,0,0,0,0,0,0,0,0,0,0,0,198,103,0,0,0,0,0,0,0,0,105,21,197,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,27,0,0,8,80,228,2,0,0,0,0,13,45,71,198,0,0,0,0,0,0,0,0,0,0,135,81,0,0,0,0,0,0,0,0,0,0,199,95,0,0,0,0,0,0,0,0,72,37,39,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,81,197,27,73,113,0,0,0,0,166,126,232,123,134,244,0,0,0,0,0,0,0,0,234,62,0,0,0,0,0,0,169,114,69,19,0,0,0,0,0,0,133,89,0,0,135,105,0,0,0,0,0,0,0,0,168,77,100,11,0,0,0,0,0,0,0,0,137,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,12,0,0,204,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,72,0,0,0,0,0,0,101,96,0,0,0,0,0,0,101,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,79,0,0,0,0,0,0,200,64,101,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,106,0,0,0,0,0,0,0,0,4,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,49,101,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,11,37,124,0,0,0,0,0,0,0,0,0,0,0,0,8,25,100,16,88,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,45,39,179,0,0,0,0,0,0,0,0,136,72,229,12,0,0,0,0,200,99,228,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,4,165,57,0,0,166,106,0,0,0,0,234,33,229,16,0,0,0,0,0,0,0,0,78,42,0,0,0,0,132,37,201,58,101,52,0,0,0,0,0,0,0,0,0,0,0,0,137,104,0,0,0,0,0,0,0,0,0,0,0,0,38,242,0,0,0,0,0,0,0,0,0,0,36,49,0,0,0,0,168,44,0,0,0,0,0,0,0,0,0,0,235,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,48,0,0,0,0,0,0,0,0,0,0,0,0,104,9,196,0,169,72,231,168,0,0,228,37,0,0,0,0,138,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,133,0,0,0,0,171,89,68,13,0,0,0,0,0,0,0,0,0,0,69,111,238,53,70,78,0,0,0,0,0,0,0,0,74,88,0,0,0,0,0,0,109,6,68,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,103,0,0,0,0,42,2,0,0,0,0,0,0,0,0,39,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,3,231,108,76,62,0,0,72,57,69,123,0,0,0,0,0,0,0,0,0,0,0,0,106,54,0,0,0,0,0,0,0,0,0,0,202,120,0,0,41,16,135,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,124,200,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,102,0,0,231,240,0,0,0,0,0,0,0,0,73,12,68,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,0,0,11,20,199,130,0,0,135,61,0,0,0,0,0,0,0,0,0,0,0,0,40,16,166,5,0,0,0,0,0,0,0,0,0,0,0,0,40,44,199,69,0,0,0,0,0,0,0,0,0,0,37,98,0,0,0,0,0,0,38,143,40,10,0,0,0,0,0,0,75,95,37,44,0,0,0,0,0,0,0,0,0,0,6,253,0,0,0,0,0,0,100,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,38,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,251,0,0,0,0,168,34,132,0,0,0,0,0,171,57,135,95,0,0,0,0,0,0,38,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,180,0,0,0,0,0,0,6,146,0,0,0,0,0,0,38,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,31,0,0,0,0,9,27,0,0,0,0,0,0,233,22,0,0,0,0,0,0,139,119,0,0,0,0,0,0,106,90,4,67,0,0,0,0,0,0,0,0,0,0,167,35,0,0,0,0,0,0,7,70,0,0,0,0,0,0,0,0,0,0,68,86,0,0,0,0,0,0,0,0,0,0,199,155,0,0,0,0,178,19,0,0,234,74,0,0,0,0,0,0,0,0,0,0,108,61,199,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,56,0,0,0,0,0,0,0,0,196,23,0,0,0,0,0,0,0,0,0,0,37,125,0,0,0,0,0,0,0,0,0,0,197,55],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+40980);allocate([38,164,0,0,0,0,169,104,134,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,108,0,0,0,0,0,0,0,0,74,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,153,0,0,4,38,0,0,71,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,3,0,0,8,4,166,6,74,99,100,105,11,88,0,0,173,35,69,14,168,60,102,77,41,18,0,0,104,2,103,254,0,0,0,0,0,0,167,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,124,100,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,193,0,0,70,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,127,0,0,0,0,0,0,196,101,203,15,0,0,0,0,6,158,0,0,0,0,200,101,101,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,111,5,7,0,0,0,0,148,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,0,0,0,0,0,0,0,0,69,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,139,0,0,0,0,11,41,0,0,0,0,0,0,169,16,0,0,141,24,7,21,0,0,0,0,0,0,0,0,0,0,6,144,0,0,167,155,0,0,0,0,72,67,197,13,234,108,6,227,0,0,0,0,168,51,166,16,0,0,0,0,0,0,70,122,0,0,0,0,40,84,166,11,105,46,0,0,0,0,0,0,0,0,0,0,0,0,197,65,41,3,0,0,76,94,228,41,0,0,0,0,0,0,0,0,203,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,4,37,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,22,72,46,0,0,0,0,134,206,200,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,22,36,12,0,0,38,67,0,0,0,0,0,0,0,0,0,0,230,92,136,97,230,46,104,125,6,112,0,0,0,0,0,0,231,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,93,0,0,0,0,0,0,0,0,0,0,210,15,0,0,43,5,132,98,0,0,0,0,0,0,165,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,52,204,103,198,141,0,0,0,0,0,0,0,0,204,67,71,196,168,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,46,102,171,0,0,0,0,0,0,0,0,170,15,164,40,0,0,0,0,0,0,0,0,0,0,0,0,106,40,0,0,0,0,102,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,89,0,0,0,0,0,0,0,0,0,0,0,0,105,118,6,237,169,78,133,15,0,0,0,0,0,0,0,0,0,0,0,0,8,52,102,9,105,10,165,17,0,0,0,0,0,0,167,66,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0,0,0,69,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,42,0,0,0,0,0,0,0,0,235,111,6,0,0,0,0,0,138,35,164,27,0,0,165,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,106,0,0,0,0,106,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,23,235,123,133,110,0,0,0,0,0,0,0,0,144,7,231,119,0,0,0,0,0,0,0,0,0,0,166,206,0,0,0,0,72,115,166,248,0,0,196,79,0,0,0,0,138,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,95,0,0,0,0,0,0,0,0,0,0,0,0,166,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,30,36,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,174,0,0,5,70,0,0,0,0,105,0,70,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,73,0,0,0,0,231,158,0,0,0,0,0,0,196,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,243,104,38,167,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,7,164,23,0,0,0,0,106,46,0,0,0,0,0,0,0,0,4,69,0,0,102,110,0,0,102,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,109,0,0,0,0,0,0,135,223,49,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,82,0,0,0,0,39,243,0,0,0,0,0,0,0,0,0,0,70,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,141,0,0,0,0,0,0,4,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,51,0,0,4,122,0,0,0,0,0,0,0,0,0,0,230,87,0,0,0,0,0,0,0,0,0,0,0,0,72,23,69,40,0,0,0,0,0,0,101,28,0,0,0,0,0,0,0,0,9,70,0,0,200,60,103,174,0,0,0,0,0,0,0,0,0,0,71,58,0,0,0,0,0,0,0,0,106,80,230,20,0,0,0,0,0,0,134,178,0,0,133,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,139,72,70,0,0,0,0,0,0,0,0,0,0,137,39,0,0,0,0,0,0,0,0,0,0,0,0,102,221,0,0,0,0,0,0,0,0,0,0,199,148,137,16,0,0,79,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,39,0,0,0,0,0,0,229,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,36,0,0,0,0,0,0,0,0,40,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,153,0,0,167,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,183,0,0,0,0,0,0,0,0,0,0,38,86,10,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,46,41,0,0,0,0,0,0,0,0,71,28,0,0,0,0,0,0,0,0,0,0,231,231,0,0,0,0,169,57,0,0,0,0,0,0,0,0,71,168,0,0,0,0,0,0,0,0,0,0,166,10,0,0,0,0,110,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,146,0,0,0,0,0,0,132,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,55,229,34,0,0,0,0,0,0,0,0,0,0,164,36,0,0,0,0,0,0,0,0,9,66,37,2,0,0,0,0,0,0,0,0,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,75,0,0,0,0,0,0,0,0,0,0,0,0,101,97,0,0,132,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,165,43,92,4,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,51,136,69,100,28,0,0,0,0,72,8,199,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,109,0,0,0,0,0,0,0,0,0,0,102,104,0,0,0,0,0,0,0,0,40,23,198,4,74,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,8,228,19,200,34,229,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,93,228,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,123,0,0,0,0,197,123,0,0,0,0,73,11,69,24,0,0,0,0,0,0,0,0,0,0,37,53,0,0,0,0,0,0,0,0,0,0,196,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,80,100,103,11,94,0,0,0,0,0,0,201,82,0,0,232,26,5,9,0,0,0,0,0,0,0,0,0,0,0,0,234,11,230,29,0,0,0,0,0,0,230,53,0,0,0,0,0,0,0,0,15,0,69,109,0,0,0,0,137,67,38,8,0,0,0,0,0,0,198,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,101,0,0,4,87,0,0,70,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,90,0,0,0,0,72,100,0,0,0,0,0,0,19,7,38,167,0,0,68,121,0,0,0,0,136,117,0,0,0,0,0,0,0,0,0,0,9,31,0,0,0,0,230,243,0,0,0,0,45,5,0,0,108,1,198,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,31,231,76,0,0,0,0,0,0,135,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,46,0,0,0,0,0,0,0,0,104,96,198,207,42,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,160,0,0,230,94,0,0,4,15,41,48,0,0,0,0,0,0,170,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,102,0,0,0,0,0,0,0,0,0,0,0,0,234,24,0,0,87,1,230,18,0,0,0,0,0,0,38,95,168,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,5,199,135,0,0,0,0,0,0,0,0,107,1,134,127,14,59,100,5,0,0,0,0,9,115,166,90,0,0,0,0,0,0,5,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,114,38,239,0,0,197,119,0,0,167,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,105,139,34,0,0,168,39,36,8,0,0,0,0,0,0,164,32,0,0,71,189,0,0,0,0,0,0,0,0,0,0,0,0,105,64,100,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,35,164,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,16,0,0,0,0,235,57,69,5,0,0,0,0,0,0,0,0,0,0,196,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,116,166,249,0,0,0,0,0,0,68,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,173,0,0,0,0,0,0,132,80,0,0,0,0,106,108,196,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,67,0,0,103,15,0,0,0,0,0,0,70,247,0,0,0,0,0,0,0,0,168,98,230,77,0,0,132,113,0,0,134,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,37,103,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,47,196,29,0,0,0,0,0,0,0,0,0,0,0,0,233,53,36,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,171,105,68,6,10,140,24,0,0,0,0,100,115,0,0,0,0,0,0,198,80,0,0,0,0,0,0,0,0,0,0,102,201,0,0,0,0,0,0,0,0,203,115,0,0,0,0,0,0,72,82,100,74,0,0,0,0,0,0,0,0,0,0,196,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,61,0,0,0,0,0,0,102,61,0,0,6,198,0,0,0,0,104,63,71,31,0,0,0,0,0,0,196,19,40,26,132,17,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,51,134,28,138,107,164,46,0,0,102,97,0,0,0,0,0,0,164,69,0,0,0,0,200,17,132,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,186,111,10,133,72,138,39,38,132,0,0,0,0,104,50,36,21,107,37,71,193,0,0,36,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,51,0,0,0,0,0,0,0,0,234,90,231,54,0,0,0,0,0,0,0,0,0,0,5,26,0,0,0,0,0,0,0,0,0,0,0,0,203,52,0,0,73,77,0,0,0,0,0,0,46,63,6,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,119,0,0,0,0,0,0,0,0,75,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,36,0,0,0,0,9,46,132,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,14,0,0,0,0,0,0,0,0,0,0,134,128,0,0,0,0,74,17,0,0,0,0,0,0,0,0,165,90,0,0,0,0,0,0,0,0,0,0,0,0,136,109,100,122,0,0,0,0,0,0,0,0,104,46,196,4,0,0,0,0,0,0,7,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,123,12,37,165,13,0,0,0,0,0,0,0,0,0,0,134,82,0,0,0,0,0,0,0,0,40,118,5,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,136,41,10,0,0,0,0,0,0,0,0,230,48,0,0,0,0,0,0,0,0,40,31,71,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,65,5,79,0,0,0,0,0,0,0,0,0,0,0,0,104,29,6,18,0,0,0,0,0,0,0,0,0,0,134,117,0,0,0,0,0,0,68,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,38,133,24,0,0,0,0,0,0,0,0,0,0,7,239,0,0,71,161,0,0,196,85,0,0,0,0,72,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,51,0,0,0,0,0,0,0,0,196,3,0,0,0,0,0,0,0,0,109,1,231,120,204,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,109,196,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,197,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,221,42,49,229,32,0,0,0,0,0,0,0,0,0,0,0,0,73,102,7,57,0,0,0,0,104,31,70,22,41,49,37,12,0,0,0,0,0,0,0,0,0,0,70,84,235,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,19,230,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,80,199,116,0,0,228,23,0,0,0,0,0,0,0,0,73,43,165,20,0,0,165,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,16,0,0,0,0,0,0,0,0,0,0,0,0,39,162,0,0,0,0,0,0,0,0,0,0,0,0,142,20,0,0,0,0,0,0,172,61,37,7,40,30,101,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,28,134,40,213,3,0,0,0,0,199,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,91,39,88,40,27,36,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,79,165,48,0,0,38,176,0,0,0,0,0,0,0,0,0,0,166,111,0,0,0,0,0,0,0,0,168,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,90,0,0,0,0,0,0,232,119,0,0,0,0,0,0,0,0,38,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,35,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,2,70,0,0,0,0,0,74,51,71,44,0,0,0,0,0,0,0,0,44,53,0,0,104,51,134,7,205,1,103,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,184,139,74,0,0,0,0,197,25,0,0,71,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,77,166,64,0,0,0,0,0,0,0,0,0,0,4,74,234,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,30,7,8,0,0,0,0,0,0,0,0,206,34,0,0,136,75,0,0,0,0,198,187,42,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,38,103,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,125,0,0,0,0,198,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,73,0,0,0,0,0,0,0,0,5,35,0,0,0,0,0,0,70,173,0,0,0,0,0,0,37,35,0,0,7,133,0,0,0,0,0,0,0,0,0,0,166,114,0,0,0,0,9,24,103,69,0,0,0,0,41,118,70,235,0,0,0,0,0,0,166,120,0,0,0,0,40,61,39,4,0,0,0,0,0,0,36,117,0,0,0,0,0,0,0,0,0,0,164,109,0,0,166,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,45,0,0,0,0,0,0,0,0,0,0,0,0,203,96,229,0,0,0,196,91,0,0,0,0,168,29,5,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,102,134,92,0,0,0,0,40,116,167,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,106,0,0,0,0,0,0,0,0,41,2,0,0,0,0,0,0,0,0,0,0,0,0,38,125,0,0,0,0,0,0,0,0,111,4,228,103,0,0,0,0,12,48,164,34,0,0,0,0,0,0,230,168,0,0,103,3,0,0,0,0,8,123,0,0,9,33,5,69,0,0,36,50,0,0,0,0,0,0,198,88,0,0,102,151,0,0,0,0,232,64,164,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,5,103,72,0,0,164,89,0,0,0,0,104,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,61,0,0,0,0,0,0,6,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,59,0,0,0,0,0,0,108,82,6,108,0,0,0,0,0,0,0,0,0,0,0,0,73,3,103,102,0,0,103,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,16,0,0,0,0,0,0,0,0,0,0,168,28,0,0,0,0,0,0,0,0,68,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,96,139,6,229,9,0,0,0,0,0,0,70,208,0,0,38,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,98,0,0,100,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,111,200,21,4,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,109,0,0,198,114,40,71,135,33,0,0,0,0,0,0,6,153,0,0,38,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,46,0,0,0,0,0,0,0,0,0,0,101,91,0,0,0,0,0,0,0,0,203,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,25,68,78,137,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,104,0,0,55,2,199,190,0,0,0,0,0,0,0,0,0,0,167,59,0,0,0,0,74,124,198,171,146,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,44,231,35,0,0,166,173,0,0,0,0,0,0,0,0,0,0,0,0,232,56,5,48,0,0,0,0,0,0,5,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,79,0,0,0,0,0,0,100,106,104,30,231,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,35,36,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,102,70,175,0,0,0,0,0,0,0,0,0,0,0,0,205,21,5,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,81,164,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,16,231,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,190,0,0,0,0,0,0,36,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,105,0,0,11,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,12,37,123,0,0,228,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,239,0,0,0,0,0,0,0,0,0,0,102,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,30,0,0,0,0,0,0,0,0,104,3,4,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,126,0,0,0,0,0,0,0,0,0,0,6,136,0,0,0,0,0,0,0,0,0,0,38,198,0,0,0,0,0,0,0,0,106,28,0,0,0,0,0,0,200,59,6,45,0,0,0,0,0,0,231,11,0,0,0,0,0,0,0,0,0,0,0,0,104,87,0,0,0,0,0,0,78,3,0,0,0,0,0,0,0,0,166,72,0,0,0,0,0,0,100,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,92,100,8,0,0,0,0,0,0,0,0,0,0,0,0,8,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,5,0,0,10,12,0,0,0,0,0,0,168,108,4,64,0,0,0,0,0,0,0,0,0,0,0,0,104,25,0,0,0,0,36,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,32,100,44,0,0,0,0,0,0,0,0,0,0,0,0,202,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,103,0,0,0,0,0,0,0,0,172,72,5,8,0,0,68,55,0,0,0,0,0,0,0,0,0,0,37,122,0,0,0,0,0,0,0,0,0,0,230,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,47,100,34,0,0,0,0,0,0,0,0,0,0,230,118,0,0,6,190,0,0,38,219,136,43,38,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,33,104,36,5,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,1,0,0,0,0,0,0,0,0,166,167,0,0,38,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,110,70,226,168,66,0,0,0,0,166,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,104,100,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,2,0,0,136,19,0,0,0,0,0,0,0,0,37,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,43,133,28,0,0,0,0,0,0,103,141,0,0,134,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,106,6,224,0,0,0,0,169,48,101,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,65,0,0,0,0,0,0,174,56,0,0,0,0,0,0,0,0,71,83,0,0,0,0,0,0,196,52,201,114,101,44,0,0,0,0,0,0,0,0,171,20,0,0,137,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,0,0,0,0,0,0,69,29,0,0,231,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,38,0,0,0,0,0,0,105,115,230,239,0,0,0,0,0,0,0,0,0,0,0,0,109,20,0,0,0,0,0,0,0,0,7,164,201,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,88,0,0,0,0,0,0,167,186,106,1,166,52,172,91,0,0,0,0,0,0,169,42,0,0,0,0,0,0,78,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,17,198,12,0,0,0,0,215,3,0,0,0,0,231,102,0,0,166,130,0,0,0,0,0,0,71,241,0,0,6,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,10,0,0,102,155,169,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,6,135,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,15,4,11,41,78,68,117,0,0,0,0,234,43,0,0,0,0,0,0,168,14,134,208,0,0,103,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,0,0,0,0,0,70,35,0,0,0,0,0,0,0,0,0,0,0,0,9,1,132,5,0,0,0,0,137,22,68,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,68,39,95,0,0,0,0,105,104,6,94,0,0,0,0,0,0,0,0,72,116,6,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,81,0,0,0,0,0,0,0,0,0,0,8,43,0,0,0,0,102,185,105,109,38,23,0,0,0,0,104,56,167,11,40,94,228,40,0,0,0,0,0,0,0,0,0,0,133,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,12,0,0,0,0,0,0,100,62,0,0,0,0,0,0,0,0,0,0,0,0,234,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,12,0,0,7,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,114,0,0,0,0,0,0,0,0,231,49,0,0,0,0,0,0,0,0,9,28,102,70,0,0,0,0,0,0,0,0,0,0,6,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,107,0,0,0,0,0,0,0,0,70,118,172,41,69,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,189,0,0,0,0,0,0,0,0,42,25,0,0,202,63,166,172,0,0,0,0,8,66,0,0,0,0,0,0,0,0,132,2,0,0,0,0,0,0,102,156,0,0,0,0,0,0,102,145,0,0,0,0,0,0,102,38,0,0,0,0,0,0,0,0,0,0,103,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,3,0,0,0,0,0,0,36,110,0,0,0,0,0,0,0,0,0,0,164,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,67,0,0,134,43,0,0,133,108,0,0,0,0,0,0,0,0,40,54,0,0,0,0,0,0,106,96,231,186,0,0,0,0,0,0,0,0,234,26,0,0,0,0,0,0,0,0,0,0,141,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,14,199,7,0,0,4,107,204,33,0,0,136,71,0,0,0,0,0,0,0,0,102,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,80,0,0,0,0,0,0,0,0,82,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,58,0,0,0,0,164,13,0,0,0,0,0,0,70,218,0,0,0,0,0,0,102,64,0,0,0,0,0,0,199,70,0,0,0,0,0,0,0,0,0,0,0,0,106,8,4,5,0,0,0,0,168,37,36,100,0,0,0,0,107,115,0,0,0,0,0,0,0,0,0,0,0,0,39,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,30,0,0,0,0,0,0,0,0,164,80,0,0,0,0,12,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,170,0,0,0,0,0,0,0,0,0,0,6,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,40,133,3,9,45,196,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,95,0,0,0,0,41,104,198,107,0,0,5,107,0,0,0,0,0,0,0,0,0,0,0,0,10,92,133,11,0,0,0,0,136,115,230,240,0,0,230,184,8,45,197,73,0,0,0,0,0,0,38,190,0,0,0,0,0,0,166,88,0,0,0,0,173,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,60,0,0,0,0,0,0,0,0,166,151,0,0,0,0,0,0,0,0,232,62,196,127,0,0,7,214,0,0,70,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,91,0,0,0,0,0,0,0,0,0,0,0,0,138,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,120,166,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,137,0,0,0,0,0,0,71,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,244,0,0,0,0,72,4,166,68,10,119,0,0,0,0,133,81,113,9,228,81,0,0,0,0,200,83,68,18,0,0,0,0,0,0,0,0,201,64,230,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,18,0,0,0,0,102,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,118,0,0,0,0,0,0,0,0,39,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,13,167,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,29,165,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,72,0,0,0,0,0,0,40,100,0,0,0,0,0,0,0,0,0,0,0,0,196,8,0,0,0,0,42,46,0,0,144,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,29,39,90,202,53,39,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,227,16,2,198,134,170,127,0,0,0,0,197,50,0,0,0,0,0,0,0,0,0,0,166,8,0,0,0,0,0,0,0,0,0,0,199,228,0,0,0,0,0,0,4,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,125,200,88,36,37,0,0,231,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,63,0,0,0,0,6,131,0,0,0,0,0,0,70,77,0,0,0,0,0,0,4,65,0,0,0,0,0,0,0,0,200,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,90,0,0,0,0,40,115,0,0,0,0,0,0,104,55,165,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,107,0,0,0,0,0,0,103,17,77,35,165,122,0,0,5,36,0,0,0,0,0,0,71,236,232,75,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,77,102,175,0,0,166,150,0,0,0,0,107,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,30,0,0,0,0,0,0,0,0,0,0,36,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,77,0,0,0,0,0,0,230,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,78,7,20,0,0,100,45],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+51226);allocate([41,75,0,0,203,21,134,36,0,0,0,0,169,65,37,22,0,0,0,0,0,0,166,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,80,0,0,0,0,0,0,36,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,90,0,0,0,0,0,0,166,224,0,0,0,0,0,0,135,210,0,0,0,0,169,58,0,0,104,66,199,153,170,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,33,0,0,0,0,0,0,0,0,0,0,168,52,70,13,170,13,37,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,74,0,0,0,0,0,0,0,0,0,0,202,46,7,229,0,0,0,0,0,0,0,0,0,0,0,0,73,13,0,0,169,50,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,110,0,0,198,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,71,69,58,233,49,36,23,0,0,0,0,0,0,0,0,0,0,0,0,168,18,135,50,0,0,0,0,0,0,0,0,0,0,0,0,8,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,107,6,231,0,0,0,0,73,101,166,78,0,0,0,0,0,0,0,0,184,1,36,47,0,0,71,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,187,0,0,0,0,0,0,132,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,61,74,29,100,21,0,0,0,0,0,0,0,0,234,78,68,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,116,0,0,75,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,53,0,0,0,0,72,89,0,0,0,0,0,0,0,0,167,85,0,0,0,0,0,0,0,0,0,0,0,0,137,52,0,0,0,0,0,0,0,0,0,0,0,0,164,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,94,71,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,14,164,6,0,0,0,0,0,0,0,0,0,0,0,0,232,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,84,0,0,0,0,0,0,6,178,0,0,0,0,0,0,0,0,0,0,230,80,0,0,0,0,0,0,198,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,58,38,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,42,0,0,0,0,0,0,4,116,0,0,0,0,0,0,0,0,0,0,199,229,176,12,4,62,203,81,196,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,30,103,114,200,94,68,25,0,0,0,0,44,64,199,143,0,0,0,0,0,0,0,0,0,0,0,0,234,98,0,0,171,102,0,0,0,0,0,0,0,0,0,0,0,0,132,99,169,113,166,55,10,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,72,0,0,0,0,0,0,102,173,0,0,0,0,0,0,196,54,0,0,0,0,0,0,0,0,0,0,0,0,200,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,110,0,0,0,0,0,0,0,0,0,0,70,188,0,0,0,0,235,122,0,0,9,96,0,0,0,0,0,0,0,0,4,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,28,200,3,69,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,43,0,0,0,0,0,0,36,48,0,0,197,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,43,0,0,0,0,0,0,0,0,169,15,103,157,136,80,5,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,58,0,0,0,0,0,0,0,0,0,0,196,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,93,0,0,0,0,0,0,0,0,72,68,166,47,0,0,0,0,0,0,0,0,0,0,0,0,172,34,0,0,0,0,38,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,56,8,67,100,69,0,0,0,0,106,123,103,138,0,0,0,0,73,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,32,0,0,7,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,10,0,0,100,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,11,199,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,3,0,0,196,68,0,0,0,0,0,0,0,0,0,0,166,112,0,0,0,0,0,0,0,0,0,0,0,0,200,102,0,0,0,0,196,112,0,0,0,0,0,0,230,100,0,0,0,0,0,0,0,0,0,0,199,32,0,0,133,77,40,75,68,4,0,0,0,0,73,21,0,0,0,0,0,0,0,0,36,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,41,0,0,0,0,137,120,166,238,200,22,166,32,0,0,0,0,0,0,38,215,0,0,0,0,0,0,0,0,0,0,164,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,201,0,0,231,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,101,0,0,0,0,41,116,70,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,97,0,0,0,0,0,0,36,17,0,0,70,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,198,0,0,0,0,0,0,0,0,0,0,0,0,139,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,23,37,11,0,0,102,123,204,28,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,7,166,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,38,0,0,0,0,72,11,71,21,0,0,38,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,11,0,0,44,2,196,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,33,0,0,132,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,61,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,21,135,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,98,0,0,0,0,0,0,0,0,0,0,135,72,104,78,7,11,233,55,5,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,105,230,91,0,0,0,0,0,0,0,0,0,0,229,3,72,41,0,0,138,57,68,66,41,71,6,53,0,0,0,0,0,0,199,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,74,0,0,0,0,0,0,165,1,72,40,38,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,127,75,20,231,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,14,0,0,0,0,0,0,0,0,0,0,0,0,198,175,0,0,231,138,0,0,0,0,0,0,0,0,40,0,0,0,40,15,5,61,0,0,102,33,0,0,0,0,0,0,230,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,144,0,0,230,196,0,0,198,179,233,3,0,0,0,0,37,47,177,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,252,0,0,0,0,0,0,0,0,0,0,135,229,0,0,0,0,0,0,0,0,112,4,101,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,69,0,0,0,0,0,0,5,67,233,9,229,25,0,0,103,171,0,0,0,0,0,0,4,53,40,98,7,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,27,199,93,0,0,0,0,0,0,0,0,204,29,0,0,0,0,0,0,0,0,0,0,236,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,75,170,90,100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,59,0,0,0,0,0,0,0,0,0,0,6,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,178,0,0,0,0,137,36,5,14,0,0,0,0,138,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,245,0,0,0,0,0,0,134,155,138,25,0,0,0,0,0,0,0,0,0,0,0,0,102,108,0,0,0,0,0,0,0,0,0,0,0,0,232,1,132,88,232,57,100,70,0,0,196,62,0,0,0,0,0,0,0,0,0,0,0,0,42,20,102,43,0,0,0,0,0,0,0,0,200,58,36,4,0,0,199,30,104,71,70,1,0,0,69,78,200,76,0,0,170,29,0,0,0,0,0,0,0,0,0,0,13,3,69,2,0,0,70,63,0,0,0,0,0,0,0,0,0,0,0,0,214,3,164,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,17,0,0,0,0,0,0,0,0,6,132,0,0,0,0,0,0,6,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,164,169,10,197,10,8,33,133,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,13,0,0,0,0,0,0,0,0,0,0,106,15,228,115,0,0,0,0,137,19,167,143,0,0,0,0,0,0,0,0,0,0,69,97,0,0,197,62,136,24,0,0,0,0,0,0,0,0,6,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,55,7,175,0,0,0,0,0,0,100,125,0,0,0,0,0,0,0,0,0,0,38,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,68,135,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,6,0,0,0,0,0,0,0,0,135,21,0,0,0,0,0,0,166,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,71,0,0,0,0,0,0,132,91,42,77,0,0,0,0,198,121,42,47,167,123,168,91,0,0,0,0,0,0,0,0,0,0,0,0,132,53,0,0,0,0,44,83,231,251,0,0,0,0,0,0,0,0,0,0,0,0,202,100,229,35,0,0,0,0,0,0,0,0,0,0,102,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,22,103,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,60,0,0,0,0,0,0,0,0,0,0,230,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,109,38,229,0,0,38,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,11,0,0,104,89,68,124,0,0,0,0,0,0,0,0,0,0,228,7,0,0,228,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,93,0,0,0,0,0,0,0,0,108,68,197,45,0,0,0,0,0,0,103,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,182,0,0,134,96,170,111,0,0,0,0,0,0,20,6,0,0,0,0,5,103,0,0,0,0,74,86,231,192,200,28,7,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,4,0,0,137,41,4,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,114,0,0,0,0,10,52,135,70,0,0,196,114,0,0,134,220,0,0,0,0,120,0,0,0,0,0,132,11,0,0,0,0,0,0,0,0,168,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,106,229,92,0,0,36,6,0,0,230,109,0,0,0,0,232,5,0,0,0,0,0,0,0,0,0,0,0,0,36,108,0,0,70,150,0,0,0,0,0,0,0,0,0,0,0,0,168,24,5,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,181,0,0,0,0,0,0,0,0,105,111,231,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,50,0,0,4,70,0,0,0,0,77,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,4,100,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,71,0,0,0,0,0,0,0,0,144,11,71,102,0,0,0,0,40,51,198,27,0,0,0,0,0,0,0,0,233,120,6,235,0,0,0,0,0,0,38,79,0,0,134,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,110,0,0,0,0,0,0,70,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,110,0,0,0,0,68,53,232,49,70,7,0,0,0,0,0,0,0,0,0,0,0,0,73,67,199,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,17,197,70,0,0,6,6,146,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,0,70,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,46,0,0,102,126,0,0,0,0,9,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,42,198,174,74,83,0,0,200,30,69,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,54,0,0,0,0,0,0,9,40,0,0,0,0,0,0,0,0,102,125,0,0,71,108,0,0,4,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,125,0,0,0,0,0,0,0,0,0,0,8,93,164,12,0,0,0,0,0,0,0,0,0,0,197,90,0,0,0,0,10,22,0,0,10,79,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,104,0,0,0,0,0,0,0,0,0,0,0,0,43,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,30,102,241,200,24,0,0,0,0,103,221,0,0,0,0,0,0,0,0,0,0,198,105,8,21,68,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,109,0,0,0,0,169,59,165,96,168,72,228,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,218,0,0,0,0,0,0,0,0,205,19,38,109,0,0,132,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,83,100,110,0,0,198,9,140,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,182,0,0,70,120,0,0,0,0,0,0,0,0,0,0,133,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,4,228,24,0,0,0,0,0,0,134,48,78,59,0,0,235,33,0,0,169,41,228,63,0,0,0,0,0,0,0,0,0,0,0,0,54,6,0,0,140,123,0,0,104,88,69,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,94,0,0,0,0,0,0,0,0,0,0,230,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,64,166,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,50,0,0,0,0,0,0,0,0,132,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,8,11,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,61,36,42,0,0,0,0,104,32,135,29,0,0,0,0,9,77,228,1,0,0,0,0,0,0,0,0,0,0,0,0,140,94,6,188,0,0,166,94,0,0,70,158,0,0,0,0,136,13,197,74,0,0,0,0,0,0,0,0,116,105,109,101,100,111,119,110,108,105,102,101,108,101,102,116,98,97,99,107,99,111,100,101,100,97,116,97,115,104,111,119,111,110,108,121,115,105,116,101,99,105,116,121,111,112,101,110,106,117,115,116,108,105,107,101,102,114,101,101,119,111,114,107,116,101,120,116,121,101,97,114,111,118,101,114,98,111,100,121,108,111,118,101,102,111,114,109,98,111,111,107,112,108,97,121,108,105,118,101,108,105,110,101,104,101,108,112,104,111,109,101,115,105,100,101,109,111,114,101,119,111,114,100,108,111,110,103,116,104,101,109,118,105,101,119,102,105,110,100,112,97,103,101,100,97,121,115,102,117,108,108,104,101,97,100,116,101,114,109,101,97,99,104,97,114,101,97,102,114,111,109,116,114,117,101,109,97,114,107,97,98,108,101,117,112,111,110,104,105,103,104,100,97,116,101,108,97,110,100,110,101,119,115,101,118,101,110,110,101,120,116,99,97,115,101,98,111,116,104,112,111,115,116,117,115,101,100,109,97,100,101,104,97,110,100,104,101,114,101,119,104,97,116,110,97,109,101,76,105,110,107,98,108,111,103,115,105,122,101,98,97,115,101,104,101,108,100,109,97,107,101,109,97,105,110,117,115,101,114,39,41,32,43,104,111,108,100,101,110,100,115,119,105,116,104,78,101,119,115,114,101,97,100,119,101,114,101,115,105,103,110,116,97,107,101,104,97,118,101,103,97,109,101,115,101,101,110,99,97,108,108,112,97,116,104,119,101,108,108,112,108,117,115,109,101,110,117,102,105,108,109,112,97,114,116,106,111,105,110,116,104,105,115,108,105,115,116,103,111,111,100,110,101,101,100,119,97,121,115,119,101,115,116,106,111,98,115,109,105,110,100,97,108,115,111,108,111,103,111,114,105,99,104,117,115,101,115,108,97,115,116,116,101,97,109,97,114,109,121,102,111,111,100,107,105,110,103,119,105,108,108,101,97,115,116,119,97,114,100,98,101,115,116,102,105,114,101,80,97,103,101,107,110,111,119,97,119,97,121,46,112,110,103,109,111,118,101,116,104,97,110,108,111,97,100,103,105,118,101,115,101,108,102,110,111,116,101,109,117,99,104,102,101,101,100,109,97,110,121,114,111,99,107,105,99,111,110,111,110,99,101,108,111,111,107,104,105,100,101,100,105,101,100,72,111,109,101,114,117,108,101,104,111,115,116,97,106,97,120,105,110,102,111,99,108,117,98,108,97,119,115,108,101,115,115,104,97,108,102,115,111,109,101,115,117,99,104,122,111,110,101,49,48,48,37,111,110,101,115,99,97,114,101,84,105,109,101,114,97,99,101,98,108,117,101,102,111,117,114,119,101,101,107,102,97,99,101,104,111,112,101,103,97,118,101,104,97,114,100,108,111,115,116,119,104,101,110,112,97,114,107,107,101,112,116,112,97,115,115,115,104,105,112,114,111,111,109,72,84,77,76,112,108,97,110,84,121,112,101,100,111,110,101,115,97,118,101,107,101,101,112,102,108,97,103,108,105,110,107,115,111,108,100,102,105,118,101,116,111,111,107,114,97,116,101,116,111,119,110,106,117,109,112,116,104,117,115,100,97,114,107,99,97,114,100,102,105,108,101,102,101,97,114,115,116,97,121,107,105,108,108,116,104,97,116,102,97,108,108,97,117,116,111,101,118,101,114,46,99,111,109,116,97,108,107,115,104,111,112,118,111,116,101,100,101,101,112,109,111,100,101,114,101,115,116,116,117,114,110,98,111,114,110,98,97,110,100,102,101,108,108,114,111,115,101,117,114,108,40,115,107,105,110,114,111,108,101,99,111,109,101,97,99,116,115,97,103,101,115,109,101,101,116,103,111,108,100,46,106,112,103,105,116,101,109,118,97,114,121,102,101,108,116,116,104,101,110,115,101,110,100,100,114,111,112,86,105,101,119,99,111,112,121,49,46,48,34,60,47,97,62,115,116,111,112,101,108,115,101,108,105,101,115,116,111,117,114,112,97,99,107,46,103,105,102,112,97,115,116,99,115,115,63,103,114,97,121,109,101,97,110,38,103,116,59,114,105,100,101,115,104,111,116,108,97,116,101,115,97,105,100,114,111,97,100,118,97,114,32,102,101,101,108,106,111,104,110,114,105,99,107,112,111,114,116,102,97,115,116,39,85,65,45,100,101,97,100,60,47,98,62,112,111,111,114,98,105,108,108,116,121,112,101,85,46,83,46,119,111,111,100,109,117,115,116,50,112,120,59,73,110,102,111,114,97,110,107,119,105,100,101,119,97,110,116,119,97,108,108,108,101,97,100,91,48,93,59,112,97,117,108,119,97,118,101,115,117,114,101,36,40,39,35,119,97,105,116,109,97,115,115,97,114,109,115,103,111,101,115,103,97,105,110,108,97,110,103,112,97,105,100,33,45,45,32,108,111,99,107,117,110,105,116,114,111,111,116,119,97,108,107,102,105,114,109,119,105,102,101,120,109,108,34,115,111,110,103,116,101,115,116,50,48,112,120,107,105,110,100,114,111,119,115,116,111,111,108,102,111,110,116,109,97,105,108,115,97,102,101,115,116,97,114,109,97,112,115,99,111,114,101,114,97,105,110,102,108,111,119,98,97,98,121,115,112,97,110,115,97,121,115,52,112,120,59,54,112,120,59,97,114,116,115,102,111,111,116,114,101,97,108,119,105,107,105,104,101,97,116,115,116,101,112,116,114,105,112,111,114,103,47,108,97,107,101,119,101,97,107,116,111,108,100,70,111,114,109,99,97,115,116,102,97,110,115,98,97,110,107,118,101,114,121,114,117,110,115,106,117,108,121,116,97,115,107,49,112,120,59,103,111,97,108,103,114,101,119,115,108,111,119,101,100,103,101,105,100,61,34,115,101,116,115,53,112,120,59,46,106,115,63,52,48,112,120,105,102,32,40,115,111,111,110,115,101,97,116,110,111,110,101,116,117,98,101,122,101,114,111,115,101,110,116,114,101,101,100,102,97,99,116,105,110,116,111,103,105,102,116,104,97,114,109,49,56,112,120,99,97,109,101,104,105,108,108,98,111,108,100,122,111,111,109,118,111,105,100,101,97,115,121,114,105,110,103,102,105,108,108,112,101,97,107,105,110,105,116,99,111,115,116,51,112,120,59,106,97,99,107,116,97,103,115,98,105,116,115,114,111,108,108,101,100,105,116,107,110,101,119,110,101,97,114,60,33,45,45,103,114,111,119,74,83,79,78,100,117,116,121,78,97,109,101,115,97,108,101,121,111,117,32,108,111,116,115,112,97,105,110,106,97,122,122,99,111,108,100,101,121,101,115,102,105,115,104,119,119,119,46,114,105,115,107,116,97,98,115,112,114,101,118,49,48,112,120,114,105,115,101,50,53,112,120,66,108,117,101,100,105,110,103,51,48,48,44,98,97,108,108,102,111,114,100,101,97,114,110,119,105,108,100,98,111,120,46,102,97,105,114,108,97,99,107,118,101,114,115,112,97,105,114,106,117,110,101,116,101,99,104,105,102,40,33,112,105,99,107,101,118,105,108,36,40,34,35,119,97,114,109,108,111,114,100,100,111,101,115,112,117,108,108,44,48,48,48,105,100,101,97,100,114,97,119,104,117,103,101,115,112,111,116,102,117,110,100,98,117,114,110,104,114,101,102,99,101,108,108,107,101,121,115,116,105,99,107,104,111,117,114,108,111,115,115,102,117,101,108,49,50,112,120,115,117,105,116,100,101,97,108,82,83,83,34,97,103,101,100,103,114,101,121,71,69,84,34,101,97,115,101,97,105,109,115,103,105,114,108,97,105,100,115,56,112,120,59,110,97,118,121,103,114,105,100,116,105,112,115,35,57,57,57,119,97,114,115,108,97,100,121,99,97,114,115,41,59,32,125,112,104,112,63,104,101,108,108,116,97,108,108,119,104,111,109,122,104,58,229,42,47,13,10,32,49,48,48,104,97,108,108,46,10,10,65,55,112,120,59,112,117,115,104,99,104,97,116,48,112,120,59,99,114,101,119,42,47,60,47,104,97,115,104,55,53,112,120,102,108,97,116,114,97,114,101,32,38,38,32,116,101,108,108,99,97,109,112,111,110,116,111,108,97,105,100,109,105,115,115,115,107,105,112,116,101,110,116,102,105,110,101,109,97,108,101,103,101,116,115,112,108,111,116,52,48,48,44,13,10,13,10,99,111,111,108,102,101,101,116,46,112,104,112,60,98,114,62,101,114,105,99,109,111,115,116,103,117,105,100,98,101,108,108,100,101,115,99,104,97,105,114,109,97,116,104,97,116,111,109,47,105,109,103,38,35,56,50,108,117,99,107,99,101,110,116,48,48,48,59,116,105,110,121,103,111,110,101,104,116,109,108,115,101,108,108,100,114,117,103,70,82,69,69,110,111,100,101,110,105,99,107,63,105,100,61,108,111,115,101,110,117,108,108,118,97,115,116,119,105,110,100,82,83,83,32,119,101,97,114,114,101,108,121,98,101,101,110,115,97,109,101,100,117,107,101,110,97,115,97,99,97,112,101,119,105,115,104,103,117,108,102,84,50,51,58,104,105,116,115,115,108,111,116,103,97,116,101,107,105,99,107,98,108,117,114,116,104,101,121,49,53,112,120,39,39,41,59,41,59,34,62,109,115,105,101,119,105,110,115,98,105,114,100,115,111,114,116,98,101,116,97,115,101,101,107,84,49,56,58,111,114,100,115,116,114,101,101,109,97,108,108,54,48,112,120,102,97,114,109,226,128,153,115,98,111,121,115,91,48,93,46,39,41,59,34,80,79,83,84,98,101,97,114,107,105,100,115,41,59,125,125,109,97,114,121,116,101,110,100,40,85,75,41,113,117,97,100,122,104,58,230,45,115,105,122,45,45,45,45,112,114,111,112,39,41,59,13,108,105,102,116,84,49,57,58,118,105,99,101,97,110,100,121,100,101,98,116,62,82,83,83,112,111,111,108,110,101,99,107,98,108,111,119,84,49,54,58,100,111,111,114,101,118,97,108,84,49,55,58,108,101,116,115,102,97,105,108,111,114,97,108,112,111,108,108,110,111,118,97,99,111,108,115,103,101,110,101,32,226,128,148,115,111,102,116,114,111,109,101,116,105,108,108,114,111,115,115,60,104,51,62,112,111,117,114,102,97,100,101,112,105,110,107,60,116,114,62,109,105,110,105,41,124,33,40,109,105,110,101,122,104,58,232,98,97,114,115,104,101,97,114,48,48,41,59,109,105,108,107,32,45,45,62,105,114,111,110,102,114,101,100,100,105,115,107,119,101,110,116,115,111,105,108,112,117,116,115,47,106,115,47,104,111,108,121,84,50,50,58,73,83,66,78,84,50,48,58,97,100,97,109,115,101,101,115,60,104,50,62,106,115,111,110,39,44,32,39,99,111,110,116,84,50,49,58,32,82,83,83,108,111,111,112,97,115,105,97,109,111,111,110,60,47,112,62,115,111,117,108,76,73,78,69,102,111,114,116,99,97,114,116,84,49,52,58,60,104,49,62,56,48,112,120,33,45,45,60,57,112,120,59,84,48,52,58,109,105,107,101,58,52,54,90,110,105,99,101,105,110,99,104,89,111,114,107,114,105,99,101,122,104,58,228,39,41,41,59,112,117,114,101,109,97,103,101,112,97,114,97,116,111,110,101,98,111,110,100,58,51,55,90,95,111,102,95,39,93,41,59,48,48,48,44,122,104,58,231,116,97,110,107,121,97,114,100,98,111,119,108,98,117,115,104,58,53,54,90,74,97,118,97,51,48,112,120,10,124,125,10,37,67,51,37,58,51,52,90,106,101,102,102,69,88,80,73,99,97,115,104,118,105,115,97,103,111,108,102,115,110,111,119,122,104,58,233,113,117,101,114,46,99,115,115,115,105,99,107,109,101,97,116,109,105,110,46,98,105,110,100,100,101,108,108,104,105,114,101,112,105,99,115,114,101,110,116,58,51,54,90,72,84,84,80,45,50,48,49,102,111,116,111,119,111,108,102,69,78,68,32,120,98,111,120,58,53,52,90,66,79,68,89,100,105,99,107,59,10,125,10,101,120,105,116,58,51,53,90,118,97,114,115,98,101,97,116,39,125,41,59,100,105,101,116,57,57,57,59,97,110,110,101,125,125,60,47,91,105,93,46,76,97,110,103,107,109,194,178,119,105,114,101,116,111,121,115,97,100,100,115,115,101,97,108,97,108,101,120,59,10,9,125,101,99,104,111,110,105,110,101,46,111,114,103,48,48,53,41,116,111,110,121,106,101,119,115,115,97,110,100,108,101,103,115,114,111,111,102,48,48,48,41,32,50,48,48,119,105,110,101,103,101,97,114,100,111,103,115,98,111,111,116,103,97,114,121,99,117,116,115,116,121,108,101,116,101,109,112,116,105,111,110,46,120,109,108,99,111,99,107,103,97,110,103,36,40,39,46,53,48,112,120,80,104,46,68,109,105,115,99,97,108,97,110,108,111,97,110,100,101,115,107,109,105,108,101,114,121,97,110,117,110,105,120,100,105,115,99,41,59,125,10,100,117,115,116,99,108,105,112,41,46,10,10,55,48,112,120,45,50,48,48,68,86,68,115,55,93,62,60,116,97,112,101,100,101,109,111,105,43,43,41,119,97,103,101,101,117,114,111,112,104,105,108,111,112,116,115,104,111,108,101,70,65,81,115,97,115,105,110,45,50,54,84,108,97,98,115,112,101,116,115,85,82,76,32,98,117,108,107,99,111,111,107,59,125,13,10,72,69,65,68,91,48,93,41,97,98,98,114,106,117,97,110,40,49,57,56,108,101,115,104,116,119,105,110,60,47,105,62,115,111,110,121,103,117,121,115,102,117,99,107,112,105,112,101,124,45,10,33,48,48,50,41,110,100,111,119,91,49,93,59,91,93,59,10,76,111,103,32,115,97,108,116,13,10,9,9,98,97,110,103,116,114,105,109,98,97,116,104,41,123,13,10,48,48,112,120,10,125,41,59,107,111,58,236,102,101,101,115,97,100,62,13,115,58,47,47,32,91,93,59,116,111,108,108,112,108,117,103,40,41,123,10,123,13,10,32,46,106,115,39,50,48,48,112,100,117,97,108,98,111,97,116,46,74,80,71,41,59,10,125,113,117,111,116,41,59,10,10,39,41,59,10,13,10,125,13,50,48,49,52,50,48,49,53,50,48,49,54,50,48,49,55,50,48,49,56,50,48,49,57,50,48,50,48,50,48,50,49,50,48,50,50,50,48,50,51,50,48,50,52,50,48,50,53,50,48,50,54,50,48,50,55,50,48,50,56,50,48,50,57,50,48,51,48,50,48,51,49,50,48,51,50,50,48,51,51,50,48,51,52,50,48,51,53,50,48,51,54,50,48,51,55,50,48,49,51,50,48,49,50,50,48,49,49,50,48,49,48,50,48,48,57,50,48,48,56,50,48,48,55,50,48,48,54,50,48,48,53,50,48,48,52,50,48,48,51,50,48,48,50,50,48,48,49,50,48,48,48,49,57,57,57,49,57,57,56,49,57,57,55,49,57,57,54,49,57,57,53,49,57,57,52,49,57,57,51,49,57,57,50,49,57,57,49,49,57,57,48,49,57,56,57,49,57,56,56,49,57,56,55,49,57,56,54,49,57,56,53,49,57,56,52,49,57,56,51,49,57,56,50,49,57,56,49,49,57,56,48,49,57,55,57,49,57,55,56,49,57,55,55,49,57,55,54,49,57,55,53,49,57,55,52,49,57,55,51,49,57,55,50,49,57,55,49,49,57,55,48,49,57,54,57,49,57,54,56,49,57,54,55,49,57,54,54,49,57,54,53,49,57,54,52,49,57,54,51,49,57,54,50,49,57,54,49,49,57,54,48,49,57,53,57,49,57,53,56,49,57,53,55,49,57,53,54,49,57,53,53,49,57,53,52,49,57,53,51,49,57,53,50,49,57,53,49,49,57,53,48,49,48,48,48,49,48,50,52,49,51,57,52,48,48,48,48,57,57,57,57,99,111,109,111,109,195,161,115,101,115,116,101,101,115,116,97,112,101,114,111,116,111,100,111,104,97,99,101,99,97,100,97,97,195,177,111,98,105,101,110,100,195,173,97,97,115,195,173,118,105,100,97,99,97,115,111,111,116,114,111,102,111,114,111,115,111,108,111,111,116,114,97,99,117,97,108,100,105,106,111,115,105,100,111,103,114,97,110,116,105,112,111,116,101,109,97,100,101,98,101,97,108,103,111,113,117,195,169,101,115,116,111,110,97,100,97,116,114,101,115,112,111,99,111,99,97,115,97,98,97,106,111,116,111,100,97,115,105,110,111,97,103,117,97,112,117,101,115,117,110,111,115,97,110,116,101,100,105,99,101,108,117,105,115,101,108,108,97,109,97,121,111,122,111,110,97,97,109,111,114,112,105,115,111,111,98,114,97,99,108,105,99,101,108,108,111,100,105,111,115,104,111,114,97,99,97,115,105,208,183,208,176,208,189,208,176,208,190,208,188,209,128,208,176,209,128,209,131,209,130,208,176,208,189,208,181,208,191,208,190,208,190,209,130,208,184,208,183,208,189,208,190,208,180,208,190,209,130,208,190,208,182,208,181,208,190,208,189,208,184,209,133,208,157,208,176,208,181,208,181,208,177,209,139,208,188,209,139,208,146,209,139,209,129,208,190,208,178,209,139,208,178,208,190,208,157,208,190,208,190,208,177,208,159,208,190,208,187,208,184,208,189,208,184,208,160,208,164,208,157,208,181,208,156,209,139,209,130,209,139,208,158,208,189,208,184,208,188,208,180,208,176,208,151,208,176,208,148,208,176,208,157,209,131,208,158,208,177,209,130,208,181,208,152,208,183,208,181,208,185,208,189,209,131,208,188,208,188,208,162,209,139,209,131,208,182,217,129,217,138,216,163,217,134,217,133,216,167,217,133,216,185,217,131,217,132,216,163,217,136,216,177,216,175,217,138,216,167,217,129,217,137,217,135,217,136,217,132,217,133,217,132,217,131,216,167,217,136,217,132,217,135,216,168,216,179,216,167,217,132,216,165,217,134,217,135,217,138,216,163,217,138,217,130,216,175,217,135,217,132,216,171,217,133,216,168,217,135,217,132,217,136,217,132,217,138,216,168,217,132,216,167,217,138,216,168,217,131,216,180,217,138,216,167,217,133,216,163,217,133,217,134,216,170,216,168,217,138,217,132,217,134,216,173,216,168,217,135,217,133,217,133,216,180,217,136,216,180,102,105,114,115,116,118,105,100,101,111,108,105,103,104,116,119,111,114,108,100,109,101,100,105,97,119,104,105,116,101,99,108,111,115,101,98,108,97,99,107,114,105,103,104,116,115,109,97,108,108,98,111,111,107,115,112,108,97,99,101,109,117,115,105,99,102,105,101,108,100,111,114,100,101,114,112,111,105,110,116,118,97,108,117,101,108,101,118,101,108,116,97,98,108,101,98,111,97,114,100,104,111,117,115,101,103,114,111,117,112,119,111,114,107,115,121,101,97,114,115,115,116,97,116,101,116,111,100,97,121,119,97,116,101,114,115,116,97,114,116,115,116,121,108,101,100,101,97,116,104,112,111,119,101,114,112,104,111,110,101,110,105,103,104,116,101,114,114,111,114,105,110,112,117,116,97,98,111,117,116,116,101,114,109,115,116,105,116,108,101,116,111,111,108,115,101,118,101,110,116,108,111,99,97,108,116,105,109,101,115,108,97,114,103,101,119,111,114,100,115,103,97,109,101,115,115,104,111,114,116,115,112,97,99,101,102,111,99,117,115,99,108,101,97,114,109,111,100,101,108,98,108,111,99,107,103,117,105,100,101,114,97,100,105,111,115,104,97,114,101,119,111,109,101,110,97,103,97,105,110,109,111,110,101,121,105,109,97,103,101,110,97,109,101,115,121,111,117,110,103,108,105,110,101,115,108,97,116,101,114,99,111,108,111,114,103,114,101,101,110,102,114,111,110,116,38,97,109,112,59,119,97,116,99,104,102,111,114,99,101,112,114,105,99,101,114,117,108,101,115,98,101,103,105,110,97,102,116,101,114,118,105,115,105,116,105,115,115,117,101,97,114,101,97,115,98,101,108,111,119,105,110,100,101,120,116,111,116,97,108,104,111,117,114,115,108,97,98,101,108,112,114,105,110,116,112,114,101,115,115,98,117,105,108,116,108,105,110,107,115,115,112,101,101,100,115,116,117,100,121,116,114,97,100,101,102,111,117,110,100,115,101,110,115,101,117,110,100,101,114,115,104,111,119,110,102,111,114,109,115,114,97,110,103,101,97,100,100,101,100,115,116,105,108,108,109,111,118,101,100,116,97,107,101,110,97,98,111,118,101,102,108,97,115,104,102,105,120,101,100,111,102,116,101,110,111,116,104,101,114,118,105,101,119,115,99,104,101,99,107,108,101,103,97,108,114,105,118,101,114,105,116,101,109,115,113,117,105,99,107,115,104,97,112,101,104,117,109,97,110,101,120,105,115,116,103,111,105,110,103,109,111,118,105,101,116,104,105,114,100,98,97,115,105,99,112,101,97,99,101,115,116,97,103,101,119,105,100,116,104,108,111,103,105,110,105,100,101,97,115,119,114,111,116,101,112,97,103,101,115,117,115,101,114,115,100,114,105,118,101,115,116,111,114,101,98,114,101,97,107,115,111,117,116,104,118,111,105,99,101,115,105,116,101,115,109,111,110,116,104,119,104,101,114,101,98,117,105,108,100,119,104,105,99,104,101,97,114,116,104,102,111,114,117,109,116,104,114,101,101,115,112,111,114,116,112,97,114,116,121,67,108,105,99,107,108,111,119,101,114,108,105,118,101,115,99,108,97,115,115,108,97,121,101,114,101,110,116,114,121,115,116,111,114,121,117,115,97,103,101,115,111,117,110,100,99,111,117,114,116,121,111,117,114,32,98,105,114,116,104,112,111,112,117,112,116,121,112,101,115,97,112,112,108,121,73,109,97,103,101,98,101,105,110,103,117,112,112,101,114,110,111,116,101,115,101,118,101,114,121,115,104,111,119,115,109,101,97,110,115,101,120,116,114,97,109,97,116,99,104,116,114,97,99,107,107,110,111,119,110,101,97,114,108,121,98,101,103,97,110,115,117,112,101,114,112,97,112,101,114,110,111,114,116,104,108,101,97,114,110,103,105,118,101,110,110],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+61488);allocate([97,109,101,100,101,110,100,101,100,84,101,114,109,115,112,97,114,116,115,71,114,111,117,112,98,114,97,110,100,117,115,105,110,103,119,111,109,97,110,102,97,108,115,101,114,101,97,100,121,97,117,100,105,111,116,97,107,101,115,119,104,105,108,101,46,99,111,109,47,108,105,118,101,100,99,97,115,101,115,100,97,105,108,121,99,104,105,108,100,103,114,101,97,116,106,117,100,103,101,116,104,111,115,101,117,110,105,116,115,110,101,118,101,114,98,114,111,97,100,99,111,97,115,116,99,111,118,101,114,97,112,112,108,101,102,105,108,101,115,99,121,99,108,101,115,99,101,110,101,112,108,97,110,115,99,108,105,99,107,119,114,105,116,101,113,117,101,101,110,112,105,101,99,101,101,109,97,105,108,102,114,97,109,101,111,108,100,101,114,112,104,111,116,111,108,105,109,105,116,99,97,99,104,101,99,105,118,105,108,115,99,97,108,101,101,110,116,101,114,116,104,101,109,101,116,104,101,114,101,116,111,117,99,104,98,111,117,110,100,114,111,121,97,108,97,115,107,101,100,119,104,111,108,101,115,105,110,99,101,115,116,111,99,107,32,110,97,109,101,102,97,105,116,104,104,101,97,114,116,101,109,112,116,121,111,102,102,101,114,115,99,111,112,101,111,119,110,101,100,109,105,103,104,116,97,108,98,117,109,116,104,105,110,107,98,108,111,111,100,97,114,114,97,121,109,97,106,111,114,116,114,117,115,116,99,97,110,111,110,117,110,105,111,110,99,111,117,110,116,118,97,108,105,100,115,116,111,110,101,83,116,121,108,101,76,111,103,105,110,104,97,112,112,121,111,99,99,117,114,108,101,102,116,58,102,114,101,115,104,113,117,105,116,101,102,105,108,109,115,103,114,97,100,101,110,101,101,100,115,117,114,98,97,110,102,105,103,104,116,98,97,115,105,115,104,111,118,101,114,97,117,116,111,59,114,111,117,116,101,46,104,116,109,108,109,105,120,101,100,102,105,110,97,108,89,111,117,114,32,115,108,105,100,101,116,111,112,105,99,98,114,111,119,110,97,108,111,110,101,100,114,97,119,110,115,112,108,105,116,114,101,97,99,104,82,105,103,104,116,100,97,116,101,115,109,97,114,99,104,113,117,111,116,101,103,111,111,100,115,76,105,110,107,115,100,111,117,98,116,97,115,121,110,99,116,104,117,109,98,97,108,108,111,119,99,104,105,101,102,121,111,117,116,104,110,111,118,101,108,49,48,112,120,59,115,101,114,118,101,117,110,116,105,108,104,97,110,100,115,67,104,101,99,107,83,112,97,99,101,113,117,101,114,121,106,97,109,101,115,101,113,117,97,108,116,119,105,99,101,48,44,48,48,48,83,116,97,114,116,112,97,110,101,108,115,111,110,103,115,114,111,117,110,100,101,105,103,104,116,115,104,105,102,116,119,111,114,116,104,112,111,115,116,115,108,101,97,100,115,119,101,101,107,115,97,118,111,105,100,116,104,101,115,101,109,105,108,101,115,112,108,97,110,101,115,109,97,114,116,97,108,112,104,97,112,108,97,110,116,109,97,114,107,115,114,97,116,101,115,112,108,97,121,115,99,108,97,105,109,115,97,108,101,115,116,101,120,116,115,115,116,97,114,115,119,114,111,110,103,60,47,104,51,62,116,104,105,110,103,46,111,114,103,47,109,117,108,116,105,104,101,97,114,100,80,111,119,101,114,115,116,97,110,100,116,111,107,101,110,115,111,108,105,100,40,116,104,105,115,98,114,105,110,103,115,104,105,112,115,115,116,97,102,102,116,114,105,101,100,99,97,108,108,115,102,117,108,108,121,102,97,99,116,115,97,103,101,110,116,84,104,105,115,32,47,47,45,45,62,97,100,109,105,110,101,103,121,112,116,69,118,101,110,116,49,53,112,120,59,69,109,97,105,108,116,114,117,101,34,99,114,111,115,115,115,112,101,110,116,98,108,111,103,115,98,111,120,34,62,110,111,116,101,100,108,101,97,118,101,99,104,105,110,97,115,105,122,101,115,103,117,101,115,116,60,47,104,52,62,114,111,98,111,116,104,101,97,118,121,116,114,117,101,44,115,101,118,101,110,103,114,97,110,100,99,114,105,109,101,115,105,103,110,115,97,119,97,114,101,100,97,110,99,101,112,104,97,115,101,62,60,33,45,45,101,110,95,85,83,38,35,51,57,59,50,48,48,112,120,95,110,97,109,101,108,97,116,105,110,101,110,106,111,121,97,106,97,120,46,97,116,105,111,110,115,109,105,116,104,85,46,83,46,32,104,111,108,100,115,112,101,116,101,114,105,110,100,105,97,110,97,118,34,62,99,104,97,105,110,115,99,111,114,101,99,111,109,101,115,100,111,105,110,103,112,114,105,111,114,83,104,97,114,101,49,57,57,48,115,114,111,109,97,110,108,105,115,116,115,106,97,112,97,110,102,97,108,108,115,116,114,105,97,108,111,119,110,101,114,97,103,114,101,101,60,47,104,50,62,97,98,117,115,101,97,108,101,114,116,111,112,101,114,97,34,45,47,47,87,99,97,114,100,115,104,105,108,108,115,116,101,97,109,115,80,104,111,116,111,116,114,117,116,104,99,108,101,97,110,46,112,104,112,63,115,97,105,110,116,109,101,116,97,108,108,111,117,105,115,109,101,97,110,116,112,114,111,111,102,98,114,105,101,102,114,111,119,34,62,103,101,110,114,101,116,114,117,99,107,108,111,111,107,115,86,97,108,117,101,70,114,97,109,101,46,110,101,116,47,45,45,62,10,60,116,114,121,32,123,10,118,97,114,32,109,97,107,101,115,99,111,115,116,115,112,108,97,105,110,97,100,117,108,116,113,117,101,115,116,116,114,97,105,110,108,97,98,111,114,104,101,108,112,115,99,97,117,115,101,109,97,103,105,99,109,111,116,111,114,116,104,101,105,114,50,53,48,112,120,108,101,97,115,116,115,116,101,112,115,67,111,117,110,116,99,111,117,108,100,103,108,97,115,115,115,105,100,101,115,102,117,110,100,115,104,111,116,101,108,97,119,97,114,100,109,111,117,116,104,109,111,118,101,115,112,97,114,105,115,103,105,118,101,115,100,117,116,99,104,116,101,120,97,115,102,114,117,105,116,110,117,108,108,44,124,124,91,93,59,116,111,112,34,62,10,60,33,45,45,80,79,83,84,34,111,99,101,97,110,60,98,114,47,62,102,108,111,111,114,115,112,101,97,107,100,101,112,116,104,32,115,105,122,101,98,97,110,107,115,99,97,116,99,104,99,104,97,114,116,50,48,112,120,59,97,108,105,103,110,100,101,97,108,115,119,111,117,108,100,53,48,112,120,59,117,114,108,61,34,112,97,114,107,115,109,111,117,115,101,77,111,115,116,32,46,46,46,60,47,97,109,111,110,103,98,114,97,105,110,98,111,100,121,32,110,111,110,101,59,98,97,115,101,100,99,97,114,114,121,100,114,97,102,116,114,101,102,101,114,112,97,103,101,95,104,111,109,101,46,109,101,116,101,114,100,101,108,97,121,100,114,101,97,109,112,114,111,118,101,106,111,105,110,116,60,47,116,114,62,100,114,117,103,115,60,33,45,45,32,97,112,114,105,108,105,100,101,97,108,97,108,108,101,110,101,120,97,99,116,102,111,114,116,104,99,111,100,101,115,108,111,103,105,99,86,105,101,119,32,115,101,101,109,115,98,108,97,110,107,112,111,114,116,115,32,40,50,48,48,115,97,118,101,100,95,108,105,110,107,103,111,97,108,115,103,114,97,110,116,103,114,101,101,107,104,111,109,101,115,114,105,110,103,115,114,97,116,101,100,51,48,112,120,59,119,104,111,115,101,112,97,114,115,101,40,41,59,34,32,66,108,111,99,107,108,105,110,117,120,106,111,110,101,115,112,105,120,101,108,39,41,59,34,62,41,59,105,102,40,45,108,101,102,116,100,97,118,105,100,104,111,114,115,101,70,111,99,117,115,114,97,105,115,101,98,111,120,101,115,84,114,97,99,107,101,109,101,110,116,60,47,101,109,62,98,97,114,34,62,46,115,114,99,61,116,111,119,101,114,97,108,116,61,34,99,97,98,108,101,104,101,110,114,121,50,52,112,120,59,115,101,116,117,112,105,116,97,108,121,115,104,97,114,112,109,105,110,111,114,116,97,115,116,101,119,97,110,116,115,116,104,105,115,46,114,101,115,101,116,119,104,101,101,108,103,105,114,108,115,47,99,115,115,47,49,48,48,37,59,99,108,117,98,115,115,116,117,102,102,98,105,98,108,101,118,111,116,101,115,32,49,48,48,48,107,111,114,101,97,125,41,59,13,10,98,97,110,100,115,113,117,101,117,101,61,32,123,125,59,56,48,112,120,59,99,107,105,110,103,123,13,10,9,9,97,104,101,97,100,99,108,111,99,107,105,114,105,115,104,108,105,107,101,32,114,97,116,105,111,115,116,97,116,115,70,111,114,109,34,121,97,104,111,111,41,91,48,93,59,65,98,111,117,116,102,105,110,100,115,60,47,104,49,62,100,101,98,117,103,116,97,115,107,115,85,82,76,32,61,99,101,108,108,115,125,41,40,41,59,49,50,112,120,59,112,114,105,109,101,116,101,108,108,115,116,117,114,110,115,48,120,54,48,48,46,106,112,103,34,115,112,97,105,110,98,101,97,99,104,116,97,120,101,115,109,105,99,114,111,97,110,103,101,108,45,45,62,60,47,103,105,102,116,115,115,116,101,118,101,45,108,105,110,107,98,111,100,121,46,125,41,59,10,9,109,111,117,110,116,32,40,49,57,57,70,65,81,60,47,114,111,103,101,114,102,114,97,110,107,67,108,97,115,115,50,56,112,120,59,102,101,101,100,115,60,104,49,62,60,115,99,111,116,116,116,101,115,116,115,50,50,112,120,59,100,114,105,110,107,41,32,124,124,32,108,101,119,105,115,115,104,97,108,108,35,48,51,57,59,32,102,111,114,32,108,111,118,101,100,119,97,115,116,101,48,48,112,120,59,106,97,58,227,130,115,105,109,111,110,60,102,111,110,116,114,101,112,108,121,109,101,101,116,115,117,110,116,101,114,99,104,101,97,112,116,105,103,104,116,66,114,97,110,100,41,32,33,61,32,100,114,101,115,115,99,108,105,112,115,114,111,111,109,115,111,110,107,101,121,109,111,98,105,108,109,97,105,110,46,78,97,109,101,32,112,108,97,116,101,102,117,110,110,121,116,114,101,101,115,99,111,109,47,34,49,46,106,112,103,119,109,111,100,101,112,97,114,97,109,83,84,65,82,84,108,101,102,116,32,105,100,100,101,110,44,32,50,48,49,41,59,10,125,10,102,111,114,109,46,118,105,114,117,115,99,104,97,105,114,116,114,97,110,115,119,111,114,115,116,80,97,103,101,115,105,116,105,111,110,112,97,116,99,104,60,33,45,45,10,111,45,99,97,99,102,105,114,109,115,116,111,117,114,115,44,48,48,48,32,97,115,105,97,110,105,43,43,41,123,97,100,111,98,101,39,41,91,48,93,105,100,61,49,48,98,111,116,104,59,109,101,110,117,32,46,50,46,109,105,46,112,110,103,34,107,101,118,105,110,99,111,97,99,104,67,104,105,108,100,98,114,117,99,101,50,46,106,112,103,85,82,76,41,43,46,106,112,103,124,115,117,105,116,101,115,108,105,99,101,104,97,114,114,121,49,50,48,34,32,115,119,101,101,116,116,114,62,13,10,110,97,109,101,61,100,105,101,103,111,112,97,103,101,32,115,119,105,115,115,45,45,62,10,10,35,102,102,102,59,34,62,76,111,103,46,99,111,109,34,116,114,101,97,116,115,104,101,101,116,41,32,38,38,32,49,52,112,120,59,115,108,101,101,112,110,116,101,110,116,102,105,108,101,100,106,97,58,227,131,105,100,61,34,99,78,97,109,101,34,119,111,114,115,101,115,104,111,116,115,45,98,111,120,45,100,101,108,116,97,10,38,108,116,59,98,101,97,114,115,58,52,56,90,60,100,97,116,97,45,114,117,114,97,108,60,47,97,62,32,115,112,101,110,100,98,97,107,101,114,115,104,111,112,115,61,32,34,34,59,112,104,112,34,62,99,116,105,111,110,49,51,112,120,59,98,114,105,97,110,104,101,108,108,111,115,105,122,101,61,111,61,37,50,70,32,106,111,105,110,109,97,121,98,101,60,105,109,103,32,105,109,103,34,62,44,32,102,106,115,105,109,103,34,32,34,41,91,48,93,77,84,111,112,66,84,121,112,101,34,110,101,119,108,121,68,97,110,115,107,99,122,101,99,104,116,114,97,105,108,107,110,111,119,115,60,47,104,53,62,102,97,113,34,62,122,104,45,99,110,49,48,41,59,10,45,49,34,41,59,116,121,112,101,61,98,108,117,101,115,116,114,117,108,121,100,97,118,105,115,46,106,115,39,59,62,13,10,60,33,115,116,101,101,108,32,121,111,117,32,104,50,62,13,10,102,111,114,109,32,106,101,115,117,115,49,48,48,37,32,109,101,110,117,46,13,10,9,13,10,119,97,108,101,115,114,105,115,107,115,117,109,101,110,116,100,100,105,110,103,98,45,108,105,107,116,101,97,99,104,103,105,102,34,32,118,101,103,97,115,100,97,110,115,107,101,101,115,116,105,115,104,113,105,112,115,117,111,109,105,115,111,98,114,101,100,101,115,100,101,101,110,116,114,101,116,111,100,111,115,112,117,101,100,101,97,195,177,111,115,101,115,116,195,161,116,105,101,110,101,104,97,115,116,97,111,116,114,111,115,112,97,114,116,101,100,111,110,100,101,110,117,101,118,111,104,97,99,101,114,102,111,114,109,97,109,105,115,109,111,109,101,106,111,114,109,117,110,100,111,97,113,117,195,173,100,195,173,97,115,115,195,179,108,111,97,121,117,100,97,102,101,99,104,97,116,111,100,97,115,116,97,110,116,111,109,101,110,111,115,100,97,116,111,115,111,116,114,97,115,115,105,116,105,111,109,117,99,104,111,97,104,111,114,97,108,117,103,97,114,109,97,121,111,114,101,115,116,111,115,104,111,114,97,115,116,101,110,101,114,97,110,116,101,115,102,111,116,111,115,101,115,116,97,115,112,97,195,173,115,110,117,101,118,97,115,97,108,117,100,102,111,114,111,115,109,101,100,105,111,113,117,105,101,110,109,101,115,101,115,112,111,100,101,114,99,104,105,108,101,115,101,114,195,161,118,101,99,101,115,100,101,99,105,114,106,111,115,195,169,101,115,116,97,114,118,101,110,116,97,103,114,117,112,111,104,101,99,104,111,101,108,108,111,115,116,101,110,103,111,97,109,105,103,111,99,111,115,97,115,110,105,118,101,108,103,101,110,116,101,109,105,115,109,97,97,105,114,101,115,106,117,108,105,111,116,101,109,97,115,104,97,99,105,97,102,97,118,111,114,106,117,110,105,111,108,105,98,114,101,112,117,110,116,111,98,117,101,110,111,97,117,116,111,114,97,98,114,105,108,98,117,101,110,97,116,101,120,116,111,109,97,114,122,111,115,97,98,101,114,108,105,115,116,97,108,117,101,103,111,99,195,179,109,111,101,110,101,114,111,106,117,101,103,111,112,101,114,195,186,104,97,98,101,114,101,115,116,111,121,110,117,110,99,97,109,117,106,101,114,118,97,108,111,114,102,117,101,114,97,108,105,98,114,111,103,117,115,116,97,105,103,117,97,108,118,111,116,111,115,99,97,115,111,115,103,117,195,173,97,112,117,101,100,111,115,111,109,111,115,97,118,105,115,111,117,115,116,101,100,100,101,98,101,110,110,111,99,104,101,98,117,115,99,97,102,97,108,116,97,101,117,114,111,115,115,101,114,105,101,100,105,99,104,111,99,117,114,115,111,99,108,97,118,101,99,97,115,97,115,108,101,195,179,110,112,108,97,122,111,108,97,114,103,111,111,98,114,97,115,118,105,115,116,97,97,112,111,121,111,106,117,110,116,111,116,114,97,116,97,118,105,115,116,111,99,114,101,97,114,99,97,109,112,111,104,101,109,111,115,99,105,110,99,111,99,97,114,103,111,112,105,115,111,115,111,114,100,101,110,104,97,99,101,110,195,161,114,101,97,100,105,115,99,111,112,101,100,114,111,99,101,114,99,97,112,117,101,100,97,112,97,112,101,108,109,101,110,111,114,195,186,116,105,108,99,108,97,114,111,106,111,114,103,101,99,97,108,108,101,112,111,110,101,114,116,97,114,100,101,110,97,100,105,101,109,97,114,99,97,115,105,103,117,101,101,108,108,97,115,115,105,103,108,111,99,111,99,104,101,109,111,116,111,115,109,97,100,114,101,99,108,97,115,101,114,101,115,116,111,110,105,195,177,111,113,117,101,100,97,112,97,115,97,114,98,97,110,99,111,104,105,106,111,115,118,105,97,106,101,112,97,98,108,111,195,169,115,116,101,118,105,101,110,101,114,101,105,110,111,100,101,106,97,114,102,111,110,100,111,99,97,110,97,108,110,111,114,116,101,108,101,116,114,97,99,97,117,115,97,116,111,109,97,114,109,97,110,111,115,108,117,110,101,115,97,117,116,111,115,118,105,108,108,97,118,101,110,100,111,112,101,115,97,114,116,105,112,111,115,116,101,110,103,97,109,97,114,99,111,108,108,101,118,97,112,97,100,114,101,117,110,105,100,111,118,97,109,111,115,122,111,110,97,115,97,109,98,111,115,98,97,110,100,97,109,97,114,105,97,97,98,117,115,111,109,117,99,104,97,115,117,98,105,114,114,105,111,106,97,118,105,118,105,114,103,114,97,100,111,99,104,105,99,97,97,108,108,195,173,106,111,118,101,110,100,105,99,104,97,101,115,116,97,110,116,97,108,101,115,115,97,108,105,114,115,117,101,108,111,112,101,115,111,115,102,105,110,101,115,108,108,97,109,97,98,117,115,99,111,195,169,115,116,97,108,108,101,103,97,110,101,103,114,111,112,108,97,122,97,104,117,109,111,114,112,97,103,97,114,106,117,110,116,97,100,111,98,108,101,105,115,108,97,115,98,111,108,115,97,98,97,195,177,111,104,97,98,108,97,108,117,99,104,97,195,129,114,101,97,100,105,99,101,110,106,117,103,97,114,110,111,116,97,115,118,97,108,108,101,97,108,108,195,161,99,97,114,103,97,100,111,108,111,114,97,98,97,106,111,101,115,116,195,169,103,117,115,116,111,109,101,110,116,101,109,97,114,105,111,102,105,114,109,97,99,111,115,116,111,102,105,99,104,97,112,108,97,116,97,104,111,103,97,114,97,114,116,101,115,108,101,121,101,115,97,113,117,101,108,109,117,115,101,111,98,97,115,101,115,112,111,99,111,115,109,105,116,97,100,99,105,101,108,111,99,104,105,99,111,109,105,101,100,111,103,97,110,97,114,115,97,110,116,111,101,116,97,112,97,100,101,98,101,115,112,108,97,121,97,114,101,100,101,115,115,105,101,116,101,99,111,114,116,101,99,111,114,101,97,100,117,100,97,115,100,101,115,101,111,118,105,101,106,111,100,101,115,101,97,97,103,117,97,115,38,113,117,111,116,59,100,111,109,97,105,110,99,111,109,109,111,110,115,116,97,116,117,115,101,118,101,110,116,115,109,97,115,116,101,114,115,121,115,116,101,109,97,99,116,105,111,110,98,97,110,110,101,114,114,101,109,111,118,101,115,99,114,111,108,108,117,112,100,97,116,101,103,108,111,98,97,108,109,101,100,105,117,109,102,105,108,116,101,114,110,117,109,98,101,114,99,104,97,110,103,101,114,101,115,117,108,116,112,117,98,108,105,99,115,99,114,101,101,110,99,104,111,111,115,101,110,111,114,109,97,108,116,114,97,118,101,108,105,115,115,117,101,115,115,111,117,114,99,101,116,97,114,103,101,116,115,112,114,105,110,103,109,111,100,117,108,101,109,111,98,105,108,101,115,119,105,116,99,104,112,104,111,116,111,115,98,111,114,100,101,114,114,101,103,105,111,110,105,116,115,101,108,102,115,111,99,105,97,108,97,99,116,105,118,101,99,111,108,117,109,110,114,101,99,111,114,100,102,111,108,108,111,119,116,105,116,108,101,62,101,105,116,104,101,114,108,101,110,103,116,104,102,97,109,105,108,121,102,114,105,101,110,100,108,97,121,111,117,116,97,117,116,104,111,114,99,114,101,97,116,101,114,101,118,105,101,119,115,117,109,109,101,114,115,101,114,118,101,114,112,108,97,121,101,100,112,108,97,121,101,114,101,120,112,97,110,100,112,111,108,105,99,121,102,111,114,109,97,116,100,111,117,98,108,101,112,111,105,110,116,115,115,101,114,105,101,115,112,101,114,115,111,110,108,105,118,105,110,103,100,101,115,105,103,110,109,111,110,116,104,115,102,111,114,99,101,115,117,110,105,113,117,101,119,101,105,103,104,116,112,101,111,112,108,101,101,110,101,114,103,121,110,97,116,117,114,101,115,101,97,114,99,104,102,105,103,117,114,101,104,97,118,105,110,103,99,117,115,116,111,109,111,102,102,115,101,116,108,101,116,116,101,114,119,105,110,100,111,119,115,117,98,109,105,116,114,101,110,100,101,114,103,114,111,117,112,115,117,112,108,111,97,100,104,101,97,108,116,104,109,101,116,104,111,100,118,105,100,101,111,115,115,99,104,111,111,108,102,117,116,117,114,101,115,104,97,100,111,119,100,101,98,97,116,101,118,97,108,117,101,115,79,98,106,101,99,116,111,116,104,101,114,115,114,105,103,104,116,115,108,101,97,103,117,101,99,104,114,111,109,101,115,105,109,112,108,101,110,111,116,105,99,101,115,104,97,114,101,100,101,110,100,105,110,103,115,101,97,115,111,110,114,101,112,111,114,116,111,110,108,105,110,101,115,113,117,97,114,101,98,117,116,116,111,110,105,109,97,103,101,115,101,110,97,98,108,101,109,111,118,105,110,103,108,97,116,101,115,116,119,105,110,116,101,114,70,114,97,110,99,101,112,101,114,105,111,100,115,116,114,111,110,103,114,101,112,101,97,116,76,111,110,100,111,110,100,101,116,97,105,108,102,111,114,109,101,100,100,101,109,97,110,100,115,101,99,117,114,101,112,97,115,115,101,100,116,111,103,103,108,101,112,108,97,99,101,115,100,101,118,105,99,101,115,116,97,116,105,99,99,105,116,105,101,115,115,116,114,101,97,109,121,101,108,108,111,119,97,116,116,97,99,107,115,116,114,101,101,116,102,108,105,103,104,116,104,105,100,100,101,110,105,110,102,111,34,62,111,112,101,110,101,100,117,115,101,102,117,108,118,97,108,108,101,121,99,97,117,115,101,115,108,101,97,100,101,114,115,101,99,114,101,116,115,101,99,111,110,100,100,97,109,97,103,101,115,112,111,114,116,115,101,120,99,101,112,116,114,97,116,105,110,103,115,105,103,110,101,100,116,104,105,110,103,115,101,102,102,101,99,116,102,105,101,108,100,115,115,116,97,116,101,115,111,102,102,105,99,101,118,105,115,117,97,108,101,100,105,116,111,114,118,111,108,117,109,101,82,101,112,111,114,116,109,117,115,101,117,109,109,111,118,105,101,115,112,97,114,101,110,116,97,99,99,101,115,115,109,111,115,116,108,121,109,111,116,104,101,114,34,32,105,100,61,34,109,97,114,107,101,116,103,114,111,117,110,100,99,104,97,110,99,101,115,117,114,118,101,121,98,101,102,111,114,101,115,121,109,98,111,108,109,111,109,101,110,116,115,112,101,101,99,104,109,111,116,105,111,110,105,110,115,105,100,101,109,97,116,116,101,114,67,101,110,116,101,114,111,98,106,101,99,116,101,120,105,115,116,115,109,105,100,100,108,101,69,117,114,111,112,101,103,114,111,119,116,104,108,101,103,97,99,121,109,97,110,110,101,114,101,110,111,117,103,104,99,97,114,101,101,114,97,110,115,119,101,114,111,114,105,103,105,110,112,111,114,116,97,108,99,108,105,101,110,116,115,101,108,101,99,116,114,97,110,100,111,109,99,108,111,115,101,100,116,111,112,105,99,115,99,111,109,105,110,103,102,97,116,104,101,114,111,112,116,105,111,110,115,105,109,112,108,121,114,97,105,115,101,100,101,115,99,97,112,101,99,104,111,115,101,110,99,104,117,114,99,104,100,101,102,105,110,101,114,101,97,115,111,110,99,111,114,110,101,114,111,117,116,112,117,116,109,101,109,111,114,121,105,102,114,97,109,101,112,111,108,105,99,101,109,111,100,101,108,115,78,117,109,98,101,114,100,117,114,105,110,103,111,102,102,101,114,115,115,116,121,108,101,115,107,105,108,108,101,100,108,105,115,116,101,100,99,97,108,108,101,100,115,105,108,118,101,114,109,97,114,103,105,110,100,101,108,101,116,101,98,101,116,116,101,114,98,114,111,119,115,101,108,105,109,105,116,115,71,108,111,98,97,108,115,105,110,103,108,101,119,105,100,103,101,116,99,101,110,116,101,114,98,117,100,103,101,116,110,111,119,114,97,112,99,114,101,100,105,116,99,108,97,105,109,115,101,110,103,105,110,101,115,97,102,101,116,121,99,104,111,105,99,101,115,112,105,114,105,116,45,115,116,121,108,101,115,112,114,101,97,100,109,97,107,105,110,103,110,101,101,100,101,100,114,117,115,115,105,97,112,108,101,97,115,101,101,120,116,101,110,116,83,99,114,105,112,116,98,114,111,107,101,110,97,108,108,111,119,115,99,104,97,114,103,101,100,105,118,105,100,101,102,97,99,116,111,114,109,101,109,98,101,114,45,98,97,115,101,100,116,104,101,111,114,121,99,111,110,102,105,103,97,114,111,117,110,100,119,111,114,107,101,100,104,101,108,112,101,100,67,104,117,114,99,104,105,109,112,97,99,116,115,104,111,117,108,100,97,108,119,97,121,115,108,111,103,111,34,32,98,111,116,116,111,109,108,105,115,116,34,62,41,123,118,97,114,32,112,114,101,102,105,120,111,114,97,110,103,101,72,101,97,100,101,114,46,112,117,115,104,40,99,111,117,112,108,101,103,97,114,100,101,110,98,114,105,100,103,101,108,97,117,110,99,104,82,101,118,105,101,119,116,97,107,105,110,103,118,105,115,105,111,110,108,105,116,116,108,101,100,97,116,105,110,103,66,117,116,116,111,110,98,101,97,117,116,121,116,104,101,109,101,115,102,111,114,103,111,116,83,101,97,114,99,104,97,110,99,104,111,114,97,108,109,111,115,116,108,111,97,100,101,100,67,104,97,110,103,101,114,101,116,117,114,110,115,116,114,105,110,103,114,101,108,111,97,100,77,111,98,105,108,101,105,110,99,111,109,101,115,117,112,112,108,121,83,111,117,114,99,101,111,114,100,101,114,115,118,105,101,119,101,100,38,110,98,115,112,59,99,111,117,114,115,101,65,98,111,117,116,32,105,115,108,97,110,100,60,104,116,109,108,32,99,111,111,107,105,101,110,97,109,101,61,34,97,109,97,122,111,110,109,111,100,101,114,110,97,100,118,105,99,101,105,110,60,47,97,62,58,32,84,104,101,32,100,105,97,108,111,103,104,111,117,115,101,115,66,69,71,73,78,32,77,101,120,105,99,111,115,116,97,114,116,115,99,101,110,116,114,101,104,101,105,103,104,116,97,100,100,105,110,103,73,115,108,97,110,100,97,115,115,101,116,115,69,109,112,105,114,101,83,99,104,111,111,108,101,102,102,111,114,116,100,105,114,101,99,116,110,101,97,114,108,121,109,97,110,117,97,108,83,101,108,101,99,116,46,10,10,79,110,101,106,111,105,110,101,100,109,101,110,117,34,62,80,104,105,108,105,112,97,119,97,114,100,115,104,97,110,100,108,101,105,109,112,111,114,116,79,102,102,105,99,101,114,101,103,97,114,100,115,107,105,108,108,115,110,97,116,105,111,110,83,112,111,114,116,115,100,101,103,114,101,101,119,101,101,107,108,121,32,40,101,46,103,46,98,101,104,105,110,100,100,111,99,116,111,114,108,111,103,103,101,100,117,110,105,116,101,100,60,47,98,62,60,47,98,101,103,105,110,115,112,108,97,110,116,115,97,115,115,105,115,116,97,114,116,105,115,116,105,115,115,117,101,100,51,48,48,112,120,124,99,97,110,97,100,97,97,103,101,110,99,121,115,99,104,101,109,101,114,101,109,97,105,110,66,114,97,122,105,108,115,97,109,112,108,101,108,111,103,111,34,62,98,101,121,111,110,100,45,115,99,97,108,101,97,99,99,101,112,116,115,101,114,118,101,100,109,97,114,105,110,101,70,111,111,116,101,114,99,97,109,101,114,97,60,47,104,49,62,10,95,102,111,114,109,34,108,101,97,118,101,115,115,116,114,101,115,115,34,32,47,62,13,10,46,103,105,102,34,32,111,110,108,111,97,100,108,111,97,100,101,114,79,120,102,111,114,100,115,105,115,116,101,114,115,117,114,118,105,118,108,105,115,116,101,110,102,101,109,97,108,101,68,101,115,105,103,110,115,105,122,101,61,34,97,112,112,101,97,108,116,101,120,116,34,62,108,101,118,101,108,115,116,104,97,110,107,115,104,105,103,104,101,114,102,111,114,99,101,100,97,110,105,109,97,108,97,110,121,111,110,101,65,102,114,105,99,97,97,103,114,101,101,100,114,101,99,101,110,116,80,101,111,112,108,101,60,98,114,32,47,62,119,111,110,100,101,114,112,114,105,99,101,115,116,117,114,110,101,100,124,124,32,123,125,59,109,97,105,110,34,62,105,110,108,105,110,101,115,117,110,100,97,121,119,114,97,112,34,62,102,97,105,108,101,100,99,101,110,115,117,115,109,105,110,117,116,101,98,101,97,99,111,110,113,117,111,116,101,115,49,53,48,112,120,124,101,115,116,97,116,101,114,101,109,111,116,101,101,109,97,105,108,34,108,105,110,107,101,100,114,105,103,104,116,59,115,105,103,110,97,108,102,111,114,109,97,108,49,46,104,116,109,108,115,105,103,110,117,112,112,114,105,110,99,101,102,108,111,97,116,58,46,112,110,103,34,32,102,111,114,117,109,46,65,99,99,101,115,115,112,97,112,101,114,115,115,111,117,110,100,115,101,120,116,101,110,100,72,101,105,103,104,116,115,108,105,100,101,114,85,84,70,45,56,34,38,97,109,112,59,32,66,101,102,111,114,101,46,32,87,105,116,104,115,116,117,100,105,111,111,119,110,101,114,115,109,97,110,97,103,101,112,114,111,102,105,116,106,81,117,101,114,121,97,110,110,117,97,108,112,97,114,97,109,115,98,111,117,103,104,116,102,97,109,111,117,115,103,111,111,103,108,101,108,111,110,103,101,114,105,43,43,41,32,123,105,115,114,97,101,108,115,97,121,105,110,103,100,101,99,105,100,101,104,111,109,101,34,62,104,101,97,100,101,114,101,110,115,117,114,101,98,114,97,110,99,104,112,105,101,99,101,115,98,108,111,99,107,59,115,116,97,116,101,100,116,111,112,34,62,60,114,97,99,105,110,103,114,101,115,105,122,101,45,45,38,103,116,59,112,97,99,105,116,121,115,101,120,117,97,108,98,117,114,101,97,117,46,106,112,103,34,32,49,48,44,48,48,48,111,98,116,97,105,110,116,105,116,108,101,115,97,109,111,117,110,116,44,32,73,110,99,46,99,111,109,101,100,121,109,101,110,117,34,32,108,121,114,105,99,115,116,111,100,97,121,46,105,110,100,101,101,100,99,111,117,110,116,121,95,108,111,103,111,46,70,97,109,105,108,121,108,111,111,107,101,100,77,97,114,107,101,116,108,115,101,32,105,102,80,108,97,121,101,114,116,117,114,107,101,121,41,59,118,97,114,32,102,111,114,101,115,116,103,105,118,105,110,103,101,114,114,111,114,115,68,111,109,97,105,110,125,101,108,115,101,123,105,110,115,101,114,116,66,108,111,103,60,47,102,111,111,116,101,114,108,111,103,105,110,46,102,97,115,116,101,114,97,103,101,110,116,115,60,98,111,100,121,32,49,48,112,120,32,48,112,114,97,103,109,97,102,114,105,100,97,121,106,117,110,105,111,114,100,111,108,108,97,114,112,108,97,99,101,100,99,111,118,101,114,115,112,108,117,103,105,110,53,44,48,48,48,32,112,97,103,101,34,62,98,111,115,116,111,110,46,116,101,115,116,40,97,118,97,116,97,114,116,101,115,116,101,100,95,99,111,117,110,116,102,111,114,117,109,115,115,99,104,101,109,97,105,110,100,101,120,44,102,105,108,108,101,100,115,104,97,114,101,115,114,101,97,100,101,114,97,108,101,114,116,40,97,112,112,101,97,114,83,117,98,109,105,116,108,105,110,101,34,62,98,111,100,121,34,62,10,42,32,84,104,101,84,104,111,117,103,104,115,101,101,105,110,103,106,101,114,115,101,121,78,101,119,115,60,47,118,101,114,105,102,121,101,120,112,101,114,116,105,110,106,117,114,121,119,105,100,116,104,61,67,111,111,107,105,101,83,84,65,82,84,32,97,99,114,111,115,115,95,105,109,97,103,101,116,104,114,101,97,100,110,97,116,105,118,101,112,111,99,107,101,116,98,111,120,34,62,10,83,121,115,116,101,109,32,68,97,118,105,100,99,97,110,99,101,114,116,97,98,108,101,115,112,114,111,118,101,100,65,112,114,105,108,32,114,101,97,108,108,121,100,114,105,118,101,114,105,116,101,109,34,62,109,111,114,101,34,62,98,111,97,114,100,115,99,111,108,111,114,115,99,97,109,112,117,115,102,105,114,115,116,32,124,124,32,91,93,59,109,101,100,105,97,46,103,117,105,116,97,114,102,105,110,105,115,104,119,105,100,116,104,58,115,104,111,119,101,100,79,116,104,101,114,32,46,112,104,112,34,32,97,115,115,117,109,101,108,97,121,101,114,115,119,105,108,115,111,110,115,116,111,114,101,115,114,101,108,105,101,102,115,119,101,100,101,110,67,117,115,116,111,109,101,97,115,105,108,121,32,121,111,117,114,32,83,116,114,105,110,103,10,10,87,104,105,108,116,97,121,108,111,114,99,108,101,97,114,58,114,101,115,111,114,116,102,114,101,110,99,104,116,104,111,117,103,104,34,41,32,43,32,34,60,98,111,100,121,62,98,117,121,105,110,103,98,114,97,110,100,115,77,101,109,98,101,114,110,97,109,101,34,62,111,112,112,105,110,103,115,101,99,116,111,114,53,112,120,59,34,62,118,115,112,97,99,101,112,111,115,116,101,114,109,97,106,111,114,32,99,111,102,102,101,101,109,97,114,116,105,110,109,97,116,117,114,101,104,97,112,112,101,110,60,47,110,97,118,62,107,97,110,115,97,115,108,105,110,107,34,62,73,109,97,103,101,115,61,102,97,108,115,101,119,104,105,108,101,32,104,115,112,97,99,101,48,38,97,109,112,59,32,10,10,73,110,32,32,112,111,119,101,114,80,111,108,115,107,105,45,99,111,108,111,114,106,111,114,100,97,110,66,111,116,116,111,109,83,116,97,114,116,32,45,99,111,117,110,116,50,46,104,116,109,108,110,101,119,115,34,62,48,49,46,106,112,103,79,110,108,105,110,101,45,114,105,103,104,116,109,105,108,108,101,114,115,101,110,105,111,114,73,83,66,78,32,48,48,44,48,48,48,32,103,117,105,100,101,115,118,97,108,117,101,41,101,99,116,105,111,110,114,101,112,97,105,114,46,120,109,108,34,32,32,114,105,103,104,116,115,46,104,116,109,108,45,98,108,111,99,107,114,101,103,69,120,112,58,104,111,118,101,114,119,105,116,104,105,110,118,105,114,103,105,110,112,104,111,110,101,115,60,47,116,114,62,13,117,115,105,110,103,32,10,9,118,97,114,32,62,39,41,59,10,9,60,47,116,100,62,10,60,47,116,114,62,10,98,97,104,97,115,97,98,114,97,115,105,108,103,97,108,101,103,111,109,97,103,121,97,114,112,111,108,115,107,105,115,114,112,115,107,105,216,177,216,175,217,136,228,184,173,230,150,135,231,174,128,228,189,147,231,185,129,233,171,148,228,191,161,230,129,175,228,184,173,229,155,189,230,136,145,228,187,172,228,184,128,228,184,170,229,133,172,229,143,184,231,174,161,231,144,134,232,174,186,229,157,155,229,143,175,228,187,165,230,156,141,229,138,161,230,151,182,233,151,180,228,184,170,228,186,186,228,186,167,229,147,129,232,135,170,229,183,177,228,188,129,228,184,154,230,159,165,231,156,139,229,183,165,228,189,156,232,129,148,231,179,187,230,178,161,230,156,137,231,189,145,231,171,153,230,137,128,230,156,137,232,175,132,232,174,186,228,184,173,229,191,131,230,150,135,231,171,160,231,148,168,230,136,183,233,166,150,233,161,181,228,189,156,232,128,133,230,138,128,230,156,175,233,151,174,233,162,152,231,155,184,229,133,179,228,184,139,232,189,189,230,144,156,231,180,162,228,189,191,231,148,168,232,189,175,228,187,182,229,156,168,231,186,191,228,184,187,233,162,152,232,181,132,230,150,153,232,167,134,233,162,145,229,155,158,229,164,141,230,179,168,229,134,140,231,189,145,231,187,156,230,148,182,232,151,143,229,134,133,229,174,185,230,142,168,232,141,144,229,184,130,229,156,186,230,182,136,230,129,175,231,169,186,233,151,180,229,143,145,229,184,131,228,187,128,228,185,136,229,165,189,229,143,139,231,148,159,230,180,187,229,155,190,231,137,135,229,143,145,229,177,149,229,166,130,230,158,156,230,137,139,230,156,186,230,150,176,233,151,187,230,156,128,230,150,176,230,150,185,229,188,143,229,140,151,228,186,172,230,143,144,228,190,155,229,133,179,228,186,142,230,155,180,229,164,154,232,191,153,228,184,170,231,179,187,231,187,159,231,159,165,233,129,147,230,184,184,230,136,143,229,185,191,229,145,138,229,133,182,228,187,150,229,143,145,232,161,168,229,174,137,229,133,168,231,172,172,228,184,128,228,188,154,229,145,152,232,191,155,232,161,140,231,130,185,229,135,187,231,137,136,230,157,131,231,148,181,229,173,144,228,184,150,231,149,140,232,174,190,232,174,161,229,133,141,232,180,185,230,149,153,232,130,178,229,138,160,229,133,165,230,180,187,229,138,168,228,187,150,228,187,172,229,149,134,229,147,129,229,141,154,229,174,162,231,142,176,229,156,168,228,184,138,230,181,183,229,166,130,228,189,149,229,183,178,231,187,143,231,149,153,232,168,128,232,175,166,231,187,134,231,164,190,229,140,186,231,153,187,229,189,149,230,156,172,231,171,153,233,156,128,232,166,129,228,187,183,230,160,188,230,148,175,230,140,129,229,155,189,233,153,133,233,147,190,230,142,165,229,155,189,229,174,182,229,187,186,232,174,190,230,156,139,229,143,139,233,152,133,232,175,187,230,179,149,229,190,139,228,189,141,231,189,174,231,187,143,230,181,142,233,128,137,230,139,169,232,191,153,230,160,183,229,189,147,229,137,141,229,136,134,231,177,187,230,142,146,232,161,140,229,155,160,228,184,186,228,186,164,230,152,147,230,156,128,229,144,142,233,159,179,228,185,144,228,184,141,232,131,189,233,128,154,232,191,135,232,161,140,228,184,154,231,167,145,230,138,128,229,143,175,232,131,189,232,174,190,229,164,135,229,144,136,228,189,156,229,164,167,229,174,182,231,164,190,228,188,154,231,160,148,231,169,182,228,184,147,228,184,154,229,133,168,233,131,168,233,161,185,231,155,174,232,191,153,233,135,140,232,191,152,230,152,175,229,188,128,229,167,139,230,131,133,229,134,181,231,148,181,232,132,145,230,150,135,228,187,182,229,147,129,231,137,140,229,184,174,229,138,169,230,150,135,229,140,150,232,181,132,230,186,144,229,164,167,229,173,166,229,173,166,228,185,160,229,156,176,229,157,128,230,181,143,232,167,136,230,138,149,232,181,132,229,183,165,231,168,139,232,166,129,230,177,130,230,128,142,228,185,136,230,151,182,229,128,153,229,138,159,232,131,189,228,184,187,232,166,129,231,155,174,229,137,141,232,181,132,232,174,175,229,159,142,229,184,130,230,150,185,230,179,149,231,148,181,229,189,177,230,139,155,232,129,152,229,163,176,230,152,142,228,187,187,228,189,149,229,129,165,229,186,183,230,149,176,230,141,174,231,190,142,229,155,189,230,177,189,232,189,166,228,187,139,231,187,141,228,189,134,230,152,175,228,186,164,230,181,129,231,148,159,228,186,167,230,137,128,228,187,165,231,148,181,232,175,157,230,152,190,231,164,186,228,184,128,228,186,155,229,141,149,228,189,141,228,186,186,229,145,152,229,136,134,230,158,144,229,156,176,229,155,190,230,151,133,230,184,184,229,183,165,229,133,183,229,173,166,231,148,159,231,179,187,229,136,151,231,189,145,229,143,139,229,184,150,229,173,144,229,175,134,231,160,129,233,162,145,233,129,147,230,142,167,229,136,182,229,156,176,229,140,186,229,159,186,230,156,172,229,133,168,229,155,189,231,189,145,228,184,138,233,135,141,232,166,129,231,172,172,228,186,140,229,150,156,230,172,162,232,191,155,229,133,165,229,143,139,230,131,133,232,191,153,228,186,155,232,128,131,232,175,149,229,143,145,231,142,176,229,159,185,232,174,173,228,187,165,228,184,138,230,148,191,229,186,156,230,136,144,228,184,186,231,142,175,229,162,131,233,166,153,230,184,175,229,144,140,230,151,182,229,168,177,228,185,144,229,143,145,233,128,129,228,184,128,229,174,154,229,188,128,229,143,145,228,189,156,229,147,129,230,160,135,229,135,134,230,172,162,232,191,142,232,167,163,229,134,179,229,156,176,230,150,185,228,184,128,228,184,139,228,187,165,229,143,138,232,180,163,228,187,187,230,136,150,232,128,133,229,174,162,230,136,183,228,187,163,232,161,168,231,167,175,229,136,134,229,165,179,228,186,186,230,149,176,231,160,129,233,148,128,229,148,174,229,135,186,231,142,176,231,166,187,231,186,191,229,186,148,231,148,168,229,136,151,232,161,168,228,184,141,229,144,140,231,188,150,232,190,145,231,187,159,232,174,161,230,159,165,232,175,162,228,184,141,232,166,129,230,156,137,229,133,179,230,156,186,230,158,132,229,190,136,229,164,154,230,146,173,230,148,190,231,187,132,231,187,135,230,148,191,231,173,150,231,155,180,230,142,165,232,131,189,229,138,155,230,157,165,230,186,144,230,153,130,233,150,147,231,156,139,229,136,176,231,131,173,233,151,168,229,133,179,233,148,174,228,184,147,229,140,186,233,157,158,229,184,184,232,139,177,232,175,173,231,153,190,229,186,166,229,184,140,230,156,155,231,190,142,229,165,179,230,175,148,232,190,131,231,159,165,232,175,134,232,167,132,229,174,154,229,187,186,232,174,174,233,131,168,233,151,168,230,132,143,232,167,129,231,178,190,229,189,169,230,151,165,230,156,172,230,143,144,233,171,152,229,143,145,232,168,128,230,150,185,233,157,162,229,159,186,233,135,145,229,164,132,231,144,134,230,157,131,233,153,144,229,189,177,231,137,135,233,147,182,232,161,140,232,191,152,230,156,137,229,136,134,228,186,171,231,137,169,229,147,129,231,187,143,232,144,165,230,183,187,229,138,160,228,184,147,229,174,182,232,191,153,231,167,141,232,175,157,233,162,152,232,181,183,230,157,165,228,184,154,229,138,161,229,133,172,229,145,138,232,174,176,229,189,149,231,174,128,228,187,139,232,180,168,233,135,143,231,148,183,228,186,186,229,189,177,229,147,141,229,188,149,231,148,168,230,138,165,229,145,138,233,131,168,229,136,134,229,191,171,233,128,159,229,146,168,232,175,162,230,151,182,229,176,154,230,179,168,230,132,143,231,148,179,232,175,183,229,173,166,230,160,161,229,186,148,232,175,165,229,142,134,229,143,178,229,143,170,230,152,175,232,191,148,229,155,158,232,180,173,228,185,176,229,144,141,231,167,176,228,184,186,228,186,134,230,136,144,229,138,159,232,175,180,230,152,142,228,190,155,229,186,148,229,173,169,229,173,144,228,184,147,233,162,152,231,168,139,229,186,143,228,184,128,232,136,172,230,156,131,229,147,161,229,143,170,230,156,137,229,133,182,229,174,131,228,191,157,230,138,164,232,128,140,228,184,148,228,187,138,229,164,169,231,170,151,229,143,163,229,138,168,230,128,129,231,138,182,230,128,129,231,137,185,229,136,171,232,174,164,228,184,186,229,191,133,233,161,187,230,155,180,230,150,176,229,176,143,232,175,180,230,136,145,229,128,145,228,189,156,228,184,186,229,170,146,228,189,147,229,140,133,230,139,172,233,130,163,228,185,136,228,184,128,230,160,183,229,155,189,229,134,133,230,152,175,229,144,166,230,160,185,230,141,174,231,148,181,232,167,134,229,173,166,233,153,162,229,133,183,230,156,137,232,191,135,231,168,139,231,148,177,228,186,142,228,186,186,230,137,141,229,135,186,230,157,165,228,184,141,232,191,135,230,173,163,229,156,168,230,152,142,230,152,159,230,149,133,228,186,139,229,133,179,231,179,187,230,160,135,233,162,152,229,149,134,229,138,161,232,190,147,229,133,165,228,184,128,231,155,180,229,159,186,231,161,128,230,149,153,229,173,166,228,186,134,232,167,163,229,187,186,231,173,145,231,187,147,230,158,156,229,133,168,231,144,131,233,128,154,231,159,165,232,174,161,229,136,146,229,175,185,228,186,142,232,137,186,230,156,175,231,155,184,229,134,140,229,143,145,231,148,159,231,156,159,231,154,132,229,187,186,231,171,139,231,173,137,231,186,167,231,177,187,229,158,139,231,187,143,233,170,140,229,174,158,231,142,176,229,136,182,228,189,156,230,157,165,232,135,170,230,160,135,231,173,190,228,187,165,228,184,139,229,142,159,229,136,155,230,151,160,230,179,149],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+71728);allocate([229,133,182,228,184,173,229,128,139,228,186,186,228,184,128,229,136,135,230,140,135,229,141,151,229,133,179,233,151,173,233,155,134,229,155,162,231,172,172,228,184,137,229,133,179,230,179,168,229,155,160,230,173,164,231,133,167,231,137,135,230,183,177,229,156,179,229,149,134,228,184,154,229,185,191,229,183,158,230,151,165,230,156,159,233,171,152,231,186,167,230,156,128,232,191,145,231,187,188,229,144,136,232,161,168,231,164,186,228,184,147,232,190,145,232,161,140,228,184,186,228,186,164,233,128,154,232,175,132,228,187,183,232,167,137,229,190,151,231,178,190,229,141,142,229,174,182,229,186,173,229,174,140,230,136,144,230,132,159,232,167,137,229,174,137,232,163,133,229,190,151,229,136,176,233,130,174,228,187,182,229,136,182,229,186,166,233,163,159,229,147,129,232,153,189,231,132,182,232,189,172,232,189,189,230,138,165,228,187,183,232,174,176,232,128,133,230,150,185,230,161,136,232,161,140,230,148,191,228,186,186,230,176,145,231,148,168,229,147,129,228,184,156,232,165,191,230,143,144,229,135,186,233,133,146,229,186,151,231,132,182,229,144,142,228,187,152,230,172,190,231,131,173,231,130,185,228,187,165,229,137,141,229,174,140,229,133,168,229,143,145,229,184,150,232,174,190,231,189,174,233,162,134,229,175,188,229,183,165,228,184,154,229,140,187,233,153,162,231,156,139,231,156,139,231,187,143,229,133,184,229,142,159,229,155,160,229,185,179,229,143,176,229,144,132,231,167,141,229,162,158,229,138,160,230,157,144,230,150,153,230,150,176,229,162,158,228,185,139,229,144,142,232,129,140,228,184,154,230,149,136,230,158,156,228,187,138,229,185,180,232,174,186,230,150,135,230,136,145,229,155,189,229,145,138,232,175,137,231,137,136,228,184,187,228,191,174,230,148,185,229,143,130,228,184,142,230,137,147,229,141,176,229,191,171,228,185,144,230,156,186,230,162,176,232,167,130,231,130,185,229,173,152,229,156,168,231,178,190,231,165,158,232,142,183,229,190,151,229,136,169,231,148,168,231,187,167,231,187,173,228,189,160,228,187,172,232,191,153,228,185,136,230,168,161,229,188,143,232,175,173,232,168,128,232,131,189,229,164,159,233,155,133,232,153,142,230,147,141,228,189,156,233,163,142,230,160,188,228,184,128,232,181,183,231,167,145,229,173,166,228,189,147,232,130,178,231,159,173,228,191,161,230,157,161,228,187,182,230,178,187,231,150,151,232,191,144,229,138,168,228,186,167,228,184,154,228,188,154,232,174,174,229,175,188,232,136,170,229,133,136,231,148,159,232,129,148,231,155,159,229,143,175,230,152,175,229,149,143,233,161,140,231,187,147,230,158,132,228,189,156,231,148,168,232,176,131,230,159,165,232,179,135,230,150,153,232,135,170,229,138,168,232,180,159,232,180,163,229,134,156,228,184,154,232,174,191,233,151,174,229,174,158,230,150,189,230,142,165,229,143,151,232,174,168,232,174,186,233,130,163,228,184,170,229,143,141,233,166,136,229,138,160,229,188,186,229,165,179,230,128,167,232,140,131,229,155,180,230,156,141,229,139,153,228,188,145,233,151,178,228,187,138,230,151,165,229,174,162,230,156,141,232,167,128,231,156,139,229,143,130,229,138,160,231,154,132,232,175,157,228,184,128,231,130,185,228,191,157,232,175,129,229,155,190,228,185,166,230,156,137,230,149,136,230,181,139,232,175,149,231,167,187,229,138,168,230,137,141,232,131,189,229,134,179,229,174,154,232,130,161,231,165,168,228,184,141,230,150,173,233,156,128,230,177,130,228,184,141,229,190,151,229,138,158,230,179,149,228,185,139,233,151,180,233,135,135,231,148,168,232,144,165,233,148,128,230,138,149,232,175,137,231,155,174,230,160,135,231,136,177,230,131,133,230,145,132,229,189,177,230,156,137,228,186,155,232,164,135,232,163,189,230,150,135,229,173,166,230,156,186,228,188,154,230,149,176,229,173,151,232,163,133,228,191,174,232,180,173,231,137,169,229,134,156,230,157,145,229,133,168,233,157,162,231,178,190,229,147,129,229,133,182,229,174,158,228,186,139,230,131,133,230,176,180,229,185,179,230,143,144,231,164,186,228,184,138,229,184,130,232,176,162,232,176,162,230,153,174,233,128,154,230,149,153,229,184,136,228,184,138,228,188,160,231,177,187,229,136,171,230,173,140,230,155,178,230,139,165,230,156,137,229,136,155,230,150,176,233,133,141,228,187,182,229,143,170,232,166,129,230,151,182,228,187,163,232,179,135,232,168,138,232,190,190,229,136,176,228,186,186,231,148,159,232,174,162,233,152,133,232,128,129,229,184,136,229,177,149,231,164,186,229,191,131,231,144,134,232,180,180,229,173,144,231,182,178,231,171,153,228,184,187,233,161,140,232,135,170,231,132,182,231,186,167,229,136,171,231,174,128,229,141,149,230,148,185,233,157,169,233,130,163,228,186,155,230,157,165,232,175,180,230,137,147,229,188,128,228,187,163,231,160,129,229,136,160,233,153,164,232,175,129,229,136,184,232,138,130,231,155,174,233,135,141,231,130,185,230,172,161,230,149,184,229,164,154,229,176,145,232,167,132,229,136,146,232,181,132,233,135,145,230,137,190,229,136,176,228,187,165,229,144,142,229,164,167,229,133,168,228,184,187,233,161,181,230,156,128,228,189,179,229,155,158,231,173,148,229,164,169,228,184,139,228,191,157,233,154,156,231,142,176,228,187,163,230,163,128,230,159,165,230,138,149,231,165,168,229,176,143,230,151,182,230,178,146,230,156,137,230,173,163,229,184,184,231,148,154,232,135,179,228,187,163,231,144,134,231,155,174,229,189,149,229,133,172,229,188,128,229,164,141,229,136,182,233,135,145,232,158,141,229,185,184,231,166,143,231,137,136,230,156,172,229,189,162,230,136,144,229,135,134,229,164,135,232,161,140,230,131,133,229,155,158,229,136,176,230,128,157,230,131,179,230,128,142,230,160,183,229,141,143,232,174,174,232,174,164,232,175,129,230,156,128,229,165,189,228,186,167,231,148,159,230,140,137,231,133,167,230,156,141,232,163,133,229,185,191,228,184,156,229,138,168,230,188,171,233,135,135,232,180,173,230,150,176,230,137,139,231,187,132,229,155,190,233,157,162,230,157,191,229,143,130,232,128,131,230,148,191,230,178,187,229,174,185,230,152,147,229,164,169,229,156,176,229,138,170,229,138,155,228,186,186,228,187,172,229,141,135,231,186,167,233,128,159,229,186,166,228,186,186,231,137,169,232,176,131,230,149,180,230,181,129,232,161,140,233,128,160,230,136,144,230,150,135,229,173,151,233,159,169,229,155,189,232,180,184,230,152,147,229,188,128,229,177,149,231,155,184,233,151,156,232,161,168,231,142,176,229,189,177,232,167,134,229,166,130,230,173,164,231,190,142,229,174,185,229,164,167,229,176,143,230,138,165,233,129,147,230,157,161,230,172,190,229,191,131,230,131,133,232,174,184,229,164,154,230,179,149,232,167,132,229,174,182,229,177,133,228,185,166,229,186,151,232,191,158,230,142,165,231,171,139,229,141,179,228,184,190,230,138,165,230,138,128,229,183,167,229,165,165,232,191,144,231,153,187,229,133,165,228,187,165,230,157,165,231,144,134,232,174,186,228,186,139,228,187,182,232,135,170,231,148,177,228,184,173,229,141,142,229,138,158,229,133,172,229,166,136,229,166,136,231,156,159,230,173,163,228,184,141,233,148,153,229,133,168,230,150,135,229,144,136,229,144,140,228,187,183,229,128,188,229,136,171,228,186,186,231,155,145,231,157,163,229,133,183,228,189,147,228,184,150,231,186,170,229,155,162,233,152,159,229,136,155,228,184,154,230,137,191,230,139,133,229,162,158,233,149,191,230,156,137,228,186,186,228,191,157,230,140,129,229,149,134,229,174,182,231,187,180,228,191,174,229,143,176,230,185,190,229,183,166,229,143,179,232,130,161,228,187,189,231,173,148,230,161,136,229,174,158,233,153,133,231,148,181,228,191,161,231,187,143,231,144,134,231,148,159,229,145,189,229,174,163,228,188,160,228,187,187,229,138,161,230,173,163,229,188,143,231,137,185,232,137,178,228,184,139,230,157,165,229,141,143,228,188,154,229,143,170,232,131,189,229,189,147,231,132,182,233,135,141,230,150,176,229,133,167,229,174,185,230,140,135,229,175,188,232,191,144,232,161,140,230,151,165,229,191,151,232,179,163,229,174,182,232,182,133,232,191,135,229,156,159,229,156,176,230,181,153,230,177,159,230,148,175,228,187,152,230,142,168,229,135,186,231,171,153,233,149,191,230,157,173,229,183,158,230,137,167,232,161,140,229,136,182,233,128,160,228,185,139,228,184,128,230,142,168,229,185,191,231,142,176,229,156,186,230,143,143,232,191,176,229,143,152,229,140,150,228,188,160,231,187,159,230,173,140,230,137,139,228,191,157,233,153,169,232,175,190,231,168,139,229,140,187,231,150,151,231,187,143,232,191,135,232,191,135,229,142,187,228,185,139,229,137,141,230,148,182,229,133,165,229,185,180,229,186,166,230,157,130,229,191,151,231,190,142,228,184,189,230,156,128,233,171,152,231,153,187,233,153,134,230,156,170,230,157,165,229,138,160,229,183,165,229,133,141,232,180,163,230,149,153,231,168,139,231,137,136,229,157,151,232,186,171,228,189,147,233,135,141,229,186,134,229,135,186,229,148,174,230,136,144,230,156,172,229,189,162,229,188,143,229,156,159,232,177,134,229,135,186,229,131,185,228,184,156,230,150,185,233,130,174,231,174,177,229,141,151,228,186,172,230,177,130,232,129,140,229,143,150,229,190,151,232,129,140,228,189,141,231,155,184,228,191,161,233,161,181,233,157,162,229,136,134,233,146,159,231,189,145,233,161,181,231,161,174,229,174,154,229,155,190,228,190,139,231,189,145,229,157,128,231,167,175,230,158,129,233,148,153,232,175,175,231,155,174,231,154,132,229,174,157,232,180,157,230,156,186,229,133,179,233,163,142,233,153,169,230,142,136,230,157,131,231,151,133,230,175,146,229,174,160,231,137,169,233,153,164,228,186,134,232,169,149,232,171,150,231,150,190,231,151,133,229,143,138,230,151,182,230,177,130,232,180,173,231,171,153,231,130,185,229,132,191,231,171,165,230,175,143,229,164,169,228,184,173,229,164,174,232,174,164,232,175,134,230,175,143,228,184,170,229,164,169,230,180,165,229,173,151,228,189,147,229,143,176,231,129,163,231,187,180,230,138,164,230,156,172,233,161,181,228,184,170,230,128,167,229,174,152,230,150,185,229,184,184,232,167,129,231,155,184,230,156,186,230,136,152,231,149,165,229,186,148,229,189,147,229,190,139,229,184,136,230,150,185,228,190,191,230,160,161,229,155,173,232,130,161,229,184,130,230,136,191,229,177,139,230,160,143,231,155,174,229,145,152,229,183,165,229,175,188,232,135,180,231,170,129,231,132,182,233,129,147,229,133,183,230,156,172,231,189,145,231,187,147,229,144,136,230,161,163,230,161,136,229,138,179,229,138,168,229,143,166,229,164,150,231,190,142,229,133,131,229,188,149,232,181,183,230,148,185,229,143,152,231,172,172,229,155,155,228,188,154,232,174,161,232,170,170,230,152,142,233,154,144,231,167,129,229,174,157,229,174,157,232,167,132,232,140,131,230,182,136,232,180,185,229,133,177,229,144,140,229,191,152,232,174,176,228,189,147,231,179,187,229,184,166,230,157,165,229,144,141,229,173,151,231,153,188,232,161,168,229,188,128,230,148,190,229,138,160,231,155,159,229,143,151,229,136,176,228,186,140,230,137,139,229,164,167,233,135,143,230,136,144,228,186,186,230,149,176,233,135,143,229,133,177,228,186,171,229,140,186,229,159,159,229,165,179,229,173,169,229,142,159,229,136,153,230,137,128,229,156,168,231,187,147,230,157,159,233,128,154,228,191,161,232,182,133,231,186,167,233,133,141,231,189,174,229,189,147,230,151,182,228,188,152,231,167,128,230,128,167,230,132,159,230,136,191,228,186,167,233,129,138,230,136,178,229,135,186,229,143,163,230,143,144,228,186,164,229,176,177,228,184,154,228,191,157,229,129,165,231,168,139,229,186,166,229,143,130,230,149,176,228,186,139,228,184,154,230,149,180,228,184,170,229,177,177,228,184,156,230,131,133,230,132,159,231,137,185,230,174,138,229,136,134,233,161,158,230,144,156,229,176,139,229,177,158,228,186,142,233,151,168,230,136,183,232,180,162,229,138,161,229,163,176,233,159,179,229,143,138,229,133,182,232,180,162,231,187,143,229,157,154,230,140,129,229,185,178,233,131,168,230,136,144,231,171,139,229,136,169,231,155,138,232,128,131,232,153,145,230,136,144,233,131,189,229,140,133,232,163,133,231,148,168,230,136,182,230,175,148,232,181,155,230,150,135,230,152,142,230,139,155,229,149,134,229,174,140,230,149,180,231,156,159,230,152,175,231,156,188,231,157,155,228,188,153,228,188,180,229,168,129,230,156,155,233,162,134,229,159,159,229,141,171,231,148,159,228,188,152,230,131,160,232,171,150,229,163,135,229,133,172,229,133,177,232,137,175,229,165,189,229,133,133,229,136,134,231,172,166,229,144,136,233,153,132,228,187,182,231,137,185,231,130,185,228,184,141,229,143,175,232,139,177,230,150,135,232,181,132,228,186,167,230,160,185,230,156,172,230,152,142,230,152,190,229,175,134,231,162,188,229,133,172,228,188,151,230,176,145,230,151,143,230,155,180,229,138,160,228,186,171,229,143,151,229,144,140,229,173,166,229,144,175,229,138,168,233,128,130,229,144,136,229,142,159,230,157,165,233,151,174,231,173,148,230,156,172,230,150,135,231,190,142,233,163,159,231,187,191,232,137,178,231,168,179,229,174,154,231,187,136,228,186,142,231,148,159,231,137,169,228,190,155,230,177,130,230,144,156,231,139,144,229,138,155,233,135,143,228,184,165,233,135,141,230,176,184,232,191,156,229,134,153,231,156,159,230,156,137,233,153,144,231,171,158,228,186,137,229,175,185,232,177,161,232,180,185,231,148,168,228,184,141,229,165,189,231,187,157,229,175,185,229,141,129,229,136,134,228,191,131,232,191,155,231,130,185,232,175,132,229,189,177,233,159,179,228,188,152,229,138,191,228,184,141,229,176,145,230,172,163,232,181,143,229,185,182,228,184,148,230,156,137,231,130,185,230,150,185,229,144,145,229,133,168,230,150,176,228,191,161,231,148,168,232,174,190,230,150,189,229,189,162,232,177,161,232,181,132,230,160,188,231,170,129,231,160,180,233,154,143,231,157,128,233,135,141,229,164,167,228,186,142,230,152,175,230,175,149,228,184,154,230,153,186,232,131,189,229,140,150,229,183,165,229,174,140,231,190,142,229,149,134,229,159,142,231,187,159,228,184,128,229,135,186,231,137,136,230,137,147,233,128,160,231,148,162,229,147,129,230,166,130,229,134,181,231,148,168,228,186,142,228,191,157,231,149,153,229,155,160,231,180,160,228,184,173,229,156,139,229,173,152,229,130,168,232,180,180,229,155,190,230,156,128,230,132,155,233,149,191,230,156,159,229,143,163,228,187,183,231,144,134,232,180,162,229,159,186,229,156,176,229,174,137,230,142,146,230,173,166,230,177,137,233,135,140,233,157,162,229,136,155,229,187,186,229,164,169,231,169,186,233,166,150,229,133,136,229,174,140,229,150,132,233,169,177,229,138,168,228,184,139,233,157,162,228,184,141,229,134,141,232,175,154,228,191,161,230,132,143,228,185,137,233,152,179,229,133,137,232,139,177,229,155,189,230,188,130,228,186,174,229,134,155,228,186,139,231,142,169,229,174,182,231,190,164,228,188,151,229,134,156,230,176,145,229,141,179,229,143,175,229,144,141,231,168,177,229,174,182,229,133,183,229,138,168,231,148,187,230,131,179,229,136,176,230,179,168,230,152,142,229,176,143,229,173,166,230,128,167,232,131,189,232,128,131,231,160,148,231,161,172,228,187,182,232,167,130,231,156,139,230,184,133,230,165,154,230,144,158,231,172,145,233,166,150,233,160,129,233,187,132,233,135,145,233,128,130,231,148,168,230,177,159,232,139,143,231,156,159,229,174,158,228,184,187,231,174,161,233,152,182,230,174,181,232,168,187,229,134,138,231,191,187,232,175,145,230,157,131,229,136,169,229,129,154,229,165,189,228,188,188,228,185,142,233,128,154,232,174,175,230,150,189,229,183,165,231,139,128,230,133,139,228,185,159,232,174,184,231,142,175,228,191,157,229,159,185,229,133,187,230,166,130,229,191,181,229,164,167,229,158,139,230,156,186,231,165,168,231,144,134,232,167,163,229,140,191,229,144,141,99,117,97,110,100,111,101,110,118,105,97,114,109,97,100,114,105,100,98,117,115,99,97,114,105,110,105,99,105,111,116,105,101,109,112,111,112,111,114,113,117,101,99,117,101,110,116,97,101,115,116,97,100,111,112,117,101,100,101,110,106,117,101,103,111,115,99,111,110,116,114,97,101,115,116,195,161,110,110,111,109,98,114,101,116,105,101,110,101,110,112,101,114,102,105,108,109,97,110,101,114,97,97,109,105,103,111,115,99,105,117,100,97,100,99,101,110,116,114,111,97,117,110,113,117,101,112,117,101,100,101,115,100,101,110,116,114,111,112,114,105,109,101,114,112,114,101,99,105,111,115,101,103,195,186,110,98,117,101,110,111,115,118,111,108,118,101,114,112,117,110,116,111,115,115,101,109,97,110,97,104,97,98,195,173,97,97,103,111,115,116,111,110,117,101,118,111,115,117,110,105,100,111,115,99,97,114,108,111,115,101,113,117,105,112,111,110,105,195,177,111,115,109,117,99,104,111,115,97,108,103,117,110,97,99,111,114,114,101,111,105,109,97,103,101,110,112,97,114,116,105,114,97,114,114,105,98,97,109,97,114,195,173,97,104,111,109,98,114,101,101,109,112,108,101,111,118,101,114,100,97,100,99,97,109,98,105,111,109,117,99,104,97,115,102,117,101,114,111,110,112,97,115,97,100,111,108,195,173,110,101,97,112,97,114,101,99,101,110,117,101,118,97,115,99,117,114,115,111,115,101,115,116,97,98,97,113,117,105,101,114,111,108,105,98,114,111,115,99,117,97,110,116,111,97,99,99,101,115,111,109,105,103,117,101,108,118,97,114,105,111,115,99,117,97,116,114,111,116,105,101,110,101,115,103,114,117,112,111,115,115,101,114,195,161,110,101,117,114,111,112,97,109,101,100,105,111,115,102,114,101,110,116,101,97,99,101,114,99,97,100,101,109,195,161,115,111,102,101,114,116,97,99,111,99,104,101,115,109,111,100,101,108,111,105,116,97,108,105,97,108,101,116,114,97,115,97,108,103,195,186,110,99,111,109,112,114,97,99,117,97,108,101,115,101,120,105,115,116,101,99,117,101,114,112,111,115,105,101,110,100,111,112,114,101,110,115,97,108,108,101,103,97,114,118,105,97,106,101,115,100,105,110,101,114,111,109,117,114,99,105,97,112,111,100,114,195,161,112,117,101,115,116,111,100,105,97,114,105,111,112,117,101,98,108,111,113,117,105,101,114,101,109,97,110,117,101,108,112,114,111,112,105,111,99,114,105,115,105,115,99,105,101,114,116,111,115,101,103,117,114,111,109,117,101,114,116,101,102,117,101,110,116,101,99,101,114,114,97,114,103,114,97,110,100,101,101,102,101,99,116,111,112,97,114,116,101,115,109,101,100,105,100,97,112,114,111,112,105,97,111,102,114,101,99,101,116,105,101,114,114,97,101,45,109,97,105,108,118,97,114,105,97,115,102,111,114,109,97,115,102,117,116,117,114,111,111,98,106,101,116,111,115,101,103,117,105,114,114,105,101,115,103,111,110,111,114,109,97,115,109,105,115,109,111,115,195,186,110,105,99,111,99,97,109,105,110,111,115,105,116,105,111,115,114,97,122,195,179,110,100,101,98,105,100,111,112,114,117,101,98,97,116,111,108,101,100,111,116,101,110,195,173,97,106,101,115,195,186,115,101,115,112,101,114,111,99,111,99,105,110,97,111,114,105,103,101,110,116,105,101,110,100,97,99,105,101,110,116,111,99,195,161,100,105,122,104,97,98,108,97,114,115,101,114,195,173,97,108,97,116,105,110,97,102,117,101,114,122,97,101,115,116,105,108,111,103,117,101,114,114,97,101,110,116,114,97,114,195,169,120,105,116,111,108,195,179,112,101,122,97,103,101,110,100,97,118,195,173,100,101,111,101,118,105,116,97,114,112,97,103,105,110,97,109,101,116,114,111,115,106,97,118,105,101,114,112,97,100,114,101,115,102,195,161,99,105,108,99,97,98,101,122,97,195,161,114,101,97,115,115,97,108,105,100,97,101,110,118,195,173,111,106,97,112,195,179,110,97,98,117,115,111,115,98,105,101,110,101,115,116,101,120,116,111,115,108,108,101,118,97,114,112,117,101,100,97,110,102,117,101,114,116,101,99,111,109,195,186,110,99,108,97,115,101,115,104,117,109,97,110,111,116,101,110,105,100,111,98,105,108,98,97,111,117,110,105,100,97,100,101,115,116,195,161,115,101,100,105,116,97,114,99,114,101,97,100,111,208,180,208,187,209,143,209,135,209,130,208,190,208,186,208,176,208,186,208,184,208,187,208,184,209,141,209,130,208,190,208,178,209,129,208,181,208,181,208,179,208,190,208,191,209,128,208,184,209,130,208,176,208,186,208,181,209,137,208,181,209,131,208,182,208,181,208,154,208,176,208,186,208,177,208,181,208,183,208,177,209,139,208,187,208,190,208,189,208,184,208,146,209,129,208,181,208,191,208,190,208,180,208,173,209,130,208,190,209,130,208,190,208,188,209,135,208,181,208,188,208,189,208,181,209,130,208,187,208,181,209,130,209,128,208,176,208,183,208,190,208,189,208,176,208,179,208,180,208,181,208,188,208,189,208,181,208,148,208,187,209,143,208,159,209,128,208,184,208,189,208,176,209,129,208,189,208,184,209,133,209,130,208,181,208,188,208,186,209,130,208,190,208,179,208,190,208,180,208,178,208,190,209,130,209,130,208,176,208,188,208,161,208,168,208,144,208,188,208,176,209,143,208,167,209,130,208,190,208,178,208,176,209,129,208,178,208,176,208,188,208,181,208,188,209,131,208,162,208,176,208,186,208,180,208,178,208,176,208,189,208,176,208,188,209,141,209,130,208,184,209,141,209,130,209,131,208,146,208,176,208,188,209,130,208,181,209,133,208,191,209,128,208,190,209,130,209,131,209,130,208,189,208,176,208,180,208,180,208,189,209,143,208,146,208,190,209,130,209,130,209,128,208,184,208,189,208,181,208,185,208,146,208,176,209,129,208,189,208,184,208,188,209,129,208,176,208,188,209,130,208,190,209,130,209,128,209,131,208,177,208,158,208,189,208,184,208,188,208,184,209,128,208,189,208,181,208,181,208,158,208,158,208,158,208,187,208,184,209,134,209,141,209,130,208,176,208,158,208,189,208,176,208,189,208,181,208,188,208,180,208,190,208,188,208,188,208,190,208,185,208,180,208,178,208,181,208,190,208,189,208,190,209,129,209,131,208,180,224,164,149,224,165,135,224,164,185,224,165,136,224,164,149,224,165,128,224,164,184,224,165,135,224,164,149,224,164,190,224,164,149,224,165,139,224,164,148,224,164,176,224,164,170,224,164,176,224,164,168,224,165,135,224,164,143,224,164,149,224,164,149,224,164,191,224,164,173,224,165,128,224,164,135,224,164,184,224,164,149,224,164,176,224,164,164,224,165,139,224,164,185,224,165,139,224,164,134,224,164,170,224,164,185,224,165,128,224,164,175,224,164,185,224,164,175,224,164,190,224,164,164,224,164,149,224,164,165,224,164,190,106,97,103,114,97,110,224,164,134,224,164,156,224,164,156,224,165,139,224,164,133,224,164,172,224,164,166,224,165,139,224,164,151,224,164,136,224,164,156,224,164,190,224,164,151,224,164,143,224,164,185,224,164,174,224,164,135,224,164,168,224,164,181,224,164,185,224,164,175,224,165,135,224,164,165,224,165,135,224,164,165,224,165,128,224,164,152,224,164,176,224,164,156,224,164,172,224,164,166,224,165,128,224,164,149,224,164,136,224,164,156,224,165,128,224,164,181,224,165,135,224,164,168,224,164,136,224,164,168,224,164,143,224,164,185,224,164,176,224,164,137,224,164,184,224,164,174,224,165,135,224,164,149,224,164,174,224,164,181,224,165,139,224,164,178,224,165,135,224,164,184,224,164,172,224,164,174,224,164,136,224,164,166,224,165,135,224,164,147,224,164,176,224,164,134,224,164,174,224,164,172,224,164,184,224,164,173,224,164,176,224,164,172,224,164,168,224,164,154,224,164,178,224,164,174,224,164,168,224,164,134,224,164,151,224,164,184,224,165,128,224,164,178,224,165,128,216,185,217,132,217,137,216,165,217,132,217,137,217,135,216,176,216,167,216,162,216,174,216,177,216,185,216,175,216,175,216,167,217,132,217,137,217,135,216,176,217,135,216,181,217,136,216,177,216,186,217,138,216,177,217,131,216,167,217,134,217,136,217,132,216,167,216,168,217,138,217,134,216,185,216,177,216,182,216,176,217,132,217,131,217,135,217,134,216,167,217,138,217,136,217,133,217,130,216,167,217,132,216,185,217,132,217,138,216,167,217,134,216,167,217,132,217,131,217,134,216,173,216,170,217,137,217,130,216,168,217,132,217,136,216,173,216,169,216,167,216,174,216,177,217,129,217,130,216,183,216,185,216,168,216,175,216,177,217,131,217,134,216,165,216,176,216,167,217,131,217,133,216,167,216,167,216,173,216,175,216,165,217,132,216,167,217,129,217,138,217,135,216,168,216,185,216,182,217,131,217,138,217,129,216,168,216,173,216,171,217,136,217,133,217,134,217,136,217,135,217,136,216,163,217,134,216,167,216,172,216,175,216,167,217,132,217,135,216,167,216,179,217,132,217,133,216,185,217,134,216,175,217,132,217,138,216,179,216,185,216,168,216,177,216,181,217,132,217,137,217,133,217,134,216,176,216,168,217,135,216,167,216,163,217,134,217,135,217,133,216,171,217,132,217,131,217,134,216,170,216,167,217,132,216,167,216,173,217,138,216,171,217,133,216,181,216,177,216,180,216,177,216,173,216,173,217,136,217,132,217,136,217,129,217,138,216,167,216,176,216,167,217,132,217,131,217,132,217,133,216,177,216,169,216,167,217,134,216,170,216,167,217,132,217,129,216,163,216,168,217,136,216,174,216,167,216,181,216,163,217,134,216,170,216,167,217,134,217,135,216,167,217,132,217,138,216,185,216,182,217,136,217,136,217,130,216,175,216,167,216,168,217,134,216,174,217,138,216,177,216,168,217,134,216,170,217,132,217,131,217,133,216,180,216,167,216,161,217,136,217,135,217,138,216,167,216,168,217,136,217,130,216,181,216,181,217,136,217,133,216,167,216,177,217,130,217,133,216,163,216,173,216,175,217,134,216,173,217,134,216,185,216,175,217,133,216,177,216,163,217,138,216,167,216,173,216,169,217,131,216,170,216,168,216,175,217,136,217,134,217,138,216,172,216,168,217,133,217,134,217,135,216,170,216,173,216,170,216,172,217,135,216,169,216,179,217,134,216,169,217,138,216,170,217,133,217,131,216,177,216,169,216,186,216,178,216,169,217,134,217,129,216,179,216,168,217,138,216,170,217,132,217,132,217,135,217,132,217,134,216,167,216,170,217,132,217,131,217,130,217,132,216,168,217,132,217,133,216,167,216,185,217,134,217,135,216,163,217,136,217,132,216,180,217,138,216,161,217,134,217,136,216,177,216,163,217,133,216,167,217,129,217,138,217,131,216,168,217,131,217,132,216,176,216,167,216,170,216,177,216,170,216,168,216,168,216,163,217,134,217,135,217,133,216,179,216,167,217,134,217,131,216,168,217,138,216,185,217,129,217,130,216,175,216,173,216,179,217,134,217,132,217,135,217,133,216,180,216,185,216,177,216,163,217,135,217,132,216,180,217,135,216,177,217,130,216,183,216,177,216,183,217,132,216,168,112,114,111,102,105,108,101,115,101,114,118,105,99,101,100,101,102,97,117,108,116,104,105,109,115,101,108,102,100,101,116,97,105,108,115,99,111,110,116,101,110,116,115,117,112,112,111,114,116,115,116,97,114,116,101,100,109,101,115,115,97,103,101,115,117,99,99,101,115,115,102,97,115,104,105,111,110,60,116,105,116,108,101,62,99,111,117,110,116,114,121,97,99,99,111,117,110,116,99,114,101,97,116,101,100,115,116,111,114,105,101,115,114,101,115,117,108,116,115,114,117,110,110,105,110,103,112,114,111,99,101,115,115,119,114,105,116,105,110,103,111,98,106,101,99,116,115,118,105,115,105,98,108,101,119,101,108,99,111,109,101,97,114,116,105,99,108,101,117,110,107,110,111,119,110,110,101,116,119,111,114,107,99,111,109,112,97,110,121,100,121,110,97,109,105,99,98,114,111,119,115,101,114,112,114,105,118,97,99,121,112,114,111,98,108,101,109,83,101,114,118,105,99,101,114,101,115,112,101,99,116,100,105,115,112,108,97,121,114,101,113,117,101,115,116,114,101,115,101,114,118,101,119,101,98,115,105,116,101,104,105,115,116,111,114,121,102,114,105,101,110,100,115,111,112,116,105,111,110,115,119,111,114,107,105,110,103,118,101,114,115,105,111,110,109,105,108,108,105,111,110,99,104,97,110,110,101,108,119,105,110,100,111,119,46,97,100,100,114,101,115,115,118,105,115,105,116,101,100,119,101,97,116,104,101,114,99,111,114,114,101,99,116,112,114,111,100,117,99,116,101,100,105,114,101,99,116,102,111,114,119,97,114,100,121,111,117,32,99,97,110,114,101,109,111,118,101,100,115,117,98,106,101,99,116,99,111,110,116,114,111,108,97,114,99,104,105,118,101,99,117,114,114,101,110,116,114,101,97,100,105,110,103,108,105,98,114,97,114,121,108,105,109,105,116,101,100,109,97,110,97,103,101,114,102,117,114,116,104,101,114,115,117,109,109,97,114,121,109,97,99,104,105,110,101,109,105,110,117,116,101,115,112,114,105,118,97,116,101,99,111,110,116,101,120,116,112,114,111,103,114,97,109,115,111,99,105,101,116,121,110,117,109,98,101,114,115,119,114,105,116,116,101,110,101,110,97,98,108,101,100,116,114,105,103,103,101,114,115,111,117,114,99,101,115,108,111,97,100,105,110,103,101,108,101,109,101,110,116,112,97,114,116,110,101,114,102,105,110,97,108,108,121,112,101,114,102,101,99,116,109,101,97,110,105,110,103,115,121,115,116,101,109,115,107,101,101,112,105,110,103,99,117,108,116,117,114,101,38,113,117,111,116,59,44,106,111,117,114,110,97,108,112,114,111,106,101,99,116,115,117,114,102,97,99,101,115,38,113,117,111,116,59,101,120,112,105,114,101,115,114,101,118,105,101,119,115,98,97,108,97,110,99,101,69,110,103,108,105,115,104,67,111,110,116,101,110,116,116,104,114,111,117,103,104,80,108,101,97,115,101,32,111,112,105,110,105,111,110,99,111,110,116,97,99,116,97,118,101,114,97,103,101,112,114,105,109,97,114,121,118,105,108,108,97,103,101,83,112,97,110,105,115,104,103,97,108,108,101,114,121,100,101,99,108,105,110,101,109,101,101,116,105,110,103,109,105,115,115,105,111,110,112,111,112,117,108,97,114,113,117,97,108,105,116,121,109,101,97,115,117,114,101,103,101,110,101,114,97,108,115,112,101,99,105,101,115,115,101,115,115,105,111,110,115,101,99,116,105,111,110,119,114,105,116,101,114,115,99,111,117,110,116,101,114,105,110,105,116,105,97,108,114,101,112,111,114,116,115,102,105,103,117,114,101,115,109,101,109,98,101,114,115,104,111,108,100,105,110,103,100,105,115,112,117,116,101,101,97,114,108,105,101,114,101,120,112,114,101,115,115,100,105,103,105,116,97,108,112,105,99,116,117,114,101,65,110,111,116,104,101,114,109,97,114,114,105,101,100,116,114,97,102,102,105,99,108,101,97,100,105,110,103,99,104,97,110,103,101,100,99,101,110,116,114,97,108,118,105,99,116,111,114,121,105,109,97,103,101,115,47,114,101,97,115,111,110,115,115,116,117,100,105,101,115,102,101,97,116,117,114,101,108,105,115,116,105,110,103,109,117,115,116,32,98,101,115,99,104,111,111,108,115,86,101,114,115,105,111,110,117,115,117,97,108,108,121,101,112,105,115,111,100,101,112,108,97,121,105,110,103,103,114,111,119,105,110,103,111,98,118,105,111,117,115,111,118,101,114,108,97,121,112,114,101,115,101,110,116,97,99,116,105,111,110,115,60,47,117,108,62,13,10,119,114,97,112,112,101,114,97,108,114,101,97,100,121,99,101,114,116,97,105,110,114,101,97,108,105,116,121,115,116,111,114,97,103,101,97,110,111,116,104,101,114,100,101,115,107,116,111,112,111,102,102,101,114,101,100,112,97,116,116,101,114,110,117,110,117,115,117,97,108,68,105,103,105,116,97,108,99,97,112,105,116,97,108,87,101,98,115,105,116,101,102,97,105,108,117,114,101,99,111,110,110,101,99,116,114,101,100,117,99,101,100,65,110,100,114,111,105,100,100,101,99,97,100,101,115,114,101,103,117,108,97,114,32,38,97,109,112,59,32,97,110,105,109,97,108,115,114,101,108,101,97,115,101,65,117,116,111,109,97,116,103,101,116,116,105,110,103,109,101,116,104,111,100,115,110,111,116,104,105,110,103,80,111,112,117,108,97,114,99,97,112,116,105,111,110,108,101,116,116,101,114,115,99,97,112,116,117,114,101,115,99,105,101,110,99,101,108,105,99,101,110,115,101,99,104,97,110,103,101,115,69,110,103,108,97,110,100,61,49,38,97,109,112,59,72,105,115,116,111,114,121,32,61,32,110,101,119,32,67,101,110,116,114,97,108,117,112,100,97,116,101,100,83,112,101,99,105,97,108,78,101,116,119,111,114,107,114,101,113,117,105,114,101,99,111,109,109,101,110,116,119,97,114,110,105,110,103,67,111,108,108,101,103,101,116,111,111,108,98,97,114,114,101,109,97,105,110,115,98,101,99,97,117,115,101,101,108,101,99,116,101,100,68,101,117,116,115,99,104,102,105,110,97,110,99,101,119,111,114,107,101,114,115,113,117,105,99,107,108,121,98,101,116,119,101,101,110,101,120,97,99,116,108,121,115,101,116,116,105,110,103,100,105,115,101,97,115,101,83,111,99,105,101,116,121,119,101,97,112,111,110,115,101,120,104,105,98,105,116,38,108,116,59,33,45,45,67,111,110,116,114,111,108,99,108,97,115,115,101,115,99,111,118,101,114,101,100,111,117,116,108,105,110,101,97,116,116,97,99,107,115,100,101,118,105,99,101,115,40,119,105,110,100,111,119,112,117,114,112,111,115,101,116,105,116,108,101,61,34,77,111,98,105,108,101,32,107,105,108,108,105,110,103,115,104,111,119,105,110,103,73,116,97,108,105,97,110,100,114,111,112,112,101,100,104,101,97,118,105,108,121,101,102,102,101,99,116,115,45,49,39,93,41,59,10,99,111,110,102,105,114,109,67,117,114,114,101,110,116,97,100,118,97,110,99,101,115,104,97,114,105,110,103,111,112,101,110,105,110,103,100,114,97,119,105,110,103,98,105,108,108,105,111,110,111,114,100,101,114,101,100,71,101,114,109,97,110,121,114,101,108,97,116,101,100,60,47,102,111,114,109,62,105,110,99,108,117,100,101,119,104,101,116,104,101,114,100,101,102,105,110,101,100,83,99,105,101,110,99,101,99,97,116,97,108,111,103,65,114,116,105,99,108,101,98,117,116,116,111,110,115,108,97,114,103,101,115,116,117,110,105,102,111,114,109,106,111,117,114,110,101,121,115,105,100,101,98,97,114,67,104,105,99,97,103,111,104,111,108,105,100,97,121,71,101,110,101,114,97,108,112,97,115,115,97,103,101,44,38,113,117,111,116,59,97,110,105,109,97,116,101,102,101,101,108,105,110,103,97,114,114,105,118,101,100,112,97,115,115,105,110,103,110,97,116,117,114,97,108,114,111,117,103,104,108,121,46,10,10,84,104,101,32,98,117,116,32,110,111,116,100,101,110,115,105,116,121,66,114,105,116,97,105,110,67,104,105,110,101,115,101,108,97,99,107,32,111,102,116,114,105,98,117,116,101,73,114,101,108,97,110,100,34,32,100,97,116,97,45,102,97,99,116,111,114,115,114,101,99,101,105,118,101,116,104,97,116,32,105,115,76,105,98,114,97,114,121,104,117,115,98,97,110,100,105,110,32,102,97,99,116,97,102,102,97,105,114,115,67,104,97,114,108,101,115,114,97,100,105,99,97,108,98,114,111,117,103,104,116,102,105,110,100,105,110,103,108,97,110,100,105,110,103,58,108,97,110,103,61,34,114,101,116,117,114,110,32,108,101,97,100,101,114,115,112,108,97,110,110,101,100,112,114,101,109,105,117,109,112,97,99,107,97,103,101,65,109,101,114,105,99,97,69,100,105,116,105,111,110,93,38,113,117,111,116,59,77,101,115,115,97,103,101,110,101,101,100,32,116,111,118,97,108,117,101,61,34,99,111,109,112,108,101,120,108,111,111,107,105,110,103,115,116,97,116,105,111,110,98,101,108,105,101,118,101,115,109,97,108,108,101,114,45,109,111,98,105,108,101,114,101,99,111,114,100,115,119,97,110,116,32,116,111,107,105,110,100,32,111,102,70,105,114,101,102,111,120,121,111,117,32,97,114,101,115,105,109,105,108,97,114,115,116,117,100,105,101,100,109,97,120,105,109,117,109,104,101,97,100,105,110,103,114,97,112,105,100,108,121,99,108,105,109,97,116,101,107,105,110,103,100,111,109,101,109,101,114,103,101,100,97,109,111,117,110,116,115,102,111,117,110,100,101,100,112,105,111,110,101,101,114,102,111,114,109,117,108,97,100,121,110,97,115,116,121,104,111,119,32,116,111,32,83,117,112,112,111,114,116,114,101,118,101,110,117,101,101,99,111,110,111,109,121,82,101,115,117,108,116,115,98,114,111,116,104,101,114,115,111,108,100,105,101,114,108,97,114,103,101,108,121,99,97,108,108,105,110,103,46,38,113,117,111,116,59,65,99,99,111,117,110,116,69,100,119,97,114,100,32,115,101,103,109,101,110,116,82,111,98,101,114,116,32,101,102,102,111,114,116,115,80,97,99,105,102,105,99,108,101,97,114,110,101,100,117,112,32,119,105,116,104,104,101,105,103,104,116,58,119,101,32,104,97,118,101,65,110,103,101,108,101,115,110,97,116,105,111,110,115,95,115,101,97,114,99,104,97,112,112,108,105,101,100,97,99,113,117,105,114,101,109,97,115,115,105,118,101,103,114,97,110,116,101,100,58,32,102,97,108,115,101,116,114,101,97,116,101,100,98,105,103,103,101,115,116,98,101,110,101,102,105,116,100,114,105,118,105,110,103,83,116,117,100,105,101,115,109,105,110,105,109,117,109,112,101,114,104,97,112,115,109,111,114,110,105,110,103,115,101,108,108,105,110,103,105,115,32,117,115,101,100,114,101,118,101,114,115,101,118,97,114,105,97,110,116,32,114,111,108,101,61,34,109,105,115,115,105,110,103,97,99,104,105,101,118,101,112,114,111,109,111,116,101,115,116,117,100,101,110,116,115,111,109,101,111,110,101,101,120,116,114,101,109,101,114,101,115,116,111,114,101,98,111,116,116,111,109,58,101,118,111,108,118,101,100,97,108,108,32,116,104,101,115,105,116,101,109,97,112,101,110,103,108,105,115,104,119,97,121,32,116,111,32,32,65,117,103,117,115,116,115,121,109,98,111,108,115,67,111,109,112,97,110,121,109,97,116,116,101,114,115,109,117,115,105,99,97,108,97,103,97,105,110,115,116,115,101,114,118,105,110,103,125,41,40,41,59,13,10,112,97,121,109,101,110,116,116,114,111,117,98,108,101,99,111,110,99,101,112,116,99,111,109,112,97,114,101,112,97,114,101,110,116,115,112,108,97,121,101,114,115,114,101,103,105,111,110,115,109,111,110,105,116,111,114,32,39,39,84,104,101,32,119,105,110,110,105,110,103,101,120,112,108,111,114,101,97,100,97,112,116,101,100,71,97,108,108,101,114,121,112,114,111,100,117,99,101,97,98,105,108,105,116,121,101,110,104,97,110,99,101,99,97,114,101,101,114,115,41,46,32,84,104,101,32,99,111,108,108,101,99,116,83,101,97,114,99,104,32,97,110,99,105,101,110,116,101,120,105,115,116,101,100,102,111,111,116,101,114,32,104,97,110,100,108,101,114,112,114,105,110,116,101,100,99,111,110,115,111,108,101,69,97,115,116,101,114,110,101,120,112,111,114,116,115,119,105,110,100,111,119,115,67,104,97,110,110,101,108,105,108,108,101,103,97,108,110,101,117,116,114,97,108,115,117,103,103,101,115,116,95,104,101,97,100,101,114,115,105,103,110,105,110,103,46,104,116,109,108,34,62,115,101,116,116,108,101,100,119,101,115,116,101,114,110,99,97,117,115,105,110,103,45,119,101,98,107,105,116,99,108,97,105,109,101,100,74,117,115,116,105,99,101,99,104,97,112,116,101,114,118,105,99,116,105,109,115,84,104,111,109,97,115,32,109,111,122,105,108,108,97,112,114,111,109,105,115,101,112,97,114,116,105,101,115,101,100,105,116,105,111,110,111,117,116,115,105,100,101,58,102,97,108,115,101,44,104,117,110,100,114,101,100,79,108,121,109,112,105,99,95,98,117,116,116,111,110,97,117,116,104,111,114,115,114,101,97,99,104,101,100,99,104,114,111,110,105,99,100,101,109,97,110,100,115,115,101,99,111,110,100,115,112,114,111,116,101,99,116,97,100,111,112,116,101,100,112,114,101,112,97,114,101,110,101,105,116,104,101,114,103,114,101,97,116,108,121,103,114,101,97,116,101,114,111,118,101,114,97,108,108,105,109,112,114,111,118,101,99,111,109,109,97,110,100,115,112,101,99,105,97,108,115,101,97,114,99,104,46,119,111,114,115,104,105,112,102,117,110,100,105,110,103,116,104,111,117,103,104,116,104,105,103,104,101,115,116,105,110,115,116,101,97,100,117,116,105,108,105,116,121,113,117,97,114,116,101,114,67,117,108,116,117,114,101,116,101,115,116,105,110,103,99,108,101,97,114,108,121,101,120,112,111,115,101,100,66,114,111,119,115,101,114,108,105,98,101,114,97,108,125,32,99,97,116,99,104,80,114,111,106,101,99,116,101,120,97,109,112,108,101,104,105,100,101,40,41,59,70,108,111,114,105,100,97,97,110,115,119,101,114,115,97,108,108,111,119,101,100,69,109,112,101,114,111,114,100,101,102,101,110,115,101,115,101,114,105,111,117,115,102,114,101,101,100,111,109,83,101,118,101,114,97,108,45,98,117,116,116,111,110,70,117,114,116,104,101,114,111,117,116,32,111,102,32,33,61,32,110,117,108,108,116,114,97,105,110,101,100,68,101,110,109,97,114,107,118,111,105,100,40,48,41,47,97,108,108,46,106,115,112,114,101,118,101,110,116,82,101,113,117,101,115,116,83,116,101,112,104,101,110,10,10,87,104,101,110,32,111,98,115,101,114,118,101,60,47,104,50,62,13,10,77,111,100,101,114,110,32,112,114,111,118,105,100,101,34,32,97,108,116,61,34,98,111,114,100,101,114,115,46,10,10,70,111,114,32,10,10,77,97,110,121,32,97,114,116,105,115,116,115,112,111,119,101,114,101,100,112,101,114,102,111,114,109,102,105,99,116,105,111,110,116,121,112,101,32,111,102,109,101,100,105,99,97,108,116,105,99,107,101,116,115,111,112,112,111,115,101,100,67,111,117,110,99,105,108,119,105,116,110,101,115,115,106,117,115,116,105,99,101,71,101,111,114,103,101,32,66,101,108,103,105,117,109,46,46,46,60,47,97,62,116,119,105,116,116,101,114,110,111,116,97,98,108,121,119,97,105,116,105,110,103,119,97,114,102,97,114,101,32,79,116,104,101,114,32,114,97,110,107,105,110,103,112,104,114,97,115,101,115,109,101,110,116,105,111,110,115,117,114,118,105,118,101,115,99,104,111,108,97,114,60,47,112,62,13,10,32,67,111,117,110,116,114,121,105,103,110,111,114,101,100,108,111,115,115,32,111,102,106,117,115,116,32,97,115,71,101,111,114,103,105,97,115,116,114,97,110,103,101,60,104,101,97,100,62,60,115,116,111,112,112,101,100,49,39,93,41,59,13,10,105,115,108,97,110,100,115,110,111,116,97,98,108,101,98,111,114,100,101,114,58,108,105,115,116,32,111,102,99,97,114,114,105,101,100,49,48,48,44,48,48,48,60,47,104,51,62,10,32,115,101,118,101,114,97,108,98,101,99,111,109,101,115,115,101,108,101,99,116,32,119,101,100,100,105,110,103,48,48,46,104,116,109,108,109,111,110,97,114,99,104,111,102,102,32,116,104,101,116,101,97,99,104,101,114,104,105,103,104,108,121,32,98,105,111,108,111,103,121,108,105,102,101,32,111,102,111,114,32,101,118,101,110,114,105,115,101,32,111,102,38,114,97,113,117,111,59,112,108,117,115,111,110,101,104,117,110,116,105,110,103,40,116,104,111,117,103,104,68,111,117,103,108,97,115,106,111,105,110,105,110,103,99,105,114,99,108,101,115,70,111,114,32,116,104,101,65,110,99,105,101,110,116,86,105,101,116,110,97,109,118,101,104,105,99,108,101,115,117,99,104,32,97,115,99,114,121,115,116,97,108,118],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+81968);allocate([97,108,117,101,32,61,87,105,110,100,111,119,115,101,110,106,111,121,101,100,97,32,115,109,97,108,108,97,115,115,117,109,101,100,60,97,32,105,100,61,34,102,111,114,101,105,103,110,32,65,108,108,32,114,105,104,111,119,32,116,104,101,68,105,115,112,108,97,121,114,101,116,105,114,101,100,104,111,119,101,118,101,114,104,105,100,100,101,110,59,98,97,116,116,108,101,115,115,101,101,107,105,110,103,99,97,98,105,110,101,116,119,97,115,32,110,111,116,108,111,111,107,32,97,116,99,111,110,100,117,99,116,103,101,116,32,116,104,101,74,97,110,117,97,114,121,104,97,112,112,101,110,115,116,117,114,110,105,110,103,97,58,104,111,118,101,114,79,110,108,105,110,101,32,70,114,101,110,99,104,32,108,97,99,107,105,110,103,116,121,112,105,99,97,108,101,120,116,114,97,99,116,101,110,101,109,105,101,115,101,118,101,110,32,105,102,103,101,110,101,114,97,116,100,101,99,105,100,101,100,97,114,101,32,110,111,116,47,115,101,97,114,99,104,98,101,108,105,101,102,115,45,105,109,97,103,101,58,108,111,99,97,116,101,100,115,116,97,116,105,99,46,108,111,103,105,110,34,62,99,111,110,118,101,114,116,118,105,111,108,101,110,116,101,110,116,101,114,101,100,102,105,114,115,116,34,62,99,105,114,99,117,105,116,70,105,110,108,97,110,100,99,104,101,109,105,115,116,115,104,101,32,119,97,115,49,48,112,120,59,34,62,97,115,32,115,117,99,104,100,105,118,105,100,101,100,60,47,115,112,97,110,62,119,105,108,108,32,98,101,108,105,110,101,32,111,102,97,32,103,114,101,97,116,109,121,115,116,101,114,121,47,105,110,100,101,120,46,102,97,108,108,105,110,103,100,117,101,32,116,111,32,114,97,105,108,119,97,121,99,111,108,108,101,103,101,109,111,110,115,116,101,114,100,101,115,99,101,110,116,105,116,32,119,105,116,104,110,117,99,108,101,97,114,74,101,119,105,115,104,32,112,114,111,116,101,115,116,66,114,105,116,105,115,104,102,108,111,119,101,114,115,112,114,101,100,105,99,116,114,101,102,111,114,109,115,98,117,116,116,111,110,32,119,104,111,32,119,97,115,108,101,99,116,117,114,101,105,110,115,116,97,110,116,115,117,105,99,105,100,101,103,101,110,101,114,105,99,112,101,114,105,111,100,115,109,97,114,107,101,116,115,83,111,99,105,97,108,32,102,105,115,104,105,110,103,99,111,109,98,105,110,101,103,114,97,112,104,105,99,119,105,110,110,101,114,115,60,98,114,32,47,62,60,98,121,32,116,104,101,32,78,97,116,117,114,97,108,80,114,105,118,97,99,121,99,111,111,107,105,101,115,111,117,116,99,111,109,101,114,101,115,111,108,118,101,83,119,101,100,105,115,104,98,114,105,101,102,108,121,80,101,114,115,105,97,110,115,111,32,109,117,99,104,67,101,110,116,117,114,121,100,101,112,105,99,116,115,99,111,108,117,109,110,115,104,111,117,115,105,110,103,115,99,114,105,112,116,115,110,101,120,116,32,116,111,98,101,97,114,105,110,103,109,97,112,112,105,110,103,114,101,118,105,115,101,100,106,81,117,101,114,121,40,45,119,105,100,116,104,58,116,105,116,108,101,34,62,116,111,111,108,116,105,112,83,101,99,116,105,111,110,100,101,115,105,103,110,115,84,117,114,107,105,115,104,121,111,117,110,103,101,114,46,109,97,116,99,104,40,125,41,40,41,59,10,10,98,117,114,110,105,110,103,111,112,101,114,97,116,101,100,101,103,114,101,101,115,115,111,117,114,99,101,61,82,105,99,104,97,114,100,99,108,111,115,101,108,121,112,108,97,115,116,105,99,101,110,116,114,105,101,115,60,47,116,114,62,13,10,99,111,108,111,114,58,35,117,108,32,105,100,61,34,112,111,115,115,101,115,115,114,111,108,108,105,110,103,112,104,121,115,105,99,115,102,97,105,108,105,110,103,101,120,101,99,117,116,101,99,111,110,116,101,115,116,108,105,110,107,32,116,111,68,101,102,97,117,108,116,60,98,114,32,47,62,10,58,32,116,114,117,101,44,99,104,97,114,116,101,114,116,111,117,114,105,115,109,99,108,97,115,115,105,99,112,114,111,99,101,101,100,101,120,112,108,97,105,110,60,47,104,49,62,13,10,111,110,108,105,110,101,46,63,120,109,108,32,118,101,104,101,108,112,105,110,103,100,105,97,109,111,110,100,117,115,101,32,116,104,101,97,105,114,108,105,110,101,101,110,100,32,45,45,62,41,46,97,116,116,114,40,114,101,97,100,101,114,115,104,111,115,116,105,110,103,35,102,102,102,102,102,102,114,101,97,108,105,122,101,86,105,110,99,101,110,116,115,105,103,110,97,108,115,32,115,114,99,61,34,47,80,114,111,100,117,99,116,100,101,115,112,105,116,101,100,105,118,101,114,115,101,116,101,108,108,105,110,103,80,117,98,108,105,99,32,104,101,108,100,32,105,110,74,111,115,101,112,104,32,116,104,101,97,116,114,101,97,102,102,101,99,116,115,60,115,116,121,108,101,62,97,32,108,97,114,103,101,100,111,101,115,110,39,116,108,97,116,101,114,44,32,69,108,101,109,101,110,116,102,97,118,105,99,111,110,99,114,101,97,116,111,114,72,117,110,103,97,114,121,65,105,114,112,111,114,116,115,101,101,32,116,104,101,115,111,32,116,104,97,116,77,105,99,104,97,101,108,83,121,115,116,101,109,115,80,114,111,103,114,97,109,115,44,32,97,110,100,32,32,119,105,100,116,104,61,101,38,113,117,111,116,59,116,114,97,100,105,110,103,108,101,102,116,34,62,10,112,101,114,115,111,110,115,71,111,108,100,101,110,32,65,102,102,97,105,114,115,103,114,97,109,109,97,114,102,111,114,109,105,110,103,100,101,115,116,114,111,121,105,100,101,97,32,111,102,99,97,115,101,32,111,102,111,108,100,101,115,116,32,116,104,105,115,32,105,115,46,115,114,99,32,61,32,99,97,114,116,111,111,110,114,101,103,105,115,116,114,67,111,109,109,111,110,115,77,117,115,108,105,109,115,87,104,97,116,32,105,115,105,110,32,109,97,110,121,109,97,114,107,105,110,103,114,101,118,101,97,108,115,73,110,100,101,101,100,44,101,113,117,97,108,108,121,47,115,104,111,119,95,97,111,117,116,100,111,111,114,101,115,99,97,112,101,40,65,117,115,116,114,105,97,103,101,110,101,116,105,99,115,121,115,116,101,109,44,73,110,32,116,104,101,32,115,105,116,116,105,110,103,72,101,32,97,108,115,111,73,115,108,97,110,100,115,65,99,97,100,101,109,121,10,9,9,60,33,45,45,68,97,110,105,101,108,32,98,105,110,100,105,110,103,98,108,111,99,107,34,62,105,109,112,111,115,101,100,117,116,105,108,105,122,101,65,98,114,97,104,97,109,40,101,120,99,101,112,116,123,119,105,100,116,104,58,112,117,116,116,105,110,103,41,46,104,116,109,108,40,124,124,32,91,93,59,10,68,65,84,65,91,32,42,107,105,116,99,104,101,110,109,111,117,110,116,101,100,97,99,116,117,97,108,32,100,105,97,108,101,99,116,109,97,105,110,108,121,32,95,98,108,97,110,107,39,105,110,115,116,97,108,108,101,120,112,101,114,116,115,105,102,40,116,121,112,101,73,116,32,97,108,115,111,38,99,111,112,121,59,32,34,62,84,101,114,109,115,98,111,114,110,32,105,110,79,112,116,105,111,110,115,101,97,115,116,101,114,110,116,97,108,107,105,110,103,99,111,110,99,101,114,110,103,97,105,110,101,100,32,111,110,103,111,105,110,103,106,117,115,116,105,102,121,99,114,105,116,105,99,115,102,97,99,116,111,114,121,105,116,115,32,111,119,110,97,115,115,97,117,108,116,105,110,118,105,116,101,100,108,97,115,116,105,110,103,104,105,115,32,111,119,110,104,114,101,102,61,34,47,34,32,114,101,108,61,34,100,101,118,101,108,111,112,99,111,110,99,101,114,116,100,105,97,103,114,97,109,100,111,108,108,97,114,115,99,108,117,115,116,101,114,112,104,112,63,105,100,61,97,108,99,111,104,111,108,41,59,125,41,40,41,59,117,115,105,110,103,32,97,62,60,115,112,97,110,62,118,101,115,115,101,108,115,114,101,118,105,118,97,108,65,100,100,114,101,115,115,97,109,97,116,101,117,114,97,110,100,114,111,105,100,97,108,108,101,103,101,100,105,108,108,110,101,115,115,119,97,108,107,105,110,103,99,101,110,116,101,114,115,113,117,97,108,105,102,121,109,97,116,99,104,101,115,117,110,105,102,105,101,100,101,120,116,105,110,99,116,68,101,102,101,110,115,101,100,105,101,100,32,105,110,10,9,60,33,45,45,32,99,117,115,116,111,109,115,108,105,110,107,105,110,103,76,105,116,116,108,101,32,66,111,111,107,32,111,102,101,118,101,110,105,110,103,109,105,110,46,106,115,63,97,114,101,32,116,104,101,107,111,110,116,97,107,116,116,111,100,97,121,39,115,46,104,116,109,108,34,32,116,97,114,103,101,116,61,119,101,97,114,105,110,103,65,108,108,32,82,105,103,59,10,125,41,40,41,59,114,97,105,115,105,110,103,32,65,108,115,111,44,32,99,114,117,99,105,97,108,97,98,111,117,116,34,62,100,101,99,108,97,114,101,45,45,62,10,60,115,99,102,105,114,101,102,111,120,97,115,32,109,117,99,104,97,112,112,108,105,101,115,105,110,100,101,120,44,32,115,44,32,98,117,116,32,116,121,112,101,32,61,32,10,13,10,60,33,45,45,116,111,119,97,114,100,115,82,101,99,111,114,100,115,80,114,105,118,97,116,101,70,111,114,101,105,103,110,80,114,101,109,105,101,114,99,104,111,105,99,101,115,86,105,114,116,117,97,108,114,101,116,117,114,110,115,67,111,109,109,101,110,116,80,111,119,101,114,101,100,105,110,108,105,110,101,59,112,111,118,101,114,116,121,99,104,97,109,98,101,114,76,105,118,105,110,103,32,118,111,108,117,109,101,115,65,110,116,104,111,110,121,108,111,103,105,110,34,32,82,101,108,97,116,101,100,69,99,111,110,111,109,121,114,101,97,99,104,101,115,99,117,116,116,105,110,103,103,114,97,118,105,116,121,108,105,102,101,32,105,110,67,104,97,112,116,101,114,45,115,104,97,100,111,119,78,111,116,97,98,108,101,60,47,116,100,62,13,10,32,114,101,116,117,114,110,115,116,97,100,105,117,109,119,105,100,103,101,116,115,118,97,114,121,105,110,103,116,114,97,118,101,108,115,104,101,108,100,32,98,121,119,104,111,32,97,114,101,119,111,114,107,32,105,110,102,97,99,117,108,116,121,97,110,103,117,108,97,114,119,104,111,32,104,97,100,97,105,114,112,111,114,116,116,111,119,110,32,111,102,10,10,83,111,109,101,32,39,99,108,105,99,107,39,99,104,97,114,103,101,115,107,101,121,119,111,114,100,105,116,32,119,105,108,108,99,105,116,121,32,111,102,40,116,104,105,115,41,59,65,110,100,114,101,119,32,117,110,105,113,117,101,32,99,104,101,99,107,101,100,111,114,32,109,111,114,101,51,48,48,112,120,59,32,114,101,116,117,114,110,59,114,115,105,111,110,61,34,112,108,117,103,105,110,115,119,105,116,104,105,110,32,104,101,114,115,101,108,102,83,116,97,116,105,111,110,70,101,100,101,114,97,108,118,101,110,116,117,114,101,112,117,98,108,105,115,104,115,101,110,116,32,116,111,116,101,110,115,105,111,110,97,99,116,114,101,115,115,99,111,109,101,32,116,111,102,105,110,103,101,114,115,68,117,107,101,32,111,102,112,101,111,112,108,101,44,101,120,112,108,111,105,116,119,104,97,116,32,105,115,104,97,114,109,111,110,121,97,32,109,97,106,111,114,34,58,34,104,116,116,112,105,110,32,104,105,115,32,109,101,110,117,34,62,10,109,111,110,116,104,108,121,111,102,102,105,99,101,114,99,111,117,110,99,105,108,103,97,105,110,105,110,103,101,118,101,110,32,105,110,83,117,109,109,97,114,121,100,97,116,101,32,111,102,108,111,121,97,108,116,121,102,105,116,110,101,115,115,97,110,100,32,119,97,115,101,109,112,101,114,111,114,115,117,112,114,101,109,101,83,101,99,111,110,100,32,104,101,97,114,105,110,103,82,117,115,115,105,97,110,108,111,110,103,101,115,116,65,108,98,101,114,116,97,108,97,116,101,114,97,108,115,101,116,32,111,102,32,115,109,97,108,108,34,62,46,97,112,112,101,110,100,100,111,32,119,105,116,104,102,101,100,101,114,97,108,98,97,110,107,32,111,102,98,101,110,101,97,116,104,68,101,115,112,105,116,101,67,97,112,105,116,97,108,103,114,111,117,110,100,115,41,44,32,97,110,100,32,112,101,114,99,101,110,116,105,116,32,102,114,111,109,99,108,111,115,105,110,103,99,111,110,116,97,105,110,73,110,115,116,101,97,100,102,105,102,116,101,101,110,97,115,32,119,101,108,108,46,121,97,104,111,111,46,114,101,115,112,111,110,100,102,105,103,104,116,101,114,111,98,115,99,117,114,101,114,101,102,108,101,99,116,111,114,103,97,110,105,99,61,32,77,97,116,104,46,101,100,105,116,105,110,103,111,110,108,105,110,101,32,112,97,100,100,105,110,103,97,32,119,104,111,108,101,111,110,101,114,114,111,114,121,101,97,114,32,111,102,101,110,100,32,111,102,32,98,97,114,114,105,101,114,119,104,101,110,32,105,116,104,101,97,100,101,114,32,104,111,109,101,32,111,102,114,101,115,117,109,101,100,114,101,110,97,109,101,100,115,116,114,111,110,103,62,104,101,97,116,105,110,103,114,101,116,97,105,110,115,99,108,111,117,100,102,114,119,97,121,32,111,102,32,77,97,114,99,104,32,49,107,110,111,119,105,110,103,105,110,32,112,97,114,116,66,101,116,119,101,101,110,108,101,115,115,111,110,115,99,108,111,115,101,115,116,118,105,114,116,117,97,108,108,105,110,107,115,34,62,99,114,111,115,115,101,100,69,78,68,32,45,45,62,102,97,109,111,117,115,32,97,119,97,114,100,101,100,76,105,99,101,110,115,101,72,101,97,108,116,104,32,102,97,105,114,108,121,32,119,101,97,108,116,104,121,109,105,110,105,109,97,108,65,102,114,105,99,97,110,99,111,109,112,101,116,101,108,97,98,101,108,34,62,115,105,110,103,105,110,103,102,97,114,109,101,114,115,66,114,97,115,105,108,41,100,105,115,99,117,115,115,114,101,112,108,97,99,101,71,114,101,103,111,114,121,102,111,110,116,32,99,111,112,117,114,115,117,101,100,97,112,112,101,97,114,115,109,97,107,101,32,117,112,114,111,117,110,100,101,100,98,111,116,104,32,111,102,98,108,111,99,107,101,100,115,97,119,32,116,104,101,111,102,102,105,99,101,115,99,111,108,111,117,114,115,105,102,40,100,111,99,117,119,104,101,110,32,104,101,101,110,102,111,114,99,101,112,117,115,104,40,102,117,65,117,103,117,115,116,32,85,84,70,45,56,34,62,70,97,110,116,97,115,121,105,110,32,109,111,115,116,105,110,106,117,114,101,100,85,115,117,97,108,108,121,102,97,114,109,105,110,103,99,108,111,115,117,114,101,111,98,106,101,99,116,32,100,101,102,101,110,99,101,117,115,101,32,111,102,32,77,101,100,105,99,97,108,60,98,111,100,121,62,10,101,118,105,100,101,110,116,98,101,32,117,115,101,100,107,101,121,67,111,100,101,115,105,120,116,101,101,110,73,115,108,97,109,105,99,35,48,48,48,48,48,48,101,110,116,105,114,101,32,119,105,100,101,108,121,32,97,99,116,105,118,101,32,40,116,121,112,101,111,102,111,110,101,32,99,97,110,99,111,108,111,114,32,61,115,112,101,97,107,101,114,101,120,116,101,110,100,115,80,104,121,115,105,99,115,116,101,114,114,97,105,110,60,116,98,111,100,121,62,102,117,110,101,114,97,108,118,105,101,119,105,110,103,109,105,100,100,108,101,32,99,114,105,99,107,101,116,112,114,111,112,104,101,116,115,104,105,102,116,101,100,100,111,99,116,111,114,115,82,117,115,115,101,108,108,32,116,97,114,103,101,116,99,111,109,112,97,99,116,97,108,103,101,98,114,97,115,111,99,105,97,108,45,98,117,108,107,32,111,102,109,97,110,32,97,110,100,60,47,116,100,62,10,32,104,101,32,108,101,102,116,41,46,118,97,108,40,41,102,97,108,115,101,41,59,108,111,103,105,99,97,108,98,97,110,107,105,110,103,104,111,109,101,32,116,111,110,97,109,105,110,103,32,65,114,105,122,111,110,97,99,114,101,100,105,116,115,41,59,10,125,41,59,10,102,111,117,110,100,101,114,105,110,32,116,117,114,110,67,111,108,108,105,110,115,98,101,102,111,114,101,32,66,117,116,32,116,104,101,99,104,97,114,103,101,100,84,105,116,108,101,34,62,67,97,112,116,97,105,110,115,112,101,108,108,101,100,103,111,100,100,101,115,115,84,97,103,32,45,45,62,65,100,100,105,110,103,58,98,117,116,32,119,97,115,82,101,99,101,110,116,32,112,97,116,105,101,110,116,98,97,99,107,32,105,110,61,102,97,108,115,101,38,76,105,110,99,111,108,110,119,101,32,107,110,111,119,67,111,117,110,116,101,114,74,117,100,97,105,115,109,115,99,114,105,112,116,32,97,108,116,101,114,101,100,39,93,41,59,10,32,32,104,97,115,32,116,104,101,117,110,99,108,101,97,114,69,118,101,110,116,39,44,98,111,116,104,32,105,110,110,111,116,32,97,108,108,10,10,60,33,45,45,32,112,108,97,99,105,110,103,104,97,114,100,32,116,111,32,99,101,110,116,101,114,115,111,114,116,32,111,102,99,108,105,101,110,116,115,115,116,114,101,101,116,115,66,101,114,110,97,114,100,97,115,115,101,114,116,115,116,101,110,100,32,116,111,102,97,110,116,97,115,121,100,111,119,110,32,105,110,104,97,114,98,111,117,114,70,114,101,101,100,111,109,106,101,119,101,108,114,121,47,97,98,111,117,116,46,46,115,101,97,114,99,104,108,101,103,101,110,100,115,105,115,32,109,97,100,101,109,111,100,101,114,110,32,111,110,108,121,32,111,110,111,110,108,121,32,116,111,105,109,97,103,101,34,32,108,105,110,101,97,114,32,112,97,105,110,116,101,114,97,110,100,32,110,111,116,114,97,114,101,108,121,32,97,99,114,111,110,121,109,100,101,108,105,118,101,114,115,104,111,114,116,101,114,48,48,38,97,109,112,59,97,115,32,109,97,110,121,119,105,100,116,104,61,34,47,42,32,60,33,91,67,116,105,116,108,101,32,61,111,102,32,116,104,101,32,108,111,119,101,115,116,32,112,105,99,107,101,100,32,101,115,99,97,112,101,100,117,115,101,115,32,111,102,112,101,111,112,108,101,115,32,80,117,98,108,105,99,77,97,116,116,104,101,119,116,97,99,116,105,99,115,100,97,109,97,103,101,100,119,97,121,32,102,111,114,108,97,119,115,32,111,102,101,97,115,121,32,116,111,32,119,105,110,100,111,119,115,116,114,111,110,103,32,32,115,105,109,112,108,101,125,99,97,116,99,104,40,115,101,118,101,110,116,104,105,110,102,111,98,111,120,119,101,110,116,32,116,111,112,97,105,110,116,101,100,99,105,116,105,122,101,110,73,32,100,111,110,39,116,114,101,116,114,101,97,116,46,32,83,111,109,101,32,119,119,46,34,41,59,10,98,111,109,98,105,110,103,109,97,105,108,116,111,58,109,97,100,101,32,105,110,46,32,77,97,110,121,32,99,97,114,114,105,101,115,124,124,123,125,59,119,105,119,111,114,107,32,111,102,115,121,110,111,110,121,109,100,101,102,101,97,116,115,102,97,118,111,114,101,100,111,112,116,105,99,97,108,112,97,103,101,84,114,97,117,110,108,101,115,115,32,115,101,110,100,105,110,103,108,101,102,116,34,62,60,99,111,109,83,99,111,114,65,108,108,32,116,104,101,106,81,117,101,114,121,46,116,111,117,114,105,115,116,67,108,97,115,115,105,99,102,97,108,115,101,34,32,87,105,108,104,101,108,109,115,117,98,117,114,98,115,103,101,110,117,105,110,101,98,105,115,104,111,112,115,46,115,112,108,105,116,40,103,108,111,98,97,108,32,102,111,108,108,111,119,115,98,111,100,121,32,111,102,110,111,109,105,110,97,108,67,111,110,116,97,99,116,115,101,99,117,108,97,114,108,101,102,116,32,116,111,99,104,105,101,102,108,121,45,104,105,100,100,101,110,45,98,97,110,110,101,114,60,47,108,105,62,10,10,46,32,87,104,101,110,32,105,110,32,98,111,116,104,100,105,115,109,105,115,115,69,120,112,108,111,114,101,97,108,119,97,121,115,32,118,105,97,32,116,104,101,115,112,97,195,177,111,108,119,101,108,102,97,114,101,114,117,108,105,110,103,32,97,114,114,97,110,103,101,99,97,112,116,97,105,110,104,105,115,32,115,111,110,114,117,108,101,32,111,102,104,101,32,116,111,111,107,105,116,115,101,108,102,44,61,48,38,97,109,112,59,40,99,97,108,108,101,100,115,97,109,112,108,101,115,116,111,32,109,97,107,101,99,111,109,47,112,97,103,77,97,114,116,105,110,32,75,101,110,110,101,100,121,97,99,99,101,112,116,115,102,117,108,108,32,111,102,104,97,110,100,108,101,100,66,101,115,105,100,101,115,47,47,45,45,62,60,47,97,98,108,101,32,116,111,116,97,114,103,101,116,115,101,115,115,101,110,99,101,104,105,109,32,116,111,32,105,116,115,32,98,121,32,99,111,109,109,111,110,46,109,105,110,101,114,97,108,116,111,32,116,97,107,101,119,97,121,115,32,116,111,115,46,111,114,103,47,108,97,100,118,105,115,101,100,112,101,110,97,108,116,121,115,105,109,112,108,101,58,105,102,32,116,104,101,121,76,101,116,116,101,114,115,97,32,115,104,111,114,116,72,101,114,98,101,114,116,115,116,114,105,107,101,115,32,103,114,111,117,112,115,46,108,101,110,103,116,104,102,108,105,103,104,116,115,111,118,101,114,108,97,112,115,108,111,119,108,121,32,108,101,115,115,101,114,32,115,111,99,105,97,108,32,60,47,112,62,10,9,9,105,116,32,105,110,116,111,114,97,110,107,101,100,32,114,97,116,101,32,111,102,117,108,62,13,10,32,32,97,116,116,101,109,112,116,112,97,105,114,32,111,102,109,97,107,101,32,105,116,75,111,110,116,97,107,116,65,110,116,111,110,105,111,104,97,118,105,110,103,32,114,97,116,105,110,103,115,32,97,99,116,105,118,101,115,116,114,101,97,109,115,116,114,97,112,112,101,100,34,41,46,99,115,115,40,104,111,115,116,105,108,101,108,101,97,100,32,116,111,108,105,116,116,108,101,32,103,114,111,117,112,115,44,80,105,99,116,117,114,101,45,45,62,13,10,13,10,32,114,111,119,115,61,34,32,111,98,106,101,99,116,105,110,118,101,114,115,101,60,102,111,111,116,101,114,67,117,115,116,111,109,86,62,60,92,47,115,99,114,115,111,108,118,105,110,103,67,104,97,109,98,101,114,115,108,97,118,101,114,121,119,111,117,110,100,101,100,119,104,101,114,101,97,115,33,61,32,39,117,110,100,102,111,114,32,97,108,108,112,97,114,116,108,121,32,45,114,105,103,104,116,58,65,114,97,98,105,97,110,98,97,99,107,101,100,32,99,101,110,116,117,114,121,117,110,105,116,32,111,102,109,111,98,105,108,101,45,69,117,114,111,112,101,44,105,115,32,104,111,109,101,114,105,115,107,32,111,102,100,101,115,105,114,101,100,67,108,105,110,116,111,110,99,111,115,116,32,111,102,97,103,101,32,111,102,32,98,101,99,111,109,101,32,110,111,110,101,32,111,102,112,38,113,117,111,116,59,77,105,100,100,108,101,32,101,97,100,39,41,91,48,67,114,105,116,105,99,115,115,116,117,100,105,111,115,62,38,99,111,112,121,59,103,114,111,117,112,34,62,97,115,115,101,109,98,108,109,97,107,105,110,103,32,112,114,101,115,115,101,100,119,105,100,103,101,116,46,112,115,58,34,32,63,32,114,101,98,117,105,108,116,98,121,32,115,111,109,101,70,111,114,109,101,114,32,101,100,105,116,111,114,115,100,101,108,97,121,101,100,67,97,110,111,110,105,99,104,97,100,32,116,104,101,112,117,115,104,105,110,103,99,108,97,115,115,61,34,98,117,116,32,97,114,101,112,97,114,116,105,97,108,66,97,98,121,108,111,110,98,111,116,116,111,109,32,99,97,114,114,105,101,114,67,111,109,109,97,110,100,105,116,115,32,117,115,101,65,115,32,119,105,116,104,99,111,117,114,115,101,115,97,32,116,104,105,114,100,100,101,110,111,116,101,115,97,108,115,111,32,105,110,72,111,117,115,116,111,110,50,48,112,120,59,34,62,97,99,99,117,115,101,100,100,111,117,98,108,101,32,103,111,97,108,32,111,102,70,97,109,111,117,115,32,41,46,98,105,110,100,40,112,114,105,101,115,116,115,32,79,110,108,105,110,101,105,110,32,74,117,108,121,115,116,32,43,32,34,103,99,111,110,115,117,108,116,100,101,99,105,109,97,108,104,101,108,112,102,117,108,114,101,118,105,118,101,100,105,115,32,118,101,114,121,114,39,43,39,105,112,116,108,111,115,105,110,103,32,102,101,109,97,108,101,115,105,115,32,97,108,115,111,115,116,114,105,110,103,115,100,97,121,115,32,111,102,97,114,114,105,118,97,108,102,117,116,117,114,101,32,60,111,98,106,101,99,116,102,111,114,99,105,110,103,83,116,114,105,110,103,40,34,32,47,62,10,9,9,104,101,114,101,32,105,115,101,110,99,111,100,101,100,46,32,32,84,104,101,32,98,97,108,108,111,111,110,100,111,110,101,32,98,121,47,99,111,109,109,111,110,98,103,99,111,108,111,114,108,97,119,32,111,102,32,73,110,100,105,97,110,97,97,118,111,105,100,101,100,98,117,116,32,116,104,101,50,112,120,32,51,112,120,106,113,117,101,114,121,46,97,102,116,101,114,32,97,112,111,108,105,99,121,46,109,101,110,32,97,110,100,102,111,111,116,101,114,45,61,32,116,114,117,101,59,102,111,114,32,117,115,101,115,99,114,101,101,110,46,73,110,100,105,97,110,32,105,109,97,103,101,32,61,102,97,109,105,108,121,44,104,116,116,112,58,47,47,32,38,110,98,115,112,59,100,114,105,118,101,114,115,101,116,101,114,110,97,108,115,97,109,101,32,97,115,110,111,116,105,99,101,100,118,105,101,119,101,114,115,125,41,40,41,59,10,32,105,115,32,109,111,114,101,115,101,97,115,111,110,115,102,111,114,109,101,114,32,116,104,101,32,110,101,119,105,115,32,106,117,115,116,99,111,110,115,101,110,116,32,83,101,97,114,99,104,119,97,115,32,116,104,101,119,104,121,32,116,104,101,115,104,105,112,112,101,100,98,114,62,60,98,114,62,119,105,100,116,104,58,32,104,101,105,103,104,116,61,109,97,100,101,32,111,102,99,117,105,115,105,110,101,105,115,32,116,104,97,116,97,32,118,101,114,121,32,65,100,109,105,114,97,108,32,102,105,120,101,100,59,110,111,114,109,97,108,32,77,105,115,115,105,111,110,80,114,101,115,115,44,32,111,110,116,97,114,105,111,99,104,97,114,115,101,116,116,114,121,32,116,111,32,105,110,118,97,100,101,100,61,34,116,114,117,101,34,115,112,97,99,105,110,103,105,115,32,109,111,115,116,97,32,109,111,114,101,32,116,111,116,97,108,108,121,102,97,108,108,32,111,102,125,41,59,13,10,32,32,105,109,109,101,110,115,101,116,105,109,101,32,105,110,115,101,116,32,111,117,116,115,97,116,105,115,102,121,116,111,32,102,105,110,100,100,111,119,110,32,116,111,108,111,116,32,111,102,32,80,108,97,121,101,114,115,105,110,32,74,117,110,101,113,117,97,110,116,117,109,110,111,116,32,116,104,101,116,105,109,101,32,116,111,100,105,115,116,97,110,116,70,105,110,110,105,115,104,115,114,99,32,61,32,40,115,105,110,103,108,101,32,104,101,108,112,32,111,102,71,101,114,109,97,110,32,108,97,119,32,97,110,100,108,97,98,101,108,101,100,102,111,114,101,115,116,115,99,111,111,107,105,110,103,115,112,97,99,101,34,62,104,101,97,100,101,114,45,119,101,108,108,32,97,115,83,116,97,110,108,101,121,98,114,105,100,103,101,115,47,103,108,111,98,97,108,67,114,111,97,116,105,97,32,65,98,111,117,116,32,91,48,93,59,10,32,32,105,116,44,32,97,110,100,103,114,111,117,112,101,100,98,101,105,110,103,32,97,41,123,116,104,114,111,119,104,101,32,109,97,100,101,108,105,103,104,116,101,114,101,116,104,105,99,97,108,70,70,70,70,70,70,34,98,111,116,116,111,109,34,108,105,107,101,32,97,32,101,109,112,108,111,121,115,108,105,118,101,32,105,110,97,115,32,115,101,101,110,112,114,105,110,116,101,114,109,111,115,116,32,111,102,117,98,45,108,105,110,107,114,101,106,101,99,116,115,97,110,100,32,117,115,101,105,109,97,103,101,34,62,115,117,99,99,101,101,100,102,101,101,100,105,110,103,78,117,99,108,101,97,114,105,110,102,111,114,109,97,116,111,32,104,101,108,112,87,111,109,101,110,39,115,78,101,105,116,104,101,114,77,101,120,105,99,97,110,112,114,111,116,101,105,110,60,116,97,98,108,101,32,98,121,32,109,97,110,121,104,101,97,108,116,104,121,108,97,119,115,117,105,116,100,101,118,105,115,101,100,46,112,117,115,104,40,123,115,101,108,108,101,114,115,115,105,109,112,108,121,32,84,104,114,111,117,103,104,46,99,111,111,107,105,101,32,73,109,97,103,101,40,111,108,100,101,114,34,62,117,115,46,106,115,34,62,32,83,105,110,99,101,32,117,110,105,118,101,114,115,108,97,114,103,101,114,32,111,112,101,110,32,116,111,33,45,45,32,101,110,100,108,105,101,115,32,105,110,39,93,41,59,13,10,32,32,109,97,114,107,101,116,119,104,111,32,105,115,32,40,34,68,79,77,67,111,109,97,110,97,103,101,100,111,110,101,32,102,111,114,116,121,112,101,111,102,32,75,105,110,103,100,111,109,112,114,111,102,105,116,115,112,114,111,112,111,115,101,116,111,32,115,104,111,119,99,101,110,116,101,114,59,109,97,100,101,32,105,116,100,114,101,115,115,101,100,119,101,114,101,32,105,110,109,105,120,116,117,114,101,112,114,101,99,105,115,101,97,114,105,115,105,110,103,115,114,99,32,61,32,39,109,97,107,101,32,97,32,115,101,99,117,114,101,100,66,97,112,116,105,115,116,118,111,116,105,110,103,32,10,9,9,118,97,114,32,77,97,114,99,104,32,50,103,114,101,119,32,117,112,67,108,105,109,97,116,101,46,114,101,109,111,118,101,115,107,105,108,108,101,100,119,97,121,32,116,104,101,60,47,104,101,97,100,62,102,97,99,101,32,111,102,97,99,116,105,110,103,32,114,105,103,104,116,34,62,116,111,32,119,111,114,107,114,101,100,117,99,101,115,104,97,115,32,104,97,100,101,114,101,99,116,101,100,115,104,111,119,40,41,59,97,99,116,105,111,110,61,98,111,111,107,32,111,102,97,110,32,97,114,101,97,61,61,32,34,104,116,116,60,104,101,97,100,101,114,10,60,104,116,109,108,62,99,111,110,102,111,114,109,102,97,99,105,110,103,32,99,111,111,107,105,101,46,114,101,108,121,32,111,110,104,111,115,116,101,100,32,46,99,117,115,116,111,109,104,101,32,119,101,110,116,98,117,116,32,102,111,114,115,112,114,101,97,100,32,70,97,109,105,108,121,32,97,32,109,101,97,110,115,111,117,116,32,116,104,101,102,111,114,117,109,115,46,102,111,111,116,97,103,101,34,62,77,111,98,105,108,67,108,101,109,101,110,116,115,34,32,105,100,61,34,97,115,32,104,105,103,104,105,110,116,101,110,115,101,45,45,62,60,33,45,45,102,101,109,97,108,101,32,105,115,32,115,101,101,110,105,109,112,108,105,101,100,115,101,116,32,116,104,101,97,32,115,116,97,116,101,97,110,100,32,104,105,115,102,97,115,116,101,115,116,98,101,115,105,100,101,115,98,117,116,116,111,110,95,98,111,117,110,100,101,100,34,62,60,105,109,103,32,73,110,102,111,98,111,120,101,118,101,110,116,115,44,97,32,121,111,117,110,103,97,110,100,32,97,114,101,78,97,116,105,118,101,32,99,104,101,97,112,101,114,84,105,109,101,111,117,116,97,110,100,32,104,97,115,101,110,103,105,110,101,115,119,111,110,32,116,104,101,40,109,111,115,116,108,121,114,105,103,104,116,58,32,102,105,110,100,32,97,32,45,98,111,116,116,111,109,80,114,105,110,99,101,32,97,114,101,97,32,111,102,109,111,114,101,32,111,102,115,101,97,114,99,104,95,110,97,116,117,114,101,44,108,101,103,97,108,108,121,112,101,114,105,111,100,44,108,97,110,100,32,111,102,111,114,32,119,105,116,104,105,110,100,117,99,101,100,112,114,111,118,105,110,103,109,105,115,115,105,108,101,108,111,99,97,108,108,121,65,103,97,105,110,115,116,116,104,101,32,119,97,121,107,38,113,117,111,116,59,112,120,59,34,62,13,10,112,117,115,104,101,100,32,97,98,97,110,100,111,110,110,117,109,101,114,97,108,67,101,114,116,97,105,110,73,110,32,116,104,105,115,109,111,114,101,32,105,110,111,114,32,115,111,109,101,110,97,109,101,32,105,115,97,110,100,44,32,105,110,99,114,111,119,110,101,100,73,83,66,78,32,48,45,99,114,101,97,116,101,115,79,99,116,111,98,101,114,109,97,121,32,110,111,116,99,101,110,116,101,114,32,108,97,116,101,32,105,110,68,101,102,101,110,99,101,101,110,97,99,116,101,100,119,105,115,104,32,116,111,98,114,111,97,100,108,121,99,111,111,108,105,110,103,111,110,108,111,97,100,61,105,116,46,32,84,104,101,114,101,99,111,118,101,114,77,101,109,98,101,114,115,104,101,105,103,104,116,32,97,115,115,117,109,101,115,60,104,116,109,108,62,10,112,101,111,112,108,101,46,105,110,32,111,110,101,32,61,119,105,110,100,111,119,102,111,111,116,101,114,95,97,32,103,111,111,100,32,114,101,107,108,97,109,97,111,116,104,101,114,115,44,116,111,32,116,104,105,115,95,99,111,111,107,105,101,112,97,110,101,108,34,62,76,111,110,100,111,110,44,100,101,102,105,110,101,115,99,114,117,115,104,101,100,98,97,112,116,105,115,109,99,111,97,115,116,97,108,115,116,97,116,117,115,32,116,105,116,108,101,34,32,109,111,118,101,32,116,111,108,111,115,116,32,105,110,98,101,116,116,101,114,32,105,109,112,108,105,101,115,114,105,118,97,108,114,121,115,101,114,118,101,114,115,32,83,121,115,116,101,109,80,101,114,104,97,112,115,101,115,32,97,110,100,32,99,111,110,116,101,110,100,102,108,111,119,105,110,103,108,97,115,116,101,100,32,114,105,115,101,32,105,110,71,101,110,101,115,105,115,118,105,101,119,32,111,102,114,105,115,105,110,103,32,115,101,101,109,32,116,111,98,117,116,32,105,110,32,98,97,99,107,105,110,103,104,101,32,119,105,108,108,103,105,118,101,110,32,97,103,105,118,105,110,103,32,99,105,116,105,101,115,46,102,108,111,119,32,111,102,32,76,97,116,101,114,32,97,108,108,32,98,117,116,72,105,103,104,119,97,121,111,110,108,121,32,98,121,115,105,103,110,32,111,102,104,101,32,100,111,101,115,100,105,102,102,101,114,115,98,97,116,116,101,114,121,38,97,109,112,59,108,97,115,105,110,103,108,101,115,116,104,114,101,97,116,115,105,110,116,101,103,101,114,116,97,107,101,32,111,110,114,101,102,117,115,101,100,99,97,108,108,101,100,32,61,85,83,38,97,109,112,83,101,101,32,116,104,101,110,97,116,105,118,101,115,98,121,32,116,104,105,115,115,121,115,116,101,109,46,104,101,97,100,32,111,102,58,104,111,118,101,114,44,108,101,115,98,105,97,110,115,117,114,110,97,109,101,97,110,100,32,97,108,108,99,111,109,109,111,110,47,104,101,97,100,101,114,95,95,112,97,114,97,109,115,72,97,114,118,97,114,100,47,112,105,120,101,108,46,114,101,109,111,118,97,108,115,111,32,108,111,110,103,114,111,108,101,32,111,102,106,111,105,110,116,108,121,115,107,121,115,99,114,97,85,110,105,99,111,100,101,98,114,32,47,62,13,10,65,116,108,97,110,116,97,110,117,99,108,101,117,115,67,111,117,110,116,121,44,112,117,114,101,108,121,32,99,111,117,110,116,34,62,101,97,115,105,108,121,32,98,117,105,108,100,32,97,111,110,99,108,105,99,107,97,32,103,105,118,101,110,112,111,105,110,116,101,114,104,38,113,117,111,116,59,101,118,101,110,116,115,32,101,108,115,101,32,123,10,100,105,116,105,111,110,115,110,111,119,32,116,104,101,44,32,119,105,116,104,32,109,97,110,32,119,104,111,111,114,103,47,87,101,98,111,110,101,32,97,110,100,99,97,118,97,108,114,121,72,101,32,100,105,101,100,115,101,97,116,116,108,101,48,48,44,48,48,48,32,123,119,105,110,100,111,119,104,97,118,101,32,116,111,105,102,40,119,105,110,100,97,110,100,32,105,116,115,115,111,108,101,108,121,32,109,38,113,117,111,116,59,114,101,110,101,119,101,100,68,101,116,114,111,105,116,97,109,111,110,103,115,116,101,105,116,104,101,114,32,116,104,101,109,32,105,110,83,101,110,97,116,111,114,85,115,60,47,97,62,60,75,105,110,103,32,111,102,70,114,97,110,99,105,115,45,112,114,111,100,117,99,104,101,32,117,115,101,100,97,114,116,32,97,110,100,104,105,109,32,97,110,100,117,115,101,100,32,98,121,115,99,111,114,105,110,103,97,116,32,104,111,109,101,116,111,32,104,97,118,101,114,101,108,97,116,101,115,105,98,105,108,105,116,121,102,97,99,116,105,111,110,66,117,102,102,97,108,111,108,105,110,107,34,62,60,119,104,97,116,32,104,101,102,114,101,101,32,116,111,67,105,116,121,32,111,102,99,111,109,101,32,105,110,115,101,99,116,111,114,115,99,111,117,110,116,101,100,111,110,101,32,100,97,121,110,101,114,118,111,117,115,115,113,117,97,114,101,32,125,59,105,102,40,103,111,105,110,32,119,104,97,116,105,109,103,34,32,97,108,105,115,32,111,110,108,121,115,101,97,114,99,104,47,116,117,101,115,100,97,121,108,111,111,115,101,108,121,83,111,108,111,109,111,110,115,101,120,117,97,108,32,45,32,60,97,32,104,114,109,101,100,105,117,109,34,68,79,32,78,79,84,32,70,114,97,110,99,101,44,119,105,116,104,32,97,32,119,97,114,32,97,110,100,115,101,99,111,110,100,32,116,97,107,101,32,97,32,62,13,10,13,10,13,10,109,97,114,107,101,116,46,104,105,103,104,119,97,121,100,111,110,101,32,105,110,99,116,105,118,105,116,121,34,108,97,115,116,34,62,111,98,108,105,103,101,100,114,105,115,101,32,116,111,34,117,110,100,101,102,105,109,97,100,101,32,116,111,32,69,97,114,108,121,32,112,114,97,105,115,101,100,105,110,32,105,116,115,32,102,111,114,32,104,105,115,97,116,104,108,101,116,101,74,117,112,105,116,101,114,89,97,104,111,111,33,32,116,101,114,109,101,100,32,115,111,32,109,97,110,121,114,101,97,108,108,121,32,115,46,32,84,104,101,32,97,32,119,111,109,97,110,63,118,97,108,117,101,61,100,105,114,101,99,116,32,114,105,103,104,116,34,32,98,105,99,121,99,108,101,97,99,105,110,103,61,34,100,97,121,32,97,110,100,115,116,97,116,105,110,103,82,97,116,104,101,114,44,104,105,103,104,101,114,32,79,102,102,105,99,101,32,97,114,101,32,110,111,119,116,105,109,101,115,44,32,119,104,101,110,32,97,32,112,97,121,32,102,111,114,111,110,32,116,104,105,115,45,108,105,110,107,34,62,59,98,111,114,100,101,114,97,114,111,117,110,100,32,97,110,110,117,97,108,32,116,104,101,32,78,101,119,112,117,116,32,116,104,101,46,99,111,109,34,32,116,97,107,105,110,32,116,111,97,32,98,114,105,101,102,40,105,110,32,116,104,101,103,114,111,117,112,115,46,59,32,119,105,100,116,104,101,110,122,121,109,101,115,115,105,109,112,108,101,32,105,110,32,108,97,116,101,123,114,101,116,117,114,110,116,104,101,114,97,112,121,97,32,112,111,105,110,116,98,97,110,110,105,110,103,105,110,107,115,34,62,10,40,41,59,34,32,114,101,97,32,112,108,97,99,101,92,117,48,48,51,67,97,97,98,111,117,116,32,97,116,114,62,13,10,9,9,99,99,111,117,110,116,32,103,105,118,101,115,32,97,60,83,67,82,73,80,84,82,97,105,108,119,97,121,116,104,101,109,101,115,47,116,111,111,108,98,111,120,66,121,73,100,40,34,120,104,117,109,97,110,115,44,119,97,116,99,104,101,115,105,110,32,115,111,109,101,32,105,102,32,40,119,105,99,111,109,105,110,103,32,102,111,114,109,97,116,115,32,85,110,100,101,114,32,98,117,116,32,104,97,115,104,97,110,100,101,100,32,109,97,100,101,32,98,121,116,104,97,110,32,105,110,102,101,97,114,32,111,102,100,101,110,111,116,101,100,47,105,102,114,97,109,101,108,101,102,116,32,105,110,118,111,108,116,97,103,101,105,110,32,101,97,99,104,97,38,113,117,111,116,59,98,97,115,101,32,111,102,73,110,32,109,97,110,121,117,110,100,101,114,103,111,114,101,103,105,109,101,115,97,99,116,105,111,110,32,60,47,112,62,13,10,60,117,115,116,111,109,86,97,59,38,103,116,59,60,47,105,109,112,111,114,116,115,111,114,32,116,104,97,116,109,111,115,116,108,121,32,38,97,109,112,59,114,101,32,115,105,122,101,61,34,60,47,97,62,60,47,104,97,32,99,108,97,115,115,112,97,115,115,105,118,101,72,111,115,116,32,61,32,87,104,101,116,104,101,114,102,101,114,116,105,108,101,86,97,114,105,111,117,115,61,91,93,59,40,102,117,99,97,109,101,114,97,115,47,62,60,47,116,100,62,97,99,116,115,32,97,115,73,110,32,115,111,109,101,62,13,10,13,10,60,33,111,114,103,97,110,105,115,32,60,98,114,32,47,62,66,101,105,106,105,110,103,99,97,116,97,108,195,160,100,101,117,116,115,99,104,101,117,114,111,112,101,117,101,117,115,107,97,114,97,103,97,101,105,108,103,101,115,118,101,110,115,107,97,101,115,112,97,195,177,97,109,101,110,115,97,106,101,117,115,117,97,114,105,111,116,114,97,98,97,106,111,109,195,169,120,105,99,111,112,195,161,103,105,110,97,115,105,101,109,112,114,101,115,105,115,116,101,109,97,111,99,116,117,98,114,101,100,117,114,97,110,116,101,97,195,177,97,100,105,114,101,109,112,114,101,115,97,109,111,109,101,110,116,111,110,117,101,115,116,114,111,112,114,105,109,101,114,97,116,114,97,118,195,169,115,103,114,97,99,105,97,115,110,117,101,115,116,114,97,112,114,111,99,101,115,111,101,115,116,97,100,111,115,99,97,108,105,100,97,100,112,101,114,115,111,110,97,110,195,186,109,101,114,111,97,99,117,101,114,100,111,109,195,186,115,105,99,97,109,105,101,109,98,114,111,111,102,101,114,116,97,115,97,108,103,117,110,111,115,112,97,195,173,115,101,115,101,106,101,109,112,108,111,100,101,114,101,99,104,111,97,100,101,109,195,161,115,112,114,105,118,97,100,111,97,103,114,101,103,97,114,101,110,108,97,99,101,115,112,111,115,105,98,108,101,104,111,116,101,108,101,115,115,101,118,105,108,108,97,112,114,105,109,101,114,111,195,186,108,116,105,109,111,101,118,101,110,116,111,115,97,114,99,104,105,118,111,99,117,108,116,117,114,97,109,117,106,101,114,101,115,101,110,116,114,97,100,97,97,110,117,110,99,105,111,101,109,98,97,114,103,111,109,101,114,99,97,100,111,103,114,97,110,100,101,115,101,115,116,117,100,105,111,109,101,106,111,114,101,115,102,101,98,114,101,114,111,100,105,115,101,195,177,111,116,117,114,105,115,109,111,99,195,179,100,105,103,111,112,111,114,116,97,100,97,101,115,112,97,99,105,111,102,97,109,105,108,105,97,97,110,116,111,110,105,111,112,101,114,109,105,116,101,103,117,97,114,100,97,114,97,108,103,117,110,97,115,112,114,101,99,105,111,115,97,108,103,117,105,101,110,115,101,110,116,105,100,111,118,105,115,105,116,97,115,116,195,173,116,117,108,111,99,111,110,111,99,101,114,115,101,103,117,110,100,111,99,111,110,115,101,106,111,102,114,97,110,99,105,97,109,105,110,117,116,111,115,115,101,103,117,110,100,97,116,101,110,101,109,111,115,101,102,101,99,116,111,115,109,195,161,108,97,103,97],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+92208);allocate([115,101,115,105,195,179,110,114,101,118,105,115,116,97,103,114,97,110,97,100,97,99,111,109,112,114,97,114,105,110,103,114,101,115,111,103,97,114,99,195,173,97,97,99,99,105,195,179,110,101,99,117,97,100,111,114,113,117,105,101,110,101,115,105,110,99,108,117,115,111,100,101,98,101,114,195,161,109,97,116,101,114,105,97,104,111,109,98,114,101,115,109,117,101,115,116,114,97,112,111,100,114,195,173,97,109,97,195,177,97,110,97,195,186,108,116,105,109,97,101,115,116,97,109,111,115,111,102,105,99,105,97,108,116,97,109,98,105,101,110,110,105,110,103,195,186,110,115,97,108,117,100,111,115,112,111,100,101,109,111,115,109,101,106,111,114,97,114,112,111,115,105,116,105,111,110,98,117,115,105,110,101,115,115,104,111,109,101,112,97,103,101,115,101,99,117,114,105,116,121,108,97,110,103,117,97,103,101,115,116,97,110,100,97,114,100,99,97,109,112,97,105,103,110,102,101,97,116,117,114,101,115,99,97,116,101,103,111,114,121,101,120,116,101,114,110,97,108,99,104,105,108,100,114,101,110,114,101,115,101,114,118,101,100,114,101,115,101,97,114,99,104,101,120,99,104,97,110,103,101,102,97,118,111,114,105,116,101,116,101,109,112,108,97,116,101,109,105,108,105,116,97,114,121,105,110,100,117,115,116,114,121,115,101,114,118,105,99,101,115,109,97,116,101,114,105,97,108,112,114,111,100,117,99,116,115,122,45,105,110,100,101,120,58,99,111,109,109,101,110,116,115,115,111,102,116,119,97,114,101,99,111,109,112,108,101,116,101,99,97,108,101,110,100,97,114,112,108,97,116,102,111,114,109,97,114,116,105,99,108,101,115,114,101,113,117,105,114,101,100,109,111,118,101,109,101,110,116,113,117,101,115,116,105,111,110,98,117,105,108,100,105,110,103,112,111,108,105,116,105,99,115,112,111,115,115,105,98,108,101,114,101,108,105,103,105,111,110,112,104,121,115,105,99,97,108,102,101,101,100,98,97,99,107,114,101,103,105,115,116,101,114,112,105,99,116,117,114,101,115,100,105,115,97,98,108,101,100,112,114,111,116,111,99,111,108,97,117,100,105,101,110,99,101,115,101,116,116,105,110,103,115,97,99,116,105,118,105,116,121,101,108,101,109,101,110,116,115,108,101,97,114,110,105,110,103,97,110,121,116,104,105,110,103,97,98,115,116,114,97,99,116,112,114,111,103,114,101,115,115,111,118,101,114,118,105,101,119,109,97,103,97,122,105,110,101,101,99,111,110,111,109,105,99,116,114,97,105,110,105,110,103,112,114,101,115,115,117,114,101,118,97,114,105,111,117,115,32,60,115,116,114,111,110,103,62,112,114,111,112,101,114,116,121,115,104,111,112,112,105,110,103,116,111,103,101,116,104,101,114,97,100,118,97,110,99,101,100,98,101,104,97,118,105,111,114,100,111,119,110,108,111,97,100,102,101,97,116,117,114,101,100,102,111,111,116,98,97,108,108,115,101,108,101,99,116,101,100,76,97,110,103,117,97,103,101,100,105,115,116,97,110,99,101,114,101,109,101,109,98,101,114,116,114,97,99,107,105,110,103,112,97,115,115,119,111,114,100,109,111,100,105,102,105,101,100,115,116,117,100,101,110,116,115,100,105,114,101,99,116,108,121,102,105,103,104,116,105,110,103,110,111,114,116,104,101,114,110,100,97,116,97,98,97,115,101,102,101,115,116,105,118,97,108,98,114,101,97,107,105,110,103,108,111,99,97,116,105,111,110,105,110,116,101,114,110,101,116,100,114,111,112,100,111,119,110,112,114,97,99,116,105,99,101,101,118,105,100,101,110,99,101,102,117,110,99,116,105,111,110,109,97,114,114,105,97,103,101,114,101,115,112,111,110,115,101,112,114,111,98,108,101,109,115,110,101,103,97,116,105,118,101,112,114,111,103,114,97,109,115,97,110,97,108,121,115,105,115,114,101,108,101,97,115,101,100,98,97,110,110,101,114,34,62,112,117,114,99,104,97,115,101,112,111,108,105,99,105,101,115,114,101,103,105,111,110,97,108,99,114,101,97,116,105,118,101,97,114,103,117,109,101,110,116,98,111,111,107,109,97,114,107,114,101,102,101,114,114,101,114,99,104,101,109,105,99,97,108,100,105,118,105,115,105,111,110,99,97,108,108,98,97,99,107,115,101,112,97,114,97,116,101,112,114,111,106,101,99,116,115,99,111,110,102,108,105,99,116,104,97,114,100,119,97,114,101,105,110,116,101,114,101,115,116,100,101,108,105,118,101,114,121,109,111,117,110,116,97,105,110,111,98,116,97,105,110,101,100,61,32,102,97,108,115,101,59,102,111,114,40,118,97,114,32,97,99,99,101,112,116,101,100,99,97,112,97,99,105,116,121,99,111,109,112,117,116,101,114,105,100,101,110,116,105,116,121,97,105,114,99,114,97,102,116,101,109,112,108,111,121,101,100,112,114,111,112,111,115,101,100,100,111,109,101,115,116,105,99,105,110,99,108,117,100,101,115,112,114,111,118,105,100,101,100,104,111,115,112,105,116,97,108,118,101,114,116,105,99,97,108,99,111,108,108,97,112,115,101,97,112,112,114,111,97,99,104,112,97,114,116,110,101,114,115,108,111,103,111,34,62,60,97,100,97,117,103,104,116,101,114,97,117,116,104,111,114,34,32,99,117,108,116,117,114,97,108,102,97,109,105,108,105,101,115,47,105,109,97,103,101,115,47,97,115,115,101,109,98,108,121,112,111,119,101,114,102,117,108,116,101,97,99,104,105,110,103,102,105,110,105,115,104,101,100,100,105,115,116,114,105,99,116,99,114,105,116,105,99,97,108,99,103,105,45,98,105,110,47,112,117,114,112,111,115,101,115,114,101,113,117,105,114,101,115,101,108,101,99,116,105,111,110,98,101,99,111,109,105,110,103,112,114,111,118,105,100,101,115,97,99,97,100,101,109,105,99,101,120,101,114,99,105,115,101,97,99,116,117,97,108,108,121,109,101,100,105,99,105,110,101,99,111,110,115,116,97,110,116,97,99,99,105,100,101,110,116,77,97,103,97,122,105,110,101,100,111,99,117,109,101,110,116,115,116,97,114,116,105,110,103,98,111,116,116,111,109,34,62,111,98,115,101,114,118,101,100,58,32,38,113,117,111,116,59,101,120,116,101,110,100,101,100,112,114,101,118,105,111,117,115,83,111,102,116,119,97,114,101,99,117,115,116,111,109,101,114,100,101,99,105,115,105,111,110,115,116,114,101,110,103,116,104,100,101,116,97,105,108,101,100,115,108,105,103,104,116,108,121,112,108,97,110,110,105,110,103,116,101,120,116,97,114,101,97,99,117,114,114,101,110,99,121,101,118,101,114,121,111,110,101,115,116,114,97,105,103,104,116,116,114,97,110,115,102,101,114,112,111,115,105,116,105,118,101,112,114,111,100,117,99,101,100,104,101,114,105,116,97,103,101,115,104,105,112,112,105,110,103,97,98,115,111,108,117,116,101,114,101,99,101,105,118,101,100,114,101,108,101,118,97,110,116,98,117,116,116,111,110,34,32,118,105,111,108,101,110,99,101,97,110,121,119,104,101,114,101,98,101,110,101,102,105,116,115,108,97,117,110,99,104,101,100,114,101,99,101,110,116,108,121,97,108,108,105,97,110,99,101,102,111,108,108,111,119,101,100,109,117,108,116,105,112,108,101,98,117,108,108,101,116,105,110,105,110,99,108,117,100,101,100,111,99,99,117,114,114,101,100,105,110,116,101,114,110,97,108,36,40,116,104,105,115,41,46,114,101,112,117,98,108,105,99,62,60,116,114,62,60,116,100,99,111,110,103,114,101,115,115,114,101,99,111,114,100,101,100,117,108,116,105,109,97,116,101,115,111,108,117,116,105,111,110,60,117,108,32,105,100,61,34,100,105,115,99,111,118,101,114,72,111,109,101,60,47,97,62,119,101,98,115,105,116,101,115,110,101,116,119,111,114,107,115,97,108,116,104,111,117,103,104,101,110,116,105,114,101,108,121,109,101,109,111,114,105,97,108,109,101,115,115,97,103,101,115,99,111,110,116,105,110,117,101,97,99,116,105,118,101,34,62,115,111,109,101,119,104,97,116,118,105,99,116,111,114,105,97,87,101,115,116,101,114,110,32,32,116,105,116,108,101,61,34,76,111,99,97,116,105,111,110,99,111,110,116,114,97,99,116,118,105,115,105,116,111,114,115,68,111,119,110,108,111,97,100,119,105,116,104,111,117,116,32,114,105,103,104,116,34,62,10,109,101,97,115,117,114,101,115,119,105,100,116,104,32,61,32,118,97,114,105,97,98,108,101,105,110,118,111,108,118,101,100,118,105,114,103,105,110,105,97,110,111,114,109,97,108,108,121,104,97,112,112,101,110,101,100,97,99,99,111,117,110,116,115,115,116,97,110,100,105,110,103,110,97,116,105,111,110,97,108,82,101,103,105,115,116,101,114,112,114,101,112,97,114,101,100,99,111,110,116,114,111,108,115,97,99,99,117,114,97,116,101,98,105,114,116,104,100,97,121,115,116,114,97,116,101,103,121,111,102,102,105,99,105,97,108,103,114,97,112,104,105,99,115,99,114,105,109,105,110,97,108,112,111,115,115,105,98,108,121,99,111,110,115,117,109,101,114,80,101,114,115,111,110,97,108,115,112,101,97,107,105,110,103,118,97,108,105,100,97,116,101,97,99,104,105,101,118,101,100,46,106,112,103,34,32,47,62,109,97,99,104,105,110,101,115,60,47,104,50,62,10,32,32,107,101,121,119,111,114,100,115,102,114,105,101,110,100,108,121,98,114,111,116,104,101,114,115,99,111,109,98,105,110,101,100,111,114,105,103,105,110,97,108,99,111,109,112,111,115,101,100,101,120,112,101,99,116,101,100,97,100,101,113,117,97,116,101,112,97,107,105,115,116,97,110,102,111,108,108,111,119,34,32,118,97,108,117,97,98,108,101,60,47,108,97,98,101,108,62,114,101,108,97,116,105,118,101,98,114,105,110,103,105,110,103,105,110,99,114,101,97,115,101,103,111,118,101,114,110,111,114,112,108,117,103,105,110,115,47,76,105,115,116,32,111,102,32,72,101,97,100,101,114,34,62,34,32,110,97,109,101,61,34,32,40,38,113,117,111,116,59,103,114,97,100,117,97,116,101,60,47,104,101,97,100,62,10,99,111,109,109,101,114,99,101,109,97,108,97,121,115,105,97,100,105,114,101,99,116,111,114,109,97,105,110,116,97,105,110,59,104,101,105,103,104,116,58,115,99,104,101,100,117,108,101,99,104,97,110,103,105,110,103,98,97,99,107,32,116,111,32,99,97,116,104,111,108,105,99,112,97,116,116,101,114,110,115,99,111,108,111,114,58,32,35,103,114,101,97,116,101,115,116,115,117,112,112,108,105,101,115,114,101,108,105,97,98,108,101,60,47,117,108,62,10,9,9,60,115,101,108,101,99,116,32,99,105,116,105,122,101,110,115,99,108,111,116,104,105,110,103,119,97,116,99,104,105,110,103,60,108,105,32,105,100,61,34,115,112,101,99,105,102,105,99,99,97,114,114,121,105,110,103,115,101,110,116,101,110,99,101,60,99,101,110,116,101,114,62,99,111,110,116,114,97,115,116,116,104,105,110,107,105,110,103,99,97,116,99,104,40,101,41,115,111,117,116,104,101,114,110,77,105,99,104,97,101,108,32,109,101,114,99,104,97,110,116,99,97,114,111,117,115,101,108,112,97,100,100,105,110,103,58,105,110,116,101,114,105,111,114,46,115,112,108,105,116,40,34,108,105,122,97,116,105,111,110,79,99,116,111,98,101,114,32,41,123,114,101,116,117,114,110,105,109,112,114,111,118,101,100,45,45,38,103,116,59,10,10,99,111,118,101,114,97,103,101,99,104,97,105,114,109,97,110,46,112,110,103,34,32,47,62,115,117,98,106,101,99,116,115,82,105,99,104,97,114,100,32,119,104,97,116,101,118,101,114,112,114,111,98,97,98,108,121,114,101,99,111,118,101,114,121,98,97,115,101,98,97,108,108,106,117,100,103,109,101,110,116,99,111,110,110,101,99,116,46,46,99,115,115,34,32,47,62,32,119,101,98,115,105,116,101,114,101,112,111,114,116,101,100,100,101,102,97,117,108,116,34,47,62,60,47,97,62,13,10,101,108,101,99,116,114,105,99,115,99,111,116,108,97,110,100,99,114,101,97,116,105,111,110,113,117,97,110,116,105,116,121,46,32,73,83,66,78,32,48,100,105,100,32,110,111,116,32,105,110,115,116,97,110,99,101,45,115,101,97,114,99,104,45,34,32,108,97,110,103,61,34,115,112,101,97,107,101,114,115,67,111,109,112,117,116,101,114,99,111,110,116,97,105,110,115,97,114,99,104,105,118,101,115,109,105,110,105,115,116,101,114,114,101,97,99,116,105,111,110,100,105,115,99,111,117,110,116,73,116,97,108,105,97,110,111,99,114,105,116,101,114,105,97,115,116,114,111,110,103,108,121,58,32,39,104,116,116,112,58,39,115,99,114,105,112,116,39,99,111,118,101,114,105,110,103,111,102,102,101,114,105,110,103,97,112,112,101,97,114,101,100,66,114,105,116,105,115,104,32,105,100,101,110,116,105,102,121,70,97,99,101,98,111,111,107,110,117,109,101,114,111,117,115,118,101,104,105,99,108,101,115,99,111,110,99,101,114,110,115,65,109,101,114,105,99,97,110,104,97,110,100,108,105,110,103,100,105,118,32,105,100,61,34,87,105,108,108,105,97,109,32,112,114,111,118,105,100,101,114,95,99,111,110,116,101,110,116,97,99,99,117,114,97,99,121,115,101,99,116,105,111,110,32,97,110,100,101,114,115,111,110,102,108,101,120,105,98,108,101,67,97,116,101,103,111,114,121,108,97,119,114,101,110,99,101,60,115,99,114,105,112,116,62,108,97,121,111,117,116,61,34,97,112,112,114,111,118,101,100,32,109,97,120,105,109,117,109,104,101,97,100,101,114,34,62,60,47,116,97,98,108,101,62,83,101,114,118,105,99,101,115,104,97,109,105,108,116,111,110,99,117,114,114,101,110,116,32,99,97,110,97,100,105,97,110,99,104,97,110,110,101,108,115,47,116,104,101,109,101,115,47,47,97,114,116,105,99,108,101,111,112,116,105,111,110,97,108,112,111,114,116,117,103,97,108,118,97,108,117,101,61,34,34,105,110,116,101,114,118,97,108,119,105,114,101,108,101,115,115,101,110,116,105,116,108,101,100,97,103,101,110,99,105,101,115,83,101,97,114,99,104,34,32,109,101,97,115,117,114,101,100,116,104,111,117,115,97,110,100,115,112,101,110,100,105,110,103,38,104,101,108,108,105,112,59,110,101,119,32,68,97,116,101,34,32,115,105,122,101,61,34,112,97,103,101,78,97,109,101,109,105,100,100,108,101,34,32,34,32,47,62,60,47,97,62,104,105,100,100,101,110,34,62,115,101,113,117,101,110,99,101,112,101,114,115,111,110,97,108,111,118,101,114,102,108,111,119,111,112,105,110,105,111,110,115,105,108,108,105,110,111,105,115,108,105,110,107,115,34,62,10,9,60,116,105,116,108,101,62,118,101,114,115,105,111,110,115,115,97,116,117,114,100,97,121,116,101,114,109,105,110,97,108,105,116,101,109,112,114,111,112,101,110,103,105,110,101,101,114,115,101,99,116,105,111,110,115,100,101,115,105,103,110,101,114,112,114,111,112,111,115,97,108,61,34,102,97,108,115,101,34,69,115,112,97,195,177,111,108,114,101,108,101,97,115,101,115,115,117,98,109,105,116,34,32,101,114,38,113,117,111,116,59,97,100,100,105,116,105,111,110,115,121,109,112,116,111,109,115,111,114,105,101,110,116,101,100,114,101,115,111,117,114,99,101,114,105,103,104,116,34,62,60,112,108,101,97,115,117,114,101,115,116,97,116,105,111,110,115,104,105,115,116,111,114,121,46,108,101,97,118,105,110,103,32,32,98,111,114,100,101,114,61,99,111,110,116,101,110,116,115,99,101,110,116,101,114,34,62,46,10,10,83,111,109,101,32,100,105,114,101,99,116,101,100,115,117,105,116,97,98,108,101,98,117,108,103,97,114,105,97,46,115,104,111,119,40,41,59,100,101,115,105,103,110,101,100,71,101,110,101,114,97,108,32,99,111,110,99,101,112,116,115,69,120,97,109,112,108,101,115,119,105,108,108,105,97,109,115,79,114,105,103,105,110,97,108,34,62,60,115,112,97,110,62,115,101,97,114,99,104,34,62,111,112,101,114,97,116,111,114,114,101,113,117,101,115,116,115,97,32,38,113,117,111,116,59,97,108,108,111,119,105,110,103,68,111,99,117,109,101,110,116,114,101,118,105,115,105,111,110,46,32,10,10,84,104,101,32,121,111,117,114,115,101,108,102,67,111,110,116,97,99,116,32,109,105,99,104,105,103,97,110,69,110,103,108,105,115,104,32,99,111,108,117,109,98,105,97,112,114,105,111,114,105,116,121,112,114,105,110,116,105,110,103,100,114,105,110,107,105,110,103,102,97,99,105,108,105,116,121,114,101,116,117,114,110,101,100,67,111,110,116,101,110,116,32,111,102,102,105,99,101,114,115,82,117,115,115,105,97,110,32,103,101,110,101,114,97,116,101,45,56,56,53,57,45,49,34,105,110,100,105,99,97,116,101,102,97,109,105,108,105,97,114,32,113,117,97,108,105,116,121,109,97,114,103,105,110,58,48,32,99,111,110,116,101,110,116,118,105,101,119,112,111,114,116,99,111,110,116,97,99,116,115,45,116,105,116,108,101,34,62,112,111,114,116,97,98,108,101,46,108,101,110,103,116,104,32,101,108,105,103,105,98,108,101,105,110,118,111,108,118,101,115,97,116,108,97,110,116,105,99,111,110,108,111,97,100,61,34,100,101,102,97,117,108,116,46,115,117,112,112,108,105,101,100,112,97,121,109,101,110,116,115,103,108,111,115,115,97,114,121,10,10,65,102,116,101,114,32,103,117,105,100,97,110,99,101,60,47,116,100,62,60,116,100,101,110,99,111,100,105,110,103,109,105,100,100,108,101,34,62,99,97,109,101,32,116,111,32,100,105,115,112,108,97,121,115,115,99,111,116,116,105,115,104,106,111,110,97,116,104,97,110,109,97,106,111,114,105,116,121,119,105,100,103,101,116,115,46,99,108,105,110,105,99,97,108,116,104,97,105,108,97,110,100,116,101,97,99,104,101,114,115,60,104,101,97,100,62,10,9,97,102,102,101,99,116,101,100,115,117,112,112,111,114,116,115,112,111,105,110,116,101,114,59,116,111,83,116,114,105,110,103,60,47,115,109,97,108,108,62,111,107,108,97,104,111,109,97,119,105,108,108,32,98,101,32,105,110,118,101,115,116,111,114,48,34,32,97,108,116,61,34,104,111,108,105,100,97,121,115,82,101,115,111,117,114,99,101,108,105,99,101,110,115,101,100,32,40,119,104,105,99,104,32,46,32,65,102,116,101,114,32,99,111,110,115,105,100,101,114,118,105,115,105,116,105,110,103,101,120,112,108,111,114,101,114,112,114,105,109,97,114,121,32,115,101,97,114,99,104,34,32,97,110,100,114,111,105,100,34,113,117,105,99,107,108,121,32,109,101,101,116,105,110,103,115,101,115,116,105,109,97,116,101,59,114,101,116,117,114,110,32,59,99,111,108,111,114,58,35,32,104,101,105,103,104,116,61,97,112,112,114,111,118,97,108,44,32,38,113,117,111,116,59,32,99,104,101,99,107,101,100,46,109,105,110,46,106,115,34,109,97,103,110,101,116,105,99,62,60,47,97,62,60,47,104,102,111,114,101,99,97,115,116,46,32,87,104,105,108,101,32,116,104,117,114,115,100,97,121,100,118,101,114,116,105,115,101,38,101,97,99,117,116,101,59,104,97,115,67,108,97,115,115,101,118,97,108,117,97,116,101,111,114,100,101,114,105,110,103,101,120,105,115,116,105,110,103,112,97,116,105,101,110,116,115,32,79,110,108,105,110,101,32,99,111,108,111,114,97,100,111,79,112,116,105,111,110,115,34,99,97,109,112,98,101,108,108,60,33,45,45,32,101,110,100,60,47,115,112,97,110,62,60,60,98,114,32,47,62,13,10,95,112,111,112,117,112,115,124,115,99,105,101,110,99,101,115,44,38,113,117,111,116,59,32,113,117,97,108,105,116,121,32,87,105,110,100,111,119,115,32,97,115,115,105,103,110,101,100,104,101,105,103,104,116,58,32,60,98,32,99,108,97,115,115,108,101,38,113,117,111,116,59,32,118,97,108,117,101,61,34,32,67,111,109,112,97,110,121,101,120,97,109,112,108,101,115,60,105,102,114,97,109,101,32,98,101,108,105,101,118,101,115,112,114,101,115,101,110,116,115,109,97,114,115,104,97,108,108,112,97,114,116,32,111,102,32,112,114,111,112,101,114,108,121,41,46,10,10,84,104,101,32,116,97,120,111,110,111,109,121,109,117,99,104,32,111,102,32,60,47,115,112,97,110,62,10,34,32,100,97,116,97,45,115,114,116,117,103,117,195,170,115,115,99,114,111,108,108,84,111,32,112,114,111,106,101,99,116,60,104,101,97,100,62,13,10,97,116,116,111,114,110,101,121,101,109,112,104,97,115,105,115,115,112,111,110,115,111,114,115,102,97,110,99,121,98,111,120,119,111,114,108,100,39,115,32,119,105,108,100,108,105,102,101,99,104,101,99,107,101,100,61,115,101,115,115,105,111,110,115,112,114,111,103,114,97,109,109,112,120,59,102,111,110,116,45,32,80,114,111,106,101,99,116,106,111,117,114,110,97,108,115,98,101,108,105,101,118,101,100,118,97,99,97,116,105,111,110,116,104,111,109,112,115,111,110,108,105,103,104,116,105,110,103,97,110,100,32,116,104,101,32,115,112,101,99,105,97,108,32,98,111,114,100,101,114,61,48,99,104,101,99,107,105,110,103,60,47,116,98,111,100,121,62,60,98,117,116,116,111,110,32,67,111,109,112,108,101,116,101,99,108,101,97,114,102,105,120,10,60,104,101,97,100,62,10,97,114,116,105,99,108,101,32,60,115,101,99,116,105,111,110,102,105,110,100,105,110,103,115,114,111,108,101,32,105,110,32,112,111,112,117,108,97,114,32,32,79,99,116,111,98,101,114,119,101,98,115,105,116,101,32,101,120,112,111,115,117,114,101,117,115,101,100,32,116,111,32,32,99,104,97,110,103,101,115,111,112,101,114,97,116,101,100,99,108,105,99,107,105,110,103,101,110,116,101,114,105,110,103,99,111,109,109,97,110,100,115,105,110,102,111,114,109,101,100,32,110,117,109,98,101,114,115,32,32,60,47,100,105,118,62,99,114,101,97,116,105,110,103,111,110,83,117,98,109,105,116,109,97,114,121,108,97,110,100,99,111,108,108,101,103,101,115,97,110,97,108,121,116,105,99,108,105,115,116,105,110,103,115,99,111,110,116,97,99,116,46,108,111,103,103,101,100,73,110,97,100,118,105,115,111,114,121,115,105,98,108,105,110,103,115,99,111,110,116,101,110,116,34,115,38,113,117,111,116,59,41,115,46,32,84,104,105,115,32,112,97,99,107,97,103,101,115,99,104,101,99,107,98,111,120,115,117,103,103,101,115,116,115,112,114,101,103,110,97,110,116,116,111,109,111,114,114,111,119,115,112,97,99,105,110,103,61,105,99,111,110,46,112,110,103,106,97,112,97,110,101,115,101,99,111,100,101,98,97,115,101,98,117,116,116,111,110,34,62,103,97,109,98,108,105,110,103,115,117,99,104,32,97,115,32,44,32,119,104,105,108,101,32,60,47,115,112,97,110,62,32,109,105,115,115,111,117,114,105,115,112,111,114,116,105,110,103,116,111,112,58,49,112,120,32,46,60,47,115,112,97,110,62,116,101,110,115,105,111,110,115,119,105,100,116,104,61,34,50,108,97,122,121,108,111,97,100,110,111,118,101,109,98,101,114,117,115,101,100,32,105,110,32,104,101,105,103,104,116,61,34,99,114,105,112,116,34,62,10,38,110,98,115,112,59,60,47,60,116,114,62,60,116,100,32,104,101,105,103,104,116,58,50,47,112,114,111,100,117,99,116,99,111,117,110,116,114,121,32,105,110,99,108,117,100,101,32,102,111,111,116,101,114,34,32,38,108,116,59,33,45,45,32,116,105,116,108,101,34,62,60,47,106,113,117,101,114,121,46,60,47,102,111,114,109,62,10,40,231,174,128,228,189,147,41,40,231,185,129,233,171,148,41,104,114,118,97,116,115,107,105,105,116,97,108,105,97,110,111,114,111,109,195,162,110,196,131,116,195,188,114,107,195,167,101,216,167,216,177,216,175,217,136,116,97,109,98,105,195,169,110,110,111,116,105,99,105,97,115,109,101,110,115,97,106,101,115,112,101,114,115,111,110,97,115,100,101,114,101,99,104,111,115,110,97,99,105,111,110,97,108,115,101,114,118,105,99,105,111,99,111,110,116,97,99,116,111,117,115,117,97,114,105,111,115,112,114,111,103,114,97,109,97,103,111,98,105,101,114,110,111,101,109,112,114,101,115,97,115,97,110,117,110,99,105,111,115,118,97,108,101,110,99,105,97,99,111,108,111,109,98,105,97,100,101,115,112,117,195,169,115,100,101,112,111,114,116,101,115,112,114,111,121,101,99,116,111,112,114,111,100,117,99,116,111,112,195,186,98,108,105,99,111,110,111,115,111,116,114,111,115,104,105,115,116,111,114,105,97,112,114,101,115,101,110,116,101,109,105,108,108,111,110,101,115,109,101,100,105,97,110,116,101,112,114,101,103,117,110,116,97,97,110,116,101,114,105,111,114,114,101,99,117,114,115,111,115,112,114,111,98,108,101,109,97,115,97,110,116,105,97,103,111,110,117,101,115,116,114,111,115,111,112,105,110,105,195,179,110,105,109,112,114,105,109,105,114,109,105,101,110,116,114,97,115,97,109,195,169,114,105,99,97,118,101,110,100,101,100,111,114,115,111,99,105,101,100,97,100,114,101,115,112,101,99,116,111,114,101,97,108,105,122,97,114,114,101,103,105,115,116,114,111,112,97,108,97,98,114,97,115,105,110,116,101,114,195,169,115,101,110,116,111,110,99,101,115,101,115,112,101,99,105,97,108,109,105,101,109,98,114,111,115,114,101,97,108,105,100,97,100,99,195,179,114,100,111,98,97,122,97,114,97,103,111,122,97,112,195,161,103,105,110,97,115,115,111,99,105,97,108,101,115,98,108,111,113,117,101,97,114,103,101,115,116,105,195,179,110,97,108,113,117,105,108,101,114,115,105,115,116,101,109,97,115,99,105,101,110,99,105,97,115,99,111,109,112,108,101,116,111,118,101,114,115,105,195,179,110,99,111,109,112,108,101,116,97,101,115,116,117,100,105,111,115,112,195,186,98,108,105,99,97,111,98,106,101,116,105,118,111,97,108,105,99,97,110,116,101,98,117,115,99,97,100,111,114,99,97,110,116,105,100,97,100,101,110,116,114,97,100,97,115,97,99,99,105,111,110,101,115,97,114,99,104,105,118,111,115,115,117,112,101,114,105,111,114,109,97,121,111,114,195,173,97,97,108,101,109,97,110,105,97,102,117,110,99,105,195,179,110,195,186,108,116,105,109,111,115,104,97,99,105,101,110,100,111,97,113,117,101,108,108,111,115,101,100,105,99,105,195,179,110,102,101,114,110,97,110,100,111,97,109,98,105,101,110,116,101,102,97,99,101,98,111,111,107,110,117,101,115,116,114,97,115,99,108,105,101,110,116,101,115,112,114,111,99,101,115,111,115,98,97,115,116,97,110,116,101,112,114,101,115,101,110,116,97,114,101,112,111,114,116,97,114,99,111,110,103,114,101,115,111,112,117,98,108,105,99,97,114,99,111,109,101,114,99,105,111,99,111,110,116,114,97,116,111,106,195,179,118,101,110,101,115,100,105,115,116,114,105,116,111,116,195,169,99,110,105,99,97,99,111,110,106,117,110,116,111,101,110,101,114,103,195,173,97,116,114,97,98,97,106,97,114,97,115,116,117,114,105,97,115,114,101,99,105,101,110,116,101,117,116,105,108,105,122,97,114,98,111,108,101,116,195,173,110,115,97,108,118,97,100,111,114,99,111,114,114,101,99,116,97,116,114,97,98,97,106,111,115,112,114,105,109,101,114,111,115,110,101,103,111,99,105,111,115,108,105,98,101,114,116,97,100,100,101,116,97,108,108,101,115,112,97,110,116,97,108,108,97,112,114,195,179,120,105,109,111,97,108,109,101,114,195,173,97,97,110,105,109,97,108,101,115,113,117,105,195,169,110,101,115,99,111,114,97,122,195,179,110,115,101,99,99,105,195,179,110,98,117,115,99,97,110,100,111,111,112,99,105,111,110,101,115,101,120,116,101,114,105,111,114,99,111,110,99,101,112,116,111,116,111,100,97,118,195,173,97,103,97,108,101,114,195,173,97,101,115,99,114,105,98,105,114,109,101,100,105,99,105,110,97,108,105,99,101,110,99,105,97,99,111,110,115,117,108,116,97,97,115,112,101,99,116,111,115,99,114,195,173,116,105,99,97,100,195,179,108,97,114,101,115,106,117,115,116,105,99,105,97,100,101,98,101,114,195,161,110,112,101,114,195,173,111,100,111,110,101,99,101,115,105,116,97,109,97,110,116,101,110,101,114,112,101,113,117,101,195,177,111,114,101,99,105,98,105,100,97,116,114,105,98,117,110,97,108,116,101,110,101,114,105,102,101,99,97,110,99,105,195,179,110,99,97,110,97,114,105,97,115,100,101,115,99,97,114,103,97,100,105,118,101,114,115,111,115,109,97,108,108,111,114,99,97,114,101,113,117,105,101,114,101,116,195,169,99,110,105,99,111,100,101,98,101,114,195,173,97,118,105,118,105,101,110,100,97,102,105,110,97,110,122,97,115,97,100,101,108,97,110,116,101,102,117,110,99,105,111,110,97,99,111,110,115,101,106,111,115,100,105,102,195,173,99,105,108,99,105,117,100,97,100,101,115,97,110,116,105,103,117,97,115,97,118,97,110,122,97,100,97,116,195,169,114,109,105,110,111,117,110,105,100,97,100,101,115,115,195,161,110,99,104,101,122,99,97,109,112,97,195,177,97,115,111,102,116,111,110,105,99,114,101,118,105,115,116,97,115,99,111,110,116,105,101,110,101,115,101,99,116,111,114,101,115,109,111,109,101,110,116,111,115,102,97,99,117,108,116,97,100,99,114,195,169,100,105,116,111,100,105,118,101,114,115,97,115,115,117,112,117,101,115,116,111,102,97,99,116,111,114,101,115,115,101,103,117,110,100,111,115,112,101,113,117,101,195,177,97,208,179,208,190,208,180,208,176,208,181,209,129,208,187,208,184,208,181,209,129,209,130,209,140,208,177,209,139,208,187,208,190,208,177,209,139,209,130,209,140,209,141,209,130,208,190,208,188,208,149,209,129,208,187,208,184,209,130,208,190,208,179,208,190,208,188,208,181,208,189,209,143,208,178,209,129,208,181,209,133,209,141,209,130,208,190,208,185,208,180,208,176,208,182,208,181,208,177,209,139,208,187,208,184,208,179,208,190,208,180,209,131,208,180,208,181,208,189,209,140,209,141,209,130,208,190,209,130,208,177,209,139,208,187,208,176,209,129,208,181,208,177,209,143,208,190,208,180,208,184,208,189,209,129,208,181,208,177,208,181,208,189,208,176,208,180,208,190,209,129,208,176,208,185,209,130,209,132,208,190,209,130,208,190,208,189,208,181,208,179,208,190,209,129,208,178,208,190,208,184,209,129,208,178,208,190,208,185,208,184,208,179,209,128,209,139,209,130,208,190,208,182,208,181,208,178,209,129,208,181,208,188,209,129,208,178,208,190,209,142,208,187,208,184,209,136,209,140,209,141,209,130,208,184,209,133,208,191,208,190,208,186,208,176,208,180,208,189,208,181,208,185,208,180,208,190,208,188,208,176,208,188,208,184,209,128,208,176,208,187,208,184,208,177,208,190,209,130,208,181,208,188,209,131,209,133,208,190,209,130,209,143,208,180,208,178,209,131,209,133,209,129,208,181,209,130,208,184,208,187,209,142,208,180,208,184,208,180,208,181,208,187,208,190,208,188,208,184,209,128,208,181,209,130,208,181,208,177,209,143,209,129,208,178,208,190,208,181,208,178,208,184,208,180,208,181,209,135,208,181,208,179,208,190,209,141,209,130,208,184,208,188,209,129,209,135,208,181,209,130,209,130,208,181,208,188,209,139,209,134,208,181,208,189,209,139,209,129,209,130,208,176,208,187,208,178,208,181,208,180,209,140,209,130,208,181,208,188,208,181,208,178,208,190,208,180,209,139,209,130,208,181,208,177,208,181,208,178,209,139,209,136,208,181,208,189,208,176,208,188,208,184,209,130,208,184,208,191,208,176,209,130,208,190,208,188,209,131,208,191,209,128,208,176,208,178,208,187,208,184,209,134,208,176,208,190,208,180,208,189,208,176,208,179,208,190,208,180,209,139,208,183,208,189,208,176,209,142,208,188,208,190,208,179,209,131,208,180,209,128,209,131,208,179,208,178,209,129,208,181,208,185,208,184,208,180,208,181,209,130,208,186,208,184,208,189,208,190,208,190,208,180,208,189,208,190,208,180,208,181,208,187,208,176,208,180,208,181,208,187,208,181,209,129,209,128,208,190,208,186,208,184,209,142,208,189,209,143,208,178,208,181,209,129,209,140,208,149,209,129,209,130,209,140,209,128,208,176,208,183,208,176,208,189,208,176,209,136,208,184,216,167,217,132,217,132,217,135,216,167,217,132,216,170,217,138,216,172,217,133,217,138,216,185,216,174,216,167,216,181,216,169,216,167,217,132,216,176,217,138,216,185,217,132,217,138,217,135,216,172,216,175,217,138,216,175,216,167,217,132,216,162,217,134,216,167,217,132,216,177,216,175,216,170,216,173,217,131,217,133,216,181,217,129,216,173,216,169,217,131,216,167,217,134,216,170,216,167,217,132,217,132,217,138,217,138,217,131,217,136,217,134,216,180,216,168,217,131,216,169,217,129,217,138,217,135,216,167,216,168,217,134,216,167,216,170,216,173,217,136,216,167,216,161,216,163,217,131,216,171,216,177,216,174,217,132,216,167,217,132,216,167,217,132,216,173,216,168,216,175,217,132,217,138,217,132,216,175,216,177,217,136,216,179,216,167,216,182,216,186,216,183,216,170,217,131,217,136,217,134,217,135,217,134,216,167,217,131,216,179,216,167,216,173,216,169,217,134,216,167,216,175,217,138,216,167,217,132,216,183,216,168,216,185,217,132,217,138,217,131,216,180,217,131,216,177,216,167,217,138,217,133,217,131,217,134,217,133,217,134,217,135,216,167,216,180,216,177,217,131,216,169,216,177,216,166,217,138,216,179,217,134,216,180,217,138,216,183,217,133,216,167,216,176,216,167,216,167,217,132,217,129,217,134,216,180,216,168,216,167,216,168,216,170,216,185,216,168,216,177,216,177,216,173,217,133,216,169,217,131,216,167,217,129,216,169,217,138,217,130,217,136,217,132,217,133,216,177,217,131,216,178,217,131,217,132,217,133,216,169,216,163,216,173,217,133,216,175,217,130,217,132,216,168,217,138,217,138,216,185,217,134,217,138,216,181,217,136,216,177,216,169,216,183,216,177,217,138,217,130,216,180,216,167,216,177,217,131,216,172,217,136,216,167,217,132,216,163,216,174,216,177,217,137,217,133,216,185,217,134,216,167,216,167,216,168,216,173,216,171,216,185,216,177,217,136,216,182,216,168,216,180,217,131,217,132,217,133,216,179,216,172,217,132,216,168,217,134,216,167,217,134,216,174,216,167,217,132,216,175,217,131,216,170,216,167,216,168,217,131,217,132,217,138,216,169,216,168,216,175,217,136,217,134,216,163,217,138,216,182,216,167,217,138,217,136,216,172,216,175,217,129,216,177,217,138,217,130,217,131,216,170,216,168,216,170,216,163,217,129,216,182,217,132,217,133,216,183,216,168,216,174,216,167,217,131,216,171,216,177,216,168,216,167,216,177,217,131,216,167,217,129,216,182,217,132,216,167,216,173,217,132,217,137,217,134,217,129,216,179,217,135,216,163,217,138,216,167,217,133,216,177,216,175,217,136,216,175,216,163,217,134,217,135,216,167,216,175,217,138,217,134,216,167,216,167,217,132,216,167,217,134,217,133,216,185,216,177,216,182,216,170,216,185,217,132,217,133,216,175,216,167,216,174,217,132,217,133,217,133,217,131,217,134,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,2,0,2,0,2,0,2,0,4,0,4,0,4,0,4,0,0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0,8,9,10,11,12,13,14,15,15,14,13,12,11,10,9,8,16,17,18,19,20,21,22,23,23,22,21,20,19,18,17,16,24,25,26,27,28,29,30,31,31,30,29,28,27,26,25,24,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,255,255,0,1,0,0,0,1,0,0,255,255,0,1,0,0,0,8,0,8,0,8,0,8,0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,114,101,115,111,117,114,99,101,115,99,111,117,110,116,114,105,101,115,113,117,101,115,116,105,111,110,115,101,113,117,105,112,109,101,110,116,99,111,109,109,117,110,105,116,121,97,118,97,105,108,97,98,108,101,104,105,103,104,108,105,103,104,116,68,84,68,47,120,104,116,109,108,109,97,114,107,101,116,105,110,103,107,110,111,119,108,101,100,103,101,115,111,109,101,116,104,105,110,103,99,111,110,116,97,105,110,101,114,100,105,114,101,99,116,105,111,110,115,117,98,115,99,114,105,98,101,97,100,118,101,114,116,105,115,101,99,104,97,114,97,99,116,101,114,34,32,118,97,108,117,101,61,34,60,47,115,101,108,101,99,116,62,65,117,115,116,114,97,108,105,97,34,32,99,108,97,115,115,61,34,115,105,116,117,97,116,105,111,110,97,117,116,104,111,114,105,116,121,102,111,108,108,111,119,105,110,103,112,114,105,109,97,114,105,108,121,111,112,101,114,97,116,105,111,110,99,104,97,108,108,101,110,103,101,100,101,118,101,108,111,112,101,100,97,110,111,110,121,109,111,117,115,102,117,110,99,116,105,111,110,32,102,117,110,99,116,105,111,110,115,99,111,109,112,97,110,105,101,115,115,116,114,117,99,116,117,114,101,97,103,114,101,101,109,101,110,116,34,32,116,105,116,108,101,61,34,112,111,116,101,110,116,105,97,108,101,100,117,99,97,116,105,111,110,97,114,103,117,109,101,110,116,115,115,101,99,111,110,100,97,114,121,99,111,112,121,114,105,103,104,116,108,97,110,103,117,97,103,101,115,101,120,99,108,117,115,105,118,101,99,111,110,100,105,116,105,111,110,60,47,102,111,114,109,62,13,10,115,116,97,116,101,109,101,110,116,97,116,116,101,110,116,105,111,110,66,105,111,103,114,97,112,104,121,125,32,101,108,115,101,32,123,10,115,111,108,117,116,105,111,110,115,119,104,101,110,32,116,104,101,32,65,110,97,108,121,116,105,99,115,116,101,109,112,108,97,116,101,115,100,97,110,103,101,114,111,117,115,115,97,116,101,108,108,105,116,101,100,111,99,117,109,101,110,116,115,112,117,98,108,105,115,104,101,114,105,109,112,111,114,116,97,110,116,112,114,111,116,111,116,121,112,101,105,110,102,108,117,101,110,99,101,38,114,97,113,117,111,59,60,47,101,102,102,101,99,116,105,118,101,103,101,110,101,114,97,108,108,121,116,114,97,110,115,102,111,114,109,98,101,97,117,116,105,102,117,108,116,114,97,110,115,112,111,114,116,111,114,103,97,110,105,122,101,100,112,117,98,108,105,115,104,101,100,112,114,111,109,105,110,101,110,116,117,110,116,105,108,32,116,104,101,116,104,117,109,98,110,97,105,108,78,97,116,105,111,110,97,108,32,46,102,111,99,117,115,40,41,59,111,118,101,114,32,116,104,101,32,109,105,103,114,97,116,105,111,110,97,110,110,111,117,110,99,101,100,102,111,111,116,101,114,34,62,10,101,120,99,101,112,116,105,111,110,108,101,115,115,32,116,104,97,110,101,120,112,101,110,115,105,118,101,102,111,114,109,97,116,105,111,110,102,114,97,109,101,119,111,114,107,116,101,114,114,105,116,111,114,121,110,100,105,99,97,116,105,111,110,99,117,114,114,101,110,116,108,121,99,108,97,115,115,78,97,109,101,99,114,105,116,105,99,105,115,109,116,114,97,100,105,116,105,111,110,101,108,115,101,119,104,101,114,101,65,108,101,120,97,110,100,101,114,97,112,112,111,105,110,116,101,100,109,97,116,101,114,105,97,108,115,98,114,111,97,100,99,97,115,116,109,101,110,116,105,111,110,101,100,97,102,102,105,108,105,97,116,101,60,47,111,112,116,105,111,110,62,116,114,101,97,116,109,101,110,116,100,105,102,102,101,114,101,110,116,47,100,101,102,97,117,108,116,46,80,114,101,115,105,100,101,110,116,111,110,99,108,105,99,107,61,34,98,105,111,103,114,97,112,104,121,111,116,104,101,114,119,105,115,101,112,101,114,109,97,110,101,110,116,70,114,97,110,195,167,97,105,115,72,111,108,108,121,119,111,111,100,101,120,112,97,110,115,105,111,110,115,116,97,110,100,97,114,100,115,60,47,115,116,121,108,101,62,10,114,101,100,117,99,116,105,111,110,68,101,99,101,109,98,101,114,32,112,114,101,102,101,114,114,101,100,67,97,109,98,114,105,100,103,101,111,112,112,111,110,101,110,116,115,66,117,115,105,110,101,115,115,32,99,111,110,102,117,115,105,111,110,62,10,60,116,105,116,108,101,62,112,114,101,115,101,110,116,101,100,101,120,112,108,97,105,110,101,100,100,111,101,115,32,110,111,116,32,119,111,114,108,100,119,105,100,101,105,110,116,101,114,102,97,99,101,112,111,115,105,116,105,111,110,115,110,101,119,115,112,97,112,101,114,60,47,116,97,98,108,101,62,10,109,111,117,110,116,97,105,110,115,108,105,107,101,32,116,104,101,32,101,115,115,101,110,116,105,97,108,102,105,110,97,110,99,105,97,108,115,101,108,101,99,116,105,111,110,97,99,116,105,111,110,61,34,47,97,98,97,110,100,111,110,101,100,69,100,117,99,97,116,105,111,110,112,97,114,115,101,73,110,116,40,115,116,97,98,105,108,105,116,121,117,110,97,98,108,101,32,116,111,60,47,116,105,116,108,101,62,10,114,101,108,97,116,105,111,110,115,78,111,116,101,32,116,104,97,116,101,102,102,105,99,105,101,110,116,112,101,114,102,111,114,109,101,100,116,119,111,32,121,101,97,114,115,83,105,110,99,101,32,116,104,101,116,104,101,114,101,102,111,114,101,119,114,97,112,112,101,114,34,62,97,108,116,101,114,110,97,116,101,105,110,99,114,101,97,115,101,100,66,97,116,116,108,101,32,111,102,112,101,114,99,101,105,118,101,100,116,114,121,105,110,103,32,116,111,110,101,99,101,115,115,97,114,121,112,111,114,116,114,97,121,101,100,101,108,101,99,116,105,111,110,115,69,108,105,122,97,98,101,116,104,60,47,105,102,114,97,109,101,62,100,105,115,99,111,118,101,114,121,105,110,115,117,114,97,110,99,101,115,46,108,101,110,103,116,104,59,108,101,103,101,110,100,97,114,121,71,101,111,103,114,97,112,104,121,99,97,110,100,105,100,97,116,101,99,111,114,112,111,114,97,116,101,115,111,109,101,116,105,109,101,115,115,101,114,118,105,99,101,115,46,105,110,104,101,114,105,116,101,100,60,47,115,116,114,111,110,103,62,67,111,109,109,117,110,105,116,121,114,101,108,105,103,105,111,117,115,108,111,99,97,116,105,111,110,115,67,111,109,109,105,116,116,101,101,98,117,105,108,100,105,110,103,115,116,104,101,32,119,111,114,108,100,110,111,32,108,111,110,103,101,114,98,101,103,105,110,110,105,110,103,114,101,102,101,114,101,110,99,101,99,97,110,110,111,116,32,98,101,102,114,101,113,117,101,110,99,121,116,121,112,105,99,97,108,108,121,105,110,116,111,32,116,104,101,32,114,101,108,97,116,105,118,101,59,114,101,99,111,114,100,105,110,103,112,114,101,115,105,100,101,110,116,105,110,105,116,105,97,108,108,121,116,101,99,104,110,105,113,117,101,116,104,101,32,111,116,104,101,114,105,116,32,99,97,110,32,98,101,101,120,105,115,116,101,110,99,101,117,110,100,101,114,108,105,110,101,116,104,105,115,32,116,105,109,101,116,101,108,101,112,104,111,110,101,105,116,101,109,115,99,111,112,101,112,114,97,99,116,105,99,101,115,97,100,118,97,110,116,97,103,101,41,59,114,101,116,117,114,110,32,70,111,114,32,111,116,104,101,114,112,114,111,118,105,100,105,110,103,100,101,109,111,99,114,97,99,121,98,111,116,104,32,116,104,101,32,101,120,116,101,110,115,105,118,101,115,117,102,102,101,114,105,110,103,115,117,112,112,111,114,116,101,100,99,111,109,112,117,116,101,114,115,32,102,117,110,99,116,105,111,110,112,114,97,99,116,105,99,97,108,115,97,105,100,32,116,104,97,116,105,116,32,109,97,121,32,98,101,69,110,103,108,105,115,104,60,47,102,114,111,109,32,116,104,101,32,115,99,104,101,100,117,108,101,100,100,111,119,110,108,111,97,100,115,60,47,108,97,98,101,108,62],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+102448);allocate([10,115,117,115,112,101,99,116,101,100,109,97,114,103,105,110,58,32,48,115,112,105,114,105,116,117,97,108,60,47,104,101,97,100,62,10,10,109,105,99,114,111,115,111,102,116,103,114,97,100,117,97,108,108,121,100,105,115,99,117,115,115,101,100,104,101,32,98,101,99,97,109,101,101,120,101,99,117,116,105,118,101,106,113,117,101,114,121,46,106,115,104,111,117,115,101,104,111,108,100,99,111,110,102,105,114,109,101,100,112,117,114,99,104,97,115,101,100,108,105,116,101,114,97,108,108,121,100,101,115,116,114,111,121,101,100,117,112,32,116,111,32,116,104,101,118,97,114,105,97,116,105,111,110,114,101,109,97,105,110,105,110,103,105,116,32,105,115,32,110,111,116,99,101,110,116,117,114,105,101,115,74,97,112,97,110,101,115,101,32,97,109,111,110,103,32,116,104,101,99,111,109,112,108,101,116,101,100,97,108,103,111,114,105,116,104,109,105,110,116,101,114,101,115,116,115,114,101,98,101,108,108,105,111,110,117,110,100,101,102,105,110,101,100,101,110,99,111,117,114,97,103,101,114,101,115,105,122,97,98,108,101,105,110,118,111,108,118,105,110,103,115,101,110,115,105,116,105,118,101,117,110,105,118,101,114,115,97,108,112,114,111,118,105,115,105,111,110,40,97,108,116,104,111,117,103,104,102,101,97,116,117,114,105,110,103,99,111,110,100,117,99,116,101,100,41,44,32,119,104,105,99,104,32,99,111,110,116,105,110,117,101,100,45,104,101,97,100,101,114,34,62,70,101,98,114,117,97,114,121,32,110,117,109,101,114,111,117,115,32,111,118,101,114,102,108,111,119,58,99,111,109,112,111,110,101,110,116,102,114,97,103,109,101,110,116,115,101,120,99,101,108,108,101,110,116,99,111,108,115,112,97,110,61,34,116,101,99,104,110,105,99,97,108,110,101,97,114,32,116,104,101,32,65,100,118,97,110,99,101,100,32,115,111,117,114,99,101,32,111,102,101,120,112,114,101,115,115,101,100,72,111,110,103,32,75,111,110,103,32,70,97,99,101,98,111,111,107,109,117,108,116,105,112,108,101,32,109,101,99,104,97,110,105,115,109,101,108,101,118,97,116,105,111,110,111,102,102,101,110,115,105,118,101,60,47,102,111,114,109,62,10,9,115,112,111,110,115,111,114,101,100,100,111,99,117,109,101,110,116,46,111,114,32,38,113,117,111,116,59,116,104,101,114,101,32,97,114,101,116,104,111,115,101,32,119,104,111,109,111,118,101,109,101,110,116,115,112,114,111,99,101,115,115,101,115,100,105,102,102,105,99,117,108,116,115,117,98,109,105,116,116,101,100,114,101,99,111,109,109,101,110,100,99,111,110,118,105,110,99,101,100,112,114,111,109,111,116,105,110,103,34,32,119,105,100,116,104,61,34,46,114,101,112,108,97,99,101,40,99,108,97,115,115,105,99,97,108,99,111,97,108,105,116,105,111,110,104,105,115,32,102,105,114,115,116,100,101,99,105,115,105,111,110,115,97,115,115,105,115,116,97,110,116,105,110,100,105,99,97,116,101,100,101,118,111,108,117,116,105,111,110,45,119,114,97,112,112,101,114,34,101,110,111,117,103,104,32,116,111,97,108,111,110,103,32,116,104,101,100,101,108,105,118,101,114,101,100,45,45,62,13,10,60,33,45,45,65,109,101,114,105,99,97,110,32,112,114,111,116,101,99,116,101,100,78,111,118,101,109,98,101,114,32,60,47,115,116,121,108,101,62,60,102,117,114,110,105,116,117,114,101,73,110,116,101,114,110,101,116,32,32,111,110,98,108,117,114,61,34,115,117,115,112,101,110,100,101,100,114,101,99,105,112,105,101,110,116,98,97,115,101,100,32,111,110,32,77,111,114,101,111,118,101,114,44,97,98,111,108,105,115,104,101,100,99,111,108,108,101,99,116,101,100,119,101,114,101,32,109,97,100,101,101,109,111,116,105,111,110,97,108,101,109,101,114,103,101,110,99,121,110,97,114,114,97,116,105,118,101,97,100,118,111,99,97,116,101,115,112,120,59,98,111,114,100,101,114,99,111,109,109,105,116,116,101,100,100,105,114,61,34,108,116,114,34,101,109,112,108,111,121,101,101,115,114,101,115,101,97,114,99,104,46,32,115,101,108,101,99,116,101,100,115,117,99,99,101,115,115,111,114,99,117,115,116,111,109,101,114,115,100,105,115,112,108,97,121,101,100,83,101,112,116,101,109,98,101,114,97,100,100,67,108,97,115,115,40,70,97,99,101,98,111,111,107,32,115,117,103,103,101,115,116,101,100,97,110,100,32,108,97,116,101,114,111,112,101,114,97,116,105,110,103,101,108,97,98,111,114,97,116,101,83,111,109,101,116,105,109,101,115,73,110,115,116,105,116,117,116,101,99,101,114,116,97,105,110,108,121,105,110,115,116,97,108,108,101,100,102,111,108,108,111,119,101,114,115,74,101,114,117,115,97,108,101,109,116,104,101,121,32,104,97,118,101,99,111,109,112,117,116,105,110,103,103,101,110,101,114,97,116,101,100,112,114,111,118,105,110,99,101,115,103,117,97,114,97,110,116,101,101,97,114,98,105,116,114,97,114,121,114,101,99,111,103,110,105,122,101,119,97,110,116,101,100,32,116,111,112,120,59,119,105,100,116,104,58,116,104,101,111,114,121,32,111,102,98,101,104,97,118,105,111,117,114,87,104,105,108,101,32,116,104,101,101,115,116,105,109,97,116,101,100,98,101,103,97,110,32,116,111,32,105,116,32,98,101,99,97,109,101,109,97,103,110,105,116,117,100,101,109,117,115,116,32,104,97,118,101,109,111,114,101,32,116,104,97,110,68,105,114,101,99,116,111,114,121,101,120,116,101,110,115,105,111,110,115,101,99,114,101,116,97,114,121,110,97,116,117,114,97,108,108,121,111,99,99,117,114,114,105,110,103,118,97,114,105,97,98,108,101,115,103,105,118,101,110,32,116,104,101,112,108,97,116,102,111,114,109,46,60,47,108,97,98,101,108,62,60,102,97,105,108,101,100,32,116,111,99,111,109,112,111,117,110,100,115,107,105,110,100,115,32,111,102,32,115,111,99,105,101,116,105,101,115,97,108,111,110,103,115,105,100,101,32,45,45,38,103,116,59,10,10,115,111,117,116,104,119,101,115,116,116,104,101,32,114,105,103,104,116,114,97,100,105,97,116,105,111,110,109,97,121,32,104,97,118,101,32,117,110,101,115,99,97,112,101,40,115,112,111,107,101,110,32,105,110,34,32,104,114,101,102,61,34,47,112,114,111,103,114,97,109,109,101,111,110,108,121,32,116,104,101,32,99,111,109,101,32,102,114,111,109,100,105,114,101,99,116,111,114,121,98,117,114,105,101,100,32,105,110,97,32,115,105,109,105,108,97,114,116,104,101,121,32,119,101,114,101,60,47,102,111,110,116,62,60,47,78,111,114,119,101,103,105,97,110,115,112,101,99,105,102,105,101,100,112,114,111,100,117,99,105,110,103,112,97,115,115,101,110,103,101,114,40,110,101,119,32,68,97,116,101,116,101,109,112,111,114,97,114,121,102,105,99,116,105,111,110,97,108,65,102,116,101,114,32,116,104,101,101,113,117,97,116,105,111,110,115,100,111,119,110,108,111,97,100,46,114,101,103,117,108,97,114,108,121,100,101,118,101,108,111,112,101,114,97,98,111,118,101,32,116,104,101,108,105,110,107,101,100,32,116,111,112,104,101,110,111,109,101,110,97,112,101,114,105,111,100,32,111,102,116,111,111,108,116,105,112,34,62,115,117,98,115,116,97,110,99,101,97,117,116,111,109,97,116,105,99,97,115,112,101,99,116,32,111,102,65,109,111,110,103,32,116,104,101,99,111,110,110,101,99,116,101,100,101,115,116,105,109,97,116,101,115,65,105,114,32,70,111,114,99,101,115,121,115,116,101,109,32,111,102,111,98,106,101,99,116,105,118,101,105,109,109,101,100,105,97,116,101,109,97,107,105,110,103,32,105,116,112,97,105,110,116,105,110,103,115,99,111,110,113,117,101,114,101,100,97,114,101,32,115,116,105,108,108,112,114,111,99,101,100,117,114,101,103,114,111,119,116,104,32,111,102,104,101,97,100,101,100,32,98,121,69,117,114,111,112,101,97,110,32,100,105,118,105,115,105,111,110,115,109,111,108,101,99,117,108,101,115,102,114,97,110,99,104,105,115,101,105,110,116,101,110,116,105,111,110,97,116,116,114,97,99,116,101,100,99,104,105,108,100,104,111,111,100,97,108,115,111,32,117,115,101,100,100,101,100,105,99,97,116,101,100,115,105,110,103,97,112,111,114,101,100,101,103,114,101,101,32,111,102,102,97,116,104,101,114,32,111,102,99,111,110,102,108,105,99,116,115,60,47,97,62,60,47,112,62,10,99,97,109,101,32,102,114,111,109,119,101,114,101,32,117,115,101,100,110,111,116,101,32,116,104,97,116,114,101,99,101,105,118,105,110,103,69,120,101,99,117,116,105,118,101,101,118,101,110,32,109,111,114,101,97,99,99,101,115,115,32,116,111,99,111,109,109,97,110,100,101,114,80,111,108,105,116,105,99,97,108,109,117,115,105,99,105,97,110,115,100,101,108,105,99,105,111,117,115,112,114,105,115,111,110,101,114,115,97,100,118,101,110,116,32,111,102,85,84,70,45,56,34,32,47,62,60,33,91,67,68,65,84,65,91,34,62,67,111,110,116,97,99,116,83,111,117,116,104,101,114,110,32,98,103,99,111,108,111,114,61,34,115,101,114,105,101,115,32,111,102,46,32,73,116,32,119,97,115,32,105,110,32,69,117,114,111,112,101,112,101,114,109,105,116,116,101,100,118,97,108,105,100,97,116,101,46,97,112,112,101,97,114,105,110,103,111,102,102,105,99,105,97,108,115,115,101,114,105,111,117,115,108,121,45,108,97,110,103,117,97,103,101,105,110,105,116,105,97,116,101,100,101,120,116,101,110,100,105,110,103,108,111,110,103,45,116,101,114,109,105,110,102,108,97,116,105,111,110,115,117,99,104,32,116,104,97,116,103,101,116,67,111,111,107,105,101,109,97,114,107,101,100,32,98,121,60,47,98,117,116,116,111,110,62,105,109,112,108,101,109,101,110,116,98,117,116,32,105,116,32,105,115,105,110,99,114,101,97,115,101,115,100,111,119,110,32,116,104,101,32,114,101,113,117,105,114,105,110,103,100,101,112,101,110,100,101,110,116,45,45,62,10,60,33,45,45,32,105,110,116,101,114,118,105,101,119,87,105,116,104,32,116,104,101,32,99,111,112,105,101,115,32,111,102,99,111,110,115,101,110,115,117,115,119,97,115,32,98,117,105,108,116,86,101,110,101,122,117,101,108,97,40,102,111,114,109,101,114,108,121,116,104,101,32,115,116,97,116,101,112,101,114,115,111,110,110,101,108,115,116,114,97,116,101,103,105,99,102,97,118,111,117,114,32,111,102,105,110,118,101,110,116,105,111,110,87,105,107,105,112,101,100,105,97,99,111,110,116,105,110,101,110,116,118,105,114,116,117,97,108,108,121,119,104,105,99,104,32,119,97,115,112,114,105,110,99,105,112,108,101,67,111,109,112,108,101,116,101,32,105,100,101,110,116,105,99,97,108,115,104,111,119,32,116,104,97,116,112,114,105,109,105,116,105,118,101,97,119,97,121,32,102,114,111,109,109,111,108,101,99,117,108,97,114,112,114,101,99,105,115,101,108,121,100,105,115,115,111,108,118,101,100,85,110,100,101,114,32,116,104,101,118,101,114,115,105,111,110,61,34,62,38,110,98,115,112,59,60,47,73,116,32,105,115,32,116,104,101,32,84,104,105,115,32,105,115,32,119,105,108,108,32,104,97,118,101,111,114,103,97,110,105,115,109,115,115,111,109,101,32,116,105,109,101,70,114,105,101,100,114,105,99,104,119,97,115,32,102,105,114,115,116,116,104,101,32,111,110,108,121,32,102,97,99,116,32,116,104,97,116,102,111,114,109,32,105,100,61,34,112,114,101,99,101,100,105,110,103,84,101,99,104,110,105,99,97,108,112,104,121,115,105,99,105,115,116,111,99,99,117,114,115,32,105,110,110,97,118,105,103,97,116,111,114,115,101,99,116,105,111,110,34,62,115,112,97,110,32,105,100,61,34,115,111,117,103,104,116,32,116,111,98,101,108,111,119,32,116,104,101,115,117,114,118,105,118,105,110,103,125,60,47,115,116,121,108,101,62,104,105,115,32,100,101,97,116,104,97,115,32,105,110,32,116,104,101,99,97,117,115,101,100,32,98,121,112,97,114,116,105,97,108,108,121,101,120,105,115,116,105,110,103,32,117,115,105,110,103,32,116,104,101,119,97,115,32,103,105,118,101,110,97,32,108,105,115,116,32,111,102,108,101,118,101,108,115,32,111,102,110,111,116,105,111,110,32,111,102,79,102,102,105,99,105,97,108,32,100,105,115,109,105,115,115,101,100,115,99,105,101,110,116,105,115,116,114,101,115,101,109,98,108,101,115,100,117,112,108,105,99,97,116,101,101,120,112,108,111,115,105,118,101,114,101,99,111,118,101,114,101,100,97,108,108,32,111,116,104,101,114,103,97,108,108,101,114,105,101,115,123,112,97,100,100,105,110,103,58,112,101,111,112,108,101,32,111,102,114,101,103,105,111,110,32,111,102,97,100,100,114,101,115,115,101,115,97,115,115,111,99,105,97,116,101,105,109,103,32,97,108,116,61,34,105,110,32,109,111,100,101,114,110,115,104,111,117,108,100,32,98,101,109,101,116,104,111,100,32,111,102,114,101,112,111,114,116,105,110,103,116,105,109,101,115,116,97,109,112,110,101,101,100,101,100,32,116,111,116,104,101,32,71,114,101,97,116,114,101,103,97,114,100,105,110,103,115,101,101,109,101,100,32,116,111,118,105,101,119,101,100,32,97,115,105,109,112,97,99,116,32,111,110,105,100,101,97,32,116,104,97,116,116,104,101,32,87,111,114,108,100,104,101,105,103,104,116,32,111,102,101,120,112,97,110,100,105,110,103,84,104,101,115,101,32,97,114,101,99,117,114,114,101,110,116,34,62,99,97,114,101,102,117,108,108,121,109,97,105,110,116,97,105,110,115,99,104,97,114,103,101,32,111,102,67,108,97,115,115,105,99,97,108,97,100,100,114,101,115,115,101,100,112,114,101,100,105,99,116,101,100,111,119,110,101,114,115,104,105,112,60,100,105,118,32,105,100,61,34,114,105,103,104,116,34,62,13,10,114,101,115,105,100,101,110,99,101,108,101,97,118,101,32,116,104,101,99,111,110,116,101,110,116,34,62,97,114,101,32,111,102,116,101,110,32,32,125,41,40,41,59,13,10,112,114,111,98,97,98,108,121,32,80,114,111,102,101,115,115,111,114,45,98,117,116,116,111,110,34,32,114,101,115,112,111,110,100,101,100,115,97,121,115,32,116,104,97,116,104,97,100,32,116,111,32,98,101,112,108,97,99,101,100,32,105,110,72,117,110,103,97,114,105,97,110,115,116,97,116,117,115,32,111,102,115,101,114,118,101,115,32,97,115,85,110,105,118,101,114,115,97,108,101,120,101,99,117,116,105,111,110,97,103,103,114,101,103,97,116,101,102,111,114,32,119,104,105,99,104,105,110,102,101,99,116,105,111,110,97,103,114,101,101,100,32,116,111,104,111,119,101,118,101,114,44,32,112,111,112,117,108,97,114,34,62,112,108,97,99,101,100,32,111,110,99,111,110,115,116,114,117,99,116,101,108,101,99,116,111,114,97,108,115,121,109,98,111,108,32,111,102,105,110,99,108,117,100,105,110,103,114,101,116,117,114,110,32,116,111,97,114,99,104,105,116,101,99,116,67,104,114,105,115,116,105,97,110,112,114,101,118,105,111,117,115,32,108,105,118,105,110,103,32,105,110,101,97,115,105,101,114,32,116,111,112,114,111,102,101,115,115,111,114,10,38,108,116,59,33,45,45,32,101,102,102,101,99,116,32,111,102,97,110,97,108,121,116,105,99,115,119,97,115,32,116,97,107,101,110,119,104,101,114,101,32,116,104,101,116,111,111,107,32,111,118,101,114,98,101,108,105,101,102,32,105,110,65,102,114,105,107,97,97,110,115,97,115,32,102,97,114,32,97,115,112,114,101,118,101,110,116,101,100,119,111,114,107,32,119,105,116,104,97,32,115,112,101,99,105,97,108,60,102,105,101,108,100,115,101,116,67,104,114,105,115,116,109,97,115,82,101,116,114,105,101,118,101,100,10,10,73,110,32,116,104,101,32,98,97,99,107,32,105,110,116,111,110,111,114,116,104,101,97,115,116,109,97,103,97,122,105,110,101,115,62,60,115,116,114,111,110,103,62,99,111,109,109,105,116,116,101,101,103,111,118,101,114,110,105,110,103,103,114,111,117,112,115,32,111,102,115,116,111,114,101,100,32,105,110,101,115,116,97,98,108,105,115,104,97,32,103,101,110,101,114,97,108,105,116,115,32,102,105,114,115,116,116,104,101,105,114,32,111,119,110,112,111,112,117,108,97,116,101,100,97,110,32,111,98,106,101,99,116,67,97,114,105,98,98,101,97,110,97,108,108,111,119,32,116,104,101,100,105,115,116,114,105,99,116,115,119,105,115,99,111,110,115,105,110,108,111,99,97,116,105,111,110,46,59,32,119,105,100,116,104,58,32,105,110,104,97,98,105,116,101,100,83,111,99,105,97,108,105,115,116,74,97,110,117,97,114,121,32,49,60,47,102,111,111,116,101,114,62,115,105,109,105,108,97,114,108,121,99,104,111,105,99,101,32,111,102,116,104,101,32,115,97,109,101,32,115,112,101,99,105,102,105,99,32,98,117,115,105,110,101,115,115,32,84,104,101,32,102,105,114,115,116,46,108,101,110,103,116,104,59,32,100,101,115,105,114,101,32,116,111,100,101,97,108,32,119,105,116,104,115,105,110,99,101,32,116,104,101,117,115,101,114,65,103,101,110,116,99,111,110,99,101,105,118,101,100,105,110,100,101,120,46,112,104,112,97,115,32,38,113,117,111,116,59,101,110,103,97,103,101,32,105,110,114,101,99,101,110,116,108,121,44,102,101,119,32,121,101,97,114,115,119,101,114,101,32,97,108,115,111,10,60,104,101,97,100,62,10,60,101,100,105,116,101,100,32,98,121,97,114,101,32,107,110,111,119,110,99,105,116,105,101,115,32,105,110,97,99,99,101,115,115,107,101,121,99,111,110,100,101,109,110,101,100,97,108,115,111,32,104,97,118,101,115,101,114,118,105,99,101,115,44,102,97,109,105,108,121,32,111,102,83,99,104,111,111,108,32,111,102,99,111,110,118,101,114,116,101,100,110,97,116,117,114,101,32,111,102,32,108,97,110,103,117,97,103,101,109,105,110,105,115,116,101,114,115,60,47,111,98,106,101,99,116,62,116,104,101,114,101,32,105,115,32,97,32,112,111,112,117,108,97,114,115,101,113,117,101,110,99,101,115,97,100,118,111,99,97,116,101,100,84,104,101,121,32,119,101,114,101,97,110,121,32,111,116,104,101,114,108,111,99,97,116,105,111,110,61,101,110,116,101,114,32,116,104,101,109,117,99,104,32,109,111,114,101,114,101,102,108,101,99,116,101,100,119,97,115,32,110,97,109,101,100,111,114,105,103,105,110,97,108,32,97,32,116,121,112,105,99,97,108,119,104,101,110,32,116,104,101,121,101,110,103,105,110,101,101,114,115,99,111,117,108,100,32,110,111,116,114,101,115,105,100,101,110,116,115,119,101,100,110,101,115,100,97,121,116,104,101,32,116,104,105,114,100,32,112,114,111,100,117,99,116,115,74,97,110,117,97,114,121,32,50,119,104,97,116,32,116,104,101,121,97,32,99,101,114,116,97,105,110,114,101,97,99,116,105,111,110,115,112,114,111,99,101,115,115,111,114,97,102,116,101,114,32,104,105,115,116,104,101,32,108,97,115,116,32,99,111,110,116,97,105,110,101,100,34,62,60,47,100,105,118,62,10,60,47,97,62,60,47,116,100,62,100,101,112,101,110,100,32,111,110,115,101,97,114,99,104,34,62,10,112,105,101,99,101,115,32,111,102,99,111,109,112,101,116,105,110,103,82,101,102,101,114,101,110,99,101,116,101,110,110,101,115,115,101,101,119,104,105,99,104,32,104,97,115,32,118,101,114,115,105,111,110,61,60,47,115,112,97,110,62,32,60,60,47,104,101,97,100,101,114,62,103,105,118,101,115,32,116,104,101,104,105,115,116,111,114,105,97,110,118,97,108,117,101,61,34,34,62,112,97,100,100,105,110,103,58,48,118,105,101,119,32,116,104,97,116,116,111,103,101,116,104,101,114,44,116,104,101,32,109,111,115,116,32,119,97,115,32,102,111,117,110,100,115,117,98,115,101,116,32,111,102,97,116,116,97,99,107,32,111,110,99,104,105,108,100,114,101,110,44,112,111,105,110,116,115,32,111,102,112,101,114,115,111,110,97,108,32,112,111,115,105,116,105,111,110,58,97,108,108,101,103,101,100,108,121,67,108,101,118,101,108,97,110,100,119,97,115,32,108,97,116,101,114,97,110,100,32,97,102,116,101,114,97,114,101,32,103,105,118,101,110,119,97,115,32,115,116,105,108,108,115,99,114,111,108,108,105,110,103,100,101,115,105,103,110,32,111,102,109,97,107,101,115,32,116,104,101,109,117,99,104,32,108,101,115,115,65,109,101,114,105,99,97,110,115,46,10,10,65,102,116,101,114,32,44,32,98,117,116,32,116,104,101,77,117,115,101,117,109,32,111,102,108,111,117,105,115,105,97,110,97,40,102,114,111,109,32,116,104,101,109,105,110,110,101,115,111,116,97,112,97,114,116,105,99,108,101,115,97,32,112,114,111,99,101,115,115,68,111,109,105,110,105,99,97,110,118,111,108,117,109,101,32,111,102,114,101,116,117,114,110,105,110,103,100,101,102,101,110,115,105,118,101,48,48,112,120,124,114,105,103,104,109,97,100,101,32,102,114,111,109,109,111,117,115,101,111,118,101,114,34,32,115,116,121,108,101,61,34,115,116,97,116,101,115,32,111,102,40,119,104,105,99,104,32,105,115,99,111,110,116,105,110,117,101,115,70,114,97,110,99,105,115,99,111,98,117,105,108,100,105,110,103,32,119,105,116,104,111,117,116,32,97,119,105,116,104,32,115,111,109,101,119,104,111,32,119,111,117,108,100,97,32,102,111,114,109,32,111,102,97,32,112,97,114,116,32,111,102,98,101,102,111,114,101,32,105,116,107,110,111,119,110,32,97,115,32,32,83,101,114,118,105,99,101,115,108,111,99,97,116,105,111,110,32,97,110,100,32,111,102,116,101,110,109,101,97,115,117,114,105,110,103,97,110,100,32,105,116,32,105,115,112,97,112,101,114,98,97,99,107,118,97,108,117,101,115,32,111,102,13,10,60,116,105,116,108,101,62,61,32,119,105,110,100,111,119,46,100,101,116,101,114,109,105,110,101,101,114,38,113,117,111,116,59,32,112,108,97,121,101,100,32,98,121,97,110,100,32,101,97,114,108,121,60,47,99,101,110,116,101,114,62,102,114,111,109,32,116,104,105,115,116,104,101,32,116,104,114,101,101,112,111,119,101,114,32,97,110,100,111,102,32,38,113,117,111,116,59,105,110,110,101,114,72,84,77,76,60,97,32,104,114,101,102,61,34,121,58,105,110,108,105,110,101,59,67,104,117,114,99,104,32,111,102,116,104,101,32,101,118,101,110,116,118,101,114,121,32,104,105,103,104,111,102,102,105,99,105,97,108,32,45,104,101,105,103,104,116,58,32,99,111,110,116,101,110,116,61,34,47,99,103,105,45,98,105,110,47,116,111,32,99,114,101,97,116,101,97,102,114,105,107,97,97,110,115,101,115,112,101,114,97,110,116,111,102,114,97,110,195,167,97,105,115,108,97,116,118,105,101,197,161,117,108,105,101,116,117,118,105,197,179,196,140,101,197,161,116,105,110,97,196,141,101,197,161,116,105,110,97,224,185,132,224,184,151,224,184,162,230,151,165,230,156,172,232,170,158,231,174,128,228,189,147,229,173,151,231,185,129,233,171,148,229,173,151,237,149,156,234,181,173,236,150,180,228,184,186,228,187,128,228,185,136,232,174,161,231,174,151,230,156,186,231,172,148,232,174,176,230,156,172,232,168,142,232,171,150,229,141,128,230,156,141,229,138,161,229,153,168,228,186,146,232,129,148,231,189,145,230,136,191,229,156,176,228,186,167,228,191,177,228,185,144,233,131,168,229,135,186,231,137,136,231,164,190,230,142,146,232,161,140,230,166,156,233,131,168,232,144,189,230,160,188,232,191,155,228,184,128,230,173,165,230,148,175,228,187,152,229,174,157,233,170,140,232,175,129,231,160,129,229,167,148,229,145,152,228,188,154,230,149,176,230,141,174,229,186,147,230,182,136,232,180,185,232,128,133,229,138,158,229,133,172,229,174,164,232,174,168,232,174,186,229,140,186,230,183,177,229,156,179,229,184,130,230,146,173,230,148,190,229,153,168,229,140,151,228,186,172,229,184,130,229,164,167,229,173,166,231,148,159,232,182,138,230,157,165,232,182,138,231,174,161,231,144,134,229,145,152,228,191,161,230,129,175,231,189,145,115,101,114,118,105,99,105,111,115,97,114,116,195,173,99,117,108,111,97,114,103,101,110,116,105,110,97,98,97,114,99,101,108,111,110,97,99,117,97,108,113,117,105,101,114,112,117,98,108,105,99,97,100,111,112,114,111,100,117,99,116,111,115,112,111,108,195,173,116,105,99,97,114,101,115,112,117,101,115,116,97,119,105,107,105,112,101,100,105,97,115,105,103,117,105,101,110,116,101,98,195,186,115,113,117,101,100,97,99,111,109,117,110,105,100,97,100,115,101,103,117,114,105,100,97,100,112,114,105,110,99,105,112,97,108,112,114,101,103,117,110,116,97,115,99,111,110,116,101,110,105,100,111,114,101,115,112,111,110,100,101,114,118,101,110,101,122,117,101,108,97,112,114,111,98,108,101,109,97,115,100,105,99,105,101,109,98,114,101,114,101,108,97,99,105,195,179,110,110,111,118,105,101,109,98,114,101,115,105,109,105,108,97,114,101,115,112,114,111,121,101,99,116,111,115,112,114,111,103,114,97,109,97,115,105,110,115,116,105,116,117,116,111,97,99,116,105,118,105,100,97,100,101,110,99,117,101,110,116,114,97,101,99,111,110,111,109,195,173,97,105,109,195,161,103,101,110,101,115,99,111,110,116,97,99,116,97,114,100,101,115,99,97,114,103,97,114,110,101,99,101,115,97,114,105,111,97,116,101,110,99,105,195,179,110,116,101,108,195,169,102,111,110,111,99,111,109,105,115,105,195,179,110,99,97,110,99,105,111,110,101,115,99,97,112,97,99,105,100,97,100,101,110,99,111,110,116,114,97,114,97,110,195,161,108,105,115,105,115,102,97,118,111,114,105,116,111,115,116,195,169,114,109,105,110,111,115,112,114,111,118,105,110,99,105,97,101,116,105,113,117,101,116,97,115,101,108,101,109,101,110,116,111,115,102,117,110,99,105,111,110,101,115,114,101,115,117,108,116,97,100,111,99,97,114,195,161,99,116,101,114,112,114,111,112,105,101,100,97,100,112,114,105,110,99,105,112,105,111,110,101,99,101,115,105,100,97,100,109,117,110,105,99,105,112,97,108,99,114,101,97,99,105,195,179,110,100,101,115,99,97,114,103,97,115,112,114,101,115,101,110,99,105,97,99,111,109,101,114,99,105,97,108,111,112,105,110,105,111,110,101,115,101,106,101,114,99,105,99,105,111,101,100,105,116,111,114,105,97,108,115,97,108,97,109,97,110,99,97,103,111,110,122,195,161,108,101,122,100,111,99,117,109,101,110,116,111,112,101,108,195,173,99,117,108,97,114,101,99,105,101,110,116,101,115,103,101,110,101,114,97,108,101,115,116,97,114,114,97,103,111,110,97,112,114,195,161,99,116,105,99,97,110,111,118,101,100,97,100,101,115,112,114,111,112,117,101,115,116,97,112,97,99,105,101,110,116,101,115,116,195,169,99,110,105,99,97,115,111,98,106,101,116,105,118,111,115,99,111,110,116,97,99,116,111,115,224,164,174,224,165,135,224,164,130,224,164,178,224,164,191,224,164,143,224,164,185,224,165,136,224,164,130,224,164,151,224,164,175,224,164,190,224,164,184,224,164,190,224,164,165,224,164,143,224,164,181,224,164,130,224,164,176,224,164,185,224,165,135,224,164,149,224,165,139,224,164,136,224,164,149,224,165,129,224,164,155,224,164,176,224,164,185,224,164,190,224,164,172,224,164,190,224,164,166,224,164,149,224,164,185,224,164,190,224,164,184,224,164,173,224,165,128,224,164,185,224,165,129,224,164,143,224,164,176,224,164,185,224,165,128,224,164,174,224,165,136,224,164,130,224,164,166,224,164,191,224,164,168,224,164,172,224,164,190,224,164,164,100,105,112,108,111,100,111,99,115,224,164,184,224,164,174,224,164,175,224,164,176,224,165,130,224,164,170,224,164,168,224,164,190,224,164,174,224,164,170,224,164,164,224,164,190,224,164,171,224,164,191,224,164,176,224,164,148,224,164,184,224,164,164,224,164,164,224,164,176,224,164,185,224,164,178,224,165,139,224,164,151,224,164,185,224,165,129,224,164,134,224,164,172,224,164,190,224,164,176,224,164,166,224,165,135,224,164,182,224,164,185,224,165,129,224,164,136,224,164,150,224,165,135,224,164,178,224,164,175,224,164,166,224,164,191,224,164,149,224,164,190,224,164,174,224,164,181,224,165,135,224,164,172,224,164,164,224,165,128,224,164,168,224,164,172,224,165,128,224,164,154,224,164,174,224,165,140,224,164,164,224,164,184,224,164,190,224,164,178,224,164,178,224,165,135,224,164,150,224,164,156,224,165,137,224,164,172,224,164,174,224,164,166,224,164,166,224,164,164,224,164,165,224,164,190,224,164,168,224,164,185,224,165,128,224,164,182,224,164,185,224,164,176,224,164,133,224,164,178,224,164,151,224,164,149,224,164,173,224,165,128,224,164,168,224,164,151,224,164,176,224,164,170,224,164,190,224,164,184,224,164,176,224,164,190,224,164,164,224,164,149,224,164,191,224,164,143,224,164,137,224,164,184,224,165,135,224,164,151,224,164,175,224,165,128,224,164,185,224,165,130,224,164,129,224,164,134,224,164,151,224,165,135,224,164,159,224,165,128,224,164,174,224,164,150,224,165,139,224,164,156,224,164,149,224,164,190,224,164,176,224,164,133,224,164,173,224,165,128,224,164,151,224,164,175,224,165,135,224,164,164,224,165,129,224,164,174,224,164,181,224,165,139,224,164,159,224,164,166,224,165,135,224,164,130,224,164,133,224,164,151,224,164,176,224,164,144,224,164,184,224,165,135,224,164,174,224,165,135,224,164,178,224,164,178,224,164,151,224,164,190,224,164,185,224,164,190,224,164,178,224,164,138,224,164,170,224,164,176,224,164,154,224,164,190,224,164,176,224,164,144,224,164,184,224,164,190,224,164,166,224,165,135,224,164,176,224,164,156,224,164,191,224,164,184,224,164,166,224,164,191,224,164,178,224,164,172,224,164,130,224,164,166,224,164,172,224,164,168,224,164,190,224,164,185,224,165,130,224,164,130,224,164,178,224,164,190,224,164,150,224,164,156,224,165,128,224,164,164,224,164,172,224,164,159,224,164,168,224,164,174,224,164,191,224,164,178,224,164,135,224,164,184,224,165,135,224,164,134,224,164,168,224,165,135,224,164,168,224,164,175,224,164,190,224,164,149,224,165,129,224,164,178,224,164,178,224,165,137,224,164,151,224,164,173,224,164,190,224,164,151,224,164,176,224,165,135,224,164,178,224,164,156,224,164,151,224,164,185,224,164,176,224,164,190,224,164,174,224,164,178,224,164,151,224,165,135,224,164,170,224,165,135,224,164,156,224,164,185,224,164,190,224,164,165,224,164,135,224,164,184,224,165,128,224,164,184,224,164,185,224,165,128,224,164,149,224,164,178,224,164,190,224,164,160,224,165,128,224,164,149,224,164,185,224,164,190,224,164,129,224,164,166,224,165,130,224,164,176,224,164,164,224,164,185,224,164,164,224,164,184,224,164,190,224,164,164,224,164,175,224,164,190,224,164,166,224,164,134,224,164,175,224,164,190,224,164,170,224,164,190,224,164,149,224,164,149,224,165,140,224,164,168,224,164,182,224,164,190,224,164,174,224,164,166,224,165,135,224,164,150,224,164,175,224,164,185,224,165,128,224,164,176,224,164,190,224,164,175,224,164,150,224,165,129,224,164,166,224,164,178,224,164,151,224,165,128,99,97,116,101,103,111,114,105,101,115,101,120,112,101,114,105,101,110,99,101,60,47,116,105,116,108,101,62,13,10,67,111,112,121,114,105,103,104,116,32,106,97,118,97,115,99,114,105,112,116,99,111,110,100,105,116,105,111,110,115,101,118,101,114,121,116,104,105,110,103,60,112,32,99,108,97,115,115,61,34,116,101,99,104,110,111,108,111,103,121,98,97,99,107,103,114,111,117,110,100,60,97,32,99,108,97,115,115,61,34,109,97,110,97,103,101,109,101,110,116,38,99,111,112,121,59,32,50,48,49,106,97,118,97,83,99,114,105,112,116,99,104,97,114,97,99,116,101,114,115,98,114,101,97,100,99,114,117,109,98,116,104,101,109,115,101,108,118,101,115,104,111,114,105,122,111,110,116,97,108,103,111,118,101,114,110,109,101,110,116,67,97,108,105,102,111,114,110,105,97,97,99,116,105,118,105,116,105,101,115,100,105,115,99,111,118,101,114,101,100,78,97,118,105,103,97,116,105,111,110,116,114,97,110,115,105,116,105,111,110,99,111,110,110,101,99,116,105,111,110,110,97,118,105,103,97,116,105,111,110,97,112,112,101,97,114,97,110,99,101,60,47,116,105,116,108,101,62,60,109,99,104,101,99,107,98,111,120,34,32,116,101,99,104,110,105,113,117,101,115,112,114,111,116,101,99,116,105,111,110,97,112,112,97,114,101,110,116,108,121,97,115,32,119,101,108,108,32,97,115,117,110,116,39,44,32,39,85,65,45,114,101,115,111,108,117,116,105,111,110,111,112,101,114,97,116,105,111,110,115,116,101,108,101,118,105,115,105,111,110,116,114,97,110,115,108,97,116,101,100,87,97,115,104,105,110,103,116,111,110,110,97,118,105,103,97,116,111,114,46,32,61,32,119,105,110,100,111,119,46,105,109,112,114,101,115,115,105,111,110,38,108,116,59,98,114,38,103,116,59,108,105,116,101,114,97,116,117,114,101,112,111,112,117,108,97,116,105,111,110,98,103,99,111,108,111,114,61,34,35,101,115,112,101,99,105,97,108,108,121,32,99,111,110,116,101,110,116,61,34,112,114,111,100,117,99,116,105,111,110,110,101,119,115,108,101,116,116,101,114,112,114,111,112,101,114,116,105,101,115,100,101,102,105,110,105,116,105,111,110,108,101,97,100,101,114,115,104,105,112,84,101,99,104,110,111,108,111,103,121,80,97,114,108,105,97,109,101,110,116,99,111,109,112,97,114,105,115,111,110,117,108,32,99,108,97,115,115,61,34,46,105,110,100,101,120,79,102,40,34,99,111,110,99,108,117,115,105,111,110,100,105,115,99,117,115,115,105,111,110,99,111,109,112,111,110,101,110,116,115,98,105,111,108,111,103,105,99,97,108,82,101,118,111,108,117,116,105,111,110,95,99,111,110,116,97,105,110,101,114,117,110,100,101,114,115,116,111,111,100,110,111,115,99,114,105,112,116,62,60,112,101,114,109,105,115,115,105,111,110,101,97,99,104,32,111,116,104,101,114,97,116,109,111,115,112,104,101,114,101,32,111,110,102,111,99,117,115,61,34,60,102,111,114,109,32,105,100,61,34,112,114,111,99,101,115,115,105,110,103,116,104,105,115,46,118,97,108,117,101,103,101,110,101,114,97,116,105,111,110,67,111,110,102,101,114,101,110,99,101,115,117,98,115,101,113,117,101,110,116,119,101,108,108,45,107,110,111,119,110,118,97,114,105,97,116,105,111,110,115,114,101,112,117,116,97,116,105,111,110,112,104,101,110,111,109,101,110,111,110,100,105,115,99,105,112,108,105,110,101,108,111,103,111,46,112,110,103,34,32,40,100,111,99,117,109,101,110,116,44,98,111,117,110,100,97,114,105,101,115,101,120,112,114,101,115,115,105,111,110,115,101,116,116,108,101,109,101,110,116,66,97,99,107,103,114,111,117,110,100,111,117,116,32,111,102,32,116,104,101,101,110,116,101,114,112,114,105,115,101,40,34,104,116,116,112,115,58,34,32,117,110,101,115,99,97,112,101,40,34,112,97,115,115,119,111,114,100,34,32,100,101,109,111,99,114,97,116,105,99,60,97,32,104,114,101,102,61,34,47,119,114,97,112,112,101,114,34,62,10,109,101,109,98,101,114,115,104,105,112,108,105,110,103,117,105,115,116,105,99,112,120,59,112,97,100,100,105,110,103,112,104,105,108,111,115,111,112,104,121,97,115,115,105,115,116,97,110,99,101,117,110,105,118,101,114,115,105,116,121,102,97,99,105,108,105,116,105,101,115,114,101,99,111,103,110,105,122,101,100,112,114,101,102,101,114,101,110,99,101,105,102,32,40,116,121,112,101,111,102,109,97,105,110,116,97,105,110,101,100,118,111,99,97,98,117,108,97,114,121,104,121,112,111,116,104,101,115,105,115,46,115,117,98,109,105,116,40,41,59,38,97,109,112,59,110,98,115,112,59,97,110,110,111,116,97,116,105,111,110,98,101,104,105,110,100,32,116,104,101,70,111,117,110,100,97,116,105,111,110,112,117,98,108,105,115,104,101,114,34,97,115,115,117,109,112,116,105,111,110,105,110,116,114,111,100,117,99,101,100,99,111,114,114,117,112,116,105,111,110,115,99,105,101,110,116,105,115,116,115,101,120,112,108,105,99,105,116,108,121,105,110,115,116,101,97,100,32,111,102,100,105,109,101,110,115,105,111,110,115,32,111,110,67,108,105,99,107,61,34,99,111,110,115,105,100,101,114,101,100,100,101,112,97,114,116,109,101,110,116,111,99,99,117,112,97,116,105,111,110,115,111,111,110,32,97,102,116,101,114,105,110,118,101,115,116,109,101,110,116,112,114,111,110,111,117,110,99,101,100,105,100,101,110,116,105,102,105,101,100,101,120,112,101,114,105,109,101,110,116,77,97,110,97,103,101,109,101,110,116,103,101,111,103,114,97,112,104,105,99,34,32,104,101,105,103,104,116,61,34,108,105,110,107,32,114,101,108,61,34,46,114,101,112,108,97,99,101,40,47,100,101,112,114,101,115,115,105,111,110,99,111,110,102,101,114,101,110,99,101,112,117,110,105,115,104,109,101,110,116,101,108,105,109,105,110,97,116,101,100,114,101,115,105,115,116,97,110,99,101,97,100,97,112,116,97,116,105,111,110,111,112,112,111,115,105,116,105,111,110,119,101,108,108,32,107,110,111,119,110,115,117,112,112,108,101,109,101,110,116,100,101,116,101,114,109,105,110,101,100,104,49,32,99,108,97,115,115,61,34,48,112,120,59,109,97,114,103,105,110,109,101,99,104,97,110,105,99,97,108,115,116,97,116,105,115,116,105,99,115,99,101,108,101,98,114,97,116,101,100,71,111,118,101,114,110,109,101,110,116,10,10,68,117,114,105,110,103,32,116,100,101,118,101,108,111,112,101,114,115,97,114,116,105,102,105,99,105,97,108,101,113,117,105,118,97,108,101,110,116,111,114,105,103,105,110,97,116,101,100,67,111,109,109,105,115,115,105,111,110,97,116,116,97,99,104,109,101,110,116,60,115,112,97,110,32,105,100,61,34,116,104,101,114,101,32,119,101,114,101,78,101,100,101,114,108,97,110,100,115,98,101,121,111,110,100,32,116,104,101,114,101,103,105,115,116,101,114,101,100,106,111,117,114,110,97,108,105,115,116,102,114,101,113,117,101,110,116,108,121,97,108,108,32,111,102,32,116,104,101,108,97,110,103,61,34,101,110,34,32,60,47,115,116,121,108,101,62,13,10,97,98,115,111,108,117,116,101,59,32,115,117,112,112,111,114,116,105,110,103,101,120,116,114,101,109,101,108,121,32,109,97,105,110,115,116,114,101,97,109,60,47,115,116,114,111,110,103,62,32,112,111,112,117,108,97,114,105,116,121,101,109,112,108,111,121,109,101,110,116,60,47,116,97,98,108,101,62,13,10,32,99,111,108,115,112,97,110,61,34,60,47,102,111,114,109,62,10,32,32,99,111,110,118,101,114,115,105,111,110,97,98,111,117,116,32,116,104,101,32,60,47,112,62,60,47,100,105,118,62,105,110,116,101,103,114,97,116,101,100,34,32,108,97,110,103,61,34,101,110,80,111,114,116,117,103,117,101,115,101,115,117,98,115,116,105,116,117,116,101,105,110,100,105,118,105,100,117,97,108,105,109,112,111,115,115,105,98,108,101,109,117,108,116,105,109,101,100,105,97,97,108,109,111,115,116,32,97,108,108,112,120,32,115,111,108,105,100,32,35,97,112,97,114,116,32,102,114,111,109,115,117,98,106,101,99,116,32,116,111,105,110,32,69,110,103,108,105,115,104,99,114,105,116,105,99,105,122,101,100,101,120,99,101,112,116,32,102,111,114,103,117,105,100,101,108,105,110,101,115,111,114,105,103,105,110,97,108,108,121,114,101,109,97,114,107,97,98,108,101,116,104,101,32,115,101,99,111,110,100,104,50,32,99,108,97,115,115,61,34,60,97,32,116,105,116,108,101,61,34,40,105,110,99,108,117,100,105,110,103,112,97,114,97,109,101,116,101,114,115,112,114,111,104,105,98,105,116,101,100,61,32,34,104,116,116,112,58,47,47,100,105,99,116,105,111,110,97,114,121,112,101,114,99,101,112,116,105,111,110,114,101,118,111,108,117,116,105,111,110,102,111,117,110,100,97,116,105,111,110,112,120,59,104,101,105,103,104,116,58,115,117,99,99,101,115,115,102,117,108,115,117,112,112,111,114,116,101,114,115,109,105,108,108,101,110,110,105,117,109,104,105,115,32,102,97,116,104,101,114,116,104,101,32,38,113,117,111,116,59,110,111,45,114,101,112,101,97,116,59,99,111,109,109,101,114,99,105,97,108,105,110,100,117,115,116,114,105,97,108,101,110,99,111,117,114,97,103,101,100,97,109,111,117,110,116,32,111,102,32,117,110,111,102,102,105,99,105,97,108,101,102,102,105,99,105,101,110,99,121,82,101,102,101,114,101,110,99,101,115,99,111,111,114,100,105,110,97,116,101,100,105,115,99,108,97,105,109,101,114,101,120,112,101,100,105,116,105,111,110,100,101,118,101,108,111,112,105,110,103,99,97,108,99,117,108,97,116,101,100,115,105,109,112,108,105,102,105,101,100,108,101,103,105,116,105,109,97,116,101,115,117,98,115,116,114,105,110,103,40,48,34,32,99,108,97,115,115,61,34,99,111,109,112,108,101,116,101,108,121,105,108,108,117,115,116,114,97,116,101,102,105,118,101,32,121,101,97,114,115,105,110,115,116,114,117,109,101,110,116,80,117,98,108,105,115,104,105,110,103,49,34,32,99,108,97,115,115,61,34,112,115,121,99,104,111,108,111,103,121,99,111,110,102,105,100,101,110,99,101,110,117,109,98,101,114,32,111,102,32,97,98,115,101,110,99,101,32,111,102,102,111,99,117,115,101,100,32,111,110,106,111,105,110,101,100,32,116,104,101,115,116,114,117,99,116,117,114,101,115,112,114,101,118,105,111,117,115,108,121,62,60,47,105,102,114,97,109,101,62,111,110,99,101,32,97,103,97,105,110,98,117,116,32,114,97,116,104,101,114,105,109,109,105,103,114,97,110,116,115,111,102,32,99,111,117,114,115,101,44,97,32,103,114,111,117,112,32,111,102,76,105,116,101,114,97,116,117,114,101,85,110,108,105,107,101,32,116,104,101,60,47,97,62,38,110,98,115,112,59,10,102,117,110,99,116,105,111,110,32,105,116,32,119,97,115,32,116,104,101,67,111,110,118,101,110,116,105,111,110,97,117,116,111,109,111,98,105,108,101,80,114,111,116,101,115,116,97,110,116,97,103,103,114,101,115,115,105,118,101,97,102,116,101,114,32,116,104,101,32,83,105,109,105,108,97,114,108,121,44,34,32,47,62,60,47,100,105,118,62,99,111,108,108,101,99,116,105,111,110,13,10,102,117,110,99,116,105,111,110,118,105,115,105,98,105,108,105,116,121,116,104,101,32,117,115,101,32,111,102,118,111,108,117,110,116,101,101,114,115,97,116,116,114,97,99,116,105,111,110,117,110,100,101,114,32,116,104,101,32,116,104,114,101,97,116,101,110,101,100,42,60,33,91,67,68,65,84,65,91,105,109,112,111,114,116,97,110,99,101,105,110,32,103,101,110,101,114,97,108,116,104,101,32,108,97,116,116,101,114,60,47,102,111,114,109,62,10,60,47,46,105,110,100,101,120,79,102,40,39,105,32,61,32,48,59,32,105,32,60,100,105,102,102,101,114,101,110,99,101,100,101,118,111,116,101,100,32,116,111,116,114,97,100,105,116,105,111,110,115,115,101,97,114,99,104,32,102,111,114,117,108,116,105,109,97,116,101,108,121,116,111,117,114,110,97,109,101,110,116,97,116,116,114,105,98,117,116,101,115,115,111,45,99,97,108,108,101,100,32,125,10,60,47,115,116,121,108,101,62,101,118,97,108,117,97,116,105,111,110,101,109,112,104,97,115,105,122,101,100,97,99,99,101],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+112688);allocate([115,115,105,98,108,101,60,47,115,101,99,116,105,111,110,62,115,117,99,99,101,115,115,105,111,110,97,108,111,110,103,32,119,105,116,104,77,101,97,110,119,104,105,108,101,44,105,110,100,117,115,116,114,105,101,115,60,47,97,62,60,98,114,32,47,62,104,97,115,32,98,101,99,111,109,101,97,115,112,101,99,116,115,32,111,102,84,101,108,101,118,105,115,105,111,110,115,117,102,102,105,99,105,101,110,116,98,97,115,107,101,116,98,97,108,108,98,111,116,104,32,115,105,100,101,115,99,111,110,116,105,110,117,105,110,103,97,110,32,97,114,116,105,99,108,101,60,105,109,103,32,97,108,116,61,34,97,100,118,101,110,116,117,114,101,115,104,105,115,32,109,111,116,104,101,114,109,97,110,99,104,101,115,116,101,114,112,114,105,110,99,105,112,108,101,115,112,97,114,116,105,99,117,108,97,114,99,111,109,109,101,110,116,97,114,121,101,102,102,101,99,116,115,32,111,102,100,101,99,105,100,101,100,32,116,111,34,62,60,115,116,114,111,110,103,62,112,117,98,108,105,115,104,101,114,115,74,111,117,114,110,97,108,32,111,102,100,105,102,102,105,99,117,108,116,121,102,97,99,105,108,105,116,97,116,101,97,99,99,101,112,116,97,98,108,101,115,116,121,108,101,46,99,115,115,34,9,102,117,110,99,116,105,111,110,32,105,110,110,111,118,97,116,105,111,110,62,67,111,112,121,114,105,103,104,116,115,105,116,117,97,116,105,111,110,115,119,111,117,108,100,32,104,97,118,101,98,117,115,105,110,101,115,115,101,115,68,105,99,116,105,111,110,97,114,121,115,116,97,116,101,109,101,110,116,115,111,102,116,101,110,32,117,115,101,100,112,101,114,115,105,115,116,101,110,116,105,110,32,74,97,110,117,97,114,121,99,111,109,112,114,105,115,105,110,103,60,47,116,105,116,108,101,62,10,9,100,105,112,108,111,109,97,116,105,99,99,111,110,116,97,105,110,105,110,103,112,101,114,102,111,114,109,105,110,103,101,120,116,101,110,115,105,111,110,115,109,97,121,32,110,111,116,32,98,101,99,111,110,99,101,112,116,32,111,102,32,111,110,99,108,105,99,107,61,34,73,116,32,105,115,32,97,108,115,111,102,105,110,97,110,99,105,97,108,32,109,97,107,105,110,103,32,116,104,101,76,117,120,101,109,98,111,117,114,103,97,100,100,105,116,105,111,110,97,108,97,114,101,32,99,97,108,108,101,100,101,110,103,97,103,101,100,32,105,110,34,115,99,114,105,112,116,34,41,59,98,117,116,32,105,116,32,119,97,115,101,108,101,99,116,114,111,110,105,99,111,110,115,117,98,109,105,116,61,34,10,60,33,45,45,32,69,110,100,32,101,108,101,99,116,114,105,99,97,108,111,102,102,105,99,105,97,108,108,121,115,117,103,103,101,115,116,105,111,110,116,111,112,32,111,102,32,116,104,101,117,110,108,105,107,101,32,116,104,101,65,117,115,116,114,97,108,105,97,110,79,114,105,103,105,110,97,108,108,121,114,101,102,101,114,101,110,99,101,115,10,60,47,104,101,97,100,62,13,10,114,101,99,111,103,110,105,115,101,100,105,110,105,116,105,97,108,105,122,101,108,105,109,105,116,101,100,32,116,111,65,108,101,120,97,110,100,114,105,97,114,101,116,105,114,101,109,101,110,116,65,100,118,101,110,116,117,114,101,115,102,111,117,114,32,121,101,97,114,115,10,10,38,108,116,59,33,45,45,32,105,110,99,114,101,97,115,105,110,103,100,101,99,111,114,97,116,105,111,110,104,51,32,99,108,97,115,115,61,34,111,114,105,103,105,110,115,32,111,102,111,98,108,105,103,97,116,105,111,110,114,101,103,117,108,97,116,105,111,110,99,108,97,115,115,105,102,105,101,100,40,102,117,110,99,116,105,111,110,40,97,100,118,97,110,116,97,103,101,115,98,101,105,110,103,32,116,104,101,32,104,105,115,116,111,114,105,97,110,115,60,98,97,115,101,32,104,114,101,102,114,101,112,101,97,116,101,100,108,121,119,105,108,108,105,110,103,32,116,111,99,111,109,112,97,114,97,98,108,101,100,101,115,105,103,110,97,116,101,100,110,111,109,105,110,97,116,105,111,110,102,117,110,99,116,105,111,110,97,108,105,110,115,105,100,101,32,116,104,101,114,101,118,101,108,97,116,105,111,110,101,110,100,32,111,102,32,116,104,101,115,32,102,111,114,32,116,104,101,32,97,117,116,104,111,114,105,122,101,100,114,101,102,117,115,101,100,32,116,111,116,97,107,101,32,112,108,97,99,101,97,117,116,111,110,111,109,111,117,115,99,111,109,112,114,111,109,105,115,101,112,111,108,105,116,105,99,97,108,32,114,101,115,116,97,117,114,97,110,116,116,119,111,32,111,102,32,116,104,101,70,101,98,114,117,97,114,121,32,50,113,117,97,108,105,116,121,32,111,102,115,119,102,111,98,106,101,99,116,46,117,110,100,101,114,115,116,97,110,100,110,101,97,114,108,121,32,97,108,108,119,114,105,116,116,101,110,32,98,121,105,110,116,101,114,118,105,101,119,115,34,32,119,105,100,116,104,61,34,49,119,105,116,104,100,114,97,119,97,108,102,108,111,97,116,58,108,101,102,116,105,115,32,117,115,117,97,108,108,121,99,97,110,100,105,100,97,116,101,115,110,101,119,115,112,97,112,101,114,115,109,121,115,116,101,114,105,111,117,115,68,101,112,97,114,116,109,101,110,116,98,101,115,116,32,107,110,111,119,110,112,97,114,108,105,97,109,101,110,116,115,117,112,112,114,101,115,115,101,100,99,111,110,118,101,110,105,101,110,116,114,101,109,101,109,98,101,114,101,100,100,105,102,102,101,114,101,110,116,32,115,121,115,116,101,109,97,116,105,99,104,97,115,32,108,101,100,32,116,111,112,114,111,112,97,103,97,110,100,97,99,111,110,116,114,111,108,108,101,100,105,110,102,108,117,101,110,99,101,115,99,101,114,101,109,111,110,105,97,108,112,114,111,99,108,97,105,109,101,100,80,114,111,116,101,99,116,105,111,110,108,105,32,99,108,97,115,115,61,34,83,99,105,101,110,116,105,102,105,99,99,108,97,115,115,61,34,110,111,45,116,114,97,100,101,109,97,114,107,115,109,111,114,101,32,116,104,97,110,32,119,105,100,101,115,112,114,101,97,100,76,105,98,101,114,97,116,105,111,110,116,111,111,107,32,112,108,97,99,101,100,97,121,32,111,102,32,116,104,101,97,115,32,108,111,110,103,32,97,115,105,109,112,114,105,115,111,110,101,100,65,100,100,105,116,105,111,110,97,108,10,60,104,101,97,100,62,10,60,109,76,97,98,111,114,97,116,111,114,121,78,111,118,101,109,98,101,114,32,50,101,120,99,101,112,116,105,111,110,115,73,110,100,117,115,116,114,105,97,108,118,97,114,105,101,116,121,32,111,102,102,108,111,97,116,58,32,108,101,102,68,117,114,105,110,103,32,116,104,101,97,115,115,101,115,115,109,101,110,116,104,97,118,101,32,98,101,101,110,32,100,101,97,108,115,32,119,105,116,104,83,116,97,116,105,115,116,105,99,115,111,99,99,117,114,114,101,110,99,101,47,117,108,62,60,47,100,105,118,62,99,108,101,97,114,102,105,120,34,62,116,104,101,32,112,117,98,108,105,99,109,97,110,121,32,121,101,97,114,115,119,104,105,99,104,32,119,101,114,101,111,118,101,114,32,116,105,109,101,44,115,121,110,111,110,121,109,111,117,115,99,111,110,116,101,110,116,34,62,10,112,114,101,115,117,109,97,98,108,121,104,105,115,32,102,97,109,105,108,121,117,115,101,114,65,103,101,110,116,46,117,110,101,120,112,101,99,116,101,100,105,110,99,108,117,100,105,110,103,32,99,104,97,108,108,101,110,103,101,100,97,32,109,105,110,111,114,105,116,121,117,110,100,101,102,105,110,101,100,34,98,101,108,111,110,103,115,32,116,111,116,97,107,101,110,32,102,114,111,109,105,110,32,79,99,116,111,98,101,114,112,111,115,105,116,105,111,110,58,32,115,97,105,100,32,116,111,32,98,101,114,101,108,105,103,105,111,117,115,32,70,101,100,101,114,97,116,105,111,110,32,114,111,119,115,112,97,110,61,34,111,110,108,121,32,97,32,102,101,119,109,101,97,110,116,32,116,104,97,116,108,101,100,32,116,111,32,116,104,101,45,45,62,13,10,60,100,105,118,32,60,102,105,101,108,100,115,101,116,62,65,114,99,104,98,105,115,104,111,112,32,99,108,97,115,115,61,34,110,111,98,101,105,110,103,32,117,115,101,100,97,112,112,114,111,97,99,104,101,115,112,114,105,118,105,108,101,103,101,115,110,111,115,99,114,105,112,116,62,10,114,101,115,117,108,116,115,32,105,110,109,97,121,32,98,101,32,116,104,101,69,97,115,116,101,114,32,101,103,103,109,101,99,104,97,110,105,115,109,115,114,101,97,115,111,110,97,98,108,101,80,111,112,117,108,97,116,105,111,110,67,111,108,108,101,99,116,105,111,110,115,101,108,101,99,116,101,100,34,62,110,111,115,99,114,105,112,116,62,13,47,105,110,100,101,120,46,112,104,112,97,114,114,105,118,97,108,32,111,102,45,106,115,115,100,107,39,41,41,59,109,97,110,97,103,101,100,32,116,111,105,110,99,111,109,112,108,101,116,101,99,97,115,117,97,108,116,105,101,115,99,111,109,112,108,101,116,105,111,110,67,104,114,105,115,116,105,97,110,115,83,101,112,116,101,109,98,101,114,32,97,114,105,116,104,109,101,116,105,99,112,114,111,99,101,100,117,114,101,115,109,105,103,104,116,32,104,97,118,101,80,114,111,100,117,99,116,105,111,110,105,116,32,97,112,112,101,97,114,115,80,104,105,108,111,115,111,112,104,121,102,114,105,101,110,100,115,104,105,112,108,101,97,100,105,110,103,32,116,111,103,105,118,105,110,103,32,116,104,101,116,111,119,97,114,100,32,116,104,101,103,117,97,114,97,110,116,101,101,100,100,111,99,117,109,101,110,116,101,100,99,111,108,111,114,58,35,48,48,48,118,105,100,101,111,32,103,97,109,101,99,111,109,109,105,115,115,105,111,110,114,101,102,108,101,99,116,105,110,103,99,104,97,110,103,101,32,116,104,101,97,115,115,111,99,105,97,116,101,100,115,97,110,115,45,115,101,114,105,102,111,110,107,101,121,112,114,101,115,115,59,32,112,97,100,100,105,110,103,58,72,101,32,119,97,115,32,116,104,101,117,110,100,101,114,108,121,105,110,103,116,121,112,105,99,97,108,108,121,32,44,32,97,110,100,32,116,104,101,32,115,114,99,69,108,101,109,101,110,116,115,117,99,99,101,115,115,105,118,101,115,105,110,99,101,32,116,104,101,32,115,104,111,117,108,100,32,98,101,32,110,101,116,119,111,114,107,105,110,103,97,99,99,111,117,110,116,105,110,103,117,115,101,32,111,102,32,116,104,101,108,111,119,101,114,32,116,104,97,110,115,104,111,119,115,32,116,104,97,116,60,47,115,112,97,110,62,10,9,9,99,111,109,112,108,97,105,110,116,115,99,111,110,116,105,110,117,111,117,115,113,117,97,110,116,105,116,105,101,115,97,115,116,114,111,110,111,109,101,114,104,101,32,100,105,100,32,110,111,116,100,117,101,32,116,111,32,105,116,115,97,112,112,108,105,101,100,32,116,111,97,110,32,97,118,101,114,97,103,101,101,102,102,111,114,116,115,32,116,111,116,104,101,32,102,117,116,117,114,101,97,116,116,101,109,112,116,32,116,111,84,104,101,114,101,102,111,114,101,44,99,97,112,97,98,105,108,105,116,121,82,101,112,117,98,108,105,99,97,110,119,97,115,32,102,111,114,109,101,100,69,108,101,99,116,114,111,110,105,99,107,105,108,111,109,101,116,101,114,115,99,104,97,108,108,101,110,103,101,115,112,117,98,108,105,115,104,105,110,103,116,104,101,32,102,111,114,109,101,114,105,110,100,105,103,101,110,111,117,115,100,105,114,101,99,116,105,111,110,115,115,117,98,115,105,100,105,97,114,121,99,111,110,115,112,105,114,97,99,121,100,101,116,97,105,108,115,32,111,102,97,110,100,32,105,110,32,116,104,101,97,102,102,111,114,100,97,98,108,101,115,117,98,115,116,97,110,99,101,115,114,101,97,115,111,110,32,102,111,114,99,111,110,118,101,110,116,105,111,110,105,116,101,109,116,121,112,101,61,34,97,98,115,111,108,117,116,101,108,121,115,117,112,112,111,115,101,100,108,121,114,101,109,97,105,110,101,100,32,97,97,116,116,114,97,99,116,105,118,101,116,114,97,118,101,108,108,105,110,103,115,101,112,97,114,97,116,101,108,121,102,111,99,117,115,101,115,32,111,110,101,108,101,109,101,110,116,97,114,121,97,112,112,108,105,99,97,98,108,101,102,111,117,110,100,32,116,104,97,116,115,116,121,108,101,115,104,101,101,116,109,97,110,117,115,99,114,105,112,116,115,116,97,110,100,115,32,102,111,114,32,110,111,45,114,101,112,101,97,116,40,115,111,109,101,116,105,109,101,115,67,111,109,109,101,114,99,105,97,108,105,110,32,65,109,101,114,105,99,97,117,110,100,101,114,116,97,107,101,110,113,117,97,114,116,101,114,32,111,102,97,110,32,101,120,97,109,112,108,101,112,101,114,115,111,110,97,108,108,121,105,110,100,101,120,46,112,104,112,63,60,47,98,117,116,116,111,110,62,10,112,101,114,99,101,110,116,97,103,101,98,101,115,116,45,107,110,111,119,110,99,114,101,97,116,105,110,103,32,97,34,32,100,105,114,61,34,108,116,114,76,105,101,117,116,101,110,97,110,116,10,60,100,105,118,32,105,100,61,34,116,104,101,121,32,119,111,117,108,100,97,98,105,108,105,116,121,32,111,102,109,97,100,101,32,117,112,32,111,102,110,111,116,101,100,32,116,104,97,116,99,108,101,97,114,32,116,104,97,116,97,114,103,117,101,32,116,104,97,116,116,111,32,97,110,111,116,104,101,114,99,104,105,108,100,114,101,110,39,115,112,117,114,112,111,115,101,32,111,102,102,111,114,109,117,108,97,116,101,100,98,97,115,101,100,32,117,112,111,110,116,104,101,32,114,101,103,105,111,110,115,117,98,106,101,99,116,32,111,102,112,97,115,115,101,110,103,101,114,115,112,111,115,115,101,115,115,105,111,110,46,10,10,73,110,32,116,104,101,32,66,101,102,111,114,101,32,116,104,101,97,102,116,101,114,119,97,114,100,115,99,117,114,114,101,110,116,108,121,32,97,99,114,111,115,115,32,116,104,101,115,99,105,101,110,116,105,102,105,99,99,111,109,109,117,110,105,116,121,46,99,97,112,105,116,97,108,105,115,109,105,110,32,71,101,114,109,97,110,121,114,105,103,104,116,45,119,105,110,103,116,104,101,32,115,121,115,116,101,109,83,111,99,105,101,116,121,32,111,102,112,111,108,105,116,105,99,105,97,110,100,105,114,101,99,116,105,111,110,58,119,101,110,116,32,111,110,32,116,111,114,101,109,111,118,97,108,32,111,102,32,78,101,119,32,89,111,114,107,32,97,112,97,114,116,109,101,110,116,115,105,110,100,105,99,97,116,105,111,110,100,117,114,105,110,103,32,116,104,101,117,110,108,101,115,115,32,116,104,101,104,105,115,116,111,114,105,99,97,108,104,97,100,32,98,101,101,110,32,97,100,101,102,105,110,105,116,105,118,101,105,110,103,114,101,100,105,101,110,116,97,116,116,101,110,100,97,110,99,101,67,101,110,116,101,114,32,102,111,114,112,114,111,109,105,110,101,110,99,101,114,101,97,100,121,83,116,97,116,101,115,116,114,97,116,101,103,105,101,115,98,117,116,32,105,110,32,116,104,101,97,115,32,112,97,114,116,32,111,102,99,111,110,115,116,105,116,117,116,101,99,108,97,105,109,32,116,104,97,116,108,97,98,111,114,97,116,111,114,121,99,111,109,112,97,116,105,98,108,101,102,97,105,108,117,114,101,32,111,102,44,32,115,117,99,104,32,97,115,32,98,101,103,97,110,32,119,105,116,104,117,115,105,110,103,32,116,104,101,32,116,111,32,112,114,111,118,105,100,101,102,101,97,116,117,114,101,32,111,102,102,114,111,109,32,119,104,105,99,104,47,34,32,99,108,97,115,115,61,34,103,101,111,108,111,103,105,99,97,108,115,101,118,101,114,97,108,32,111,102,100,101,108,105,98,101,114,97,116,101,105,109,112,111,114,116,97,110,116,32,104,111,108,100,115,32,116,104,97,116,105,110,103,38,113,117,111,116,59,32,118,97,108,105,103,110,61,116,111,112,116,104,101,32,71,101,114,109,97,110,111,117,116,115,105,100,101,32,111,102,110,101,103,111,116,105,97,116,101,100,104,105,115,32,99,97,114,101,101,114,115,101,112,97,114,97,116,105,111,110,105,100,61,34,115,101,97,114,99,104,119,97,115,32,99,97,108,108,101,100,116,104,101,32,102,111,117,114,116,104,114,101,99,114,101,97,116,105,111,110,111,116,104,101,114,32,116,104,97,110,112,114,101,118,101,110,116,105,111,110,119,104,105,108,101,32,116,104,101,32,101,100,117,99,97,116,105,111,110,44,99,111,110,110,101,99,116,105,110,103,97,99,99,117,114,97,116,101,108,121,119,101,114,101,32,98,117,105,108,116,119,97,115,32,107,105,108,108,101,100,97,103,114,101,101,109,101,110,116,115,109,117,99,104,32,109,111,114,101,32,68,117,101,32,116,111,32,116,104,101,119,105,100,116,104,58,32,49,48,48,115,111,109,101,32,111,116,104,101,114,75,105,110,103,100,111,109,32,111,102,116,104,101,32,101,110,116,105,114,101,102,97,109,111,117,115,32,102,111,114,116,111,32,99,111,110,110,101,99,116,111,98,106,101,99,116,105,118,101,115,116,104,101,32,70,114,101,110,99,104,112,101,111,112,108,101,32,97,110,100,102,101,97,116,117,114,101,100,34,62,105,115,32,115,97,105,100,32,116,111,115,116,114,117,99,116,117,114,97,108,114,101,102,101,114,101,110,100,117,109,109,111,115,116,32,111,102,116,101,110,97,32,115,101,112,97,114,97,116,101,45,62,10,60,100,105,118,32,105,100,32,79,102,102,105,99,105,97,108,32,119,111,114,108,100,119,105,100,101,46,97,114,105,97,45,108,97,98,101,108,116,104,101,32,112,108,97,110,101,116,97,110,100,32,105,116,32,119,97,115,100,34,32,118,97,108,117,101,61,34,108,111,111,107,105,110,103,32,97,116,98,101,110,101,102,105,99,105,97,108,97,114,101,32,105,110,32,116,104,101,109,111,110,105,116,111,114,105,110,103,114,101,112,111,114,116,101,100,108,121,116,104,101,32,109,111,100,101,114,110,119,111,114,107,105,110,103,32,111,110,97,108,108,111,119,101,100,32,116,111,119,104,101,114,101,32,116,104,101,32,105,110,110,111,118,97,116,105,118,101,60,47,97,62,60,47,100,105,118,62,115,111,117,110,100,116,114,97,99,107,115,101,97,114,99,104,70,111,114,109,116,101,110,100,32,116,111,32,98,101,105,110,112,117,116,32,105,100,61,34,111,112,101,110,105,110,103,32,111,102,114,101,115,116,114,105,99,116,101,100,97,100,111,112,116,101,100,32,98,121,97,100,100,114,101,115,115,105,110,103,116,104,101,111,108,111,103,105,97,110,109,101,116,104,111,100,115,32,111,102,118,97,114,105,97,110,116,32,111,102,67,104,114,105,115,116,105,97,110,32,118,101,114,121,32,108,97,114,103,101,97,117,116,111,109,111,116,105,118,101,98,121,32,102,97,114,32,116,104,101,114,97,110,103,101,32,102,114,111,109,112,117,114,115,117,105,116,32,111,102,102,111,108,108,111,119,32,116,104,101,98,114,111,117,103,104,116,32,116,111,105,110,32,69,110,103,108,97,110,100,97,103,114,101,101,32,116,104,97,116,97,99,99,117,115,101,100,32,111,102,99,111,109,101,115,32,102,114,111,109,112,114,101,118,101,110,116,105,110,103,100,105,118,32,115,116,121,108,101,61,104,105,115,32,111,114,32,104,101,114,116,114,101,109,101,110,100,111,117,115,102,114,101,101,100,111,109,32,111,102,99,111,110,99,101,114,110,105,110,103,48,32,49,101,109,32,49,101,109,59,66,97,115,107,101,116,98,97,108,108,47,115,116,121,108,101,46,99,115,115,97,110,32,101,97,114,108,105,101,114,101,118,101,110,32,97,102,116,101,114,47,34,32,116,105,116,108,101,61,34,46,99,111,109,47,105,110,100,101,120,116,97,107,105,110,103,32,116,104,101,112,105,116,116,115,98,117,114,103,104,99,111,110,116,101,110,116,34,62,13,60,115,99,114,105,112,116,62,40,102,116,117,114,110,101,100,32,111,117,116,104,97,118,105,110,103,32,116,104,101,60,47,115,112,97,110,62,13,10,32,111,99,99,97,115,105,111,110,97,108,98,101,99,97,117,115,101,32,105,116,115,116,97,114,116,101,100,32,116,111,112,104,121,115,105,99,97,108,108,121,62,60,47,100,105,118,62,10,32,32,99,114,101,97,116,101,100,32,98,121,67,117,114,114,101,110,116,108,121,44,32,98,103,99,111,108,111,114,61,34,116,97,98,105,110,100,101,120,61,34,100,105,115,97,115,116,114,111,117,115,65,110,97,108,121,116,105,99,115,32,97,108,115,111,32,104,97,115,32,97,62,60,100,105,118,32,105,100,61,34,60,47,115,116,121,108,101,62,10,60,99,97,108,108,101,100,32,102,111,114,115,105,110,103,101,114,32,97,110,100,46,115,114,99,32,61,32,34,47,47,118,105,111,108,97,116,105,111,110,115,116,104,105,115,32,112,111,105,110,116,99,111,110,115,116,97,110,116,108,121,105,115,32,108,111,99,97,116,101,100,114,101,99,111,114,100,105,110,103,115,100,32,102,114,111,109,32,116,104,101,110,101,100,101,114,108,97,110,100,115,112,111,114,116,117,103,117,195,170,115,215,162,215,145,215,168,215,153,215,170,217,129,216,167,216,177,216,179,219,140,100,101,115,97,114,114,111,108,108,111,99,111,109,101,110,116,97,114,105,111,101,100,117,99,97,99,105,195,179,110,115,101,112,116,105,101,109,98,114,101,114,101,103,105,115,116,114,97,100,111,100,105,114,101,99,99,105,195,179,110,117,98,105,99,97,99,105,195,179,110,112,117,98,108,105,99,105,100,97,100,114,101,115,112,117,101,115,116,97,115,114,101,115,117,108,116,97,100,111,115,105,109,112,111,114,116,97,110,116,101,114,101,115,101,114,118,97,100,111,115,97,114,116,195,173,99,117,108,111,115,100,105,102,101,114,101,110,116,101,115,115,105,103,117,105,101,110,116,101,115,114,101,112,195,186,98,108,105,99,97,115,105,116,117,97,99,105,195,179,110,109,105,110,105,115,116,101,114,105,111,112,114,105,118,97,99,105,100,97,100,100,105,114,101,99,116,111,114,105,111,102,111,114,109,97,99,105,195,179,110,112,111,98,108,97,99,105,195,179,110,112,114,101,115,105,100,101,110,116,101,99,111,110,116,101,110,105,100,111,115,97,99,99,101,115,111,114,105,111,115,116,101,99,104,110,111,114,97,116,105,112,101,114,115,111,110,97,108,101,115,99,97,116,101,103,111,114,195,173,97,101,115,112,101,99,105,97,108,101,115,100,105,115,112,111,110,105,98,108,101,97,99,116,117,97,108,105,100,97,100,114,101,102,101,114,101,110,99,105,97,118,97,108,108,97,100,111,108,105,100,98,105,98,108,105,111,116,101,99,97,114,101,108,97,99,105,111,110,101,115,99,97,108,101,110,100,97,114,105,111,112,111,108,195,173,116,105,99,97,115,97,110,116,101,114,105,111,114,101,115,100,111,99,117,109,101,110,116,111,115,110,97,116,117,114,97,108,101,122,97,109,97,116,101,114,105,97,108,101,115,100,105,102,101,114,101,110,99,105,97,101,99,111,110,195,179,109,105,99,97,116,114,97,110,115,112,111,114,116,101,114,111,100,114,195,173,103,117,101,122,112,97,114,116,105,99,105,112,97,114,101,110,99,117,101,110,116,114,97,110,100,105,115,99,117,115,105,195,179,110,101,115,116,114,117,99,116,117,114,97,102,117,110,100,97,99,105,195,179,110,102,114,101,99,117,101,110,116,101,115,112,101,114,109,97,110,101,110,116,101,116,111,116,97,108,109,101,110,116,101,208,188,208,190,208,182,208,189,208,190,208,177,209,131,208,180,208,181,209,130,208,188,208,190,208,182,208,181,209,130,208,178,209,128,208,181,208,188,209,143,209,130,208,176,208,186,208,182,208,181,209,135,209,130,208,190,208,177,209,139,208,177,208,190,208,187,208,181,208,181,208,190,209,135,208,181,208,189,209,140,209,141,209,130,208,190,208,179,208,190,208,186,208,190,208,179,208,180,208,176,208,191,208,190,209,129,208,187,208,181,208,178,209,129,208,181,208,179,208,190,209,129,208,176,208,185,209,130,208,181,209,135,208,181,209,128,208,181,208,183,208,188,208,190,208,179,209,131,209,130,209,129,208,176,208,185,209,130,208,176,208,182,208,184,208,183,208,189,208,184,208,188,208,181,208,182,208,180,209,131,208,177,209,131,208,180,209,131,209,130,208,159,208,190,208,184,209,129,208,186,208,183,208,180,208,181,209,129,209,140,208,178,208,184,208,180,208,181,208,190,209,129,208,178,209,143,208,183,208,184,208,189,209,131,208,182,208,189,208,190,209,129,208,178,208,190,208,181,208,185,208,187,209,142,208,180,208,181,208,185,208,191,208,190,209,128,208,189,208,190,208,188,208,189,208,190,208,179,208,190,208,180,208,181,209,130,208,181,208,185,209,129,208,178,208,190,208,184,209,133,208,191,209,128,208,176,208,178,208,176,209,130,208,176,208,186,208,190,208,185,208,188,208,181,209,129,209,130,208,190,208,184,208,188,208,181,208,181,209,130,208,182,208,184,208,183,208,189,209,140,208,190,208,180,208,189,208,190,208,185,208,187,209,131,209,135,209,136,208,181,208,191,208,181,209,128,208,181,208,180,209,135,208,176,209,129,209,130,208,184,209,135,208,176,209,129,209,130,209,140,209,128,208,176,208,177,208,190,209,130,208,189,208,190,208,178,209,139,209,133,208,191,209,128,208,176,208,178,208,190,209,129,208,190,208,177,208,190,208,185,208,191,208,190,209,130,208,190,208,188,208,188,208,181,208,189,208,181,208,181,209,135,208,184,209,129,208,187,208,181,208,189,208,190,208,178,209,139,208,181,209,131,209,129,208,187,209,131,208,179,208,190,208,186,208,190,208,187,208,190,208,189,208,176,208,183,208,176,208,180,209,130,208,176,208,186,208,190,208,181,209,130,208,190,208,179,208,180,208,176,208,191,208,190,209,135,209,130,208,184,208,159,208,190,209,129,208,187,208,181,209,130,208,176,208,186,208,184,208,181,208,189,208,190,208,178,209,139,208,185,209,129,209,130,208,190,208,184,209,130,209,130,208,176,208,186,208,184,209,133,209,129,209,128,208,176,208,183,209,131,208,161,208,176,208,189,208,186,209,130,209,132,208,190,209,128,209,131,208,188,208,154,208,190,208,179,208,180,208,176,208,186,208,189,208,184,208,179,208,184,209,129,208,187,208,190,208,178,208,176,208,189,208,176,209,136,208,181,208,185,208,189,208,176,208,185,209,130,208,184,209,129,208,178,208,190,208,184,208,188,209,129,208,178,209,143,208,183,209,140,208,187,209,142,208,177,208,190,208,185,209,135,208,176,209,129,209,130,208,190,209,129,209,128,208,181,208,180,208,184,208,154,209,128,208,190,208,188,208,181,208,164,208,190,209,128,209,131,208,188,209,128,209,139,208,189,208,186,208,181,209,129,209,130,208,176,208,187,208,184,208,191,208,190,208,184,209,129,208,186,209,130,209,139,209,129,209,143,209,135,208,188,208,181,209,129,209,143,209,134,209,134,208,181,208,189,209,130,209,128,209,130,209,128,209,131,208,180,208,176,209,129,208,176,208,188,209,139,209,133,209,128,209,139,208,189,208,186,208,176,208,157,208,190,208,178,209,139,208,185,209,135,208,176,209,129,208,190,208,178,208,188,208,181,209,129,209,130,208,176,209,132,208,184,208,187,209,140,208,188,208,188,208,176,209,128,209,130,208,176,209,129,209,130,209,128,208,176,208,189,208,188,208,181,209,129,209,130,208,181,209,130,208,181,208,186,209,129,209,130,208,189,208,176,209,136,208,184,209,133,208,188,208,184,208,189,209,131,209,130,208,184,208,188,208,181,208,189,208,184,208,184,208,188,208,181,209,142,209,130,208,189,208,190,208,188,208,181,209,128,208,179,208,190,209,128,208,190,208,180,209,129,208,176,208,188,208,190,208,188,209,141,209,130,208,190,208,188,209,131,208,186,208,190,208,189,209,134,208,181,209,129,208,178,208,190,208,181,208,188,208,186,208,176,208,186,208,190,208,185,208,144,209,128,209,133,208,184,208,178,217,133,217,134,216,170,216,175,217,137,216,165,216,177,216,179,216,167,217,132,216,177,216,179,216,167,217,132,216,169,216,167,217,132,216,185,216,167,217,133,217,131,216,170,216,168,217,135,216,167,216,168,216,177,216,167,217,133,216,172,216,167,217,132,217,138,217,136,217,133,216,167,217,132,216,181,217,136,216,177,216,172,216,175,217,138,216,175,216,169,216,167,217,132,216,185,216,182,217,136,216,165,216,182,216,167,217,129,216,169,216,167,217,132,217,130,216,179,217,133,216,167,217,132,216,185,216,167,216,168,216,170,216,173,217,133,217,138,217,132,217,133,217,132,217,129,216,167,216,170,217,133,217,132,216,170,217,130,217,137,216,170,216,185,216,175,217,138,217,132,216,167,217,132,216,180,216,185,216,177,216,163,216,174,216,168,216,167,216,177,216,170,216,183,217,136,217,138,216,177,216,185,217,132,217,138,217,131,217,133,216,165,216,177,217,129,216,167,217,130,216,183,217,132,216,168,216,167,216,170,216,167,217,132,217,132,216,186,216,169,216,170,216,177,216,170,217,138,216,168,216,167,217,132,217,134,216,167,216,179,216,167,217,132,216,180,217,138,216,174,217,133,217,134,216,170,216,175,217,138,216,167,217,132,216,185,216,177,216,168,216,167,217,132,217,130,216,181,216,181,216,167,217,129,217,132,216,167,217,133,216,185,217,132,217,138,217,135,216,167,216,170,216,173,216,175,217,138,216,171,216,167,217,132,217,132,217,135,217,133,216,167,217,132,216,185,217,133,217,132,217,133,217,131,216,170,216,168,216,169,217,138,217,133,217,131,217,134,217,131,216,167,217,132,216,183,217,129,217,132,217,129,217,138,216,175,217,138,217,136,216,165,216,175,216,167,216,177,216,169,216,170,216,167,216,177,217,138,216,174,216,167,217,132,216,181,216,173,216,169,216,170,216,179,216,172,217,138,217,132,216,167,217,132,217,136,217,130,216,170,216,185,217,134,216,175,217,133,216,167,217,133,216,175,217,138,217,134,216,169,216,170,216,181,217,133,217,138,217,133,216,163,216,177,216,180,217,138,217,129,216,167,217,132,216,176,217,138,217,134,216,185,216,177,216,168,217,138,216,169,216,168,217,136,216,167,216,168,216,169,216,163,217,132,216,185,216,167,216,168,216,167,217,132,216,179,217,129,216,177,217,133,216,180,216,167,217,131,217,132,216,170,216,185,216,167,217,132,217,137,216,167,217,132,216,163,217,136,217,132,216,167,217,132,216,179,217,134,216,169,216,172,216,167,217,133,216,185,216,169,216,167,217,132,216,181,216,173,217,129,216,167,217,132,216,175,217,138,217,134,217,131,217,132,217,133,216,167,216,170,216,167,217,132,216,174,216,167,216,181,216,167,217,132,217,133,217,132,217,129,216,163,216,185,216,182,216,167,216,161,217,131,216,170,216,167,216,168,216,169,216,167,217,132,216,174,217,138,216,177,216,177,216,179,216,167,216,166,217,132,216,167,217,132,217,130,217,132,216,168,216,167,217,132,216,163,216,175,216,168,217,133,217,130,216,167,216,183,216,185,217,133,216,177,216,167,216,179,217,132,217,133,217,134,216,183,217,130,216,169,216,167,217,132,217,131,216,170,216,168,216,167,217,132,216,177,216,172,217,132,216,167,216,180,216,170,216,177,217,131,216,167,217,132,217,130,216,175,217,133,217,138,216,185,216,183,217,138,217,131,115,66,121,84,97,103,78,97,109,101,40,46,106,112,103,34,32,97,108,116,61,34,49,112,120,32,115,111,108,105,100,32,35,46,103,105,102,34,32,97,108,116,61,34,116,114,97,110,115,112,97,114,101,110,116,105,110,102,111,114,109,97,116,105,111,110,97,112,112,108,105,99,97,116,105,111,110,34,32,111,110,99,108,105,99,107,61,34,101,115,116,97,98,108,105,115,104,101,100,97,100,118,101,114,116,105,115,105,110,103,46,112,110,103,34,32,97,108,116,61,34,101,110,118,105,114,111,110,109,101,110,116,112,101,114,102,111,114,109,97,110,99,101,97,112,112,114,111,112,114,105,97,116,101,38,97,109,112,59,109,100,97,115,104,59,105,109,109,101,100,105,97,116,101,108,121,60,47,115,116,114,111,110,103,62,60,47,114,97,116,104,101,114,32,116,104,97,110,116,101,109,112,101,114,97,116,117,114,101,100,101,118,101,108,111,112,109,101,110,116,99,111,109,112,101,116,105,116,105,111,110,112,108,97,99,101,104,111,108,100,101,114,118,105,115,105,98,105,108,105,116,121,58,99,111,112,121,114,105,103,104,116,34,62,48,34,32,104,101,105,103,104,116,61,34,101,118,101,110,32,116,104,111,117,103,104,114,101,112,108,97,99,101,109,101,110,116,100,101,115,116,105,110,97,116,105,111,110,67,111,114,112,111,114,97,116,105,111,110,60,117,108,32,99,108,97,115,115,61,34,65,115,115,111,99,105,97,116,105,111,110,105,110,100,105,118,105,100,117,97,108,115,112,101,114,115,112,101,99,116,105,118,101,115,101,116,84,105,109,101,111,117,116,40,117,114,108,40,104,116,116,112,58,47,47,109,97,116,104,101,109,97,116,105,99,115,109,97,114,103,105,110,45,116,111,112,58,101,118,101,110,116,117,97,108,108,121,32,100,101,115,99,114,105,112,116,105,111,110,41,32,110,111,45,114,101,112,101,97,116,99,111,108,108,101,99,116,105,111,110,115,46,74,80,71,124,116,104,117,109,98,124,112,97,114,116,105,99,105,112,97,116,101,47,104,101,97,100,62,60,98,111,100,121,102,108,111,97,116,58,108,101,102,116,59,60,108,105,32,99,108,97,115,115,61,34,104,117,110,100,114,101,100,115,32,111,102,10,10,72,111,119,101,118,101,114,44,32,99,111,109,112,111,115,105,116,105,111,110,99,108,101,97,114,58,98,111,116,104,59,99,111,111,112,101,114,97,116,105,111,110,119,105,116,104,105,110,32,116,104,101,32,108,97,98,101,108,32,102,111,114,61,34,98,111,114,100,101,114,45,116,111,112,58,78,101,119,32,90,101,97,108,97,110,100,114,101,99,111,109,109,101,110,100,101,100,112,104,111,116,111,103,114,97,112,104,121,105,110,116,101,114,101,115,116,105,110,103,38,108,116,59,115,117,112,38,103,116,59,99,111,110,116,114,111,118,101,114,115,121,78,101,116,104,101,114,108,97,110,100,115,97,108,116,101,114,110,97,116,105,118,101,109,97,120,108,101,110,103,116,104,61,34,115,119,105,116,122,101,114,108,97,110,100,68,101,118,101,108,111,112,109,101,110,116,101,115,115,101,110,116,105,97,108,108,121,10,10,65,108,116,104,111,117,103,104,32,60,47,116,101,120,116,97,114,101,97,62,116,104,117,110,100,101,114,98,105,114,100,114,101,112,114,101,115,101,110,116,101,100,38,97,109,112,59,110,100,97,115,104,59,115,112,101,99,117,108,97,116,105,111,110,99,111,109,109,117,110,105,116,105,101,115,108,101,103,105,115,108,97,116,105,111,110,101,108,101,99,116,114,111,110,105,99,115,10,9,60,100,105,118,32,105,100,61,34,105,108,108,117,115,116,114,97,116,101,100,101,110,103,105,110,101,101,114,105,110,103,116,101,114,114,105,116,111,114,105,101,115,97,117,116,104,111,114,105,116,105,101,115,100,105,115,116,114,105,98,117,116,101,100,54,34,32,104,101,105,103,104,116,61,34,115,97,110,115,45,115,101,114,105,102,59,99,97,112,97,98,108,101,32,111,102,32,100,105,115,97,112,112,101,97,114,101,100,105,110,116,101,114,97,99,116,105,118,101,108,111,111,107,105,110,103,32,102,111,114,105,116,32,119,111,117,108,100,32,98,101,65,102,103,104,97,110,105,115,116,97,110,119,97,115,32,99,114,101,97,116,101,100,77,97,116,104,46,102,108,111,111,114,40,115,117,114,114,111,117,110,100,105,110,103,99,97,110,32,97,108,115,111,32,98,101,111,98,115,101,114,118,97,116,105,111,110,109,97,105,110,116,101,110,97,110,99,101,101,110,99,111,117,110,116,101,114,101,100,60,104,50,32,99,108,97,115,115,61,34,109,111,114,101,32,114,101,99,101,110,116,105,116,32,104,97,115,32,98,101,101,110,105,110,118,97,115,105,111,110,32,111,102,41,46,103,101,116,84,105,109,101,40,41,102,117,110,100,97,109,101,110,116,97,108,68,101,115,112,105,116,101,32,116,104,101,34,62,60,100,105,118,32,105,100,61,34,105,110,115,112,105,114,97,116,105,111,110,101,120,97,109,105,110,97,116,105,111,110,112,114,101,112,97,114,97,116,105,111,110,101,120,112,108,97,110,97,116,105,111,110,60,105,110,112,117,116,32,105,100,61,34,60,47,97,62,60,47,115,112,97,110,62,118,101,114,115,105,111,110,115,32,111,102,105,110,115,116,114,117,109,101,110,116,115,98,101,102,111,114,101,32,116,104,101,32,32,61,32,39,104,116,116,112,58,47,47,68,101,115,99,114,105,112,116,105,111,110,114,101,108,97,116,105,118,101,108,121,32,46,115,117,98,115,116,114,105,110,103,40,101,97,99,104,32,111,102,32,116,104,101,101,120,112,101,114,105,109,101,110,116,115,105,110,102,108,117,101,110,116,105,97,108,105,110,116,101,103,114,97,116,105,111,110,109,97,110,121,32,112,101,111,112,108,101,100,117,101,32,116,111,32,116,104,101,32,99,111,109,98,105,110,97,116,105,111,110,100,111,32,110,111,116,32,104,97,118,101,77,105,100,100,108,101,32,69,97,115,116,60,110,111,115,99,114,105,112,116,62,60,99,111,112,121,114,105,103,104,116,34,32,112,101,114,104,97,112,115,32,116,104,101,105,110,115,116,105,116,117,116,105,111,110,105,110,32,68,101,99,101,109,98,101,114,97,114,114,97,110,103,101,109,101,110,116,109,111,115,116,32,102,97,109,111,117,115,112,101,114,115,111,110,97,108,105,116,121,99,114,101,97,116,105,111,110,32,111,102,108,105,109,105,116,97,116,105,111,110,115,101,120,99,108,117,115,105,118,101,108,121,115,111,118,101,114,101,105,103,110,116,121,45,99,111,110,116,101,110,116,34,62,10,60,116,100,32,99,108,97,115,115,61,34,117,110,100,101,114,103,114,111,117,110,100,112,97,114,97,108,108,101,108,32,116,111,100,111,99,116,114,105,110,101,32,111,102,111,99,99,117,112,105,101,100,32,98,121,116,101,114,109,105,110,111,108,111,103,121,82,101,110,97,105,115,115,97,110,99,101,97,32,110,117,109,98,101,114,32,111,102,115,117,112,112,111,114,116,32,102,111,114,101,120,112,108,111,114,97,116,105,111,110,114,101,99,111,103,110,105,116,105,111,110,112,114,101,100,101,99,101,115,115,111,114,60,105,109,103,32,115,114,99,61,34,47,60,104,49,32,99,108,97,115,115,61,34,112,117,98,108,105,99,97,116,105,111,110,109,97,121,32,97,108,115,111,32,98,101,115,112,101,99,105,97,108,105,122,101,100,60,47,102,105,101,108,100,115,101,116,62,112,114,111,103,114,101,115,115,105,118,101,109,105,108,108,105,111,110,115,32,111,102,115,116,97,116,101,115,32,116,104,97,116,101,110,102,111,114,99,101,109,101,110,116,97,114,111,117,110,100,32,116,104,101,32,111,110,101,32,97,110,111,116,104,101,114,46,112,97,114,101,110,116,78,111,100,101,97,103,114,105,99,117,108,116,117,114,101,65,108,116,101,114,110,97,116,105,118,101,114,101,115,101,97,114,99,104,101,114,115,116,111,119,97,114,100,115,32,116,104,101,77,111,115,116,32,111,102,32,116,104,101,109,97,110,121,32,111,116,104,101,114,32,40,101,115,112,101,99,105,97,108,108,121,60,116,100,32,119,105,100,116,104,61,34,59,119,105,100,116,104,58,49,48,48,37,105,110,100,101,112,101,110,100,101,110,116,60,104,51,32,99,108,97,115,115,61,34,32,111,110,99,104,97,110,103,101,61,34,41,46,97,100,100,67,108,97,115,115,40,105,110,116,101,114,97,99,116,105,111,110,79,110,101,32,111,102,32,116,104,101,32,100,97,117,103,104,116,101,114,32,111,102,97,99,99,101,115,115,111,114,105,101,115,98,114,97,110,99,104,101,115,32,111,102,13,10,60,100,105,118,32,105,100,61,34,116,104,101,32,108,97,114,103,101,115,116,100,101,99,108,97,114,97,116,105,111,110,114,101,103,117,108,97,116,105,111,110,115,73,110,102,111,114,109,97,116,105,111,110,116,114,97,110,115,108,97,116,105,111,110,100,111,99,117,109,101,110,116,97,114,121,105,110,32,111,114,100,101,114,32,116,111,34,62,10,60,104,101,97,100,62,10,60,34,32,104,101,105,103,104,116,61,34,49,97,99,114,111,115,115,32,116,104,101,32,111,114,105,101,110,116,97,116,105,111,110,41,59,60,47,115,99,114,105,112,116,62,105,109,112,108,101,109,101,110,116,101,100,99,97,110,32,98,101,32,115,101,101,110,116,104,101,114,101,32,119,97,115,32,97,100,101,109,111,110,115,116,114,97,116,101,99,111,110,116,97,105,110,101,114,34,62,99,111,110,110,101,99,116,105,111,110,115,116,104,101,32,66,114,105,116,105,115,104,119,97,115,32,119,114,105,116,116,101,110,33,105,109,112,111,114,116,97,110,116,59,112,120,59,32,109,97,114,103,105,110,45,102,111,108,108,111,119,101,100,32,98,121,97,98,105,108,105,116,121,32,116,111,32,99,111,109,112,108,105,99,97,116,101,100,100,117,114,105,110,103,32,116,104,101,32,105,109,109,105,103,114,97,116,105,111,110,97,108,115,111,32,99,97,108,108,101,100,60,104,52,32,99,108,97,115,115,61,34,100,105,115,116,105,110,99,116,105,111,110,114,101,112,108,97,99,101,100,32,98,121,103,111,118,101,114,110,109,101,110,116,115,108,111,99,97,116,105,111,110,32,111,102,105,110,32,78,111,118,101,109,98,101,114,119,104,101,116,104,101,114,32,116,104,101,60,47,112,62,10,60,47,100,105,118,62,97,99,113,117,105,115,105,116,105,111,110,99,97,108,108,101,100,32,116,104,101,32,112,101,114,115,101,99,117,116,105,111,110,100,101,115,105,103,110,97,116,105,111,110,123,102,111,110,116,45,115,105,122,101,58,97,112,112,101,97,114,101,100,32,105,110,105,110,118,101,115,116,105,103,97,116,101,101,120,112,101,114,105,101,110,99,101,100,109,111,115,116,32,108,105,107,101,108,121,119,105,100,101,108,121,32,117,115,101,100,100,105,115,99,117,115,115,105,111,110,115,112,114,101,115,101,110,99,101,32,111,102,32,40,100,111,99,117,109,101,110,116,46,101,120,116,101,110,115,105,118,101,108,121,73,116,32,104,97,115,32,98,101,101,110,105,116,32,100,111,101,115,32,110,111,116,99,111,110,116,114,97,114,121,32,116,111,105,110,104,97,98,105,116,97,110,116,115,105,109,112,114,111,118,101,109,101,110,116,115,99,104,111,108,97,114,115,104,105,112,99,111,110,115,117,109,112,116,105,111,110,105,110,115,116,114,117,99,116,105,111,110,102,111,114,32,101,120,97,109,112,108,101,111,110,101,32,111,114,32,109,111,114,101,112,120,59,32,112,97,100,100,105,110,103,116,104,101,32,99,117,114,114,101,110,116,97,32,115,101,114,105,101,115,32,111,102,97,114,101,32,117,115,117,97,108,108,121,114,111,108,101,32,105,110,32,116,104,101,112,114,101,118,105,111,117,115,108,121,32,100,101,114,105,118,97,116,105,118,101,115,101,118,105,100,101,110,99,101,32,111,102,101,120,112,101,114,105,101,110,99,101,115,99,111,108,111,114,115,99,104,101,109,101,115,116,97,116,101,100,32,116,104,97,116,99,101,114,116,105,102,105,99,97,116,101,60,47,97,62,60,47,100,105,118,62,10,32,115,101,108,101,99,116,101,100,61,34,104,105,103,104,32,115,99,104,111,111,108,114,101,115,112,111,110,115,101,32,116,111,99,111,109,102,111,114,116,97,98,108,101,97,100,111,112,116,105,111,110,32,111,102,116,104,114,101,101,32,121,101,97,114,115,116,104,101,32,99,111,117,110,116,114,121,105,110,32,70,101,98,114,117,97,114,121],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+122928);allocate([115,111,32,116,104,97,116,32,116,104,101,112,101,111,112,108,101,32,119,104,111,32,112,114,111,118,105,100,101,100,32,98,121,60,112,97,114,97,109,32,110,97,109,101,97,102,102,101,99,116,101,100,32,98,121,105,110,32,116,101,114,109,115,32,111,102,97,112,112,111,105,110,116,109,101,110,116,73,83,79,45,56,56,53,57,45,49,34,119,97,115,32,98,111,114,110,32,105,110,104,105,115,116,111,114,105,99,97,108,32,114,101,103,97,114,100,101,100,32,97,115,109,101,97,115,117,114,101,109,101,110,116,105,115,32,98,97,115,101,100,32,111,110,32,97,110,100,32,111,116,104,101,114,32,58,32,102,117,110,99,116,105,111,110,40,115,105,103,110,105,102,105,99,97,110,116,99,101,108,101,98,114,97,116,105,111,110,116,114,97,110,115,109,105,116,116,101,100,47,106,115,47,106,113,117,101,114,121,46,105,115,32,107,110,111,119,110,32,97,115,116,104,101,111,114,101,116,105,99,97,108,32,116,97,98,105,110,100,101,120,61,34,105,116,32,99,111,117,108,100,32,98,101,60,110,111,115,99,114,105,112,116,62,10,104,97,118,105,110,103,32,98,101,101,110,13,10,60,104,101,97,100,62,13,10,60,32,38,113,117,111,116,59,84,104,101,32,99,111,109,112,105,108,97,116,105,111,110,104,101,32,104,97,100,32,98,101,101,110,112,114,111,100,117,99,101,100,32,98,121,112,104,105,108,111,115,111,112,104,101,114,99,111,110,115,116,114,117,99,116,101,100,105,110,116,101,110,100,101,100,32,116,111,97,109,111,110,103,32,111,116,104,101,114,99,111,109,112,97,114,101,100,32,116,111,116,111,32,115,97,121,32,116,104,97,116,69,110,103,105,110,101,101,114,105,110,103,97,32,100,105,102,102,101,114,101,110,116,114,101,102,101,114,114,101,100,32,116,111,100,105,102,102,101,114,101,110,99,101,115,98,101,108,105,101,102,32,116,104,97,116,112,104,111,116,111,103,114,97,112,104,115,105,100,101,110,116,105,102,121,105,110,103,72,105,115,116,111,114,121,32,111,102,32,82,101,112,117,98,108,105,99,32,111,102,110,101,99,101,115,115,97,114,105,108,121,112,114,111,98,97,98,105,108,105,116,121,116,101,99,104,110,105,99,97,108,108,121,108,101,97,118,105,110,103,32,116,104,101,115,112,101,99,116,97,99,117,108,97,114,102,114,97,99,116,105,111,110,32,111,102,101,108,101,99,116,114,105,99,105,116,121,104,101,97,100,32,111,102,32,116,104,101,114,101,115,116,97,117,114,97,110,116,115,112,97,114,116,110,101,114,115,104,105,112,101,109,112,104,97,115,105,115,32,111,110,109,111,115,116,32,114,101,99,101,110,116,115,104,97,114,101,32,119,105,116,104,32,115,97,121,105,110,103,32,116,104,97,116,102,105,108,108,101,100,32,119,105,116,104,100,101,115,105,103,110,101,100,32,116,111,105,116,32,105,115,32,111,102,116,101,110,34,62,60,47,105,102,114,97,109,101,62,97,115,32,102,111,108,108,111,119,115,58,109,101,114,103,101,100,32,119,105,116,104,116,104,114,111,117,103,104,32,116,104,101,99,111,109,109,101,114,99,105,97,108,32,112,111,105,110,116,101,100,32,111,117,116,111,112,112,111,114,116,117,110,105,116,121,118,105,101,119,32,111,102,32,116,104,101,114,101,113,117,105,114,101,109,101,110,116,100,105,118,105,115,105,111,110,32,111,102,112,114,111,103,114,97,109,109,105,110,103,104,101,32,114,101,99,101,105,118,101,100,115,101,116,73,110,116,101,114,118,97,108,34,62,60,47,115,112,97,110,62,60,47,105,110,32,78,101,119,32,89,111,114,107,97,100,100,105,116,105,111,110,97,108,32,99,111,109,112,114,101,115,115,105,111,110,10,10,60,100,105,118,32,105,100,61,34,105,110,99,111,114,112,111,114,97,116,101,59,60,47,115,99,114,105,112,116,62,60,97,116,116,97,99,104,69,118,101,110,116,98,101,99,97,109,101,32,116,104,101,32,34,32,116,97,114,103,101,116,61,34,95,99,97,114,114,105,101,100,32,111,117,116,83,111,109,101,32,111,102,32,116,104,101,115,99,105,101,110,99,101,32,97,110,100,116,104,101,32,116,105,109,101,32,111,102,67,111,110,116,97,105,110,101,114,34,62,109,97,105,110,116,97,105,110,105,110,103,67,104,114,105,115,116,111,112,104,101,114,77,117,99,104,32,111,102,32,116,104,101,119,114,105,116,105,110,103,115,32,111,102,34,32,104,101,105,103,104,116,61,34,50,115,105,122,101,32,111,102,32,116,104,101,118,101,114,115,105,111,110,32,111,102,32,109,105,120,116,117,114,101,32,111,102,32,98,101,116,119,101,101,110,32,116,104,101,69,120,97,109,112,108,101,115,32,111,102,101,100,117,99,97,116,105,111,110,97,108,99,111,109,112,101,116,105,116,105,118,101,32,111,110,115,117,98,109,105,116,61,34,100,105,114,101,99,116,111,114,32,111,102,100,105,115,116,105,110,99,116,105,118,101,47,68,84,68,32,88,72,84,77,76,32,114,101,108,97,116,105,110,103,32,116,111,116,101,110,100,101,110,99,121,32,116,111,112,114,111,118,105,110,99,101,32,111,102,119,104,105,99,104,32,119,111,117,108,100,100,101,115,112,105,116,101,32,116,104,101,115,99,105,101,110,116,105,102,105,99,32,108,101,103,105,115,108,97,116,117,114,101,46,105,110,110,101,114,72,84,77,76,32,97,108,108,101,103,97,116,105,111,110,115,65,103,114,105,99,117,108,116,117,114,101,119,97,115,32,117,115,101,100,32,105,110,97,112,112,114,111,97,99,104,32,116,111,105,110,116,101,108,108,105,103,101,110,116,121,101,97,114,115,32,108,97,116,101,114,44,115,97,110,115,45,115,101,114,105,102,100,101,116,101,114,109,105,110,105,110,103,80,101,114,102,111,114,109,97,110,99,101,97,112,112,101,97,114,97,110,99,101,115,44,32,119,104,105,99,104,32,105,115,32,102,111,117,110,100,97,116,105,111,110,115,97,98,98,114,101,118,105,97,116,101,100,104,105,103,104,101,114,32,116,104,97,110,115,32,102,114,111,109,32,116,104,101,32,105,110,100,105,118,105,100,117,97,108,32,99,111,109,112,111,115,101,100,32,111,102,115,117,112,112,111,115,101,100,32,116,111,99,108,97,105,109,115,32,116,104,97,116,97,116,116,114,105,98,117,116,105,111,110,102,111,110,116,45,115,105,122,101,58,49,101,108,101,109,101,110,116,115,32,111,102,72,105,115,116,111,114,105,99,97,108,32,104,105,115,32,98,114,111,116,104,101,114,97,116,32,116,104,101,32,116,105,109,101,97,110,110,105,118,101,114,115,97,114,121,103,111,118,101,114,110,101,100,32,98,121,114,101,108,97,116,101,100,32,116,111,32,117,108,116,105,109,97,116,101,108,121,32,105,110,110,111,118,97,116,105,111,110,115,105,116,32,105,115,32,115,116,105,108,108,99,97,110,32,111,110,108,121,32,98,101,100,101,102,105,110,105,116,105,111,110,115,116,111,71,77,84,83,116,114,105,110,103,65,32,110,117,109,98,101,114,32,111,102,105,109,103,32,99,108,97,115,115,61,34,69,118,101,110,116,117,97,108,108,121,44,119,97,115,32,99,104,97,110,103,101,100,111,99,99,117,114,114,101,100,32,105,110,110,101,105,103,104,98,111,114,105,110,103,100,105,115,116,105,110,103,117,105,115,104,119,104,101,110,32,104,101,32,119,97,115,105,110,116,114,111,100,117,99,105,110,103,116,101,114,114,101,115,116,114,105,97,108,77,97,110,121,32,111,102,32,116,104,101,97,114,103,117,101,115,32,116,104,97,116,97,110,32,65,109,101,114,105,99,97,110,99,111,110,113,117,101,115,116,32,111,102,119,105,100,101,115,112,114,101,97,100,32,119,101,114,101,32,107,105,108,108,101,100,115,99,114,101,101,110,32,97,110,100,32,73,110,32,111,114,100,101,114,32,116,111,101,120,112,101,99,116,101,100,32,116,111,100,101,115,99,101,110,100,97,110,116,115,97,114,101,32,108,111,99,97,116,101,100,108,101,103,105,115,108,97,116,105,118,101,103,101,110,101,114,97,116,105,111,110,115,32,98,97,99,107,103,114,111,117,110,100,109,111,115,116,32,112,101,111,112,108,101,121,101,97,114,115,32,97,102,116,101,114,116,104,101,114,101,32,105,115,32,110,111,116,104,101,32,104,105,103,104,101,115,116,102,114,101,113,117,101,110,116,108,121,32,116,104,101,121,32,100,111,32,110,111,116,97,114,103,117,101,100,32,116,104,97,116,115,104,111,119,101,100,32,116,104,97,116,112,114,101,100,111,109,105,110,97,110,116,116,104,101,111,108,111,103,105,99,97,108,98,121,32,116,104,101,32,116,105,109,101,99,111,110,115,105,100,101,114,105,110,103,115,104,111,114,116,45,108,105,118,101,100,60,47,115,112,97,110,62,60,47,97,62,99,97,110,32,98,101,32,117,115,101,100,118,101,114,121,32,108,105,116,116,108,101,111,110,101,32,111,102,32,116,104,101,32,104,97,100,32,97,108,114,101,97,100,121,105,110,116,101,114,112,114,101,116,101,100,99,111,109,109,117,110,105,99,97,116,101,102,101,97,116,117,114,101,115,32,111,102,103,111,118,101,114,110,109,101,110,116,44,60,47,110,111,115,99,114,105,112,116,62,101,110,116,101,114,101,100,32,116,104,101,34,32,104,101,105,103,104,116,61,34,51,73,110,100,101,112,101,110,100,101,110,116,112,111,112,117,108,97,116,105,111,110,115,108,97,114,103,101,45,115,99,97,108,101,46,32,65,108,116,104,111,117,103,104,32,117,115,101,100,32,105,110,32,116,104,101,100,101,115,116,114,117,99,116,105,111,110,112,111,115,115,105,98,105,108,105,116,121,115,116,97,114,116,105,110,103,32,105,110,116,119,111,32,111,114,32,109,111,114,101,101,120,112,114,101,115,115,105,111,110,115,115,117,98,111,114,100,105,110,97,116,101,108,97,114,103,101,114,32,116,104,97,110,104,105,115,116,111,114,121,32,97,110,100,60,47,111,112,116,105,111,110,62,13,10,67,111,110,116,105,110,101,110,116,97,108,101,108,105,109,105,110,97,116,105,110,103,119,105,108,108,32,110,111,116,32,98,101,112,114,97,99,116,105,99,101,32,111,102,105,110,32,102,114,111,110,116,32,111,102,115,105,116,101,32,111,102,32,116,104,101,101,110,115,117,114,101,32,116,104,97,116,116,111,32,99,114,101,97,116,101,32,97,109,105,115,115,105,115,115,105,112,112,105,112,111,116,101,110,116,105,97,108,108,121,111,117,116,115,116,97,110,100,105,110,103,98,101,116,116,101,114,32,116,104,97,110,119,104,97,116,32,105,115,32,110,111,119,115,105,116,117,97,116,101,100,32,105,110,109,101,116,97,32,110,97,109,101,61,34,84,114,97,100,105,116,105,111,110,97,108,115,117,103,103,101,115,116,105,111,110,115,84,114,97,110,115,108,97,116,105,111,110,116,104,101,32,102,111,114,109,32,111,102,97,116,109,111,115,112,104,101,114,105,99,105,100,101,111,108,111,103,105,99,97,108,101,110,116,101,114,112,114,105,115,101,115,99,97,108,99,117,108,97,116,105,110,103,101,97,115,116,32,111,102,32,116,104,101,114,101,109,110,97,110,116,115,32,111,102,112,108,117,103,105,110,115,112,97,103,101,47,105,110,100,101,120,46,112,104,112,63,114,101,109,97,105,110,101,100,32,105,110,116,114,97,110,115,102,111,114,109,101,100,72,101,32,119,97,115,32,97,108,115,111,119,97,115,32,97,108,114,101,97,100,121,115,116,97,116,105,115,116,105,99,97,108,105,110,32,102,97,118,111,114,32,111,102,77,105,110,105,115,116,114,121,32,111,102,109,111,118,101,109,101,110,116,32,111,102,102,111,114,109,117,108,97,116,105,111,110,105,115,32,114,101,113,117,105,114,101,100,60,108,105,110,107,32,114,101,108,61,34,84,104,105,115,32,105,115,32,116,104,101,32,60,97,32,104,114,101,102,61,34,47,112,111,112,117,108,97,114,105,122,101,100,105,110,118,111,108,118,101,100,32,105,110,97,114,101,32,117,115,101,100,32,116,111,97,110,100,32,115,101,118,101,114,97,108,109,97,100,101,32,98,121,32,116,104,101,115,101,101,109,115,32,116,111,32,98,101,108,105,107,101,108,121,32,116,104,97,116,80,97,108,101,115,116,105,110,105,97,110,110,97,109,101,100,32,97,102,116,101,114,105,116,32,104,97,100,32,98,101,101,110,109,111,115,116,32,99,111,109,109,111,110,116,111,32,114,101,102,101,114,32,116,111,98,117,116,32,116,104,105,115,32,105,115,99,111,110,115,101,99,117,116,105,118,101,116,101,109,112,111,114,97,114,105,108,121,73,110,32,103,101,110,101,114,97,108,44,99,111,110,118,101,110,116,105,111,110,115,116,97,107,101,115,32,112,108,97,99,101,115,117,98,100,105,118,105,115,105,111,110,116,101,114,114,105,116,111,114,105,97,108,111,112,101,114,97,116,105,111,110,97,108,112,101,114,109,97,110,101,110,116,108,121,119,97,115,32,108,97,114,103,101,108,121,111,117,116,98,114,101,97,107,32,111,102,105,110,32,116,104,101,32,112,97,115,116,102,111,108,108,111,119,105,110,103,32,97,32,120,109,108,110,115,58,111,103,61,34,62,60,97,32,99,108,97,115,115,61,34,99,108,97,115,115,61,34,116,101,120,116,67,111,110,118,101,114,115,105,111,110,32,109,97,121,32,98,101,32,117,115,101,100,109,97,110,117,102,97,99,116,117,114,101,97,102,116,101,114,32,98,101,105,110,103,99,108,101,97,114,102,105,120,34,62,10,113,117,101,115,116,105,111,110,32,111,102,119,97,115,32,101,108,101,99,116,101,100,116,111,32,98,101,99,111,109,101,32,97,98,101,99,97,117,115,101,32,111,102,32,115,111,109,101,32,112,101,111,112,108,101,105,110,115,112,105,114,101,100,32,98,121,115,117,99,99,101,115,115,102,117,108,32,97,32,116,105,109,101,32,119,104,101,110,109,111,114,101,32,99,111,109,109,111,110,97,109,111,110,103,115,116,32,116,104,101,97,110,32,111,102,102,105,99,105,97,108,119,105,100,116,104,58,49,48,48,37,59,116,101,99,104,110,111,108,111,103,121,44,119,97,115,32,97,100,111,112,116,101,100,116,111,32,107,101,101,112,32,116,104,101,115,101,116,116,108,101,109,101,110,116,115,108,105,118,101,32,98,105,114,116,104,115,105,110,100,101,120,46,104,116,109,108,34,67,111,110,110,101,99,116,105,99,117,116,97,115,115,105,103,110,101,100,32,116,111,38,97,109,112,59,116,105,109,101,115,59,97,99,99,111,117,110,116,32,102,111,114,97,108,105,103,110,61,114,105,103,104,116,116,104,101,32,99,111,109,112,97,110,121,97,108,119,97,121,115,32,98,101,101,110,114,101,116,117,114,110,101,100,32,116,111,105,110,118,111,108,118,101,109,101,110,116,66,101,99,97,117,115,101,32,116,104,101,116,104,105,115,32,112,101,114,105,111,100,34,32,110,97,109,101,61,34,113,34,32,99,111,110,102,105,110,101,100,32,116,111,97,32,114,101,115,117,108,116,32,111,102,118,97,108,117,101,61,34,34,32,47,62,105,115,32,97,99,116,117,97,108,108,121,69,110,118,105,114,111,110,109,101,110,116,13,10,60,47,104,101,97,100,62,13,10,67,111,110,118,101,114,115,101,108,121,44,62,10,60,100,105,118,32,105,100,61,34,48,34,32,119,105,100,116,104,61,34,49,105,115,32,112,114,111,98,97,98,108,121,104,97,118,101,32,98,101,99,111,109,101,99,111,110,116,114,111,108,108,105,110,103,116,104,101,32,112,114,111,98,108,101,109,99,105,116,105,122,101,110,115,32,111,102,112,111,108,105,116,105,99,105,97,110,115,114,101,97,99,104,101,100,32,116,104,101,97,115,32,101,97,114,108,121,32,97,115,58,110,111,110,101,59,32,111,118,101,114,60,116,97,98,108,101,32,99,101,108,108,118,97,108,105,100,105,116,121,32,111,102,100,105,114,101,99,116,108,121,32,116,111,111,110,109,111,117,115,101,100,111,119,110,119,104,101,114,101,32,105,116,32,105,115,119,104,101,110,32,105,116,32,119,97,115,109,101,109,98,101,114,115,32,111,102,32,114,101,108,97,116,105,111,110,32,116,111,97,99,99,111,109,109,111,100,97,116,101,97,108,111,110,103,32,119,105,116,104,32,73,110,32,116,104,101,32,108,97,116,101,116,104,101,32,69,110,103,108,105,115,104,100,101,108,105,99,105,111,117,115,34,62,116,104,105,115,32,105,115,32,110,111,116,116,104,101,32,112,114,101,115,101,110,116,105,102,32,116,104,101,121,32,97,114,101,97,110,100,32,102,105,110,97,108,108,121,97,32,109,97,116,116,101,114,32,111,102,13,10,9,60,47,100,105,118,62,13,10,13,10,60,47,115,99,114,105,112,116,62,102,97,115,116,101,114,32,116,104,97,110,109,97,106,111,114,105,116,121,32,111,102,97,102,116,101,114,32,119,104,105,99,104,99,111,109,112,97,114,97,116,105,118,101,116,111,32,109,97,105,110,116,97,105,110,105,109,112,114,111,118,101,32,116,104,101,97,119,97,114,100,101,100,32,116,104,101,101,114,34,32,99,108,97,115,115,61,34,102,114,97,109,101,98,111,114,100,101,114,114,101,115,116,111,114,97,116,105,111,110,105,110,32,116,104,101,32,115,97,109,101,97,110,97,108,121,115,105,115,32,111,102,116,104,101,105,114,32,102,105,114,115,116,68,117,114,105,110,103,32,116,104,101,32,99,111,110,116,105,110,101,110,116,97,108,115,101,113,117,101,110,99,101,32,111,102,102,117,110,99,116,105,111,110,40,41,123,102,111,110,116,45,115,105,122,101,58,32,119,111,114,107,32,111,110,32,116,104,101,60,47,115,99,114,105,112,116,62,10,60,98,101,103,105,110,115,32,119,105,116,104,106,97,118,97,115,99,114,105,112,116,58,99,111,110,115,116,105,116,117,101,110,116,119,97,115,32,102,111,117,110,100,101,100,101,113,117,105,108,105,98,114,105,117,109,97,115,115,117,109,101,32,116,104,97,116,105,115,32,103,105,118,101,110,32,98,121,110,101,101,100,115,32,116,111,32,98,101,99,111,111,114,100,105,110,97,116,101,115,116,104,101,32,118,97,114,105,111,117,115,97,114,101,32,112,97,114,116,32,111,102,111,110,108,121,32,105,110,32,116,104,101,115,101,99,116,105,111,110,115,32,111,102,105,115,32,97,32,99,111,109,109,111,110,116,104,101,111,114,105,101,115,32,111,102,100,105,115,99,111,118,101,114,105,101,115,97,115,115,111,99,105,97,116,105,111,110,101,100,103,101,32,111,102,32,116,104,101,115,116,114,101,110,103,116,104,32,111,102,112,111,115,105,116,105,111,110,32,105,110,112,114,101,115,101,110,116,45,100,97,121,117,110,105,118,101,114,115,97,108,108,121,116,111,32,102,111,114,109,32,116,104,101,98,117,116,32,105,110,115,116,101,97,100,99,111,114,112,111,114,97,116,105,111,110,97,116,116,97,99,104,101,100,32,116,111,105,115,32,99,111,109,109,111,110,108,121,114,101,97,115,111,110,115,32,102,111,114,32,38,113,117,111,116,59,116,104,101,32,99,97,110,32,98,101,32,109,97,100,101,119,97,115,32,97,98,108,101,32,116,111,119,104,105,99,104,32,109,101,97,110,115,98,117,116,32,100,105,100,32,110,111,116,111,110,77,111,117,115,101,79,118,101,114,97,115,32,112,111,115,115,105,98,108,101,111,112,101,114,97,116,101,100,32,98,121,99,111,109,105,110,103,32,102,114,111,109,116,104,101,32,112,114,105,109,97,114,121,97,100,100,105,116,105,111,110,32,111,102,102,111,114,32,115,101,118,101,114,97,108,116,114,97,110,115,102,101,114,114,101,100,97,32,112,101,114,105,111,100,32,111,102,97,114,101,32,97,98,108,101,32,116,111,104,111,119,101,118,101,114,44,32,105,116,115,104,111,117,108,100,32,104,97,118,101,109,117,99,104,32,108,97,114,103,101,114,10,9,60,47,115,99,114,105,112,116,62,97,100,111,112,116,101,100,32,116,104,101,112,114,111,112,101,114,116,121,32,111,102,100,105,114,101,99,116,101,100,32,98,121,101,102,102,101,99,116,105,118,101,108,121,119,97,115,32,98,114,111,117,103,104,116,99,104,105,108,100,114,101,110,32,111,102,80,114,111,103,114,97,109,109,105,110,103,108,111,110,103,101,114,32,116,104,97,110,109,97,110,117,115,99,114,105,112,116,115,119,97,114,32,97,103,97,105,110,115,116,98,121,32,109,101,97,110,115,32,111,102,97,110,100,32,109,111,115,116,32,111,102,115,105,109,105,108,97,114,32,116,111,32,112,114,111,112,114,105,101,116,97,114,121,111,114,105,103,105,110,97,116,105,110,103,112,114,101,115,116,105,103,105,111,117,115,103,114,97,109,109,97,116,105,99,97,108,101,120,112,101,114,105,101,110,99,101,46,116,111,32,109,97,107,101,32,116,104,101,73,116,32,119,97,115,32,97,108,115,111,105,115,32,102,111,117,110,100,32,105,110,99,111,109,112,101,116,105,116,111,114,115,105,110,32,116,104,101,32,85,46,83,46,114,101,112,108,97,99,101,32,116,104,101,98,114,111,117,103,104,116,32,116,104,101,99,97,108,99,117,108,97,116,105,111,110,102,97,108,108,32,111,102,32,116,104,101,116,104,101,32,103,101,110,101,114,97,108,112,114,97,99,116,105,99,97,108,108,121,105,110,32,104,111,110,111,114,32,111,102,114,101,108,101,97,115,101,100,32,105,110,114,101,115,105,100,101,110,116,105,97,108,97,110,100,32,115,111,109,101,32,111,102,107,105,110,103,32,111,102,32,116,104,101,114,101,97,99,116,105,111,110,32,116,111,49,115,116,32,69,97,114,108,32,111,102,99,117,108,116,117,114,101,32,97,110,100,112,114,105,110,99,105,112,97,108,108,121,60,47,116,105,116,108,101,62,10,32,32,116,104,101,121,32,99,97,110,32,98,101,98,97,99,107,32,116,111,32,116,104,101,115,111,109,101,32,111,102,32,104,105,115,101,120,112,111,115,117,114,101,32,116,111,97,114,101,32,115,105,109,105,108,97,114,102,111,114,109,32,111,102,32,116,104,101,97,100,100,70,97,118,111,114,105,116,101,99,105,116,105,122,101,110,115,104,105,112,112,97,114,116,32,105,110,32,116,104,101,112,101,111,112,108,101,32,119,105,116,104,105,110,32,112,114,97,99,116,105,99,101,116,111,32,99,111,110,116,105,110,117,101,38,97,109,112,59,109,105,110,117,115,59,97,112,112,114,111,118,101,100,32,98,121,32,116,104,101,32,102,105,114,115,116,32,97,108,108,111,119,101,100,32,116,104,101,97,110,100,32,102,111,114,32,116,104,101,102,117,110,99,116,105,111,110,105,110,103,112,108,97,121,105,110,103,32,116,104,101,115,111,108,117,116,105,111,110,32,116,111,104,101,105,103,104,116,61,34,48,34,32,105,110,32,104,105,115,32,98,111,111,107,109,111,114,101,32,116,104,97,110,32,97,102,111,108,108,111,119,115,32,116,104,101,99,114,101,97,116,101,100,32,116,104,101,112,114,101,115,101,110,99,101,32,105,110,38,110,98,115,112,59,60,47,116,100,62,110,97,116,105,111,110,97,108,105,115,116,116,104,101,32,105,100,101,97,32,111,102,97,32,99,104,97,114,97,99,116,101,114,119,101,114,101,32,102,111,114,99,101,100,32,99,108,97,115,115,61,34,98,116,110,100,97,121,115,32,111,102,32,116,104,101,102,101,97,116,117,114,101,100,32,105,110,115,104,111,119,105,110,103,32,116,104,101,105,110,116,101,114,101,115,116,32,105,110,105,110,32,112,108,97,99,101,32,111,102,116,117,114,110,32,111,102,32,116,104,101,116,104,101,32,104,101,97,100,32,111,102,76,111,114,100,32,111,102,32,116,104,101,112,111,108,105,116,105,99,97,108,108,121,104,97,115,32,105,116,115,32,111,119,110,69,100,117,99,97,116,105,111,110,97,108,97,112,112,114,111,118,97,108,32,111,102,115,111,109,101,32,111,102,32,116,104,101,101,97,99,104,32,111,116,104,101,114,44,98,101,104,97,118,105,111,114,32,111,102,97,110,100,32,98,101,99,97,117,115,101,97,110,100,32,97,110,111,116,104,101,114,97,112,112,101,97,114,101,100,32,111,110,114,101,99,111,114,100,101,100,32,105,110,98,108,97,99,107,38,113,117,111,116,59,109,97,121,32,105,110,99,108,117,100,101,116,104,101,32,119,111,114,108,100,39,115,99,97,110,32,108,101,97,100,32,116,111,114,101,102,101,114,115,32,116,111,32,97,98,111,114,100,101,114,61,34,48,34,32,103,111,118,101,114,110,109,101,110,116,32,119,105,110,110,105,110,103,32,116,104,101,114,101,115,117,108,116,101,100,32,105,110,32,119,104,105,108,101,32,116,104,101,32,87,97,115,104,105,110,103,116,111,110,44,116,104,101,32,115,117,98,106,101,99,116,99,105,116,121,32,105,110,32,116,104,101,62,60,47,100,105,118,62,13,10,9,9,114,101,102,108,101,99,116,32,116,104,101,116,111,32,99,111,109,112,108,101,116,101,98,101,99,97,109,101,32,109,111,114,101,114,97,100,105,111,97,99,116,105,118,101,114,101,106,101,99,116,101,100,32,98,121,119,105,116,104,111,117,116,32,97,110,121,104,105,115,32,102,97,116,104,101,114,44,119,104,105,99,104,32,99,111,117,108,100,99,111,112,121,32,111,102,32,116,104,101,116,111,32,105,110,100,105,99,97,116,101,97,32,112,111,108,105,116,105,99,97,108,97,99,99,111,117,110,116,115,32,111,102,99,111,110,115,116,105,116,117,116,101,115,119,111,114,107,101,100,32,119,105,116,104,101,114,60,47,97,62,60,47,108,105,62,111,102,32,104,105,115,32,108,105,102,101,97,99,99,111,109,112,97,110,105,101,100,99,108,105,101,110,116,87,105,100,116,104,112,114,101,118,101,110,116,32,116,104,101,76,101,103,105,115,108,97,116,105,118,101,100,105,102,102,101,114,101,110,116,108,121,116,111,103,101,116,104,101,114,32,105,110,104,97,115,32,115,101,118,101,114,97,108,102,111,114,32,97,110,111,116,104,101,114,116,101,120,116,32,111,102,32,116,104,101,102,111,117,110,100,101,100,32,116,104,101,101,32,119,105,116,104,32,116,104,101,32,105,115,32,117,115,101,100,32,102,111,114,99,104,97,110,103,101,100,32,116,104,101,117,115,117,97,108,108,121,32,116,104,101,112,108,97,99,101,32,119,104,101,114,101,119,104,101,114,101,97,115,32,116,104,101,62,32,60,97,32,104,114,101,102,61,34,34,62,60,97,32,104,114,101,102,61,34,116,104,101,109,115,101,108,118,101,115,44,97,108,116,104,111,117,103,104,32,104,101,116,104,97,116,32,99,97,110,32,98,101,116,114,97,100,105,116,105,111,110,97,108,114,111,108,101,32,111,102,32,116,104,101,97,115,32,97,32,114,101,115,117,108,116,114,101,109,111,118,101,67,104,105,108,100,100,101,115,105,103,110,101,100,32,98,121,119,101,115,116,32,111,102,32,116,104,101,83,111,109,101,32,112,101,111,112,108,101,112,114,111,100,117,99,116,105,111,110,44,115,105,100,101,32,111,102,32,116,104,101,110,101,119,115,108,101,116,116,101,114,115,117,115,101,100,32,98,121,32,116,104,101,100,111,119,110,32,116,111,32,116,104,101,97,99,99,101,112,116,101,100,32,98,121,108,105,118,101,32,105,110,32,116,104,101,97,116,116,101,109,112,116,115,32,116,111,111,117,116,115,105,100,101,32,116,104,101,102,114,101,113,117,101,110,99,105,101,115,72,111,119,101,118,101,114,44,32,105,110,112,114,111,103,114,97,109,109,101,114,115,97,116,32,108,101,97,115,116,32,105,110,97,112,112,114,111,120,105,109,97,116,101,97,108,116,104,111,117,103,104,32,105,116,119,97,115,32,112,97,114,116,32,111,102,97,110,100,32,118,97,114,105,111,117,115,71,111,118,101,114,110,111,114,32,111,102,116,104,101,32,97,114,116,105,99,108,101,116,117,114,110,101,100,32,105,110,116,111,62,60,97,32,104,114,101,102,61,34,47,116,104,101,32,101,99,111,110,111,109,121,105,115,32,116,104,101,32,109,111,115,116,109,111,115,116,32,119,105,100,101,108,121,119,111,117,108,100,32,108,97,116,101,114,97,110,100,32,112,101,114,104,97,112,115,114,105,115,101,32,116,111,32,116,104,101,111,99,99,117,114,115,32,119,104,101,110,117,110,100,101,114,32,119,104,105,99,104,99,111,110,100,105,116,105,111,110,115,46,116,104,101,32,119,101,115,116,101,114,110,116,104,101,111,114,121,32,116,104,97,116,105,115,32,112,114,111,100,117,99,101,100,116,104,101,32,99,105,116,121,32,111,102,105,110,32,119,104,105,99,104,32,104,101,115,101,101,110,32,105,110,32,116,104,101,116,104,101,32,99,101,110,116,114,97,108,98,117,105,108,100,105,110,103,32,111,102,109,97,110,121,32,111,102,32,104,105,115,97,114,101,97,32,111,102,32,116,104,101,105,115,32,116,104,101,32,111,110,108,121,109,111,115,116,32,111,102,32,116,104,101,109,97,110,121,32,111,102,32,116,104,101,116,104,101,32,87,101,115,116,101,114,110,84,104,101,114,101,32,105,115,32,110,111,101,120,116,101,110,100,101,100,32,116,111,83,116,97,116,105,115,116,105,99,97,108,99,111,108,115,112,97,110,61,50,32,124,115,104,111,114,116,32,115,116,111,114,121,112,111,115,115,105,98,108,101,32,116,111,116,111,112,111,108,111,103,105,99,97,108,99,114,105,116,105,99,97,108,32,111,102,114,101,112,111,114,116,101,100,32,116,111,97,32,67,104,114,105,115,116,105,97,110,100,101,99,105,115,105,111,110,32,116,111,105,115,32,101,113,117,97,108,32,116,111,112,114,111,98,108,101,109,115,32,111,102,84,104,105,115,32,99,97,110,32,98,101,109,101,114,99,104,97,110,100,105,115,101,102,111,114,32,109,111,115,116,32,111,102,110,111,32,101,118,105,100,101,110,99,101,101,100,105,116,105,111,110,115,32,111,102,101,108,101,109,101,110,116,115,32,105,110,38,113,117,111,116,59,46,32,84,104,101,99,111,109,47,105,109,97,103,101,115,47,119,104,105,99,104,32,109,97,107,101,115,116,104,101,32,112,114,111,99,101,115,115,114,101,109,97,105,110,115,32,116,104,101,108,105,116,101,114,97,116,117,114,101,44,105,115,32,97,32,109,101,109,98,101,114,116,104,101,32,112,111,112,117,108,97,114,116,104,101,32,97,110,99,105,101,110,116,112,114,111,98,108,101,109,115,32,105,110,116,105,109,101,32,111,102,32,116,104,101,100,101,102,101,97,116,101,100,32,98,121,98,111,100,121,32,111,102,32,116,104,101,97,32,102,101,119,32,121,101,97,114,115,109,117,99,104,32,111,102,32,116,104,101,116,104,101,32,119,111,114,107,32,111,102,67,97,108,105,102,111,114,110,105,97,44,115,101,114,118,101,100,32,97,115,32,97,103,111,118,101,114,110,109,101,110,116,46,99,111,110,99,101,112,116,115,32,111,102,109,111,118,101,109,101,110,116,32,105,110,9,9,60,100,105,118,32,105,100,61,34,105,116,34,32,118,97,108,117,101,61,34,108,97,110,103,117,97,103,101,32,111,102,97,115,32,116,104,101,121,32,97,114,101,112,114,111,100,117,99,101,100,32,105,110,105,115,32,116,104,97,116,32,116,104,101,101,120,112,108,97,105,110,32,116,104,101,100,105,118,62,60,47,100,105,118,62,10,72,111,119,101,118,101,114,32,116,104,101,108,101,97,100,32,116,111,32,116,104,101,9,60,97,32,104,114,101,102,61,34,47,119,97,115,32,103,114,97,110,116,101,100,112,101,111,112,108,101,32,104,97,118,101,99,111,110,116,105,110,117,97,108,108,121,119,97,115,32,115,101,101,110,32,97,115,97,110,100,32,114,101,108,97,116,101,100,116,104,101,32,114,111,108,101,32,111,102,112,114,111,112,111,115,101,100,32,98,121,111,102,32,116,104,101,32,98,101,115,116,101,97,99,104,32,111,116,104,101,114,46,67,111,110,115,116,97,110,116,105,110,101,112,101,111,112,108,101,32,102,114,111,109,100,105,97,108,101,99,116,115,32,111,102,116,111,32,114,101,118,105,115,105,111,110,119,97,115,32,114,101,110,97,109,101,100,97,32,115,111,117,114,99,101,32,111,102,116,104,101,32,105,110,105,116,105,97,108,108,97,117,110,99,104,101,100,32,105,110,112,114,111,118,105,100,101,32,116,104,101,116,111,32,116,104,101,32,119,101,115,116,119,104,101,114,101,32,116,104,101,114,101,97,110,100,32,115,105,109,105,108,97,114,98,101,116,119,101,101,110,32,116,119,111,105,115,32,97,108,115,111,32,116,104,101,69,110,103,108,105,115,104,32,97,110,100,99,111,110,100,105,116,105,111,110,115,44,116,104,97,116,32,105,116,32,119,97,115,101,110,116,105,116,108,101,100,32,116,111,116,104,101,109,115,101,108,118,101,115,46,113,117,97,110,116,105,116,121,32,111,102,114,97,110,115,112,97,114,101,110,99,121,116,104,101,32,115,97,109,101,32,97,115,116,111,32,106,111,105,110,32,116,104,101,99,111,117,110,116,114,121,32,97,110,100,116,104,105,115,32,105,115,32,116,104,101,84,104,105,115,32,108,101,100,32,116,111,97,32,115,116,97,116,101,109,101,110,116,99,111,110,116,114,97,115,116,32,116,111,108,97,115,116,73,110,100,101,120,79,102,116,104,114,111,117,103,104,32,104,105,115,105,115,32,100,101,115,105,103,110,101,100,116,104,101,32,116,101,114,109,32,105,115,105,115,32,112,114,111,118,105,100,101,100,112,114,111,116,101,99,116,32,116,104,101,110,103,60,47,97,62,60,47,108,105,62,84,104,101,32,99,117,114,114,101,110,116,116,104,101,32,115,105,116,101,32,111,102,115,117,98,115,116,97,110,116,105,97,108,101,120,112,101,114,105,101,110,99,101,44,105,110,32,116,104,101,32,87,101,115,116,116,104,101,121,32,115,104,111,117,108,100,115,108,111,118,101,110,196,141,105,110,97,99,111,109,101,110,116,97,114,105,111,115,117,110,105,118,101,114,115,105,100,97,100,99,111,110,100,105,99,105,111,110,101,115,97,99,116,105,118,105,100,97,100,101,115,101,120,112,101,114,105,101,110,99,105,97,116,101,99,110,111,108,111,103,195,173,97,112,114,111,100,117,99,99,105,195,179,110,112,117,110,116,117,97,99,105,195,179,110,97,112,108,105,99,97,99,105,195,179,110,99,111,110,116,114,97,115,101,195,177,97,99,97,116,101,103,111,114,195,173,97,115,114,101,103,105,115,116,114,97,114,115,101,112,114,111,102,101,115,105,111,110,97,108,116,114,97,116,97,109,105,101,110,116,111,114,101,103,195,173,115,116,114,97,116,101,115,101,99,114,101,116,97,114,195,173,97,112,114,105,110,99,105,112,97,108,101,115,112,114,111,116,101,99,99,105,195,179,110,105,109,112,111,114,116,97,110,116,101,115,105,109,112,111,114,116,97,110,99,105,97,112,111,115,105,98,105,108,105,100,97,100,105,110,116,101,114,101,115,97,110,116,101,99,114,101,99,105,109,105,101,110,116,111,110,101,99,101,115,105,100,97,100,101,115,115,117,115,99,114,105,98,105,114,115,101,97,115,111,99,105,97,99,105,195,179,110,100,105,115,112,111,110,105,98,108,101,115,101,118,97,108,117,97,99,105,195,179,110,101,115,116,117,100,105,97,110,116,101,115,114,101,115,112,111,110,115,97,98,108,101,114,101,115,111,108,117,99,105,195,179,110,103,117,97,100,97,108,97,106,97,114,97,114,101,103,105,115,116,114,97,100,111,115,111,112,111,114,116,117,110,105,100,97,100,99,111,109,101,114,99,105,97,108,101,115,102,111,116,111,103,114,97,102,195,173,97,97,117,116,111,114,105,100,97,100,101,115,105,110,103,101,110,105,101,114,195,173,97,116,101,108,101,118,105,115,105,195,179,110,99,111,109,112,101,116,101,110,99,105,97,111,112,101,114,97,99,105,111,110,101,115,101,115,116,97,98,108,101,99,105,100,111,115,105,109,112,108,101,109,101,110,116,101,97,99,116,117,97,108,109,101,110,116,101,110,97,118,101,103,97,99,105,195,179,110,99,111,110,102,111,114,109,105,100,97,100,108,105,110,101,45,104,101,105,103,104,116,58,102,111,110,116,45,102,97,109,105,108,121,58,34,32,58,32,34,104,116,116,112,58,47,47,97,112,112,108,105,99,97,116,105,111,110,115,108,105,110,107,34,32,104,114,101,102,61,34,115,112,101,99,105,102,105,99,97,108,108,121,47,47,60,33,91,67,68,65,84,65,91,10,79,114,103,97,110,105,122,97,116,105,111,110,100,105,115,116,114,105,98,117,116,105,111,110,48,112,120,59,32,104,101,105,103,104,116,58,114,101,108,97,116,105,111,110,115,104,105,112,100,101,118,105,99,101,45,119,105,100,116,104,60,100,105,118,32,99,108,97,115,115,61,34,60,108,97,98,101,108,32,102,111,114,61,34,114,101,103,105,115,116,114,97,116,105,111,110,60,47,110,111,115,99,114,105,112,116,62,10,47,105,110,100,101,120,46,104,116,109,108,34,119,105,110,100,111,119,46,111,112,101,110,40,32,33,105,109,112,111,114,116,97,110,116,59,97,112,112,108,105,99,97,116,105,111,110,47,105,110,100,101,112,101,110,100,101,110,99,101,47,47,119,119,119,46,103,111,111,103,108,101,111,114,103,97,110,105,122,97,116,105,111,110,97,117,116,111,99,111,109,112,108,101,116,101,114,101,113,117,105,114,101,109,101,110,116,115,99,111,110,115,101,114,118,97,116,105,118,101,60,102,111,114,109,32,110,97,109,101,61,34,105,110,116,101,108,108,101,99,116,117,97,108,109,97,114,103,105,110,45,108,101,102,116,58,49,56,116,104,32,99,101,110,116,117,114,121,97,110,32,105,109,112,111,114,116,97,110,116,105,110,115,116,105,116,117,116,105,111,110,115,97,98,98,114,101,118,105,97,116,105,111,110,60,105,109,103,32,99,108,97,115,115,61,34,111,114,103,97,110,105,115,97,116,105,111,110,99,105,118,105,108,105,122,97,116,105,111,110,49,57,116,104,32,99,101,110,116,117,114,121,97,114,99,104,105,116,101,99,116,117,114,101,105,110,99,111,114,112,111,114,97,116,101,100,50,48,116,104,32,99,101,110,116,117,114,121,45,99,111,110,116,97,105,110,101,114,34,62,109,111,115,116,32,110,111,116,97,98,108,121,47,62,60,47,97,62,60,47,100,105,118,62,110,111,116,105,102,105,99,97,116,105,111,110,39,117,110,100,101,102,105,110,101,100,39,41,70,117,114,116,104,101,114,109,111,114,101,44,98,101,108,105,101,118,101,32,116,104,97,116,105,110,110,101,114,72,84,77,76,32,61,32,112,114,105,111,114,32,116,111,32,116,104,101,100,114,97,109,97,116,105,99,97,108,108,121,114,101,102,101,114,114,105,110,103,32,116,111,110,101,103,111,116,105,97,116,105,111,110,115,104,101,97,100,113,117,97,114,116,101,114,115,83,111,117,116,104,32,65,102,114,105,99,97,117,110,115,117,99,99,101,115,115,102,117,108,80,101,110,110,115,121,108,118,97,110,105,97,65,115,32,97,32,114,101,115,117,108,116,44,60,104,116,109,108,32,108,97,110,103,61,34,38,108,116,59,47,115,117,112,38,103,116,59,100,101,97,108,105,110,103,32,119,105,116,104,112,104,105,108,97,100,101,108,112,104,105,97,104,105,115,116,111,114,105,99,97,108,108,121,41,59,60,47,115,99,114,105,112,116,62,10,112,97,100,100,105,110,103,45,116,111,112,58,101,120,112,101,114,105,109,101,110,116,97,108,103,101,116,65,116,116,114,105,98,117,116,101,105,110,115,116,114,117,99,116,105,111,110,115,116,101,99,104,110,111,108,111,103,105,101,115,112,97,114,116,32,111,102,32,116,104,101,32,61,102,117,110,99,116,105,111,110,40,41,123,115,117,98,115,99,114,105,112,116,105,111,110,108,46,100,116,100,34,62,13,10,60,104,116,103,101,111,103,114,97,112,104,105,99,97,108,67,111,110,115,116,105,116,117,116,105,111,110,39,44,32,102,117,110,99,116,105,111,110,40,115,117,112,112,111,114,116,101,100,32,98,121,97,103,114,105,99,117,108,116,117,114,97,108,99,111,110,115,116,114,117,99,116,105,111,110,112,117,98,108,105,99,97,116,105,111,110,115,102,111,110,116,45,115,105,122,101,58,32,49,97,32,118,97,114,105,101,116,121,32,111,102,60,100,105,118,32,115,116,121,108,101,61,34,69,110,99,121,99,108,111,112,101,100,105,97,105,102,114,97,109,101,32,115,114,99,61,34,100,101,109,111,110,115,116,114,97,116,101,100,97,99,99,111,109,112,108,105,115,104,101,100,117,110,105,118,101,114,115,105,116,105,101,115,68,101,109,111,103,114,97,112,104,105,99,115,41,59,60,47,115,99,114,105,112,116,62,60,100,101,100,105,99,97,116,101,100,32,116,111,107,110,111,119,108,101,100,103,101,32,111,102,115,97,116,105,115,102,97,99,116,105,111,110,112,97,114,116,105,99,117,108,97,114,108,121,60,47,100,105,118,62,60,47,100,105,118,62,69,110,103,108,105,115,104,32,40,85,83,41,97,112,112,101,110,100,67,104,105,108,100,40,116,114,97,110,115,109,105,115,115,105,111,110,115,46,32,72,111,119,101,118,101,114,44,32,105,110,116,101,108,108,105,103,101,110,99,101,34,32,116,97,98,105,110,100,101,120,61,34,102,108,111,97,116,58,114,105,103,104,116,59,67,111,109,109,111,110,119,101,97,108,116,104,114,97,110,103,105,110,103,32,102,114,111,109,105,110,32,119,104,105,99,104,32,116,104,101,97,116,32,108,101,97,115,116,32,111,110,101,114,101,112,114,111,100,117,99,116,105,111,110,101,110,99,121,99,108,111,112,101,100,105,97,59,102,111,110,116,45,115,105,122,101,58,49,106,117,114,105,115,100,105,99,116,105,111,110,97,116,32,116,104,97,116,32,116,105,109,101,34,62,60,97,32,99,108,97,115,115,61,34,73,110,32,97,100,100,105,116,105,111,110,44,100,101,115,99,114,105,112,116,105,111,110,43,99,111,110,118,101,114,115,97,116,105,111,110,99,111,110,116,97,99,116,32,119,105,116,104,105,115,32,103,101,110,101,114,97,108,108,121,114,34,32,99,111,110,116,101,110,116,61,34,114,101,112,114,101,115,101,110,116,105,110,103,38,108,116,59,109,97,116,104,38,103,116,59,112,114,101,115,101,110,116,97,116,105,111,110,111,99,99,97,115,105,111,110,97,108,108,121,60,105,109,103,32,119,105,100,116,104,61,34,110,97,118,105,103,97,116,105,111,110,34,62,99,111,109,112,101,110,115,97,116,105,111,110,99,104,97,109,112,105,111,110,115,104,105,112,109,101,100,105,97,61,34,97,108,108,34,32,118,105,111,108,97,116,105,111,110,32,111,102,114,101,102,101,114,101,110,99,101,32,116,111,114,101,116,117,114,110,32,116,114,117,101,59,83,116,114,105,99,116,47,47,69,78,34,32,116,114,97,110,115,97,99,116,105,111,110,115,105,110,116,101,114,118,101,110,116,105,111,110,118,101,114,105,102,105,99,97,116,105,111,110,73,110,102,111,114,109,97,116,105,111,110,32,100,105,102,102,105,99,117,108,116,105,101,115,67,104,97,109,112,105,111,110,115,104,105,112,99,97,112,97,98,105,108,105,116,105,101,115,60,33,91,101,110,100,105,102,93,45,45,62,125,10,60,47,115,99,114,105,112,116,62,10,67,104,114,105,115,116,105,97,110,105,116,121,102,111,114,32,101,120,97,109,112,108,101,44,80,114,111,102,101,115,115,105,111,110,97,108,114,101,115,116,114,105,99,116,105,111,110,115,115,117,103,103,101,115,116,32,116,104,97,116,119,97,115,32,114,101,108,101,97,115,101,100,40,115,117,99,104,32,97,115,32,116,104,101,114,101,109,111,118,101,67,108,97,115,115,40,117,110,101,109,112,108,111,121,109,101,110,116,116,104,101,32,65,109,101,114,105,99,97,110,115,116,114,117,99,116,117,114,101,32,111,102,47,105,110,100,101,120,46,104,116,109,108,32,112,117,98,108,105,115,104,101,100,32,105,110,115,112,97,110,32,99,108,97,115,115,61,34,34,62,60,97,32,104,114,101,102,61,34,47,105,110,116,114,111,100,117,99,116,105,111,110,98,101,108,111,110,103,105,110,103,32,116,111,99,108,97,105,109,101,100,32],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+133168);allocate([116,104,97,116,99,111,110,115,101,113,117,101,110,99,101,115,60,109,101,116,97,32,110,97,109,101,61,34,71,117,105,100,101,32,116,111,32,116,104,101,111,118,101,114,119,104,101,108,109,105,110,103,97,103,97,105,110,115,116,32,116,104,101,32,99,111,110,99,101,110,116,114,97,116,101,100,44,10,46,110,111,110,116,111,117,99,104,32,111,98,115,101,114,118,97,116,105,111,110,115,60,47,97,62,10,60,47,100,105,118,62,10,102,32,40,100,111,99,117,109,101,110,116,46,98,111,114,100,101,114,58,32,49,112,120,32,123,102,111,110,116,45,115,105,122,101,58,49,116,114,101,97,116,109,101,110,116,32,111,102,48,34,32,104,101,105,103,104,116,61,34,49,109,111,100,105,102,105,99,97,116,105,111,110,73,110,100,101,112,101,110,100,101,110,99,101,100,105,118,105,100,101,100,32,105,110,116,111,103,114,101,97,116,101,114,32,116,104,97,110,97,99,104,105,101,118,101,109,101,110,116,115,101,115,116,97,98,108,105,115,104,105,110,103,74,97,118,97,83,99,114,105,112,116,34,32,110,101,118,101,114,116,104,101,108,101,115,115,115,105,103,110,105,102,105,99,97,110,99,101,66,114,111,97,100,99,97,115,116,105,110,103,62,38,110,98,115,112,59,60,47,116,100,62,99,111,110,116,97,105,110,101,114,34,62,10,115,117,99,104,32,97,115,32,116,104,101,32,105,110,102,108,117,101,110,99,101,32,111,102,97,32,112,97,114,116,105,99,117,108,97,114,115,114,99,61,39,104,116,116,112,58,47,47,110,97,118,105,103,97,116,105,111,110,34,32,104,97,108,102,32,111,102,32,116,104,101,32,115,117,98,115,116,97,110,116,105,97,108,32,38,110,98,115,112,59,60,47,100,105,118,62,97,100,118,97,110,116,97,103,101,32,111,102,100,105,115,99,111,118,101,114,121,32,111,102,102,117,110,100,97,109,101,110,116,97,108,32,109,101,116,114,111,112,111,108,105,116,97,110,116,104,101,32,111,112,112,111,115,105,116,101,34,32,120,109,108,58,108,97,110,103,61,34,100,101,108,105,98,101,114,97,116,101,108,121,97,108,105,103,110,61,99,101,110,116,101,114,101,118,111,108,117,116,105,111,110,32,111,102,112,114,101,115,101,114,118,97,116,105,111,110,105,109,112,114,111,118,101,109,101,110,116,115,98,101,103,105,110,110,105,110,103,32,105,110,74,101,115,117,115,32,67,104,114,105,115,116,80,117,98,108,105,99,97,116,105,111,110,115,100,105,115,97,103,114,101,101,109,101,110,116,116,101,120,116,45,97,108,105,103,110,58,114,44,32,102,117,110,99,116,105,111,110,40,41,115,105,109,105,108,97,114,105,116,105,101,115,98,111,100,121,62,60,47,104,116,109,108,62,105,115,32,99,117,114,114,101,110,116,108,121,97,108,112,104,97,98,101,116,105,99,97,108,105,115,32,115,111,109,101,116,105,109,101,115,116,121,112,101,61,34,105,109,97,103,101,47,109,97,110,121,32,111,102,32,116,104,101,32,102,108,111,119,58,104,105,100,100,101,110,59,97,118,97,105,108,97,98,108,101,32,105,110,100,101,115,99,114,105,98,101,32,116,104,101,101,120,105,115,116,101,110,99,101,32,111,102,97,108,108,32,111,118,101,114,32,116,104,101,116,104,101,32,73,110,116,101,114,110,101,116,9,60,117,108,32,99,108,97,115,115,61,34,105,110,115,116,97,108,108,97,116,105,111,110,110,101,105,103,104,98,111,114,104,111,111,100,97,114,109,101,100,32,102,111,114,99,101,115,114,101,100,117,99,105,110,103,32,116,104,101,99,111,110,116,105,110,117,101,115,32,116,111,78,111,110,101,116,104,101,108,101,115,115,44,116,101,109,112,101,114,97,116,117,114,101,115,10,9,9,60,97,32,104,114,101,102,61,34,99,108,111,115,101,32,116,111,32,116,104,101,101,120,97,109,112,108,101,115,32,111,102,32,105,115,32,97,98,111,117,116,32,116,104,101,40,115,101,101,32,98,101,108,111,119,41,46,34,32,105,100,61,34,115,101,97,114,99,104,112,114,111,102,101,115,115,105,111,110,97,108,105,115,32,97,118,97,105,108,97,98,108,101,116,104,101,32,111,102,102,105,99,105,97,108,9,9,60,47,115,99,114,105,112,116,62,10,10,9,9,60,100,105,118,32,105,100,61,34,97,99,99,101,108,101,114,97,116,105,111,110,116,104,114,111,117,103,104,32,116,104,101,32,72,97,108,108,32,111,102,32,70,97,109,101,100,101,115,99,114,105,112,116,105,111,110,115,116,114,97,110,115,108,97,116,105,111,110,115,105,110,116,101,114,102,101,114,101,110,99,101,32,116,121,112,101,61,39,116,101,120,116,47,114,101,99,101,110,116,32,121,101,97,114,115,105,110,32,116,104,101,32,119,111,114,108,100,118,101,114,121,32,112,111,112,117,108,97,114,123,98,97,99,107,103,114,111,117,110,100,58,116,114,97,100,105,116,105,111,110,97,108,32,115,111,109,101,32,111,102,32,116,104,101,32,99,111,110,110,101,99,116,101,100,32,116,111,101,120,112,108,111,105,116,97,116,105,111,110,101,109,101,114,103,101,110,99,101,32,111,102,99,111,110,115,116,105,116,117,116,105,111,110,65,32,72,105,115,116,111,114,121,32,111,102,115,105,103,110,105,102,105,99,97,110,116,32,109,97,110,117,102,97,99,116,117,114,101,100,101,120,112,101,99,116,97,116,105,111,110,115,62,60,110,111,115,99,114,105,112,116,62,60,99,97,110,32,98,101,32,102,111,117,110,100,98,101,99,97,117,115,101,32,116,104,101,32,104,97,115,32,110,111,116,32,98,101,101,110,110,101,105,103,104,98,111,117,114,105,110,103,119,105,116,104,111,117,116,32,116,104,101,32,97,100,100,101,100,32,116,111,32,116,104,101,9,60,108,105,32,99,108,97,115,115,61,34,105,110,115,116,114,117,109,101,110,116,97,108,83,111,118,105,101,116,32,85,110,105,111,110,97,99,107,110,111,119,108,101,100,103,101,100,119,104,105,99,104,32,99,97,110,32,98,101,110,97,109,101,32,102,111,114,32,116,104,101,97,116,116,101,110,116,105,111,110,32,116,111,97,116,116,101,109,112,116,115,32,116,111,32,100,101,118,101,108,111,112,109,101,110,116,115,73,110,32,102,97,99,116,44,32,116,104,101,60,108,105,32,99,108,97,115,115,61,34,97,105,109,112,108,105,99,97,116,105,111,110,115,115,117,105,116,97,98,108,101,32,102,111,114,109,117,99,104,32,111,102,32,116,104,101,32,99,111,108,111,110,105,122,97,116,105,111,110,112,114,101,115,105,100,101,110,116,105,97,108,99,97,110,99,101,108,66,117,98,98,108,101,32,73,110,102,111,114,109,97,116,105,111,110,109,111,115,116,32,111,102,32,116,104,101,32,105,115,32,100,101,115,99,114,105,98,101,100,114,101,115,116,32,111,102,32,116,104,101,32,109,111,114,101,32,111,114,32,108,101,115,115,105,110,32,83,101,112,116,101,109,98,101,114,73,110,116,101,108,108,105,103,101,110,99,101,115,114,99,61,34,104,116,116,112,58,47,47,112,120,59,32,104,101,105,103,104,116,58,32,97,118,97,105,108,97,98,108,101,32,116,111,109,97,110,117,102,97,99,116,117,114,101,114,104,117,109,97,110,32,114,105,103,104,116,115,108,105,110,107,32,104,114,101,102,61,34,47,97,118,97,105,108,97,98,105,108,105,116,121,112,114,111,112,111,114,116,105,111,110,97,108,111,117,116,115,105,100,101,32,116,104,101,32,97,115,116,114,111,110,111,109,105,99,97,108,104,117,109,97,110,32,98,101,105,110,103,115,110,97,109,101,32,111,102,32,116,104,101,32,97,114,101,32,102,111,117,110,100,32,105,110,97,114,101,32,98,97,115,101,100,32,111,110,115,109,97,108,108,101,114,32,116,104,97,110,97,32,112,101,114,115,111,110,32,119,104,111,101,120,112,97,110,115,105,111,110,32,111,102,97,114,103,117,105,110,103,32,116,104,97,116,110,111,119,32,107,110,111,119,110,32,97,115,73,110,32,116,104,101,32,101,97,114,108,121,105,110,116,101,114,109,101,100,105,97,116,101,100,101,114,105,118,101,100,32,102,114,111,109,83,99,97,110,100,105,110,97,118,105,97,110,60,47,97,62,60,47,100,105,118,62,13,10,99,111,110,115,105,100,101,114,32,116,104,101,97,110,32,101,115,116,105,109,97,116,101,100,116,104,101,32,78,97,116,105,111,110,97,108,60,100,105,118,32,105,100,61,34,112,97,103,114,101,115,117,108,116,105,110,103,32,105,110,99,111,109,109,105,115,115,105,111,110,101,100,97,110,97,108,111,103,111,117,115,32,116,111,97,114,101,32,114,101,113,117,105,114,101,100,47,117,108,62,10,60,47,100,105,118,62,10,119,97,115,32,98,97,115,101,100,32,111,110,97,110,100,32,98,101,99,97,109,101,32,97,38,110,98,115,112,59,38,110,98,115,112,59,116,34,32,118,97,108,117,101,61,34,34,32,119,97,115,32,99,97,112,116,117,114,101,100,110,111,32,109,111,114,101,32,116,104,97,110,114,101,115,112,101,99,116,105,118,101,108,121,99,111,110,116,105,110,117,101,32,116,111,32,62,13,10,60,104,101,97,100,62,13,10,60,119,101,114,101,32,99,114,101,97,116,101,100,109,111,114,101,32,103,101,110,101,114,97,108,105,110,102,111,114,109,97,116,105,111,110,32,117,115,101,100,32,102,111,114,32,116,104,101,105,110,100,101,112,101,110,100,101,110,116,32,116,104,101,32,73,109,112,101,114,105,97,108,99,111,109,112,111,110,101,110,116,32,111,102,116,111,32,116,104,101,32,110,111,114,116,104,105,110,99,108,117,100,101,32,116,104,101,32,67,111,110,115,116,114,117,99,116,105,111,110,115,105,100,101,32,111,102,32,116,104,101,32,119,111,117,108,100,32,110,111,116,32,98,101,102,111,114,32,105,110,115,116,97,110,99,101,105,110,118,101,110,116,105,111,110,32,111,102,109,111,114,101,32,99,111,109,112,108,101,120,99,111,108,108,101,99,116,105,118,101,108,121,98,97,99,107,103,114,111,117,110,100,58,32,116,101,120,116,45,97,108,105,103,110,58,32,105,116,115,32,111,114,105,103,105,110,97,108,105,110,116,111,32,97,99,99,111,117,110,116,116,104,105,115,32,112,114,111,99,101,115,115,97,110,32,101,120,116,101,110,115,105,118,101,104,111,119,101,118,101,114,44,32,116,104,101,116,104,101,121,32,97,114,101,32,110,111,116,114,101,106,101,99,116,101,100,32,116,104,101,99,114,105,116,105,99,105,115,109,32,111,102,100,117,114,105,110,103,32,119,104,105,99,104,112,114,111,98,97,98,108,121,32,116,104,101,116,104,105,115,32,97,114,116,105,99,108,101,40,102,117,110,99,116,105,111,110,40,41,123,73,116,32,115,104,111,117,108,100,32,98,101,97,110,32,97,103,114,101,101,109,101,110,116,97,99,99,105,100,101,110,116,97,108,108,121,100,105,102,102,101,114,115,32,102,114,111,109,65,114,99,104,105,116,101,99,116,117,114,101,98,101,116,116,101,114,32,107,110,111,119,110,97,114,114,97,110,103,101,109,101,110,116,115,105,110,102,108,117,101,110,99,101,32,111,110,97,116,116,101,110,100,101,100,32,116,104,101,105,100,101,110,116,105,99,97,108,32,116,111,115,111,117,116,104,32,111,102,32,116,104,101,112,97,115,115,32,116,104,114,111,117,103,104,120,109,108,34,32,116,105,116,108,101,61,34,119,101,105,103,104,116,58,98,111,108,100,59,99,114,101,97,116,105,110,103,32,116,104,101,100,105,115,112,108,97,121,58,110,111,110,101,114,101,112,108,97,99,101,100,32,116,104,101,60,105,109,103,32,115,114,99,61,34,47,105,104,116,116,112,115,58,47,47,119,119,119,46,87,111,114,108,100,32,87,97,114,32,73,73,116,101,115,116,105,109,111,110,105,97,108,115,102,111,117,110,100,32,105,110,32,116,104,101,114,101,113,117,105,114,101,100,32,116,111,32,97,110,100,32,116,104,97,116,32,116,104,101,98,101,116,119,101,101,110,32,116,104,101,32,119,97,115,32,100,101,115,105,103,110,101,100,99,111,110,115,105,115,116,115,32,111,102,32,99,111,110,115,105,100,101,114,97,98,108,121,112,117,98,108,105,115,104,101,100,32,98,121,116,104,101,32,108,97,110,103,117,97,103,101,67,111,110,115,101,114,118,97,116,105,111,110,99,111,110,115,105,115,116,101,100,32,111,102,114,101,102,101,114,32,116,111,32,116,104,101,98,97,99,107,32,116,111,32,116,104,101,32,99,115,115,34,32,109,101,100,105,97,61,34,80,101,111,112,108,101,32,102,114,111,109,32,97,118,97,105,108,97,98,108,101,32,111,110,112,114,111,118,101,100,32,116,111,32,98,101,115,117,103,103,101,115,116,105,111,110,115,34,119,97,115,32,107,110,111,119,110,32,97,115,118,97,114,105,101,116,105,101,115,32,111,102,108,105,107,101,108,121,32,116,111,32,98,101,99,111,109,112,114,105,115,101,100,32,111,102,115,117,112,112,111,114,116,32,116,104,101,32,104,97,110,100,115,32,111,102,32,116,104,101,99,111,117,112,108,101,100,32,119,105,116,104,99,111,110,110,101,99,116,32,97,110,100,32,98,111,114,100,101,114,58,110,111,110,101,59,112,101,114,102,111,114,109,97,110,99,101,115,98,101,102,111,114,101,32,98,101,105,110,103,108,97,116,101,114,32,98,101,99,97,109,101,99,97,108,99,117,108,97,116,105,111,110,115,111,102,116,101,110,32,99,97,108,108,101,100,114,101,115,105,100,101,110,116,115,32,111,102,109,101,97,110,105,110,103,32,116,104,97,116,62,60,108,105,32,99,108,97,115,115,61,34,101,118,105,100,101,110,99,101,32,102,111,114,101,120,112,108,97,110,97,116,105,111,110,115,101,110,118,105,114,111,110,109,101,110,116,115,34,62,60,47,97,62,60,47,100,105,118,62,119,104,105,99,104,32,97,108,108,111,119,115,73,110,116,114,111,100,117,99,116,105,111,110,100,101,118,101,108,111,112,101,100,32,98,121,97,32,119,105,100,101,32,114,97,110,103,101,111,110,32,98,101,104,97,108,102,32,111,102,118,97,108,105,103,110,61,34,116,111,112,34,112,114,105,110,99,105,112,108,101,32,111,102,97,116,32,116,104,101,32,116,105,109,101,44,60,47,110,111,115,99,114,105,112,116,62,13,115,97,105,100,32,116,111,32,104,97,118,101,105,110,32,116,104,101,32,102,105,114,115,116,119,104,105,108,101,32,111,116,104,101,114,115,104,121,112,111,116,104,101,116,105,99,97,108,112,104,105,108,111,115,111,112,104,101,114,115,112,111,119,101,114,32,111,102,32,116,104,101,99,111,110,116,97,105,110,101,100,32,105,110,112,101,114,102,111,114,109,101,100,32,98,121,105,110,97,98,105,108,105,116,121,32,116,111,119,101,114,101,32,119,114,105,116,116,101,110,115,112,97,110,32,115,116,121,108,101,61,34,105,110,112,117,116,32,110,97,109,101,61,34,116,104,101,32,113,117,101,115,116,105,111,110,105,110,116,101,110,100,101,100,32,102,111,114,114,101,106,101,99,116,105,111,110,32,111,102,105,109,112,108,105,101,115,32,116,104,97,116,105,110,118,101,110,116,101,100,32,116,104,101,116,104,101,32,115,116,97,110,100,97,114,100,119,97,115,32,112,114,111,98,97,98,108,121,108,105,110,107,32,98,101,116,119,101,101,110,112,114,111,102,101,115,115,111,114,32,111,102,105,110,116,101,114,97,99,116,105,111,110,115,99,104,97,110,103,105,110,103,32,116,104,101,73,110,100,105,97,110,32,79,99,101,97,110,32,99,108,97,115,115,61,34,108,97,115,116,119,111,114,107,105,110,103,32,119,105,116,104,39,104,116,116,112,58,47,47,119,119,119,46,121,101,97,114,115,32,98,101,102,111,114,101,84,104,105,115,32,119,97,115,32,116,104,101,114,101,99,114,101,97,116,105,111,110,97,108,101,110,116,101,114,105,110,103,32,116,104,101,109,101,97,115,117,114,101,109,101,110,116,115,97,110,32,101,120,116,114,101,109,101,108,121,118,97,108,117,101,32,111,102,32,116,104,101,115,116,97,114,116,32,111,102,32,116,104,101,10,60,47,115,99,114,105,112,116,62,10,10,97,110,32,101,102,102,111,114,116,32,116,111,105,110,99,114,101,97,115,101,32,116,104,101,116,111,32,116,104,101,32,115,111,117,116,104,115,112,97,99,105,110,103,61,34,48,34,62,115,117,102,102,105,99,105,101,110,116,108,121,116,104,101,32,69,117,114,111,112,101,97,110,99,111,110,118,101,114,116,101,100,32,116,111,99,108,101,97,114,84,105,109,101,111,117,116,100,105,100,32,110,111,116,32,104,97,118,101,99,111,110,115,101,113,117,101,110,116,108,121,102,111,114,32,116,104,101,32,110,101,120,116,101,120,116,101,110,115,105,111,110,32,111,102,101,99,111,110,111,109,105,99,32,97,110,100,97,108,116,104,111,117,103,104,32,116,104,101,97,114,101,32,112,114,111,100,117,99,101,100,97,110,100,32,119,105,116,104,32,116,104,101,105,110,115,117,102,102,105,99,105,101,110,116,103,105,118,101,110,32,98,121,32,116,104,101,115,116,97,116,105,110,103,32,116,104,97,116,101,120,112,101,110,100,105,116,117,114,101,115,60,47,115,112,97,110,62,60,47,97,62,10,116,104,111,117,103,104,116,32,116,104,97,116,111,110,32,116,104,101,32,98,97,115,105,115,99,101,108,108,112,97,100,100,105,110,103,61,105,109,97,103,101,32,111,102,32,116,104,101,114,101,116,117,114,110,105,110,103,32,116,111,105,110,102,111,114,109,97,116,105,111,110,44,115,101,112,97,114,97,116,101,100,32,98,121,97,115,115,97,115,115,105,110,97,116,101,100,115,34,32,99,111,110,116,101,110,116,61,34,97,117,116,104,111,114,105,116,121,32,111,102,110,111,114,116,104,119,101,115,116,101,114,110,60,47,100,105,118,62,10,60,100,105,118,32,34,62,60,47,100,105,118,62,13,10,32,32,99,111,110,115,117,108,116,97,116,105,111,110,99,111,109,109,117,110,105,116,121,32,111,102,116,104,101,32,110,97,116,105,111,110,97,108,105,116,32,115,104,111,117,108,100,32,98,101,112,97,114,116,105,99,105,112,97,110,116,115,32,97,108,105,103,110,61,34,108,101,102,116,116,104,101,32,103,114,101,97,116,101,115,116,115,101,108,101,99,116,105,111,110,32,111,102,115,117,112,101,114,110,97,116,117,114,97,108,100,101,112,101,110,100,101,110,116,32,111,110,105,115,32,109,101,110,116,105,111,110,101,100,97,108,108,111,119,105,110,103,32,116,104,101,119,97,115,32,105,110,118,101,110,116,101,100,97,99,99,111,109,112,97,110,121,105,110,103,104,105,115,32,112,101,114,115,111,110,97,108,97,118,97,105,108,97,98,108,101,32,97,116,115,116,117,100,121,32,111,102,32,116,104,101,111,110,32,116,104,101,32,111,116,104,101,114,101,120,101,99,117,116,105,111,110,32,111,102,72,117,109,97,110,32,82,105,103,104,116,115,116,101,114,109,115,32,111,102,32,116,104,101,97,115,115,111,99,105,97,116,105,111,110,115,114,101,115,101,97,114,99,104,32,97,110,100,115,117,99,99,101,101,100,101,100,32,98,121,100,101,102,101,97,116,101,100,32,116,104,101,97,110,100,32,102,114,111,109,32,116,104,101,98,117,116,32,116,104,101,121,32,97,114,101,99,111,109,109,97,110,100,101,114,32,111,102,115,116,97,116,101,32,111,102,32,116,104,101,121,101,97,114,115,32,111,102,32,97,103,101,116,104,101,32,115,116,117,100,121,32,111,102,60,117,108,32,99,108,97,115,115,61,34,115,112,108,97,99,101,32,105,110,32,116,104,101,119,104,101,114,101,32,104,101,32,119,97,115,60,108,105,32,99,108,97,115,115,61,34,102,116,104,101,114,101,32,97,114,101,32,110,111,119,104,105,99,104,32,98,101,99,97,109,101,104,101,32,112,117,98,108,105,115,104,101,100,101,120,112,114,101,115,115,101,100,32,105,110,116,111,32,119,104,105,99,104,32,116,104,101,99,111,109,109,105,115,115,105,111,110,101,114,102,111,110,116,45,119,101,105,103,104,116,58,116,101,114,114,105,116,111,114,121,32,111,102,101,120,116,101,110,115,105,111,110,115,34,62,82,111,109,97,110,32,69,109,112,105,114,101,101,113,117,97,108,32,116,111,32,116,104,101,73,110,32,99,111,110,116,114,97,115,116,44,104,111,119,101,118,101,114,44,32,97,110,100,105,115,32,116,121,112,105,99,97,108,108,121,97,110,100,32,104,105,115,32,119,105,102,101,40,97,108,115,111,32,99,97,108,108,101,100,62,60,117,108,32,99,108,97,115,115,61,34,101,102,102,101,99,116,105,118,101,108,121,32,101,118,111,108,118,101,100,32,105,110,116,111,115,101,101,109,32,116,111,32,104,97,118,101,119,104,105,99,104,32,105,115,32,116,104,101,116,104,101,114,101,32,119,97,115,32,110,111,97,110,32,101,120,99,101,108,108,101,110,116,97,108,108,32,111,102,32,116,104,101,115,101,100,101,115,99,114,105,98,101,100,32,98,121,73,110,32,112,114,97,99,116,105,99,101,44,98,114,111,97,100,99,97,115,116,105,110,103,99,104,97,114,103,101,100,32,119,105,116,104,114,101,102,108,101,99,116,101,100,32,105,110,115,117,98,106,101,99,116,101,100,32,116,111,109,105,108,105,116,97,114,121,32,97,110,100,116,111,32,116,104,101,32,112,111,105,110,116,101,99,111,110,111,109,105,99,97,108,108,121,115,101,116,84,97,114,103,101,116,105,110,103,97,114,101,32,97,99,116,117,97,108,108,121,118,105,99,116,111,114,121,32,111,118,101,114,40,41,59,60,47,115,99,114,105,112,116,62,99,111,110,116,105,110,117,111,117,115,108,121,114,101,113,117,105,114,101,100,32,102,111,114,101,118,111,108,117,116,105,111,110,97,114,121,97,110,32,101,102,102,101,99,116,105,118,101,110,111,114,116,104,32,111,102,32,116,104,101,44,32,119,104,105,99,104,32,119,97,115,32,102,114,111,110,116,32,111,102,32,116,104,101,111,114,32,111,116,104,101,114,119,105,115,101,115,111,109,101,32,102,111,114,109,32,111,102,104,97,100,32,110,111,116,32,98,101,101,110,103,101,110,101,114,97,116,101,100,32,98,121,105,110,102,111,114,109,97,116,105,111,110,46,112,101,114,109,105,116,116,101,100,32,116,111,105,110,99,108,117,100,101,115,32,116,104,101,100,101,118,101,108,111,112,109,101,110,116,44,101,110,116,101,114,101,100,32,105,110,116,111,116,104,101,32,112,114,101,118,105,111,117,115,99,111,110,115,105,115,116,101,110,116,108,121,97,114,101,32,107,110,111,119,110,32,97,115,116,104,101,32,102,105,101,108,100,32,111,102,116,104,105,115,32,116,121,112,101,32,111,102,103,105,118,101,110,32,116,111,32,116,104,101,116,104,101,32,116,105,116,108,101,32,111,102,99,111,110,116,97,105,110,115,32,116,104,101,105,110,115,116,97,110,99,101,115,32,111,102,105,110,32,116,104,101,32,110,111,114,116,104,100,117,101,32,116,111,32,116,104,101,105,114,97,114,101,32,100,101,115,105,103,110,101,100,99,111,114,112,111,114,97,116,105,111,110,115,119,97,115,32,116,104,97,116,32,116,104,101,111,110,101,32,111,102,32,116,104,101,115,101,109,111,114,101,32,112,111,112,117,108,97,114,115,117,99,99,101,101,100,101,100,32,105,110,115,117,112,112,111,114,116,32,102,114,111,109,105,110,32,100,105,102,102,101,114,101,110,116,100,111,109,105,110,97,116,101,100,32,98,121,100,101,115,105,103,110,101,100,32,102,111,114,111,119,110,101,114,115,104,105,112,32,111,102,97,110,100,32,112,111,115,115,105,98,108,121,115,116,97,110,100,97,114,100,105,122,101,100,114,101,115,112,111,110,115,101,84,101,120,116,119,97,115,32,105,110,116,101,110,100,101,100,114,101,99,101,105,118,101,100,32,116,104,101,97,115,115,117,109,101,100,32,116,104,97,116,97,114,101,97,115,32,111,102,32,116,104,101,112,114,105,109,97,114,105,108,121,32,105,110,116,104,101,32,98,97,115,105,115,32,111,102,105,110,32,116,104,101,32,115,101,110,115,101,97,99,99,111,117,110,116,115,32,102,111,114,100,101,115,116,114,111,121,101,100,32,98,121,97,116,32,108,101,97,115,116,32,116,119,111,119,97,115,32,100,101,99,108,97,114,101,100,99,111,117,108,100,32,110,111,116,32,98,101,83,101,99,114,101,116,97,114,121,32,111,102,97,112,112,101,97,114,32,116,111,32,98,101,109,97,114,103,105,110,45,116,111,112,58,49,47,94,92,115,43,124,92,115,43,36,47,103,101,41,123,116,104,114,111,119,32,101,125,59,116,104,101,32,115,116,97,114,116,32,111,102,116,119,111,32,115,101,112,97,114,97,116,101,108,97,110,103,117,97,103,101,32,97,110,100,119,104,111,32,104,97,100,32,98,101,101,110,111,112,101,114,97,116,105,111,110,32,111,102,100,101,97,116,104,32,111,102,32,116,104,101,114,101,97,108,32,110,117,109,98,101,114,115,9,60,108,105,110,107,32,114,101,108,61,34,112,114,111,118,105,100,101,100,32,116,104,101,116,104,101,32,115,116,111,114,121,32,111,102,99,111,109,112,101,116,105,116,105,111,110,115,101,110,103,108,105,115,104,32,40,85,75,41,101,110,103,108,105,115,104,32,40,85,83,41,208,156,208,190,208,189,208,179,208,190,208,187,208,161,209,128,208,191,209,129,208,186,208,184,209,129,209,128,208,191,209,129,208,186,208,184,209,129,209,128,208,191,209,129,208,186,208,190,217,132,216,185,216,177,216,168,217,138,216,169,230,173,163,233,171,148,228,184,173,230,150,135,231,174,128,228,189,147,228,184,173,230,150,135,231,185,129,228,189,147,228,184,173,230,150,135,230,156,137,233,153,144,229,133,172,229,143,184,228,186,186,230,176,145,230,148,191,229,186,156,233,152,191,233,135,140,229,183,180,229,183,180,231,164,190,228,188,154,228,184,187,228,185,137,230,147,141,228,189,156,231,179,187,231,187,159,230,148,191,231,173,150,230,179,149,232,167,132,105,110,102,111,114,109,97,99,105,195,179,110,104,101,114,114,97,109,105,101,110,116,97,115,101,108,101,99,116,114,195,179,110,105,99,111,100,101,115,99,114,105,112,99,105,195,179,110,99,108,97,115,105,102,105,99,97,100,111,115,99,111,110,111,99,105,109,105,101,110,116,111,112,117,98,108,105,99,97,99,105,195,179,110,114,101,108,97,99,105,111,110,97,100,97,115,105,110,102,111,114,109,195,161,116,105,99,97,114,101,108,97,99,105,111,110,97,100,111,115,100,101,112,97,114,116,97,109,101,110,116,111,116,114,97,98,97,106,97,100,111,114,101,115,100,105,114,101,99,116,97,109,101,110,116,101,97,121,117,110,116,97,109,105,101,110,116,111,109,101,114,99,97,100,111,76,105,98,114,101,99,111,110,116,195,161,99,116,101,110,111,115,104,97,98,105,116,97,99,105,111,110,101,115,99,117,109,112,108,105,109,105,101,110,116,111,114,101,115,116,97,117,114,97,110,116,101,115,100,105,115,112,111,115,105,99,105,195,179,110,99,111,110,115,101,99,117,101,110,99,105,97,101,108,101,99,116,114,195,179,110,105,99,97,97,112,108,105,99,97,99,105,111,110,101,115,100,101,115,99,111,110,101,99,116,97,100,111,105,110,115,116,97,108,97,99,105,195,179,110,114,101,97,108,105,122,97,99,105,195,179,110,117,116,105,108,105,122,97,99,105,195,179,110,101,110,99,105,99,108,111,112,101,100,105,97,101,110,102,101,114,109,101,100,97,100,101,115,105,110,115,116,114,117,109,101,110,116,111,115,101,120,112,101,114,105,101,110,99,105,97,115,105,110,115,116,105,116,117,99,105,195,179,110,112,97,114,116,105,99,117,108,97,114,101,115,115,117,98,99,97,116,101,103,111,114,105,97,209,130,208,190,208,187,209,140,208,186,208,190,208,160,208,190,209,129,209,129,208,184,208,184,209,128,208,176,208,177,208,190,209,130,209,139,208,177,208,190,208,187,209,140,209,136,208,181,208,191,209,128,208,190,209,129,209,130,208,190,208,188,208,190,208,182,208,181,209,130,208,181,208,180,209,128,209,131,208,179,208,184,209,133,209,129,208,187,209,131,209,135,208,176,208,181,209,129,208,181,208,185,209,135,208,176,209,129,208,178,209,129,208,181,208,179,208,180,208,176,208,160,208,190,209,129,209,129,208,184,209,143,208,156,208,190,209,129,208,186,208,178,208,181,208,180,209,128,209,131,208,179,208,184,208,181,208,179,208,190,209,128,208,190,208,180,208,176,208,178,208,190,208,191,209,128,208,190,209,129,208,180,208,176,208,189,208,189,209,139,209,133,208,180,208,190,208,187,208,182,208,189,209,139,208,184,208,188,208,181,208,189,208,189,208,190,208,156,208,190,209,129,208,186,208,178,209,139,209,128,209,131,208,177,208,187,208,181,208,185,208,156,208,190,209,129,208,186,208,178,208,176,209,129,209,130,209,128,208,176,208,189,209,139,208,189,208,184,209,135,208,181,208,179,208,190,209,128,208,176,208,177,208,190,209,130,208,181,208,180,208,190,208,187,208,182,208,181,208,189,209,131,209,129,208,187,209,131,208,179,208,184,209,130,208,181,208,191,208,181,209,128,209,140,208,158,208,180,208,189,208,176,208,186,208,190,208,191,208,190,209,130,208,190,208,188,209,131,209,128,208,176,208,177,208,190,209,130,209,131,208,176,208,191,209,128,208,181,208,187,209,143,208,178,208,190,208,190,208,177,209,137,208,181,208,190,208,180,208,189,208,190,208,179,208,190,209,129,208,178,208,190,208,181,208,179,208,190,209,129,209,130,208,176,209,130,209,140,208,184,208,180,209,128,209,131,208,179,208,190,208,185,209,132,208,190,209,128,209,131,208,188,208,181,209,133,208,190,209,128,208,190,209,136,208,190,208,191,209,128,208,190,209,130,208,184,208,178,209,129,209,129,209,139,208,187,208,186,208,176,208,186,208,176,208,182,208,180,209,139,208,185,208,178,208,187,208,176,209,129,209,130,208,184,208,179,209,128,209,131,208,191,208,191,209,139,208,178,208,188,208,181,209,129,209,130,208,181,209,128,208,176,208,177,208,190,209,130,208,176,209,129,208,186,208,176,208,183,208,176,208,187,208,191,208,181,209,128,208,178,209,139,208,185,208,180,208,181,208,187,208,176,209,130,209,140,208,180,208,181,208,189,209,140,208,179,208,184,208,191,208,181,209,128,208,184,208,190,208,180,208,177,208,184,208,183,208,189,208,181,209,129,208,190,209,129,208,189,208,190,208,178,208,181,208,188,208,190,208,188,208,181,208,189,209,130,208,186,209,131,208,191,208,184,209,130,209,140,208,180,208,190,208,187,208,182,208,189,208,176,209,128,208,176,208,188,208,186,208,176,209,133,208,189,208,176,209,135,208,176,208,187,208,190,208,160,208,176,208,177,208,190,209,130,208,176,208,162,208,190,208,187,209,140,208,186,208,190,209,129,208,190,208,178,209,129,208,181,208,188,208,178,209,130,208,190,209,128,208,190,208,185,208,189,208,176,209,135,208,176,208,187,208,176,209,129,208,191,208,184,209,129,208,190,208,186,209,129,208,187,209,131,208,182,208,177,209,139,209,129,208,184,209,129,209,130,208,181,208,188,208,191,208,181,209,135,208,176,209,130,208,184,208,189,208,190,208,178,208,190,208,179,208,190,208,191,208,190,208,188,208,190,209,137,208,184,209,129,208,176,208,185,209,130,208,190,208,178,208,191,208,190,209,135,208,181,208,188,209,131,208,191,208,190,208,188,208,190,209,137,209,140,208,180,208,190,208,187,208,182,208,189,208,190,209,129,209,129,209,139,208,187,208,186,208,184,208,177,209,139,209,129,209,130,209,128,208,190,208,180,208,176,208,189,208,189,209,139,208,181,208,188,208,189,208,190,208,179,208,184,208,181,208,191,209,128,208,190,208,181,208,186,209,130,208,161,208,181,208,185,209,135,208,176,209,129,208,188,208,190,208,180,208,181,208,187,208,184,209,130,208,176,208,186,208,190,208,179,208,190,208,190,208,189,208,187,208,176,208,185,208,189,208,179,208,190,209,128,208,190,208,180,208,181,208,178,208,181,209,128,209,129,208,184,209,143,209,129,209,130,209,128,208,176,208,189,208,181,209,132,208,184,208,187,209,140,208,188,209,139,209,131,209,128,208,190,208,178,208,189,209,143,209,128,208,176,208,183,208,189,209,139,209,133,208,184,209,129,208,186,208,176,209,130,209,140,208,189,208,181,208,180,208,181,208,187,209,142,209,143,208,189,208,178,208,176,209,128,209,143,208,188,208,181,208,189,209,140,209,136,208,181,208,188,208,189,208,190,208,179,208,184,209,133,208,180,208,176,208,189,208,189,208,190,208,185,208,183,208,189,208,176,209,135,208,184,209,130,208,189,208,181,208,187,209,140,208,183,209,143,209,132,208,190,209,128,209,131,208,188,208,176,208,162,208,181,208,191,208,181,209,128,209,140,208,188,208,181,209,129,209,143,209,134,208,176,208,183,208,176,209,137,208,184,209,130,209,139,208,155,209,131,209,135,209,136,208,184,208,181,224,164,168,224,164,185,224,165,128,224,164,130,224,164,149,224,164,176,224,164,168,224,165,135,224,164,133,224,164,170,224,164,168,224,165,135,224,164,149,224,164,191,224,164,175,224,164,190,224,164,149,224,164,176,224,165,135,224,164,130,224,164,133,224,164,168,224,165,141,224,164,175,224,164,149,224,165,141,224,164,175,224,164,190,224,164,151,224,164,190,224,164,135,224,164,161,224,164,172,224,164,190,224,164,176,224,165,135,224,164,149,224,164,191,224,164,184,224,165,128,224,164,166,224,164,191,224,164,175,224,164,190,224,164,170,224,164,185,224,164,178,224,165,135,224,164,184,224,164,191,224,164,130,224,164,185,224,164,173,224,164,190,224,164,176,224,164,164,224,164,133,224,164,170,224,164,168,224,165,128,224,164,181,224,164,190,224,164,178,224,165,135,224,164,184,224,165,135,224,164,181,224,164,190,224,164,149,224,164,176,224,164,164,224,165,135,224,164,174,224,165,135,224,164,176,224,165,135,224,164,185,224,165,139,224,164,168,224,165,135,224,164,184,224,164,149,224,164,164,224,165,135,224,164,172,224,164,185,224,165,129,224,164,164,224,164,184,224,164,190,224,164,135,224,164,159,224,164,185,224,165,139,224,164,151,224,164,190,224,164,156,224,164,190,224,164,168,224,165,135,224,164,174,224,164,191,224,164,168,224,164,159,224,164,149,224,164,176,224,164,164,224,164,190,224,164,149,224,164,176,224,164,168,224,164,190,224,164,137,224,164,168,224,164,149,224,165,135,224,164,175,224,164,185,224,164,190,224,164,129,224,164,184,224,164,172,224,164,184,224,165,135,224,164,173,224,164,190,224,164,183,224,164,190,224,164,134,224,164,170,224,164,149,224,165,135,224,164,178,224,164,191,224,164,175,224,165,135,224,164,182,224,165,129,224,164,176,224,165,130,224,164,135,224,164,184,224,164,149,224,165,135,224,164,152,224,164,130,224,164,159,224,165,135,224,164,174,224,165,135,224,164,176,224,165,128,224,164,184,224,164,149,224,164,164,224,164,190,224,164,174,224,165,135,224,164,176,224,164,190,224,164,178,224,165,135,224,164,149,224,164,176,224,164,133,224,164,167,224,164,191,224,164,149,224,164,133,224,164,170,224,164,168,224,164,190,224,164,184,224,164,174,224,164,190,224,164,156,224,164,174,224,165,129,224,164,157,224,165,135,224,164,149,224,164,190,224,164,176,224,164,163,224,164,185,224,165,139,224,164,164,224,164,190,224,164,149,224,164,161,224,164,188,224,165,128,224,164,175,224,164,185,224,164,190,224,164,130,224,164,185,224,165,139,224,164,159,224,164,178,224,164,182,224,164,172,224,165,141,224,164,166,224,164,178,224,164,191,224,164,175,224,164,190,224,164,156,224,165,128,224,164,181,224,164,168,224,164,156,224,164,190,224,164,164,224,164,190,224,164,149,224,165,136,224,164,184,224,165,135,224,164,134,224,164,170,224,164,149,224,164,190,224,164,181,224,164,190,224,164,178,224,165,128,224,164,166,224,165,135,224,164,168,224,165,135,224,164,170,224,165,130,224,164,176,224,165,128,224,164,170,224,164,190,224,164,168,224,165,128,224,164,137,224,164,184,224,164,149,224,165,135,224,164,185,224,165,139,224,164,151,224,165,128,224,164,172,224,165,136,224,164,160,224,164,149,224,164,134,224,164,170,224,164,149,224,165,128,224,164,181,224,164,176,224,165,141,224,164,183,224,164,151,224,164,190,224,164,130,224,164,181,224,164,134,224,164,170,224,164,149,224,165,139,224,164,156,224,164,191,224,164,178,224,164,190,224,164,156,224,164,190,224,164,168,224,164,190,224,164,184,224,164,185,224,164,174,224,164,164,224,164,185,224,164,174,224,165,135,224,164,130,224,164,137,224,164,168,224,164,149,224,165,128,224,164,175,224,164,190,224,164,185,224,165,130,224,164,166,224,164,176,224,165,141,224,164,156,224,164,184,224,165,130,224,164,154,224,165,128,224,164,170,224,164,184,224,164,130,224,164,166,224,164,184,224,164,181,224,164,190,224,164,178,224,164,185,224,165,139,224,164,168,224,164,190,224,164,185,224,165,139,224,164,164,224,165,128,224,164,156,224,165,136,224,164,184,224,165,135,224,164,181,224,164,190,224,164,170,224,164,184,224,164,156,224,164,168,224,164,164,224,164,190,224,164,168,224,165,135,224,164,164,224,164,190,224,164,156,224,164,190,224,164,176,224,165,128,224,164,152,224,164,190,224,164,175,224,164,178,224,164,156,224,164,191,224,164,178,224,165,135,224,164,168,224,165,128,224,164,154,224,165,135,224,164,156,224,164,190,224,164,130,224,164,154,224,164,170,224,164,164,224,165,141,224,164,176,224,164,151,224,165,130,224,164,151,224,164,178,224,164,156,224,164,190,224,164,164,224,165,135,224,164,172,224,164,190,224,164,185,224,164,176,224,164,134,224,164,170,224,164,168,224,165,135,224,164,181,224,164,190,224,164,185,224,164,168,224,164,135,224,164,184,224,164,149,224,164,190,224,164,184,224,165,129,224,164,172,224,164,185,224,164,176,224,164,185,224,164,168,224,165,135,224,164,135,224,164,184,224,164,184,224,165,135,224,164,184,224,164,185,224,164,191,224,164,164,224,164,172,224,164,161,224,164,188,224,165,135,224,164,152,224,164,159,224,164,168,224,164,190,224,164,164,224,164,178,224,164,190,224,164,182,224,164,170,224,164,190,224,164,130,224,164,154,224,164,182,224,165,141,224,164,176,224,165,128,224,164,172,224,164,161,224,164,188,224,165,128,224,164,185,224,165,139,224,164,164,224,165,135,224,164,184,224,164,190,224,164,136,224,164,159,224,164,182,224,164,190,224,164,175,224,164,166,224,164,184,224,164,149,224,164,164,224,165,128,224,164,156,224,164,190,224,164,164,224,165,128,224,164,181,224,164,190,224,164,178,224,164,190,224,164,185,224,164,156,224,164,190,224,164,176,224,164,170,224,164,159,224,164,168,224,164,190,224,164,176,224,164,150,224,164,168,224,165,135,224,164,184,224,164,161,224,164,188,224,164,149,224,164,174,224,164,191,224,164,178,224,164,190,224,164,137,224,164,184,224,164,149,224,165,128,224,164,149,224,165,135,224,164,181,224,164,178,224,164,178,224,164,151,224,164,164,224,164,190,224,164,150,224,164,190,224,164,168,224,164,190,224,164,133,224,164,176,224,165,141,224,164,165,224,164,156,224,164,185,224,164,190,224,164,130,224,164,166,224,165,135,224,164,150,224,164,190,224,164,170,224,164,185,224,164,178,224,165,128,224,164,168,224,164,191,224,164,175,224,164,174,224,164,172,224,164,191,224,164,168,224,164,190,224,164,172,224,165,136,224,164,130,224,164,149,224,164,149,224,164,185,224,165,128,224,164,130,224,164,149,224,164,185,224,164,168,224,164,190,224,164,166,224,165,135,224,164,164,224,164,190,224,164,185,224,164,174,224,164,178,224,165,135,224,164,149,224,164,190,224,164,171,224,165,128,224,164,156,224,164,172,224,164,149,224,164,191,224,164,164,224,165,129,224,164,176,224,164,164,224,164,174,224,164,190,224,164,130,224,164,151,224,164,181,224,164,185,224,165,128,224,164,130,224,164,176,224,165,139,224,164,156,224,164,188,224,164,174,224,164,191,224,164,178,224,165,128,224,164,134,224,164,176,224,165,139,224,164,170,224,164,184,224,165,135,224,164,168,224,164,190,224,164,175,224,164,190,224,164,166,224,164,181,224,164,178,224,165,135,224,164,168,224,165,135,224,164,150,224,164,190,224,164,164,224,164,190,224,164,149,224,164,176,224,165,128,224,164,172,224,164,137,224,164,168,224,164,149,224,164,190,224,164,156,224,164,181,224,164,190,224,164,172,224,164,170,224,165,130,224,164,176,224,164,190,224,164,172,224,164,161,224,164,188,224,164,190,224,164,184,224,165,140,224,164,166,224,164,190,224,164,182,224,165,135,224,164,175,224,164,176,224,164,149,224,164,191,224,164,175,224,165,135,224,164,149,224,164,185,224,164,190,224,164,130,224,164,133,224,164,149,224,164,184,224,164,176,224,164,172,224,164,168,224,164,190,224,164,143,224,164,181,224,164,185,224,164,190,224,164,130,224,164,184,224,165,141,224,164,165,224,164,178,224,164,174,224,164,191,224,164,178,224,165,135,224,164,178,224,165,135,224,164,150,224,164,149,224,164,181,224,164,191,224,164,183,224,164,175,224,164,149,224,165,141,224,164,176,224,164,130,224,164,184,224,164,174,224,165,130,224,164,185,224,164,165,224,164,190,224,164,168,224,164,190,216,170,216,179,216,170,216,183,217,138,216,185,217,133,216,180,216,167,216,177,217,131,216,169,216,168,217,136,216,167,216,179,216,183,216,169,216,167,217,132,216,181,217,129,216,173,216,169,217,133,217,136,216,167,216,182,217,138,216,185,216,167,217,132,216,174,216,167,216,181,216,169,216,167,217,132,217,133,216,178,217,138,216,175,216,167,217,132,216,185,216,167,217,133,216,169,216,167,217,132,217,131,216,167,216,170,216,168,216,167,217,132,216,177,216,175,217,136,216,175,216,168,216,177,217,134,216,167,217,133,216,172,216,167,217,132,216,175,217,136,217,132,216,169,216,167,217,132,216,185,216,167,217,132,217,133,216,167,217,132,217,133,217,136,217,130,216,185,216,167,217,132,216,185,216,177,216,168,217,138,216,167,217,132,216,179,216,177,217,138,216,185,216,167,217,132,216,172,217,136,216,167,217,132,216,167,217,132,216,176,217,135,216,167,216,168,216,167,217,132,216,173,217,138,216,167,216,169,216,167,217,132,216,173,217,130,217,136,217,130,216,167,217,132,217,131,216,177,217,138,217,133,216,167,217,132,216,185,216,177,216,167,217,130,217,133,216,173,217,129,217,136,216,184,216,169,216,167,217,132,216,171,216,167,217,134,217,138,217,133,216,180,216,167,217,135,216,175,216,169,216,167,217,132,217,133,216,177,216,163,216,169,216,167,217,132,217,130,216,177,216,162,217,134,216,167,217,132,216,180,216,168,216,167,216,168,216,167,217,132,216,173,217,136,216,167,216,177,216,167,217,132,216,172,216,175,217,138,216,175,216,167,217,132,216,163,216,179,216,177,216,169,216,167,217,132,216,185,217,132,217,136,217,133,217,133,216,172,217,133,217,136,216,185,216,169,216,167,217,132,216,177,216,173,217,133,217,134,216,167,217,132,217,134,217,130,216,167,216,183,217,129,217,132,216,179,216,183,217,138,217,134,216,167,217,132,217,131,217,136,217,138,216,170,216,167,217,132,216,175,217,134,217,138,216,167,216,168,216,177,217,131,216,167,216,170,217,135,216,167,217,132,216,177,217,138,216,167,216,182,216,170,216,173,217,138,216,167,216,170,217,138,216,168,216,170,217,136,217,130,217,138,216,170,216,167,217,132,216,163,217,136,217,132,217,137,216,167,217,132,216,168,216,177,217,138,216,175,216,167,217,132,217,131,217,132,216,167,217,133,216,167,217,132,216,177,216,167,216,168,216,183,216,167,217,132,216,180,216,174,216,181,217,138,216,179,217,138,216,167,216,177,216,167,216,170,216,167,217,132,216,171,216,167,217,132,216,171,216,167,217,132,216,181,217,132,216,167,216,169,216,167,217,132,216,173,216,175,217,138,216,171,216,167,217,132,216,178,217,136,216,167,216,177,216,167,217,132,216,174,217,132,217,138,216,172,216,167,217,132,216,172,217,133,217,138,216,185],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+143408);allocate([216,167,217,132,216,185,216,167,217,133,217,135,216,167,217,132,216,172,217,133,216,167,217,132,216,167,217,132,216,179,216,167,216,185,216,169,217,133,216,180,216,167,217,135,216,175,217,135,216,167,217,132,216,177,216,166,217,138,216,179,216,167,217,132,216,175,216,174,217,136,217,132,216,167,217,132,217,129,217,134,217,138,216,169,216,167,217,132,217,131,216,170,216,167,216,168,216,167,217,132,216,175,217,136,216,177,217,138,216,167,217,132,216,175,216,177,217,136,216,179,216,167,216,179,216,170,216,186,216,177,217,130,216,170,216,181,216,167,217,133,217,138,217,133,216,167,217,132,216,168,217,134,216,167,216,170,216,167,217,132,216,185,216,184,217,138,217,133,101,110,116,101,114,116,97,105,110,109,101,110,116,117,110,100,101,114,115,116,97,110,100,105,110,103,32,61,32,102,117,110,99,116,105,111,110,40,41,46,106,112,103,34,32,119,105,100,116,104,61,34,99,111,110,102,105,103,117,114,97,116,105,111,110,46,112,110,103,34,32,119,105,100,116,104,61,34,60,98,111,100,121,32,99,108,97,115,115,61,34,77,97,116,104,46,114,97,110,100,111,109,40,41,99,111,110,116,101,109,112,111,114,97,114,121,32,85,110,105,116,101,100,32,83,116,97,116,101,115,99,105,114,99,117,109,115,116,97,110,99,101,115,46,97,112,112,101,110,100,67,104,105,108,100,40,111,114,103,97,110,105,122,97,116,105,111,110,115,60,115,112,97,110,32,99,108,97,115,115,61,34,34,62,60,105,109,103,32,115,114,99,61,34,47,100,105,115,116,105,110,103,117,105,115,104,101,100,116,104,111,117,115,97,110,100,115,32,111,102,32,99,111,109,109,117,110,105,99,97,116,105,111,110,99,108,101,97,114,34,62,60,47,100,105,118,62,105,110,118,101,115,116,105,103,97,116,105,111,110,102,97,118,105,99,111,110,46,105,99,111,34,32,109,97,114,103,105,110,45,114,105,103,104,116,58,98,97,115,101,100,32,111,110,32,116,104,101,32,77,97,115,115,97,99,104,117,115,101,116,116,115,116,97,98,108,101,32,98,111,114,100,101,114,61,105,110,116,101,114,110,97,116,105,111,110,97,108,97,108,115,111,32,107,110,111,119,110,32,97,115,112,114,111,110,117,110,99,105,97,116,105,111,110,98,97,99,107,103,114,111,117,110,100,58,35,102,112,97,100,100,105,110,103,45,108,101,102,116,58,70,111,114,32,101,120,97,109,112,108,101,44,32,109,105,115,99,101,108,108,97,110,101,111,117,115,38,108,116,59,47,109,97,116,104,38,103,116,59,112,115,121,99,104,111,108,111,103,105,99,97,108,105,110,32,112,97,114,116,105,99,117,108,97,114,101,97,114,99,104,34,32,116,121,112,101,61,34,102,111,114,109,32,109,101,116,104,111,100,61,34,97,115,32,111,112,112,111,115,101,100,32,116,111,83,117,112,114,101,109,101,32,67,111,117,114,116,111,99,99,97,115,105,111,110,97,108,108,121,32,65,100,100,105,116,105,111,110,97,108,108,121,44,78,111,114,116,104,32,65,109,101,114,105,99,97,112,120,59,98,97,99,107,103,114,111,117,110,100,111,112,112,111,114,116,117,110,105,116,105,101,115,69,110,116,101,114,116,97,105,110,109,101,110,116,46,116,111,76,111,119,101,114,67,97,115,101,40,109,97,110,117,102,97,99,116,117,114,105,110,103,112,114,111,102,101,115,115,105,111,110,97,108,32,99,111,109,98,105,110,101,100,32,119,105,116,104,70,111,114,32,105,110,115,116,97,110,99,101,44,99,111,110,115,105,115,116,105,110,103,32,111,102,34,32,109,97,120,108,101,110,103,116,104,61,34,114,101,116,117,114,110,32,102,97,108,115,101,59,99,111,110,115,99,105,111,117,115,110,101,115,115,77,101,100,105,116,101,114,114,97,110,101,97,110,101,120,116,114,97,111,114,100,105,110,97,114,121,97,115,115,97,115,115,105,110,97,116,105,111,110,115,117,98,115,101,113,117,101,110,116,108,121,32,98,117,116,116,111,110,32,116,121,112,101,61,34,116,104,101,32,110,117,109,98,101,114,32,111,102,116,104,101,32,111,114,105,103,105,110,97,108,32,99,111,109,112,114,101,104,101,110,115,105,118,101,114,101,102,101,114,115,32,116,111,32,116,104,101,60,47,117,108,62,10,60,47,100,105,118,62,10,112,104,105,108,111,115,111,112,104,105,99,97,108,108,111,99,97,116,105,111,110,46,104,114,101,102,119,97,115,32,112,117,98,108,105,115,104,101,100,83,97,110,32,70,114,97,110,99,105,115,99,111,40,102,117,110,99,116,105,111,110,40,41,123,10,60,100,105,118,32,105,100,61,34,109,97,105,110,115,111,112,104,105,115,116,105,99,97,116,101,100,109,97,116,104,101,109,97,116,105,99,97,108,32,47,104,101,97,100,62,13,10,60,98,111,100,121,115,117,103,103,101,115,116,115,32,116,104,97,116,100,111,99,117,109,101,110,116,97,116,105,111,110,99,111,110,99,101,110,116,114,97,116,105,111,110,114,101,108,97,116,105,111,110,115,104,105,112,115,109,97,121,32,104,97,118,101,32,98,101,101,110,40,102,111,114,32,101,120,97,109,112,108,101,44,84,104,105,115,32,97,114,116,105,99,108,101,32,105,110,32,115,111,109,101,32,99,97,115,101,115,112,97,114,116,115,32,111,102,32,116,104,101,32,100,101,102,105,110,105,116,105,111,110,32,111,102,71,114,101,97,116,32,66,114,105,116,97,105,110,32,99,101,108,108,112,97,100,100,105,110,103,61,101,113,117,105,118,97,108,101,110,116,32,116,111,112,108,97,99,101,104,111,108,100,101,114,61,34,59,32,102,111,110,116,45,115,105,122,101,58,32,106,117,115,116,105,102,105,99,97,116,105,111,110,98,101,108,105,101,118,101,100,32,116,104,97,116,115,117,102,102,101,114,101,100,32,102,114,111,109,97,116,116,101,109,112,116,101,100,32,116,111,32,108,101,97,100,101,114,32,111,102,32,116,104,101,99,114,105,112,116,34,32,115,114,99,61,34,47,40,102,117,110,99,116,105,111,110,40,41,32,123,97,114,101,32,97,118,97,105,108,97,98,108,101,10,9,60,108,105,110,107,32,114,101,108,61,34,32,115,114,99,61,39,104,116,116,112,58,47,47,105,110,116,101,114,101,115,116,101,100,32,105,110,99,111,110,118,101,110,116,105,111,110,97,108,32,34,32,97,108,116,61,34,34,32,47,62,60,47,97,114,101,32,103,101,110,101,114,97,108,108,121,104,97,115,32,97,108,115,111,32,98,101,101,110,109,111,115,116,32,112,111,112,117,108,97,114,32,99,111,114,114,101,115,112,111,110,100,105,110,103,99,114,101,100,105,116,101,100,32,119,105,116,104,116,121,108,101,61,34,98,111,114,100,101,114,58,60,47,97,62,60,47,115,112,97,110,62,60,47,46,103,105,102,34,32,119,105,100,116,104,61,34,60,105,102,114,97,109,101,32,115,114,99,61,34,116,97,98,108,101,32,99,108,97,115,115,61,34,105,110,108,105,110,101,45,98,108,111,99,107,59,97,99,99,111,114,100,105,110,103,32,116,111,32,116,111,103,101,116,104,101,114,32,119,105,116,104,97,112,112,114,111,120,105,109,97,116,101,108,121,112,97,114,108,105,97,109,101,110,116,97,114,121,109,111,114,101,32,97,110,100,32,109,111,114,101,100,105,115,112,108,97,121,58,110,111,110,101,59,116,114,97,100,105,116,105,111,110,97,108,108,121,112,114,101,100,111,109,105,110,97,110,116,108,121,38,110,98,115,112,59,124,38,110,98,115,112,59,38,110,98,115,112,59,60,47,115,112,97,110,62,32,99,101,108,108,115,112,97,99,105,110,103,61,60,105,110,112,117,116,32,110,97,109,101,61,34,111,114,34,32,99,111,110,116,101,110,116,61,34,99,111,110,116,114,111,118,101,114,115,105,97,108,112,114,111,112,101,114,116,121,61,34,111,103,58,47,120,45,115,104,111,99,107,119,97,118,101,45,100,101,109,111,110,115,116,114,97,116,105,111,110,115,117,114,114,111,117,110,100,101,100,32,98,121,78,101,118,101,114,116,104,101,108,101,115,115,44,119,97,115,32,116,104,101,32,102,105,114,115,116,99,111,110,115,105,100,101,114,97,98,108,101,32,65,108,116,104,111,117,103,104,32,116,104,101,32,99,111,108,108,97,98,111,114,97,116,105,111,110,115,104,111,117,108,100,32,110,111,116,32,98,101,112,114,111,112,111,114,116,105,111,110,32,111,102,60,115,112,97,110,32,115,116,121,108,101,61,34,107,110,111,119,110,32,97,115,32,116,104,101,32,115,104,111,114,116,108,121,32,97,102,116,101,114,102,111,114,32,105,110,115,116,97,110,99,101,44,100,101,115,99,114,105,98,101,100,32,97,115,32,47,104,101,97,100,62,10,60,98,111,100,121,32,115,116,97,114,116,105,110,103,32,119,105,116,104,105,110,99,114,101,97,115,105,110,103,108,121,32,116,104,101,32,102,97,99,116,32,116,104,97,116,100,105,115,99,117,115,115,105,111,110,32,111,102,109,105,100,100,108,101,32,111,102,32,116,104,101,97,110,32,105,110,100,105,118,105,100,117,97,108,100,105,102,102,105,99,117,108,116,32,116,111,32,112,111,105,110,116,32,111,102,32,118,105,101,119,104,111,109,111,115,101,120,117,97,108,105,116,121,97,99,99,101,112,116,97,110,99,101,32,111,102,60,47,115,112,97,110,62,60,47,100,105,118,62,109,97,110,117,102,97,99,116,117,114,101,114,115,111,114,105,103,105,110,32,111,102,32,116,104,101,99,111,109,109,111,110,108,121,32,117,115,101,100,105,109,112,111,114,116,97,110,99,101,32,111,102,100,101,110,111,109,105,110,97,116,105,111,110,115,98,97,99,107,103,114,111,117,110,100,58,32,35,108,101,110,103,116,104,32,111,102,32,116,104,101,100,101,116,101,114,109,105,110,97,116,105,111,110,97,32,115,105,103,110,105,102,105,99,97,110,116,34,32,98,111,114,100,101,114,61,34,48,34,62,114,101,118,111,108,117,116,105,111,110,97,114,121,112,114,105,110,99,105,112,108,101,115,32,111,102,105,115,32,99,111,110,115,105,100,101,114,101,100,119,97,115,32,100,101,118,101,108,111,112,101,100,73,110,100,111,45,69,117,114,111,112,101,97,110,118,117,108,110,101,114,97,98,108,101,32,116,111,112,114,111,112,111,110,101,110,116,115,32,111,102,97,114,101,32,115,111,109,101,116,105,109,101,115,99,108,111,115,101,114,32,116,111,32,116,104,101,78,101,119,32,89,111,114,107,32,67,105,116,121,32,110,97,109,101,61,34,115,101,97,114,99,104,97,116,116,114,105,98,117,116,101,100,32,116,111,99,111,117,114,115,101,32,111,102,32,116,104,101,109,97,116,104,101,109,97,116,105,99,105,97,110,98,121,32,116,104,101,32,101,110,100,32,111,102,97,116,32,116,104,101,32,101,110,100,32,111,102,34,32,98,111,114,100,101,114,61,34,48,34,32,116,101,99,104,110,111,108,111,103,105,99,97,108,46,114,101,109,111,118,101,67,108,97,115,115,40,98,114,97,110,99,104,32,111,102,32,116,104,101,101,118,105,100,101,110,99,101,32,116,104,97,116,33,91,101,110,100,105,102,93,45,45,62,13,10,73,110,115,116,105,116,117,116,101,32,111,102,32,105,110,116,111,32,97,32,115,105,110,103,108,101,114,101,115,112,101,99,116,105,118,101,108,121,46,97,110,100,32,116,104,101,114,101,102,111,114,101,112,114,111,112,101,114,116,105,101,115,32,111,102,105,115,32,108,111,99,97,116,101,100,32,105,110,115,111,109,101,32,111,102,32,119,104,105,99,104,84,104,101,114,101,32,105,115,32,97,108,115,111,99,111,110,116,105,110,117,101,100,32,116,111,32,97,112,112,101,97,114,97,110,99,101,32,111,102,32,38,97,109,112,59,110,100,97,115,104,59,32,100,101,115,99,114,105,98,101,115,32,116,104,101,99,111,110,115,105,100,101,114,97,116,105,111,110,97,117,116,104,111,114,32,111,102,32,116,104,101,105,110,100,101,112,101,110,100,101,110,116,108,121,101,113,117,105,112,112,101,100,32,119,105,116,104,100,111,101,115,32,110,111,116,32,104,97,118,101,60,47,97,62,60,97,32,104,114,101,102,61,34,99,111,110,102,117,115,101,100,32,119,105,116,104,60,108,105,110,107,32,104,114,101,102,61,34,47,97,116,32,116,104,101,32,97,103,101,32,111,102,97,112,112,101,97,114,32,105,110,32,116,104,101,84,104,101,115,101,32,105,110,99,108,117,100,101,114,101,103,97,114,100,108,101,115,115,32,111,102,99,111,117,108,100,32,98,101,32,117,115,101,100,32,115,116,121,108,101,61,38,113,117,111,116,59,115,101,118,101,114,97,108,32,116,105,109,101,115,114,101,112,114,101,115,101,110,116,32,116,104,101,98,111,100,121,62,10,60,47,104,116,109,108,62,116,104,111,117,103,104,116,32,116,111,32,98,101,112,111,112,117,108,97,116,105,111,110,32,111,102,112,111,115,115,105,98,105,108,105,116,105,101,115,112,101,114,99,101,110,116,97,103,101,32,111,102,97,99,99,101,115,115,32,116,111,32,116,104,101,97,110,32,97,116,116,101,109,112,116,32,116,111,112,114,111,100,117,99,116,105,111,110,32,111,102,106,113,117,101,114,121,47,106,113,117,101,114,121,116,119,111,32,100,105,102,102,101,114,101,110,116,98,101,108,111,110,103,32,116,111,32,116,104,101,101,115,116,97,98,108,105,115,104,109,101,110,116,114,101,112,108,97,99,105,110,103,32,116,104,101,100,101,115,99,114,105,112,116,105,111,110,34,32,100,101,116,101,114,109,105,110,101,32,116,104,101,97,118,97,105,108,97,98,108,101,32,102,111,114,65,99,99,111,114,100,105,110,103,32,116,111,32,119,105,100,101,32,114,97,110,103,101,32,111,102,9,60,100,105,118,32,99,108,97,115,115,61,34,109,111,114,101,32,99,111,109,109,111,110,108,121,111,114,103,97,110,105,115,97,116,105,111,110,115,102,117,110,99,116,105,111,110,97,108,105,116,121,119,97,115,32,99,111,109,112,108,101,116,101,100,32,38,97,109,112,59,109,100,97,115,104,59,32,112,97,114,116,105,99,105,112,97,116,105,111,110,116,104,101,32,99,104,97,114,97,99,116,101,114,97,110,32,97,100,100,105,116,105,111,110,97,108,97,112,112,101,97,114,115,32,116,111,32,98,101,102,97,99,116,32,116,104,97,116,32,116,104,101,97,110,32,101,120,97,109,112,108,101,32,111,102,115,105,103,110,105,102,105,99,97,110,116,108,121,111,110,109,111,117,115,101,111,118,101,114,61,34,98,101,99,97,117,115,101,32,116,104,101,121,32,97,115,121,110,99,32,61,32,116,114,117,101,59,112,114,111,98,108,101,109,115,32,119,105,116,104,115,101,101,109,115,32,116,111,32,104,97,118,101,116,104,101,32,114,101,115,117,108,116,32,111,102,32,115,114,99,61,34,104,116,116,112,58,47,47,102,97,109,105,108,105,97,114,32,119,105,116,104,112,111,115,115,101,115,115,105,111,110,32,111,102,102,117,110,99,116,105,111,110,32,40,41,32,123,116,111,111,107,32,112,108,97,99,101,32,105,110,97,110,100,32,115,111,109,101,116,105,109,101,115,115,117,98,115,116,97,110,116,105,97,108,108,121,60,115,112,97,110,62,60,47,115,112,97,110,62,105,115,32,111,102,116,101,110,32,117,115,101,100,105,110,32,97,110,32,97,116,116,101,109,112,116,103,114,101,97,116,32,100,101,97,108,32,111,102,69,110,118,105,114,111,110,109,101,110,116,97,108,115,117,99,99,101,115,115,102,117,108,108,121,32,118,105,114,116,117,97,108,108,121,32,97,108,108,50,48,116,104,32,99,101,110,116,117,114,121,44,112,114,111,102,101,115,115,105,111,110,97,108,115,110,101,99,101,115,115,97,114,121,32,116,111,32,100,101,116,101,114,109,105,110,101,100,32,98,121,99,111,109,112,97,116,105,98,105,108,105,116,121,98,101,99,97,117,115,101,32,105,116,32,105,115,68,105,99,116,105,111,110,97,114,121,32,111,102,109,111,100,105,102,105,99,97,116,105,111,110,115,84,104,101,32,102,111,108,108,111,119,105,110,103,109,97,121,32,114,101,102,101,114,32,116,111,58,67,111,110,115,101,113,117,101,110,116,108,121,44,73,110,116,101,114,110,97,116,105,111,110,97,108,97,108,116,104,111,117,103,104,32,115,111,109,101,116,104,97,116,32,119,111,117,108,100,32,98,101,119,111,114,108,100,39,115,32,102,105,114,115,116,99,108,97,115,115,105,102,105,101,100,32,97,115,98,111,116,116,111,109,32,111,102,32,116,104,101,40,112,97,114,116,105,99,117,108,97,114,108,121,97,108,105,103,110,61,34,108,101,102,116,34,32,109,111,115,116,32,99,111,109,109,111,110,108,121,98,97,115,105,115,32,102,111,114,32,116,104,101,102,111,117,110,100,97,116,105,111,110,32,111,102,99,111,110,116,114,105,98,117,116,105,111,110,115,112,111,112,117,108,97,114,105,116,121,32,111,102,99,101,110,116,101,114,32,111,102,32,116,104,101,116,111,32,114,101,100,117,99,101,32,116,104,101,106,117,114,105,115,100,105,99,116,105,111,110,115,97,112,112,114,111,120,105,109,97,116,105,111,110,32,111,110,109,111,117,115,101,111,117,116,61,34,78,101,119,32,84,101,115,116,97,109,101,110,116,99,111,108,108,101,99,116,105,111,110,32,111,102,60,47,115,112,97,110,62,60,47,97,62,60,47,105,110,32,116,104,101,32,85,110,105,116,101,100,102,105,108,109,32,100,105,114,101,99,116,111,114,45,115,116,114,105,99,116,46,100,116,100,34,62,104,97,115,32,98,101,101,110,32,117,115,101,100,114,101,116,117,114,110,32,116,111,32,116,104,101,97,108,116,104,111,117,103,104,32,116,104,105,115,99,104,97,110,103,101,32,105,110,32,116,104,101,115,101,118,101,114,97,108,32,111,116,104,101,114,98,117,116,32,116,104,101,114,101,32,97,114,101,117,110,112,114,101,99,101,100,101,110,116,101,100,105,115,32,115,105,109,105,108,97,114,32,116,111,101,115,112,101,99,105,97,108,108,121,32,105,110,119,101,105,103,104,116,58,32,98,111,108,100,59,105,115,32,99,97,108,108,101,100,32,116,104,101,99,111,109,112,117,116,97,116,105,111,110,97,108,105,110,100,105,99,97,116,101,32,116,104,97,116,114,101,115,116,114,105,99,116,101,100,32,116,111,9,60,109,101,116,97,32,110,97,109,101,61,34,97,114,101,32,116,121,112,105,99,97,108,108,121,99,111,110,102,108,105,99,116,32,119,105,116,104,72,111,119,101,118,101,114,44,32,116,104,101,32,65,110,32,101,120,97,109,112,108,101,32,111,102,99,111,109,112,97,114,101,100,32,119,105,116,104,113,117,97,110,116,105,116,105,101,115,32,111,102,114,97,116,104,101,114,32,116,104,97,110,32,97,99,111,110,115,116,101,108,108,97,116,105,111,110,110,101,99,101,115,115,97,114,121,32,102,111,114,114,101,112,111,114,116,101,100,32,116,104,97,116,115,112,101,99,105,102,105,99,97,116,105,111,110,112,111,108,105,116,105,99,97,108,32,97,110,100,38,110,98,115,112,59,38,110,98,115,112,59,60,114,101,102,101,114,101,110,99,101,115,32,116,111,116,104,101,32,115,97,109,101,32,121,101,97,114,71,111,118,101,114,110,109,101,110,116,32,111,102,103,101,110,101,114,97,116,105,111,110,32,111,102,104,97,118,101,32,110,111,116,32,98,101,101,110,115,101,118,101,114,97,108,32,121,101,97,114,115,99,111,109,109,105,116,109,101,110,116,32,116,111,9,9,60,117,108,32,99,108,97,115,115,61,34,118,105,115,117,97,108,105,122,97,116,105,111,110,49,57,116,104,32,99,101,110,116,117,114,121,44,112,114,97,99,116,105,116,105,111,110,101,114,115,116,104,97,116,32,104,101,32,119,111,117,108,100,97,110,100,32,99,111,110,116,105,110,117,101,100,111,99,99,117,112,97,116,105,111,110,32,111,102,105,115,32,100,101,102,105,110,101,100,32,97,115,99,101,110,116,114,101,32,111,102,32,116,104,101,116,104,101,32,97,109,111,117,110,116,32,111,102,62,60,100,105,118,32,115,116,121,108,101,61,34,101,113,117,105,118,97,108,101,110,116,32,111,102,100,105,102,102,101,114,101,110,116,105,97,116,101,98,114,111,117,103,104,116,32,97,98,111,117,116,109,97,114,103,105,110,45,108,101,102,116,58,32,97,117,116,111,109,97,116,105,99,97,108,108,121,116,104,111,117,103,104,116,32,111,102,32,97,115,83,111,109,101,32,111,102,32,116,104,101,115,101,10,60,100,105,118,32,99,108,97,115,115,61,34,105,110,112,117,116,32,99,108,97,115,115,61,34,114,101,112,108,97,99,101,100,32,119,105,116,104,105,115,32,111,110,101,32,111,102,32,116,104,101,101,100,117,99,97,116,105,111,110,32,97,110,100,105,110,102,108,117,101,110,99,101,100,32,98,121,114,101,112,117,116,97,116,105,111,110,32,97,115,10,60,109,101,116,97,32,110,97,109,101,61,34,97,99,99,111,109,109,111,100,97,116,105,111,110,60,47,100,105,118,62,10,60,47,100,105,118,62,108,97,114,103,101,32,112,97,114,116,32,111,102,73,110,115,116,105,116,117,116,101,32,102,111,114,116,104,101,32,115,111,45,99,97,108,108,101,100,32,97,103,97,105,110,115,116,32,116,104,101,32,73,110,32,116,104,105,115,32,99,97,115,101,44,119,97,115,32,97,112,112,111,105,110,116,101,100,99,108,97,105,109,101,100,32,116,111,32,98,101,72,111,119,101,118,101,114,44,32,116,104,105,115,68,101,112,97,114,116,109,101,110,116,32,111,102,116,104,101,32,114,101,109,97,105,110,105,110,103,101,102,102,101,99,116,32,111,110,32,116,104,101,112,97,114,116,105,99,117,108,97,114,108,121,32,100,101,97,108,32,119,105,116,104,32,116,104,101,10,60,100,105,118,32,115,116,121,108,101,61,34,97,108,109,111,115,116,32,97,108,119,97,121,115,97,114,101,32,99,117,114,114,101,110,116,108,121,101,120,112,114,101,115,115,105,111,110,32,111,102,112,104,105,108,111,115,111,112,104,121,32,111,102,102,111,114,32,109,111,114,101,32,116,104,97,110,99,105,118,105,108,105,122,97,116,105,111,110,115,111,110,32,116,104,101,32,105,115,108,97,110,100,115,101,108,101,99,116,101,100,73,110,100,101,120,99,97,110,32,114,101,115,117,108,116,32,105,110,34,32,118,97,108,117,101,61,34,34,32,47,62,116,104,101,32,115,116,114,117,99,116,117,114,101,32,47,62,60,47,97,62,60,47,100,105,118,62,77,97,110,121,32,111,102,32,116,104,101,115,101,99,97,117,115,101,100,32,98,121,32,116,104,101,111,102,32,116,104,101,32,85,110,105,116,101,100,115,112,97,110,32,99,108,97,115,115,61,34,109,99,97,110,32,98,101,32,116,114,97,99,101,100,105,115,32,114,101,108,97,116,101,100,32,116,111,98,101,99,97,109,101,32,111,110,101,32,111,102,105,115,32,102,114,101,113,117,101,110,116,108,121,108,105,118,105,110,103,32,105,110,32,116,104,101,116,104,101,111,114,101,116,105,99,97,108,108,121,70,111,108,108,111,119,105,110,103,32,116,104,101,82,101,118,111,108,117,116,105,111,110,97,114,121,103,111,118,101,114,110,109,101,110,116,32,105,110,105,115,32,100,101,116,101,114,109,105,110,101,100,116,104,101,32,112,111,108,105,116,105,99,97,108,105,110,116,114,111,100,117,99,101,100,32,105,110,115,117,102,102,105,99,105,101,110,116,32,116,111,100,101,115,99,114,105,112,116,105,111,110,34,62,115,104,111,114,116,32,115,116,111,114,105,101,115,115,101,112,97,114,97,116,105,111,110,32,111,102,97,115,32,116,111,32,119,104,101,116,104,101,114,107,110,111,119,110,32,102,111,114,32,105,116,115,119,97,115,32,105,110,105,116,105,97,108,108,121,100,105,115,112,108,97,121,58,98,108,111,99,107,105,115,32,97,110,32,101,120,97,109,112,108,101,116,104,101,32,112,114,105,110,99,105,112,97,108,99,111,110,115,105,115,116,115,32,111,102,32,97,114,101,99,111,103,110,105,122,101,100,32,97,115,47,98,111,100,121,62,60,47,104,116,109,108,62,97,32,115,117,98,115,116,97,110,116,105,97,108,114,101,99,111,110,115,116,114,117,99,116,101,100,104,101,97,100,32,111,102,32,115,116,97,116,101,114,101,115,105,115,116,97,110,99,101,32,116,111,117,110,100,101,114,103,114,97,100,117,97,116,101,84,104,101,114,101,32,97,114,101,32,116,119,111,103,114,97,118,105,116,97,116,105,111,110,97,108,97,114,101,32,100,101,115,99,114,105,98,101,100,105,110,116,101,110,116,105,111,110,97,108,108,121,115,101,114,118,101,100,32,97,115,32,116,104,101,99,108,97,115,115,61,34,104,101,97,100,101,114,111,112,112,111,115,105,116,105,111,110,32,116,111,102,117,110,100,97,109,101,110,116,97,108,108,121,100,111,109,105,110,97,116,101,100,32,116,104,101,97,110,100,32,116,104,101,32,111,116,104,101,114,97,108,108,105,97,110,99,101,32,119,105,116,104,119,97,115,32,102,111,114,99,101,100,32,116,111,114,101,115,112,101,99,116,105,118,101,108,121,44,97,110,100,32,112,111,108,105,116,105,99,97,108,105,110,32,115,117,112,112,111,114,116,32,111,102,112,101,111,112,108,101,32,105,110,32,116,104,101,50,48,116,104,32,99,101,110,116,117,114,121,46,97,110,100,32,112,117,98,108,105,115,104,101,100,108,111,97,100,67,104,97,114,116,98,101,97,116,116,111,32,117,110,100,101,114,115,116,97,110,100,109,101,109,98,101,114,32,115,116,97,116,101,115,101,110,118,105,114,111,110,109,101,110,116,97,108,102,105,114,115,116,32,104,97,108,102,32,111,102,99,111,117,110,116,114,105,101,115,32,97,110,100,97,114,99,104,105,116,101,99,116,117,114,97,108,98,101,32,99,111,110,115,105,100,101,114,101,100,99,104,97,114,97,99,116,101,114,105,122,101,100,99,108,101,97,114,73,110,116,101,114,118,97,108,97,117,116,104,111,114,105,116,97,116,105,118,101,70,101,100,101,114,97,116,105,111,110,32,111,102,119,97,115,32,115,117,99,99,101,101,100,101,100,97,110,100,32,116,104,101,114,101,32,97,114,101,97,32,99,111,110,115,101,113,117,101,110,99,101,116,104,101,32,80,114,101,115,105,100,101,110,116,97,108,115,111,32,105,110,99,108,117,100,101,100,102,114,101,101,32,115,111,102,116,119,97,114,101,115,117,99,99,101,115,115,105,111,110,32,111,102,100,101,118,101,108,111,112,101,100,32,116,104,101,119,97,115,32,100,101,115,116,114,111,121,101,100,97,119,97,121,32,102,114,111,109,32,116,104,101,59,10,60,47,115,99,114,105,112,116,62,10,60,97,108,116,104,111,117,103,104,32,116,104,101,121,102,111,108,108,111,119,101,100,32,98,121,32,97,109,111,114,101,32,112,111,119,101,114,102,117,108,114,101,115,117,108,116,101,100,32,105,110,32,97,85,110,105,118,101,114,115,105,116,121,32,111,102,72,111,119,101,118,101,114,44,32,109,97,110,121,116,104,101,32,112,114,101,115,105,100,101,110,116,72,111,119,101,118,101,114,44,32,115,111,109,101,105,115,32,116,104,111,117,103,104,116,32,116,111,117,110,116,105,108,32,116,104,101,32,101,110,100,119,97,115,32,97,110,110,111,117,110,99,101,100,97,114,101,32,105,109,112,111,114,116,97,110,116,97,108,115,111,32,105,110,99,108,117,100,101,115,62,60,105,110,112,117,116,32,116,121,112,101,61,116,104,101,32,99,101,110,116,101,114,32,111,102,32,68,79,32,78,79,84,32,65,76,84,69,82,117,115,101,100,32,116,111,32,114,101,102,101,114,116,104,101,109,101,115,47,63,115,111,114,116,61,116,104,97,116,32,104,97,100,32,98,101,101,110,116,104,101,32,98,97,115,105,115,32,102,111,114,104,97,115,32,100,101,118,101,108,111,112,101,100,105,110,32,116,104,101,32,115,117,109,109,101,114,99,111,109,112,97,114,97,116,105,118,101,108,121,100,101,115,99,114,105,98,101,100,32,116,104,101,115,117,99,104,32,97,115,32,116,104,111,115,101,116,104,101,32,114,101,115,117,108,116,105,110,103,105,115,32,105,109,112,111,115,115,105,98,108,101,118,97,114,105,111,117,115,32,111,116,104,101,114,83,111,117,116,104,32,65,102,114,105,99,97,110,104,97,118,101,32,116,104,101,32,115,97,109,101,101,102,102,101,99,116,105,118,101,110,101,115,115,105,110,32,119,104,105,99,104,32,99,97,115,101,59,32,116,101,120,116,45,97,108,105,103,110,58,115,116,114,117,99,116,117,114,101,32,97,110,100,59,32,98,97,99,107,103,114,111,117,110,100,58,114,101,103,97,114,100,105,110,103,32,116,104,101,115,117,112,112,111,114,116,101,100,32,116,104,101,105,115,32,97,108,115,111,32,107,110,111,119,110,115,116,121,108,101,61,34,109,97,114,103,105,110,105,110,99,108,117,100,105,110,103,32,116,104,101,98,97,104,97,115,97,32,77,101,108,97,121,117,110,111,114,115,107,32,98,111,107,109,195,165,108,110,111,114,115,107,32,110,121,110,111,114,115,107,115,108,111,118,101,110,197,161,196,141,105,110,97,105,110,116,101,114,110,97,99,105,111,110,97,108,99,97,108,105,102,105,99,97,99,105,195,179,110,99,111,109,117,110,105,99,97,99,105,195,179,110,99,111,110,115,116,114,117,99,99,105,195,179,110,34,62,60,100,105,118,32,99,108,97,115,115,61,34,100,105,115,97,109,98,105,103,117,97,116,105,111,110,68,111,109,97,105,110,78,97,109,101,39,44,32,39,97,100,109,105,110,105,115,116,114,97,116,105,111,110,115,105,109,117,108,116,97,110,101,111,117,115,108,121,116,114,97,110,115,112,111,114,116,97,116,105,111,110,73,110,116,101,114,110,97,116,105,111,110,97,108,32,109,97,114,103,105,110,45,98,111,116,116,111,109,58,114,101,115,112,111,110,115,105,98,105,108,105,116,121,60,33,91,101,110,100,105,102,93,45,45,62,10,60,47,62,60,109,101,116,97,32,110,97,109,101,61,34,105,109,112,108,101,109,101,110,116,97,116,105,111,110,105,110,102,114,97,115,116,114,117,99,116,117,114,101,114,101,112,114,101,115,101,110,116,97,116,105,111,110,98,111,114,100,101,114,45,98,111,116,116,111,109,58,60,47,104,101,97,100,62,10,60,98,111,100,121,62,61,104,116,116,112,37,51,65,37,50,70,37,50,70,60,102,111,114,109,32,109,101,116,104,111,100,61,34,109,101,116,104,111,100,61,34,112,111,115,116,34,32,47,102,97,118,105,99,111,110,46,105,99,111,34,32,125,41,59,10,60,47,115,99,114,105,112,116,62,10,46,115,101,116,65,116,116,114,105,98,117,116,101,40,65,100,109,105,110,105,115,116,114,97,116,105,111,110,61,32,110,101,119,32,65,114,114,97,121,40,41,59,60,33,91,101,110,100,105,102,93,45,45,62,13,10,100,105,115,112,108,97,121,58,98,108,111,99,107,59,85,110,102,111,114,116,117,110,97,116,101,108,121,44,34,62,38,110,98,115,112,59,60,47,100,105,118,62,47,102,97,118,105,99,111,110,46,105,99,111,34,62,61,39,115,116,121,108,101,115,104,101,101,116,39,32,105,100,101,110,116,105,102,105,99,97,116,105,111,110,44,32,102,111,114,32,101,120,97,109,112,108,101,44,60,108,105,62,60,97,32,104,114,101,102,61,34,47,97,110,32,97,108,116,101,114,110,97,116,105,118,101,97,115,32,97,32,114,101,115,117,108,116,32,111,102,112,116,34,62,60,47,115,99,114,105,112,116,62,10,116,121,112,101,61,34,115,117,98,109,105,116,34,32,10,40,102,117,110,99,116,105,111,110,40,41,32,123,114,101,99,111,109,109,101,110,100,97,116,105,111,110,102,111,114,109,32,97,99,116,105,111,110,61,34,47,116,114,97,110,115,102,111,114,109,97,116,105,111,110,114,101,99,111,110,115,116,114,117,99,116,105,111,110,46,115,116,121,108,101,46,100,105,115,112,108,97,121,32,65,99,99,111,114,100,105,110,103,32,116,111,32,104,105,100,100,101,110,34,32,110,97,109,101,61,34,97,108,111,110,103,32,119,105,116,104,32,116,104,101,100,111,99,117,109,101,110,116,46,98,111,100,121,46,97,112,112,114,111,120,105,109,97,116,101,108,121,32,67,111,109,109,117,110,105,99,97,116,105,111,110,115,112,111,115,116,34,32,97,99,116,105,111,110,61,34,109,101,97,110,105,110,103,32,38,113,117,111,116,59,45,45,60,33,91,101,110,100,105,102,93,45,45,62,80,114,105,109,101,32,77,105,110,105,115,116,101,114,99,104,97,114,97,99,116,101,114,105,115,116,105,99,60,47,97,62,32,60,97,32,99,108,97,115,115,61,116,104,101,32,104,105,115,116,111,114,121,32,111,102,32,111,110,109,111,117,115,101,111,118,101,114,61,34,116,104,101,32,103,111,118,101,114,110,109,101,110,116,104,114,101,102,61,34,104,116,116,112,115,58,47,47,119,97,115,32,111,114,105,103,105,110,97,108,108,121,119,97,115,32,105,110,116,114,111,100,117,99,101,100,99,108,97,115,115,105,102,105,99,97,116,105,111,110,114,101,112,114,101,115,101,110,116,97,116,105,118,101,97,114,101,32,99,111,110,115,105,100,101,114,101,100,60,33,91,101,110,100,105,102,93,45,45,62,10,10,100,101,112,101,110,100,115,32,111,110,32,116,104,101,85,110,105,118,101,114,115,105,116,121,32,111,102,32,105,110,32,99,111,110,116,114,97,115,116,32,116,111,32,112,108,97,99,101,104,111,108,100,101,114,61,34,105,110,32,116,104,101,32,99,97,115,101,32,111,102,105,110,116,101,114,110,97,116,105,111,110,97,108,32,99,111,110,115,116,105,116,117,116,105,111,110,97,108,115,116,121,108,101,61,34,98,111,114,100,101,114,45,58,32,102,117,110,99,116,105,111,110,40,41,32,123,66,101,99,97,117,115,101,32,111,102,32,116,104,101,45,115,116,114,105,99,116,46,100,116,100,34,62,10,60,116,97,98,108,101,32,99,108,97,115,115,61,34,97,99,99,111,109,112,97,110,105,101,100,32,98,121,97,99,99,111,117,110,116,32,111,102,32,116,104,101,60,115,99,114,105,112,116,32,115,114,99,61,34,47,110,97,116,117,114,101,32,111,102,32,116,104,101,32,116,104,101,32,112,101,111,112,108,101,32,105,110,32,105,110,32,97,100,100,105,116,105,111,110,32,116,111,115,41,59,32,106,115,46,105,100,32,61,32,105,100,34,32,119,105,100,116,104,61,34,49,48,48,37,34,114,101,103,97,114,100,105,110,103,32,116,104,101,32,82,111,109,97,110,32,67,97,116,104,111,108,105,99,97,110,32,105,110,100,101,112,101,110,100,101,110,116,102,111,108,108,111,119,105,110,103,32,116,104,101,32,46,103,105,102,34,32,119,105,100,116,104,61,34,49,116,104,101,32,102,111,108,108,111,119,105,110,103,32,100,105,115,99,114,105,109,105,110,97,116,105,111,110,97,114,99,104,97,101,111,108,111,103,105,99,97,108,112,114,105,109,101,32,109,105,110,105,115,116,101,114,46,106,115,34,62,60,47,115,99,114,105,112,116,62,99,111,109,98,105,110,97,116,105,111,110,32,111,102,32,109,97,114,103,105,110,119,105,100,116,104,61,34,99,114,101,97,116,101,69,108,101,109,101,110,116,40,119,46,97,116,116,97,99,104,69,118,101,110,116,40,60,47,97,62,60,47,116,100,62,60,47,116,114,62,115,114,99,61,34,104,116,116,112,115,58,47,47,97,73,110,32,112,97,114,116,105,99,117,108,97,114,44,32,97,108,105,103,110,61,34,108,101,102,116,34,32,67,122,101,99,104,32,82,101,112,117,98,108,105,99,85,110,105,116,101,100,32,75,105,110,103,100,111,109,99,111,114,114,101,115,112,111,110,100,101,110,99,101,99,111,110,99,108,117,100,101,100,32,116,104,97,116,46,104,116,109,108,34,32,116,105,116,108,101,61,34,40,102,117,110,99,116,105,111,110,32,40,41,32,123,99,111,109,101,115,32,102,114,111,109,32,116,104,101,97,112,112,108,105,99,97,116,105,111,110,32,111,102,60,115,112,97,110,32,99,108,97,115,115,61,34,115,98,101,108,105,101,118,101,100,32,116,111,32,98,101,101,109,101,110,116,40,39,115,99,114,105,112,116,39,60,47,97,62,10,60,47,108,105,62,10,60,108,105,118,101,114,121,32,100,105,102,102,101,114,101,110,116,62,60,115,112,97,110,32,99,108,97,115,115,61,34,111,112,116,105,111,110,32,118,97,108,117,101,61,34,40,97,108,115,111,32,107,110,111,119,110,32,97,115,9,60,108,105,62,60,97,32,104,114,101,102,61,34,62,60,105,110,112,117,116,32,110,97,109,101,61,34,115,101,112,97,114,97,116,101,100,32,102,114,111,109,114,101,102,101,114,114,101,100,32,116,111,32,97,115,32,118,97,108,105,103,110,61,34,116,111,112,34,62,102,111,117,110,100,101,114,32,111,102,32,116,104,101,97,116,116,101,109,112,116,105,110,103,32,116,111,32,99,97,114,98,111,110,32,100,105,111,120,105,100,101,10,10,60,100,105,118,32,99,108,97,115,115,61,34,99,108,97,115,115,61,34,115,101,97,114,99,104,45,47,98,111,100,121,62,10,60,47,104,116,109,108,62,111,112,112,111,114,116,117,110,105,116,121,32,116,111,99,111,109,109,117,110,105,99,97,116,105,111,110,115,60,47,104,101,97,100,62,13,10,60,98,111,100,121,32,115,116,121,108,101,61,34,119,105,100,116,104,58,84,105,225,186,191,110,103,32,86,105,225,187,135,116,99,104,97,110,103,101,115,32,105,110,32,116,104,101,98,111,114,100,101,114,45,99,111,108,111,114,58,35,48,34,32,98,111,114,100,101,114,61,34,48,34,32,60,47,115,112,97,110,62,60,47,100,105,118,62,60,119,97,115,32,100,105,115,99,111,118,101,114,101,100,34,32,116,121,112,101,61,34,116,101,120,116,34,32,41,59,10,60,47,115,99,114,105,112,116,62,10,10,68,101,112,97,114,116,109,101,110,116,32,111,102,32,101,99,99,108,101,115,105,97,115,116,105,99,97,108,116,104,101,114,101,32,104,97,115,32,98,101,101,110,114,101,115,117,108,116,105,110,103,32,102,114,111,109,60,47,98,111,100,121,62,60,47,104,116,109,108,62,104,97,115,32,110,101,118,101,114,32,98,101,101,110,116,104,101,32,102,105,114,115,116,32,116,105,109,101,105,110,32,114,101,115,112,111,110,115,101,32,116,111,97,117,116,111,109,97,116,105,99,97,108,108,121,32,60,47,100,105,118,62,10,10,60,100,105,118,32,105,119,97,115,32,99,111,110,115,105,100,101,114,101,100,112,101,114,99,101,110,116,32,111,102,32,116,104,101,34,32,47,62,60,47,97,62,60,47,100,105,118,62,99,111,108,108,101,99,116,105,111,110,32,111,102,32,100,101,115,99,101,110,100,101,100,32,102,114,111,109,115,101,99,116,105,111,110,32,111,102,32,116,104,101,97,99,99,101,112,116,45,99,104,97,114,115,101,116,116,111,32,98,101,32,99,111,110,102,117,115,101,100,109,101,109,98,101,114,32,111,102,32,116,104,101,32,112,97,100,100,105,110,103,45,114,105,103,104,116,58,116,114,97,110,115,108,97,116,105,111,110,32,111,102,105,110,116,101,114,112,114,101,116,97,116,105,111,110,32,104,114,101,102,61,39,104,116,116,112,58,47,47,119,104,101,116,104,101,114,32,111,114,32,110,111,116,84,104,101,114,101,32,97,114,101,32,97,108,115,111,116,104,101,114,101,32,97,114,101,32,109,97,110,121,97,32,115,109,97,108,108,32,110,117,109,98,101,114,111,116,104,101,114,32,112,97,114,116,115,32,111,102,105,109,112,111,115,115,105,98,108,101,32,116,111,32,32,99,108,97,115,115,61,34,98,117,116,116,111,110,108,111,99,97,116,101,100,32,105,110,32,116,104,101,46,32,72,111,119,101,118,101,114,44,32,116,104,101,97,110,100,32,101,118,101,110,116,117,97,108,108,121,65,116,32,116,104,101,32,101,110,100,32,111,102,32,98,101,99,97,117,115,101,32,111,102,32,105,116,115,114,101,112,114,101,115,101,110,116,115,32,116,104,101,60,102,111,114,109,32,97,99,116,105,111,110,61,34,32,109,101,116,104,111,100,61,34,112,111,115,116,34,105,116,32,105,115,32,112,111,115,115,105,98,108,101,109,111,114,101,32,108,105,107,101,108,121,32,116,111,97,110,32,105,110,99,114,101,97,115,101,32,105,110,104,97,118,101,32,97,108,115,111,32,98,101,101,110,99,111,114,114,101,115,112,111,110,100,115,32,116,111,97,110,110,111,117,110,99,101,100,32,116,104,97,116,97,108,105,103,110,61,34,114,105,103,104,116,34,62,109,97,110,121,32,99,111,117,110,116,114,105,101,115,102,111,114,32,109,97,110,121,32,121,101,97,114,115,101,97,114,108,105,101,115,116,32,107,110,111,119,110,98,101,99,97,117,115,101,32,105,116,32,119,97,115,112,116,34,62,60,47,115,99,114,105,112,116,62,13,32,118,97,108,105,103,110,61,34,116,111,112,34,32,105,110,104,97,98,105,116,97,110,116,115,32,111,102,102,111,108,108,111,119,105,110,103,32,121,101,97,114,13,10,60,100,105,118,32,99,108,97,115,115,61,34,109,105,108,108,105,111,110,32,112,101,111,112,108,101,99,111,110,116,114,111,118,101,114,115,105,97,108,32,99,111,110,99,101,114,110,105,110,103,32,116,104,101,97,114,103,117,101,32,116,104,97,116,32,116,104,101,103,111,118,101,114,110,109,101,110,116,32,97,110,100,97,32,114,101,102,101,114,101,110,99,101,32,116,111,116,114,97,110,115,102,101,114,114,101,100,32,116,111,100,101,115,99,114,105,98,105,110,103,32,116,104,101,32,115,116,121,108,101,61,34,99,111,108,111,114,58,97,108,116,104,111,117,103,104,32,116,104,101,114,101,98,101,115,116,32,107,110,111,119,110,32,102,111,114,115,117,98,109,105,116,34,32,110,97,109,101,61,34,109,117,108,116,105,112,108,105,99,97,116,105,111,110,109,111,114,101,32,116,104,97,110,32,111,110,101,32,114,101,99,111,103,110,105,116,105,111,110,32,111,102,67,111,117,110,99,105,108,32,111,102,32,116,104,101,101,100,105,116,105,111,110,32,111,102,32,116,104,101,32,32,60,109,101,116,97,32,110,97,109,101,61,34,69,110,116,101,114,116,97,105,110,109,101,110,116,32,97,119,97,121,32,102,114,111,109,32,116,104,101,32,59,109,97,114,103,105,110,45,114,105,103,104,116,58,97,116,32,116,104,101,32,116,105,109,101,32,111,102,105,110,118,101,115,116,105,103,97,116,105,111,110,115,99,111,110,110,101,99,116,101,100,32,119,105,116,104,97,110,100,32,109,97,110,121,32,111,116,104,101,114,97,108,116,104,111,117,103,104,32,105,116,32,105,115,98,101,103,105,110,110,105,110,103,32,119,105,116,104,32,60,115,112,97,110,32,99,108,97,115,115,61,34,100,101,115,99,101,110,100,97,110,116,115,32,111,102,60,115,112,97,110,32,99,108,97,115,115,61,34,105,32,97,108,105,103,110,61,34,114,105,103,104,116,34,60,47,104,101,97,100,62,10,60,98,111,100,121,32,97,115,112,101,99,116,115,32,111,102,32,116,104,101,104,97,115,32,115,105,110,99,101,32,98,101,101,110,69,117,114,111,112,101,97,110,32,85,110,105,111,110,114,101,109,105,110,105,115,99,101,110,116,32,111,102,109,111,114,101,32,100,105,102,102,105,99,117,108,116,86,105,99,101,32,80,114,101,115,105,100,101,110,116,99,111,109,112,111,115,105,116,105,111,110,32,111,102,112,97,115,115,101,100,32,116,104,114,111,117,103,104,109,111,114,101,32,105,109,112,111,114,116,97,110,116,102,111,110,116,45,115,105,122,101,58,49,49,112,120,101,120,112,108,97,110,97,116,105,111,110,32,111,102,116,104,101,32,99,111,110,99,101,112,116,32,111,102,119,114,105,116,116,101,110,32,105,110,32,116,104,101,9,60,115,112,97,110,32,99,108,97,115,115,61,34,105,115,32,111,110,101,32,111,102,32,116,104,101,32,114,101,115,101,109,98,108,97,110,99,101,32,116,111],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+153648);allocate([111,110,32,116,104,101,32,103,114,111,117,110,100,115,119,104,105,99,104,32,99,111,110,116,97,105,110,115,105,110,99,108,117,100,105,110,103,32,116,104,101,32,100,101,102,105,110,101,100,32,98,121,32,116,104,101,112,117,98,108,105,99,97,116,105,111,110,32,111,102,109,101,97,110,115,32,116,104,97,116,32,116,104,101,111,117,116,115,105,100,101,32,111,102,32,116,104,101,115,117,112,112,111,114,116,32,111,102,32,116,104,101,60,105,110,112,117,116,32,99,108,97,115,115,61,34,60,115,112,97,110,32,99,108,97,115,115,61,34,116,40,77,97,116,104,46,114,97,110,100,111,109,40,41,109,111,115,116,32,112,114,111,109,105,110,101,110,116,100,101,115,99,114,105,112,116,105,111,110,32,111,102,67,111,110,115,116,97,110,116,105,110,111,112,108,101,119,101,114,101,32,112,117,98,108,105,115,104,101,100,60,100,105,118,32,99,108,97,115,115,61,34,115,101,97,112,112,101,97,114,115,32,105,110,32,116,104,101,49,34,32,104,101,105,103,104,116,61,34,49,34,32,109,111,115,116,32,105,109,112,111,114,116,97,110,116,119,104,105,99,104,32,105,110,99,108,117,100,101,115,119,104,105,99,104,32,104,97,100,32,98,101,101,110,100,101,115,116,114,117,99,116,105,111,110,32,111,102,116,104,101,32,112,111,112,117,108,97,116,105,111,110,10,9,60,100,105,118,32,99,108,97,115,115,61,34,112,111,115,115,105,98,105,108,105,116,121,32,111,102,115,111,109,101,116,105,109,101,115,32,117,115,101,100,97,112,112,101,97,114,32,116,111,32,104,97,118,101,115,117,99,99,101,115,115,32,111,102,32,116,104,101,105,110,116,101,110,100,101,100,32,116,111,32,98,101,112,114,101,115,101,110,116,32,105,110,32,116,104,101,115,116,121,108,101,61,34,99,108,101,97,114,58,98,13,10,60,47,115,99,114,105,112,116,62,13,10,60,119,97,115,32,102,111,117,110,100,101,100,32,105,110,105,110,116,101,114,118,105,101,119,32,119,105,116,104,95,105,100,34,32,99,111,110,116,101,110,116,61,34,99,97,112,105,116,97,108,32,111,102,32,116,104,101,13,10,60,108,105,110,107,32,114,101,108,61,34,115,114,101,108,101,97,115,101,32,111,102,32,116,104,101,112,111,105,110,116,32,111,117,116,32,116,104,97,116,120,77,76,72,116,116,112,82,101,113,117,101,115,116,97,110,100,32,115,117,98,115,101,113,117,101,110,116,115,101,99,111,110,100,32,108,97,114,103,101,115,116,118,101,114,121,32,105,109,112,111,114,116,97,110,116,115,112,101,99,105,102,105,99,97,116,105,111,110,115,115,117,114,102,97,99,101,32,111,102,32,116,104,101,97,112,112,108,105,101,100,32,116,111,32,116,104,101,102,111,114,101,105,103,110,32,112,111,108,105,99,121,95,115,101,116,68,111,109,97,105,110,78,97,109,101,101,115,116,97,98,108,105,115,104,101,100,32,105,110,105,115,32,98,101,108,105,101,118,101,100,32,116,111,73,110,32,97,100,100,105,116,105,111,110,32,116,111,109,101,97,110,105,110,103,32,111,102,32,116,104,101,105,115,32,110,97,109,101,100,32,97,102,116,101,114,116,111,32,112,114,111,116,101,99,116,32,116,104,101,105,115,32,114,101,112,114,101,115,101,110,116,101,100,68,101,99,108,97,114,97,116,105,111,110,32,111,102,109,111,114,101,32,101,102,102,105,99,105,101,110,116,67,108,97,115,115,105,102,105,99,97,116,105,111,110,111,116,104,101,114,32,102,111,114,109,115,32,111,102,104,101,32,114,101,116,117,114,110,101,100,32,116,111,60,115,112,97,110,32,99,108,97,115,115,61,34,99,112,101,114,102,111,114,109,97,110,99,101,32,111,102,40,102,117,110,99,116,105,111,110,40,41,32,123,13,105,102,32,97,110,100,32,111,110,108,121,32,105,102,114,101,103,105,111,110,115,32,111,102,32,116,104,101,108,101,97,100,105,110,103,32,116,111,32,116,104,101,114,101,108,97,116,105,111,110,115,32,119,105,116,104,85,110,105,116,101,100,32,78,97,116,105,111,110,115,115,116,121,108,101,61,34,104,101,105,103,104,116,58,111,116,104,101,114,32,116,104,97,110,32,116,104,101,121,112,101,34,32,99,111,110,116,101,110,116,61,34,65,115,115,111,99,105,97,116,105,111,110,32,111,102,10,60,47,104,101,97,100,62,10,60,98,111,100,121,108,111,99,97,116,101,100,32,111,110,32,116,104,101,105,115,32,114,101,102,101,114,114,101,100,32,116,111,40,105,110,99,108,117,100,105,110,103,32,116,104,101,99,111,110,99,101,110,116,114,97,116,105,111,110,115,116,104,101,32,105,110,100,105,118,105,100,117,97,108,97,109,111,110,103,32,116,104,101,32,109,111,115,116,116,104,97,110,32,97,110,121,32,111,116,104,101,114,47,62,10,60,108,105,110,107,32,114,101,108,61,34,32,114,101,116,117,114,110,32,102,97,108,115,101,59,116,104,101,32,112,117,114,112,111,115,101,32,111,102,116,104,101,32,97,98,105,108,105,116,121,32,116,111,59,99,111,108,111,114,58,35,102,102,102,125,10,46,10,60,115,112,97,110,32,99,108,97,115,115,61,34,116,104,101,32,115,117,98,106,101,99,116,32,111,102,100,101,102,105,110,105,116,105,111,110,115,32,111,102,62,13,10,60,108,105,110,107,32,114,101,108,61,34,99,108,97,105,109,32,116,104,97,116,32,116,104,101,104,97,118,101,32,100,101,118,101,108,111,112,101,100,60,116,97,98,108,101,32,119,105,100,116,104,61,34,99,101,108,101,98,114,97,116,105,111,110,32,111,102,70,111,108,108,111,119,105,110,103,32,116,104,101,32,116,111,32,100,105,115,116,105,110,103,117,105,115,104,60,115,112,97,110,32,99,108,97,115,115,61,34,98,116,97,107,101,115,32,112,108,97,99,101,32,105,110,117,110,100,101,114,32,116,104,101,32,110,97,109,101,110,111,116,101,100,32,116,104,97,116,32,116,104,101,62,60,33,91,101,110,100,105,102,93,45,45,62,10,115,116,121,108,101,61,34,109,97,114,103,105,110,45,105,110,115,116,101,97,100,32,111,102,32,116,104,101,105,110,116,114,111,100,117,99,101,100,32,116,104,101,116,104,101,32,112,114,111,99,101,115,115,32,111,102,105,110,99,114,101,97,115,105,110,103,32,116,104,101,100,105,102,102,101,114,101,110,99,101,115,32,105,110,101,115,116,105,109,97,116,101,100,32,116,104,97,116,101,115,112,101,99,105,97,108,108,121,32,116,104,101,47,100,105,118,62,60,100,105,118,32,105,100,61,34,119,97,115,32,101,118,101,110,116,117,97,108,108,121,116,104,114,111,117,103,104,111,117,116,32,104,105,115,116,104,101,32,100,105,102,102,101,114,101,110,99,101,115,111,109,101,116,104,105,110,103,32,116,104,97,116,115,112,97,110,62,60,47,115,112,97,110,62,60,47,115,105,103,110,105,102,105,99,97,110,116,108,121,32,62,60,47,115,99,114,105,112,116,62,13,10,13,10,101,110,118,105,114,111,110,109,101,110,116,97,108,32,116,111,32,112,114,101,118,101,110,116,32,116,104,101,104,97,118,101,32,98,101,101,110,32,117,115,101,100,101,115,112,101,99,105,97,108,108,121,32,102,111,114,117,110,100,101,114,115,116,97,110,100,32,116,104,101,105,115,32,101,115,115,101,110,116,105,97,108,108,121,119,101,114,101,32,116,104,101,32,102,105,114,115,116,105,115,32,116,104,101,32,108,97,114,103,101,115,116,104,97,118,101,32,98,101,101,110,32,109,97,100,101,34,32,115,114,99,61,34,104,116,116,112,58,47,47,105,110,116,101,114,112,114,101,116,101,100,32,97,115,115,101,99,111,110,100,32,104,97,108,102,32,111,102,99,114,111,108,108,105,110,103,61,34,110,111,34,32,105,115,32,99,111,109,112,111,115,101,100,32,111,102,73,73,44,32,72,111,108,121,32,82,111,109,97,110,105,115,32,101,120,112,101,99,116,101,100,32,116,111,104,97,118,101,32,116,104,101,105,114,32,111,119,110,100,101,102,105,110,101,100,32,97,115,32,116,104,101,116,114,97,100,105,116,105,111,110,97,108,108,121,32,104,97,118,101,32,100,105,102,102,101,114,101,110,116,97,114,101,32,111,102,116,101,110,32,117,115,101,100,116,111,32,101,110,115,117,114,101,32,116,104,97,116,97,103,114,101,101,109,101,110,116,32,119,105,116,104,99,111,110,116,97,105,110,105,110,103,32,116,104,101,97,114,101,32,102,114,101,113,117,101,110,116,108,121,105,110,102,111,114,109,97,116,105,111,110,32,111,110,101,120,97,109,112,108,101,32,105,115,32,116,104,101,114,101,115,117,108,116,105,110,103,32,105,110,32,97,60,47,97,62,60,47,108,105,62,60,47,117,108,62,32,99,108,97,115,115,61,34,102,111,111,116,101,114,97,110,100,32,101,115,112,101,99,105,97,108,108,121,116,121,112,101,61,34,98,117,116,116,111,110,34,32,60,47,115,112,97,110,62,60,47,115,112,97,110,62,119,104,105,99,104,32,105,110,99,108,117,100,101,100,62,10,60,109,101,116,97,32,110,97,109,101,61,34,99,111,110,115,105,100,101,114,101,100,32,116,104,101,99,97,114,114,105,101,100,32,111,117,116,32,98,121,72,111,119,101,118,101,114,44,32,105,116,32,105,115,98,101,99,97,109,101,32,112,97,114,116,32,111,102,105,110,32,114,101,108,97,116,105,111,110,32,116,111,112,111,112,117,108,97,114,32,105,110,32,116,104,101,116,104,101,32,99,97,112,105,116,97,108,32,111,102,119,97,115,32,111,102,102,105,99,105,97,108,108,121,119,104,105,99,104,32,104,97,115,32,98,101,101,110,116,104,101,32,72,105,115,116,111,114,121,32,111,102,97,108,116,101,114,110,97,116,105,118,101,32,116,111,100,105,102,102,101,114,101,110,116,32,102,114,111,109,116,111,32,115,117,112,112,111,114,116,32,116,104,101,115,117,103,103,101,115,116,101,100,32,116,104,97,116,105,110,32,116,104,101,32,112,114,111,99,101,115,115,32,32,60,100,105,118,32,99,108,97,115,115,61,34,116,104,101,32,102,111,117,110,100,97,116,105,111,110,98,101,99,97,117,115,101,32,111,102,32,104,105,115,99,111,110,99,101,114,110,101,100,32,119,105,116,104,116,104,101,32,117,110,105,118,101,114,115,105,116,121,111,112,112,111,115,101,100,32,116,111,32,116,104,101,116,104,101,32,99,111,110,116,101,120,116,32,111,102,60,115,112,97,110,32,99,108,97,115,115,61,34,112,116,101,120,116,34,32,110,97,109,101,61,34,113,34,9,9,60,100,105,118,32,99,108,97,115,115,61,34,116,104,101,32,115,99,105,101,110,116,105,102,105,99,114,101,112,114,101,115,101,110,116,101,100,32,98,121,109,97,116,104,101,109,97,116,105,99,105,97,110,115,101,108,101,99,116,101,100,32,98,121,32,116,104,101,116,104,97,116,32,104,97,118,101,32,98,101,101,110,62,60,100,105,118,32,99,108,97,115,115,61,34,99,100,105,118,32,105,100,61,34,104,101,97,100,101,114,105,110,32,112,97,114,116,105,99,117,108,97,114,44,99,111,110,118,101,114,116,101,100,32,105,110,116,111,41,59,10,60,47,115,99,114,105,112,116,62,10,60,112,104,105,108,111,115,111,112,104,105,99,97,108,32,115,114,112,115,107,111,104,114,118,97,116,115,107,105,116,105,225,186,191,110,103,32,86,105,225,187,135,116,208,160,209,131,209,129,209,129,208,186,208,184,208,185,209,128,209,131,209,129,209,129,208,186,208,184,208,185,105,110,118,101,115,116,105,103,97,99,105,195,179,110,112,97,114,116,105,99,105,112,97,99,105,195,179,110,208,186,208,190,209,130,208,190,209,128,209,139,208,181,208,190,208,177,208,187,208,176,209,129,209,130,208,184,208,186,208,190,209,130,208,190,209,128,209,139,208,185,209,135,208,181,208,187,208,190,208,178,208,181,208,186,209,129,208,184,209,129,209,130,208,181,208,188,209,139,208,157,208,190,208,178,208,190,209,129,209,130,208,184,208,186,208,190,209,130,208,190,209,128,209,139,209,133,208,190,208,177,208,187,208,176,209,129,209,130,209,140,208,178,209,128,208,181,208,188,208,181,208,189,208,184,208,186,208,190,209,130,208,190,209,128,208,176,209,143,209,129,208,181,208,179,208,190,208,180,208,189,209,143,209,129,208,186,208,176,209,135,208,176,209,130,209,140,208,189,208,190,208,178,208,190,209,129,209,130,208,184,208,163,208,186,209,128,208,176,208,184,208,189,209,139,208,178,208,190,208,191,209,128,208,190,209,129,209,139,208,186,208,190,209,130,208,190,209,128,208,190,208,185,209,129,208,180,208,181,208,187,208,176,209,130,209,140,208,191,208,190,208,188,208,190,209,137,209,140,209,142,209,129,209,128,208,181,208,180,209,129,209,130,208,178,208,190,208,177,209,128,208,176,208,183,208,190,208,188,209,129,209,130,208,190,209,128,208,190,208,189,209,139,209,131,209,135,208,176,209,129,209,130,208,184,208,181,209,130,208,181,209,135,208,181,208,189,208,184,208,181,208,147,208,187,208,176,208,178,208,189,208,176,209,143,208,184,209,129,209,130,208,190,209,128,208,184,208,184,209,129,208,184,209,129,209,130,208,181,208,188,208,176,209,128,208,181,209,136,208,181,208,189,208,184,209,143,208,161,208,186,208,176,209,135,208,176,209,130,209,140,208,191,208,190,209,141,209,130,208,190,208,188,209,131,209,129,208,187,208,181,208,180,209,131,208,181,209,130,209,129,208,186,208,176,208,183,208,176,209,130,209,140,209,130,208,190,208,178,208,176,209,128,208,190,208,178,208,186,208,190,208,189,208,181,209,135,208,189,208,190,209,128,208,181,209,136,208,181,208,189,208,184,208,181,208,186,208,190,209,130,208,190,209,128,208,190,208,181,208,190,209,128,208,179,208,176,208,189,208,190,208,178,208,186,208,190,209,130,208,190,209,128,208,190,208,188,208,160,208,181,208,186,208,187,208,176,208,188,208,176,216,167,217,132,217,133,217,134,216,170,216,175,217,137,217,133,217,134,216,170,216,175,217,138,216,167,216,170,216,167,217,132,217,133,217,136,216,182,217,136,216,185,216,167,217,132,216,168,216,177,216,167,217,133,216,172,216,167,217,132,217,133,217,136,216,167,217,130,216,185,216,167,217,132,216,177,216,179,216,167,216,166,217,132,217,133,216,180,216,167,216,177,217,131,216,167,216,170,216,167,217,132,216,163,216,185,216,182,216,167,216,161,216,167,217,132,216,177,217,138,216,167,216,182,216,169,216,167,217,132,216,170,216,181,217,133,217,138,217,133,216,167,217,132,216,167,216,185,216,182,216,167,216,161,216,167,217,132,217,134,216,170,216,167,216,166,216,172,216,167,217,132,216,163,217,132,216,185,216,167,216,168,216,167,217,132,216,170,216,179,216,172,217,138,217,132,216,167,217,132,216,163,217,130,216,179,216,167,217,133,216,167,217,132,216,182,216,186,216,183,216,167,216,170,216,167,217,132,217,129,217,138,216,175,217,138,217,136,216,167,217,132,216,170,216,177,216,173,217,138,216,168,216,167,217,132,216,172,216,175,217,138,216,175,216,169,216,167,217,132,216,170,216,185,217,132,217,138,217,133,216,167,217,132,216,163,216,174,216,168,216,167,216,177,216,167,217,132,216,167,217,129,217,132,216,167,217,133,216,167,217,132,216,163,217,129,217,132,216,167,217,133,216,167,217,132,216,170,216,167,216,177,217,138,216,174,216,167,217,132,216,170,217,130,217,134,217,138,216,169,216,167,217,132,216,167,217,132,216,185,216,167,216,168,216,167,217,132,216,174,217,136,216,167,216,183,216,177,216,167,217,132,217,133,216,172,216,170,217,133,216,185,216,167,217,132,216,175,217,138,217,131,217,136,216,177,216,167,217,132,216,179,217,138,216,167,216,173,216,169,216,185,216,168,216,175,216,167,217,132,217,132,217,135,216,167,217,132,216,170,216,177,216,168,217,138,216,169,216,167,217,132,216,177,217,136,216,167,216,168,216,183,216,167,217,132,216,163,216,175,216,168,217,138,216,169,216,167,217,132,216,167,216,174,216,168,216,167,216,177,216,167,217,132,217,133,216,170,216,173,216,175,216,169,216,167,217,132,216,167,216,186,216,167,217,134,217,138,99,117,114,115,111,114,58,112,111,105,110,116,101,114,59,60,47,116,105,116,108,101,62,10,60,109,101,116,97,32,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,34,62,60,115,112,97,110,32,99,108,97,115,115,61,34,109,101,109,98,101,114,115,32,111,102,32,116,104,101,32,119,105,110,100,111,119,46,108,111,99,97,116,105,111,110,118,101,114,116,105,99,97,108,45,97,108,105,103,110,58,47,97,62,32,124,32,60,97,32,104,114,101,102,61,34,60,33,100,111,99,116,121,112,101,32,104,116,109,108,62,109,101,100,105,97,61,34,115,99,114,101,101,110,34,32,60,111,112,116,105,111,110,32,118,97,108,117,101,61,34,102,97,118,105,99,111,110,46,105,99,111,34,32,47,62,10,9,9,60,100,105,118,32,99,108,97,115,115,61,34,99,104,97,114,97,99,116,101,114,105,115,116,105,99,115,34,32,109,101,116,104,111,100,61,34,103,101,116,34,32,47,98,111,100,121,62,10,60,47,104,116,109,108,62,10,115,104,111,114,116,99,117,116,32,105,99,111,110,34,32,100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,112,97,100,100,105,110,103,45,98,111,116,116,111,109,58,114,101,112,114,101,115,101,110,116,97,116,105,118,101,115,115,117,98,109,105,116,34,32,118,97,108,117,101,61,34,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,116,104,114,111,117,103,104,111,117,116,32,116,104,101,32,115,99,105,101,110,99,101,32,102,105,99,116,105,111,110,10,32,32,60,100,105,118,32,99,108,97,115,115,61,34,115,117,98,109,105,116,34,32,99,108,97,115,115,61,34,111,110,101,32,111,102,32,116,104,101,32,109,111,115,116,32,118,97,108,105,103,110,61,34,116,111,112,34,62,60,119,97,115,32,101,115,116,97,98,108,105,115,104,101,100,41,59,13,10,60,47,115,99,114,105,112,116,62,13,10,114,101,116,117,114,110,32,102,97,108,115,101,59,34,62,41,46,115,116,121,108,101,46,100,105,115,112,108,97,121,98,101,99,97,117,115,101,32,111,102,32,116,104,101,32,100,111,99,117,109,101,110,116,46,99,111,111,107,105,101,60,102,111,114,109,32,97,99,116,105,111,110,61,34,47,125,98,111,100,121,123,109,97,114,103,105,110,58,48,59,69,110,99,121,99,108,111,112,101,100,105,97,32,111,102,118,101,114,115,105,111,110,32,111,102,32,116,104,101,32,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,110,97,109,101,34,32,99,111,110,116,101,110,116,61,34,60,47,100,105,118,62,10,60,47,100,105,118,62,10,10,97,100,109,105,110,105,115,116,114,97,116,105,118,101,32,60,47,98,111,100,121,62,10,60,47,104,116,109,108,62,104,105,115,116,111,114,121,32,111,102,32,116,104,101,32,34,62,60,105,110,112,117,116,32,116,121,112,101,61,34,112,111,114,116,105,111,110,32,111,102,32,116,104,101,32,97,115,32,112,97,114,116,32,111,102,32,116,104,101,32,38,110,98,115,112,59,60,97,32,104,114,101,102,61,34,111,116,104,101,114,32,99,111,117,110,116,114,105,101,115,34,62,10,60,100,105,118,32,99,108,97,115,115,61,34,60,47,115,112,97,110,62,60,47,115,112,97,110,62,60,73,110,32,111,116,104,101,114,32,119,111,114,100,115,44,100,105,115,112,108,97,121,58,32,98,108,111,99,107,59,99,111,110,116,114,111,108,32,111,102,32,116,104,101,32,105,110,116,114,111,100,117,99,116,105,111,110,32,111,102,47,62,10,60,109,101,116,97,32,110,97,109,101,61,34,97,115,32,119,101,108,108,32,97,115,32,116,104,101,32,105,110,32,114,101,99,101,110,116,32,121,101,97,114,115,13,10,9,60,100,105,118,32,99,108,97,115,115,61,34,60,47,100,105,118,62,10,9,60,47,100,105,118,62,10,105,110,115,112,105,114,101,100,32,98,121,32,116,104,101,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,98,101,99,97,109,101,32,107,110,111,119,110,32,97,115,32,115,116,121,108,101,61,34,109,97,114,103,105,110,58,46,106,115,34,62,60,47,115,99,114,105,112,116,62,60,32,73,110,116,101,114,110,97,116,105,111,110,97,108,32,116,104,101,114,101,32,104,97,118,101,32,98,101,101,110,71,101,114,109,97,110,32,108,97,110,103,117,97,103,101,32,115,116,121,108,101,61,34,99,111,108,111,114,58,35,67,111,109,109,117,110,105,115,116,32,80,97,114,116,121,99,111,110,115,105,115,116,101,110,116,32,119,105,116,104,98,111,114,100,101,114,61,34,48,34,32,99,101,108,108,32,109,97,114,103,105,110,104,101,105,103,104,116,61,34,116,104,101,32,109,97,106,111,114,105,116,121,32,111,102,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,114,101,108,97,116,101,100,32,116,111,32,116,104,101,32,109,97,110,121,32,100,105,102,102,101,114,101,110,116,32,79,114,116,104,111,100,111,120,32,67,104,117,114,99,104,115,105,109,105,108,97,114,32,116,111,32,116,104,101,32,47,62,10,60,108,105,110,107,32,114,101,108,61,34,115,119,97,115,32,111,110,101,32,111,102,32,116,104,101,32,117,110,116,105,108,32,104,105,115,32,100,101,97,116,104,125,41,40,41,59,10,60,47,115,99,114,105,112,116,62,111,116,104,101,114,32,108,97,110,103,117,97,103,101,115,99,111,109,112,97,114,101,100,32,116,111,32,116,104,101,112,111,114,116,105,111,110,115,32,111,102,32,116,104,101,116,104,101,32,78,101,116,104,101,114,108,97,110,100,115,116,104,101,32,109,111,115,116,32,99,111,109,109,111,110,98,97,99,107,103,114,111,117,110,100,58,117,114,108,40,97,114,103,117,101,100,32,116,104,97,116,32,116,104,101,115,99,114,111,108,108,105,110,103,61,34,110,111,34,32,105,110,99,108,117,100,101,100,32,105,110,32,116,104,101,78,111,114,116,104,32,65,109,101,114,105,99,97,110,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,105,110,116,101,114,112,114,101,116,97,116,105,111,110,115,116,104,101,32,116,114,97,100,105,116,105,111,110,97,108,100,101,118,101,108,111,112,109,101,110,116,32,111,102,32,102,114,101,113,117,101,110,116,108,121,32,117,115,101,100,97,32,99,111,108,108,101,99,116,105,111,110,32,111,102,118,101,114,121,32,115,105,109,105,108,97,114,32,116,111,115,117,114,114,111,117,110,100,105,110,103,32,116,104,101,101,120,97,109,112,108,101,32,111,102,32,116,104,105,115,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,119,111,117,108,100,32,104,97,118,101,32,98,101,101,110,105,109,97,103,101,95,99,97,112,116,105,111,110,32,61,97,116,116,97,99,104,101,100,32,116,111,32,116,104,101,115,117,103,103,101,115,116,105,110,103,32,116,104,97,116,105,110,32,116,104,101,32,102,111,114,109,32,111,102,32,105,110,118,111,108,118,101,100,32,105,110,32,116,104,101,105,115,32,100,101,114,105,118,101,100,32,102,114,111,109,110,97,109,101,100,32,97,102,116,101,114,32,116,104,101,73,110,116,114,111,100,117,99,116,105,111,110,32,116,111,114,101,115,116,114,105,99,116,105,111,110,115,32,111,110,32,115,116,121,108,101,61,34,119,105,100,116,104,58,32,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,116,104,101,32,99,114,101,97,116,105,111,110,32,111,102,109,111,115,116,32,105,109,112,111,114,116,97,110,116,32,105,110,102,111,114,109,97,116,105,111,110,32,97,110,100,114,101,115,117,108,116,101,100,32,105,110,32,116,104,101,99,111,108,108,97,112,115,101,32,111,102,32,116,104,101,84,104,105,115,32,109,101,97,110,115,32,116,104,97,116,101,108,101,109,101,110,116,115,32,111,102,32,116,104,101,119,97,115,32,114,101,112,108,97,99,101,100,32,98,121,97,110,97,108,121,115,105,115,32,111,102,32,116,104,101,105,110,115,112,105,114,97,116,105,111,110,32,102,111,114,114,101,103,97,114,100,101,100,32,97,115,32,116,104,101,109,111,115,116,32,115,117,99,99,101,115,115,102,117,108,107,110,111,119,110,32,97,115,32,38,113,117,111,116,59,97,32,99,111,109,112,114,101,104,101,110,115,105,118,101,72,105,115,116,111,114,121,32,111,102,32,116,104,101,32,119,101,114,101,32,99,111,110,115,105,100,101,114,101,100,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,97,114,101,32,114,101,102,101,114,114,101,100,32,116,111,85,110,115,111,117,114,99,101,100,32,105,109,97,103,101,62,10,9,60,100,105,118,32,99,108,97,115,115,61,34,99,111,110,115,105,115,116,115,32,111,102,32,116,104,101,115,116,111,112,80,114,111,112,97,103,97,116,105,111,110,105,110,116,101,114,101,115,116,32,105,110,32,116,104,101,97,118,97,105,108,97,98,105,108,105,116,121,32,111,102,97,112,112,101,97,114,115,32,116,111,32,104,97,118,101,101,108,101,99,116,114,111,109,97,103,110,101,116,105,99,101,110,97,98,108,101,83,101,114,118,105,99,101,115,40,102,117,110,99,116,105,111,110,32,111,102,32,116,104,101,73,116,32,105,115,32,105,109,112,111,114,116,97,110,116,60,47,115,99,114,105,112,116,62,60,47,100,105,118,62,102,117,110,99,116,105,111,110,40,41,123,118,97,114,32,114,101,108,97,116,105,118,101,32,116,111,32,116,104,101,97,115,32,97,32,114,101,115,117,108,116,32,111,102,32,116,104,101,32,112,111,115,105,116,105,111,110,32,111,102,70,111,114,32,101,120,97,109,112,108,101,44,32,105,110,32,109,101,116,104,111,100,61,34,112,111,115,116,34,32,119,97,115,32,102,111,108,108,111,119,101,100,32,98,121,38,97,109,112,59,109,100,97,115,104,59,32,116,104,101,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,106,115,34,62,60,47,115,99,114,105,112,116,62,13,10,117,108,62,60,47,100,105,118,62,60,47,100,105,118,62,97,102,116,101,114,32,116,104,101,32,100,101,97,116,104,119,105,116,104,32,114,101,115,112,101,99,116,32,116,111,115,116,121,108,101,61,34,112,97,100,100,105,110,103,58,105,115,32,112,97,114,116,105,99,117,108,97,114,108,121,100,105,115,112,108,97,121,58,105,110,108,105,110,101,59,32,116,121,112,101,61,34,115,117,98,109,105,116,34,32,105,115,32,100,105,118,105,100,101,100,32,105,110,116,111,228,184,173,230,150,135,32,40,231,174,128,228,189,147,41,114,101,115,112,111,110,115,97,98,105,108,105,100,97,100,97,100,109,105,110,105,115,116,114,97,99,105,195,179,110,105,110,116,101,114,110,97,99,105,111,110,97,108,101,115,99,111,114,114,101,115,112,111,110,100,105,101,110,116,101,224,164,137,224,164,170,224,164,175,224,165,139,224,164,151,224,164,170,224,165,130,224,164,176,224,165,141,224,164,181,224,164,185,224,164,174,224,164,190,224,164,176,224,165,135,224,164,178,224,165,139,224,164,151,224,165,139,224,164,130,224,164,154,224,165,129,224,164,168,224,164,190,224,164,181,224,164,178,224,165,135,224,164,149,224,164,191,224,164,168,224,164,184,224,164,176,224,164,149,224,164,190,224,164,176,224,164,170,224,165,129,224,164,178,224,164,191,224,164,184,224,164,150,224,165,139,224,164,156,224,165,135,224,164,130,224,164,154,224,164,190,224,164,185,224,164,191,224,164,143,224,164,173,224,165,135,224,164,156,224,165,135,224,164,130,224,164,182,224,164,190,224,164,174,224,164,191,224,164,178,224,164,185,224,164,174,224,164,190,224,164,176,224,165,128,224,164,156,224,164,190,224,164,151,224,164,176,224,164,163,224,164,172,224,164,168,224,164,190,224,164,168,224,165,135,224,164,149,224,165,129,224,164,174,224,164,190,224,164,176,224,164,172,224,165,141,224,164,178,224,165,137,224,164,151,224,164,174,224,164,190,224,164,178,224,164,191,224,164,149,224,164,174,224,164,185,224,164,191,224,164,178,224,164,190,224,164,170,224,165,131,224,164,183,224,165,141,224,164,160,224,164,172,224,164,162,224,164,188,224,164,164,224,165,135,224,164,173,224,164,190,224,164,156,224,164,170,224,164,190,224,164,149,224,165,141,224,164,178,224,164,191,224,164,149,224,164,159,224,165,141,224,164,176,224,165,135,224,164,168,224,164,150,224,164,191,224,164,178,224,164,190,224,164,171,224,164,166,224,165,140,224,164,176,224,164,190,224,164,168,224,164,174,224,164,190,224,164,174,224,164,178,224,165,135,224,164,174,224,164,164,224,164,166,224,164,190,224,164,168,224,164,172,224,164,190,224,164,156,224,164,190,224,164,176,224,164,181,224,164,191,224,164,149,224,164,190,224,164,184,224,164,149,224,165,141,224,164,175,224,165,139,224,164,130,224,164,154,224,164,190,224,164,185,224,164,164,224,165,135,224,164,170,224,164,185,224,165,129,224,164,129,224,164,154,224,164,172,224,164,164,224,164,190,224,164,175,224,164,190,224,164,184,224,164,130,224,164,181,224,164,190,224,164,166,224,164,166,224,165,135,224,164,150,224,164,168,224,165,135,224,164,170,224,164,191,224,164,155,224,164,178,224,165,135,224,164,181,224,164,191,224,164,182,224,165,135,224,164,183,224,164,176,224,164,190,224,164,156,224,165,141,224,164,175,224,164,137,224,164,164,224,165,141,224,164,164,224,164,176,224,164,174,224,165,129,224,164,130,224,164,172,224,164,136,224,164,166,224,165,139,224,164,168,224,165,139,224,164,130,224,164,137,224,164,170,224,164,149,224,164,176,224,164,163,224,164,170,224,164,162,224,164,188,224,165,135,224,164,130,224,164,184,224,165,141,224,164,165,224,164,191,224,164,164,224,164,171,224,164,191,224,164,178,224,165,141,224,164,174,224,164,174,224,165,129,224,164,150,224,165,141,224,164,175,224,164,133,224,164,154,224,165,141,224,164,155,224,164,190,224,164,155,224,165,130,224,164,159,224,164,164,224,165,128,224,164,184,224,164,130,224,164,151,224,165,128,224,164,164,224,164,156,224,164,190,224,164,143,224,164,151,224,164,190,224,164,181,224,164,191,224,164,173,224,164,190,224,164,151,224,164,152,224,164,163,224,165,141,224,164,159,224,165,135,224,164,166,224,165,130,224,164,184,224,164,176,224,165,135,224,164,166,224,164,191,224,164,168,224,165,139,224,164,130,224,164,185,224,164,164,224,165,141,224,164,175,224,164,190,224,164,184,224,165,135,224,164,149,224,165,141,224,164,184,224,164,151,224,164,190,224,164,130,224,164,167,224,165,128,224,164,181,224,164,191,224,164,182,224,165,141,224,164,181,224,164,176,224,164,190,224,164,164,224,165,135,224,164,130,224,164,166,224,165,136,224,164,159,224,165,141,224,164,184,224,164,168,224,164,149,224,165,141,224,164,182,224,164,190,224,164,184,224,164,190,224,164,174,224,164,168,224,165,135,224,164,133,224,164,166,224,164,190,224,164,178,224,164,164,224,164,172,224,164,191,224,164,156,224,164,178,224,165,128,224,164,170,224,165,129,224,164,176,224,165,130,224,164,183,224,164,185,224,164,191,224,164,130,224,164,166,224,165,128,224,164,174,224,164,191,224,164,164,224,165,141,224,164,176,224,164,149,224,164,181,224,164,191,224,164,164,224,164,190,224,164,176,224,165,129,224,164,170,224,164,175,224,165,135,224,164,184,224,165,141,224,164,165,224,164,190,224,164,168,224,164,149,224,164,176,224,165,139,224,164,161,224,164,188,224,164,174,224,165,129,224,164,149,224,165,141,224,164,164,224,164,175,224,165,139,224,164,156,224,164,168,224,164,190,224,164,149,224,165,131,224,164,170,224,164,175,224,164,190,224,164,170,224,165,139,224,164,184,224,165,141,224,164,159,224,164,152,224,164,176,224,165,135,224,164,178,224,165,130,224,164,149,224,164,190,224,164,176,224,165,141,224,164,175,224,164,181,224,164,191,224,164,154,224,164,190,224,164,176,224,164,184,224,165,130,224,164,154,224,164,168,224,164,190,224,164,174,224,165,130,224,164,178,224,165,141,224,164,175,224,164,166,224,165,135,224,164,150,224,165,135,224,164,130,224,164,185,224,164,174,224,165,135,224,164,182,224,164,190,224,164,184,224,165,141,224,164,149,224,165,130,224,164,178,224,164,174,224,165,136,224,164,130,224,164,168,224,165,135,224,164,164,224,165,136,224,164,175,224,164,190,224,164,176,224,164,156,224,164,191,224,164,184,224,164,149,224,165,135,114,115,115,43,120,109,108,34,32,116,105,116,108,101,61,34,45,116,121,112,101,34,32,99,111,110,116,101,110,116,61,34,116,105,116,108,101,34,32,99,111,110,116,101,110,116,61,34,97,116,32,116,104,101,32,115,97,109,101,32,116,105,109,101,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,60,34,32,109,101,116,104,111,100,61,34,112,111,115,116,34,32,60,47,115,112,97,110,62,60,47,97,62,60,47,108,105,62,118,101,114,116,105,99,97,108,45,97,108,105,103,110,58,116,47,106,113,117,101,114,121,46,109,105,110,46,106,115,34,62,46,99,108,105,99,107,40,102,117,110,99,116,105,111,110,40,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,125,41,40,41,59,10,60,47,115,99,114,105,112,116,62,10,60,47,115,112,97,110,62,60,97,32,104,114,101,102,61,34,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,41,59,32,114,101,116,117,114,110,32,102,97,108,115,101,59,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,32,115,99,114,111,108,108,105,110,103,61,34,110,111,34,32,98,111,114,100,101,114,45,99,111,108,108,97,112,115,101,58,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,66,97,104,97,115,97,32,73,110,100,111,110,101,115,105,97,69,110,103,108,105,115,104,32,108,97,110,103,117,97,103,101,60,116,101,120,116,32,120,109,108,58,115,112,97,99,101,61,46,103,105,102,34,32,98,111,114,100,101,114,61,34,48,34,60,47,98,111,100,121,62,10,60,47,104,116,109,108,62,10,111,118,101,114,102,108,111,119,58,104,105,100,100,101,110,59,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,114,101,115,112,111,110,115,105,98,108,101,32,102,111,114,32,115,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,47,102,97,118,105,99,111,110,46,105,99,111,34,32,47,62,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,34,32,115,116,121,108,101,61,34,119,105,100,116,104,58,49,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,83,116,97,116,101,32,85,110,105,118,101,114,115,105,116,121,116,101,120,116,45,97,108,105,103,110,58,108,101,102,116,59,10,100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,44,32,105,110,99,108,117,100,105,110,103,32,116,104,101,32,97,114,111,117,110,100,32,116,104,101,32,119,111,114,108,100,41,59,13,10,60,47,115,99,114,105,112,116,62,13,10,60,34,32,115,116,121,108,101,61,34,104,101,105,103,104,116,58,59,111,118,101,114,102,108,111,119,58,104,105,100,100,101,110,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,97,110,32,105,110,116,101,114,110,97,116,105,111,110,97,108,97,32,109,101,109,98,101,114,32,111,102,32,116,104,101,32,111,110,101,32,111,102,32,116,104,101,32,102,105,114,115,116,99,97,110,32,98,101,32,102,111,117,110,100,32,105,110,32,60,47,100,105,118,62,10,9,9,60,47,100,105,118,62,10,100,105,115,112,108,97,121,58,32,110,111,110,101,59,34,62,34,32,47,62,10,60,108,105,110,107,32,114,101,108,61,34,10,32,32,40,102,117,110,99,116,105,111,110,40,41,32,123,116,104,101,32,49,53,116,104,32,99,101,110,116,117,114,121,46,112,114,101,118,101,110,116,68,101,102,97,117,108,116,40,108,97,114,103,101,32,110,117,109,98,101,114,32,111,102,32,66,121,122,97,110,116,105,110,101,32,69,109,112,105,114,101,46,106,112,103,124,116,104,117,109,98,124,108,101,102,116,124,118,97,115,116,32,109,97,106,111,114,105,116,121,32,111,102,109,97,106,111,114,105,116,121,32,111,102,32,116,104,101,32,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,85,110,105,118,101,114,115,105,116,121,32,80,114,101,115,115,100,111,109,105,110,97,116,101,100,32,98,121,32,116,104,101,83,101,99,111,110,100,32,87,111,114,108,100,32,87,97,114,100,105,115,116,114,105,98,117,116,105,111,110,32,111,102,32,115,116,121,108,101,61,34,112,111,115,105,116,105,111,110,58,116,104,101,32,114,101,115,116,32,111,102,32,116,104,101,32,99,104,97,114,97,99,116,101,114,105,122,101,100,32,98,121,32,114,101,108,61,34,110,111,102,111,108,108,111,119,34,62,100,101,114,105,118,101,115,32,102,114,111,109,32,116,104,101,114,97,116,104,101,114,32,116,104,97,110,32,116,104,101,32,97,32,99,111,109,98,105,110,97,116,105,111,110,32,111,102,115,116,121,108,101,61,34,119,105,100,116,104,58,49,48,48,69,110,103,108,105,115,104,45,115,112,101,97,107,105,110,103,99,111,109,112,117,116,101,114,32,115,99,105,101,110,99,101,98,111,114,100,101,114,61,34,48,34,32,97,108,116,61,34,116,104,101,32,101,120,105,115,116,101,110,99,101,32,111,102,68,101,109,111,99,114,97,116,105,99,32,80,97,114,116,121,34,32,115,116,121,108,101,61,34,109,97,114,103,105,110,45,70,111,114,32,116,104,105,115,32,114,101,97,115,111,110,44,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,9,115,66,121,84,97,103,78,97,109,101,40,115,41,91,48,93,106,115,34,62,60,47,115,99,114,105,112,116,62,13,10,60,46,106,115,34,62,60,47,115,99,114,105,112,116,62,13,10,108,105,110,107,32,114,101,108,61,34,105,99,111,110,34,32,39,32,97,108,116,61,39,39,32,99,108,97,115,115,61,39,102,111,114,109,97,116,105,111,110,32,111,102,32,116,104,101,118,101,114,115,105,111,110,115,32,111,102,32,116,104,101,32,60,47,97,62,60,47,100,105,118,62,60,47,100,105,118,62,47,112,97,103,101,62,10,32,32,60,112,97,103,101,62,10,60,100,105,118,32,99,108,97,115,115,61,34,99,111,110,116,98,101,99,97,109,101,32,116,104,101,32,102,105,114,115,116,98,97,104,97,115,97,32,73,110,100,111,110,101,115,105,97,101,110,103,108,105,115,104,32,40,115,105,109,112,108,101,41,206,149,206,187,206,187,206,183,206,189,206,185,206,186,206,172,209,133,209,128,208,178,208,176,209,130,209,129,208,186,208,184,208,186,208,190,208,188,208,191,208,176,208,189,208,184,208,184,209,143,208,178,208,187,209,143,208,181,209,130,209,129,209,143,208,148,208,190,208,177,208,176,208,178,208,184,209,130,209,140,209,135,208,181,208,187,208,190,208,178,208,181,208,186,208,176,209,128,208,176,208,183,208,178,208,184,209,130,208,184,209,143,208,152,208,189,209,130,208,181,209,128,208,189,208,181,209,130,208,158,209,130,208,178,208,181,209,130,208,184,209,130,209,140,208,189,208,176,208,191,209,128,208,184,208,188,208,181,209,128,208,184,208,189,209,130,208,181,209,128,208,189,208,181,209,130,208,186,208,190,209,130,208,190,209,128,208,190,208,179,208,190,209,129,209,130,209,128,208,176,208,189,208,184,209,134,209,139,208,186,208,176,209,135,208,181,209,129,209,130,208,178,208,181,209,131,209,129,208,187,208,190,208,178,208,184,209,143,209,133,208,191,209,128,208,190,208,177,208,187,208,181,208,188,209,139,208,191,208,190,208,187,209,131,209,135,208,184,209,130,209,140,209,143,208,178,208,187,209,143,209,142,209,130,209,129,209,143,208,189,208,176,208,184,208,177,208,190,208,187,208,181,208,181,208,186,208,190,208,188,208,191,208,176,208,189,208,184,209,143,208,178,208,189,208,184,208,188,208,176,208,189,208,184,208,181,209,129,209,128,208,181,208,180,209,129,209,130,208,178,208,176,216,167,217,132,217,133,217,136,216,167,216,182,217,138,216,185,216,167,217,132,216,177,216,166,217,138,216,179,217,138,216,169,216,167,217,132,216,167,217,134,216,170,217,130,216,167,217,132,217,133,216,180,216,167,216,177,217,131,216,167,216,170,217,131,216,167,217,132,216,179,217,138,216,167,216,177,216,167,216,170,216,167,217,132,217,133,217,131,216,170,217,136,216,168,216,169,216,167,217,132,216,179,216,185,217,136,216,175,217,138,216,169,216,167,216,173,216,181,216,167,216,166,217,138,216,167,216,170,216,167,217,132,216,185,216,167,217,132,217,133,217,138,216,169,216,167,217,132,216,181,217,136,216,170,217,138,216,167,216,170,216,167,217,132,216,167,217,134,216,170,216,177,217,134,216,170,216,167,217,132,216,170,216,181,216,167,217,133,217,138,217,133,216,167,217,132,216,165,216,179,217,132,216,167,217,133,217,138,216,167,217,132,217,133,216,180,216,167,216,177,217,131,216,169,216,167,217,132,217,133,216,177,216,166,217,138,216,167,216,170,114,111,98,111,116,115,34,32,99,111,110,116,101,110,116,61,34,60,100,105,118,32,105,100,61,34,102,111,111,116,101,114,34,62,116,104,101,32,85,110,105,116,101,100,32,83,116,97,116,101,115,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,46,106,112,103,124,114,105,103,104,116,124,116,104,117,109,98,124,46,106,115,34,62,60,47,115,99,114,105,112,116,62,13,10,60,108,111,99,97,116,105,111,110,46,112,114,111,116,111,99,111,108,102,114,97,109,101,98,111,114,100,101,114,61,34,48,34,32,115,34,32,47,62,10,60,109,101,116,97,32,110,97,109,101,61,34,60,47,97,62,60,47,100,105,118,62,60,47,100,105,118,62,60,102,111,110,116,45,119,101,105,103,104,116,58,98,111,108,100,59,38,113,117,111,116,59,32,97,110,100,32,38,113,117,111,116,59,100,101,112,101,110,100,105,110,103,32,111,110,32,116,104,101,32,109,97,114,103,105,110,58,48,59,112,97,100,100,105,110,103,58,34,32,114,101,108,61,34,110,111,102,111,108,108,111,119,34,32,80,114,101,115,105,100,101,110,116,32,111,102,32,116,104,101,32,116,119,101,110,116,105,101,116,104,32,99,101,110,116,117,114,121,101,118,105,115,105,111,110,62,10,32,32,60,47,112,97,103,101,73,110,116,101,114,110,101,116,32,69,120,112,108,111,114,101,114,97,46,97,115,121,110,99,32,61,32,116,114,117,101,59,13,10,105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,60,100,105,118,32,105,100,61,34,104,101,97,100,101,114,34,62,34,32,97,99,116,105,111,110,61,34,104,116,116,112,58,47,47,60,97,32,104,114,101,102,61,34,104,116,116,112,115,58,47,47,60,100,105,118,32,105,100,61,34,99,111,110,116,101,110,116,34,60,47,100,105,118,62,13,10,60,47,100,105,118,62,13,10,60,100,101,114,105,118,101,100,32,102,114,111,109,32,116,104,101,32,60,105,109,103,32,115,114,99,61,39,104,116,116,112,58,47,47,97,99,99,111,114,100,105,110,103,32,116,111,32,116,104,101,32,10,60,47,98,111,100,121,62,10,60,47,104,116,109,108,62,10,115,116,121,108,101,61,34,102,111,110,116,45,115,105,122,101,58,115,99,114,105,112,116,32,108,97,110,103,117,97,103,101,61,34,65,114,105,97,108,44,32,72,101,108,118,101,116,105,99,97,44,60,47,97,62,60,115,112,97,110,32,99,108,97,115,115,61,34,60,47,115,99,114,105,112,116,62,60,115,99,114,105,112,116,32,112,111,108,105,116],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+163888);allocate([105,99,97,108,32,112,97,114,116,105,101,115,116,100,62,60,47,116,114,62,60,47,116,97,98,108,101,62,60,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,105,110,116,101,114,112,114,101,116,97,116,105,111,110,32,111,102,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,39,60,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,62,10,98,101,103,105,110,110,105,110,103,32,111,102,32,116,104,101,32,114,101,118,101,97,108,101,100,32,116,104,97,116,32,116,104,101,116,101,108,101,118,105,115,105,111,110,32,115,101,114,105,101,115,34,32,114,101,108,61,34,110,111,102,111,108,108,111,119,34,62,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,99,108,97,105,109,105,110,103,32,116,104,97,116,32,116,104,101,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,109,97,110,105,102,101,115,116,97,116,105,111,110,115,32,111,102,80,114,105,109,101,32,77,105,110,105,115,116,101,114,32,111,102,105,110,102,108,117,101,110,99,101,100,32,98,121,32,116,104,101,99,108,97,115,115,61,34,99,108,101,97,114,102,105,120,34,62,47,100,105,118,62,13,10,60,47,100,105,118,62,13,10,13,10,116,104,114,101,101,45,100,105,109,101,110,115,105,111,110,97,108,67,104,117,114,99,104,32,111,102,32,69,110,103,108,97,110,100,111,102,32,78,111,114,116,104,32,67,97,114,111,108,105,110,97,115,113,117,97,114,101,32,107,105,108,111,109,101,116,114,101,115,46,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,100,105,115,116,105,110,99,116,32,102,114,111,109,32,116,104,101,99,111,109,109,111,110,108,121,32,107,110,111,119,110,32,97,115,80,104,111,110,101,116,105,99,32,65,108,112,104,97,98,101,116,100,101,99,108,97,114,101,100,32,116,104,97,116,32,116,104,101,99,111,110,116,114,111,108,108,101,100,32,98,121,32,116,104,101,66,101,110,106,97,109,105,110,32,70,114,97,110,107,108,105,110,114,111,108,101,45,112,108,97,121,105,110,103,32,103,97,109,101,116,104,101,32,85,110,105,118,101,114,115,105,116,121,32,111,102,105,110,32,87,101,115,116,101,114,110,32,69,117,114,111,112,101,112,101,114,115,111,110,97,108,32,99,111,109,112,117,116,101,114,80,114,111,106,101,99,116,32,71,117,116,101,110,98,101,114,103,114,101,103,97,114,100,108,101,115,115,32,111,102,32,116,104,101,104,97,115,32,98,101,101,110,32,112,114,111,112,111,115,101,100,116,111,103,101,116,104,101,114,32,119,105,116,104,32,116,104,101,62,60,47,108,105,62,60,108,105,32,99,108,97,115,115,61,34,105,110,32,115,111,109,101,32,99,111,117,110,116,114,105,101,115,109,105,110,46,106,115,34,62,60,47,115,99,114,105,112,116,62,111,102,32,116,104,101,32,112,111,112,117,108,97,116,105,111,110,111,102,102,105,99,105,97,108,32,108,97,110,103,117,97,103,101,60,105,109,103,32,115,114,99,61,34,105,109,97,103,101,115,47,105,100,101,110,116,105,102,105,101,100,32,98,121,32,116,104,101,110,97,116,117,114,97,108,32,114,101,115,111,117,114,99,101,115,99,108,97,115,115,105,102,105,99,97,116,105,111,110,32,111,102,99,97,110,32,98,101,32,99,111,110,115,105,100,101,114,101,100,113,117,97,110,116,117,109,32,109,101,99,104,97,110,105,99,115,78,101,118,101,114,116,104,101,108,101,115,115,44,32,116,104,101,109,105,108,108,105,111,110,32,121,101,97,114,115,32,97,103,111,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,13,206,149,206,187,206,187,206,183,206,189,206,185,206,186,206,172,10,116,97,107,101,32,97,100,118,97,110,116,97,103,101,32,111,102,97,110,100,44,32,97,99,99,111,114,100,105,110,103,32,116,111,97,116,116,114,105,98,117,116,101,100,32,116,111,32,116,104,101,77,105,99,114,111,115,111,102,116,32,87,105,110,100,111,119,115,116,104,101,32,102,105,114,115,116,32,99,101,110,116,117,114,121,117,110,100,101,114,32,116,104,101,32,99,111,110,116,114,111,108,100,105,118,32,99,108,97,115,115,61,34,104,101,97,100,101,114,115,104,111,114,116,108,121,32,97,102,116,101,114,32,116,104,101,110,111,116,97,98,108,101,32,101,120,99,101,112,116,105,111,110,116,101,110,115,32,111,102,32,116,104,111,117,115,97,110,100,115,115,101,118,101,114,97,108,32,100,105,102,102,101,114,101,110,116,97,114,111,117,110,100,32,116,104,101,32,119,111,114,108,100,46,114,101,97,99,104,105,110,103,32,109,105,108,105,116,97,114,121,105,115,111,108,97,116,101,100,32,102,114,111,109,32,116,104,101,111,112,112,111,115,105,116,105,111,110,32,116,111,32,116,104,101,116,104,101,32,79,108,100,32,84,101,115,116,97,109,101,110,116,65,102,114,105,99,97,110,32,65,109,101,114,105,99,97,110,115,105,110,115,101,114,116,101,100,32,105,110,116,111,32,116,104,101,115,101,112,97,114,97,116,101,32,102,114,111,109,32,116,104,101,109,101,116,114,111,112,111,108,105,116,97,110,32,97,114,101,97,109,97,107,101,115,32,105,116,32,112,111,115,115,105,98,108,101,97,99,107,110,111,119,108,101,100,103,101,100,32,116,104,97,116,97,114,103,117,97,98,108,121,32,116,104,101,32,109,111,115,116,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,62,10,116,104,101,32,73,110,116,101,114,110,97,116,105,111,110,97,108,65,99,99,111,114,100,105,110,103,32,116,111,32,116,104,101,32,112,101,61,34,116,101,120,116,47,99,115,115,34,32,47,62,10,99,111,105,110,99,105,100,101,32,119,105,116,104,32,116,104,101,116,119,111,45,116,104,105,114,100,115,32,111,102,32,116,104,101,68,117,114,105,110,103,32,116,104,105,115,32,116,105,109,101,44,100,117,114,105,110,103,32,116,104,101,32,112,101,114,105,111,100,97,110,110,111,117,110,99,101,100,32,116,104,97,116,32,104,101,116,104,101,32,105,110,116,101,114,110,97,116,105,111,110,97,108,97,110,100,32,109,111,114,101,32,114,101,99,101,110,116,108,121,98,101,108,105,101,118,101,100,32,116,104,97,116,32,116,104,101,99,111,110,115,99,105,111,117,115,110,101,115,115,32,97,110,100,102,111,114,109,101,114,108,121,32,107,110,111,119,110,32,97,115,115,117,114,114,111,117,110,100,101,100,32,98,121,32,116,104,101,102,105,114,115,116,32,97,112,112,101,97,114,101,100,32,105,110,111,99,99,97,115,105,111,110,97,108,108,121,32,117,115,101,100,112,111,115,105,116,105,111,110,58,97,98,115,111,108,117,116,101,59,34,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,32,112,111,115,105,116,105,111,110,58,114,101,108,97,116,105,118,101,59,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,59,106,97,120,47,108,105,98,115,47,106,113,117,101,114,121,47,49,46,98,97,99,107,103,114,111,117,110,100,45,99,111,108,111,114,58,35,116,121,112,101,61,34,97,112,112,108,105,99,97,116,105,111,110,47,97,110,103,117,97,103,101,34,32,99,111,110,116,101,110,116,61,34,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,80,114,105,118,97,99,121,32,80,111,108,105,99,121,60,47,97,62,101,40,34,37,51,67,115,99,114,105,112,116,32,115,114,99,61,39,34,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,79,110,32,116,104,101,32,111,116,104,101,114,32,104,97,110,100,44,46,106,112,103,124,116,104,117,109,98,124,114,105,103,104,116,124,50,60,47,100,105,118,62,60,100,105,118,32,99,108,97,115,115,61,34,60,100,105,118,32,115,116,121,108,101,61,34,102,108,111,97,116,58,110,105,110,101,116,101,101,110,116,104,32,99,101,110,116,117,114,121,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,13,10,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,115,59,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,102,111,110,116,45,119,101,105,103,104,116,58,32,98,111,108,100,59,32,65,99,99,111,114,100,105,110,103,32,116,111,32,116,104,101,32,100,105,102,102,101,114,101,110,99,101,32,98,101,116,119,101,101,110,34,32,102,114,97,109,101,98,111,114,100,101,114,61,34,48,34,32,34,32,115,116,121,108,101,61,34,112,111,115,105,116,105,111,110,58,108,105,110,107,32,104,114,101,102,61,34,104,116,116,112,58,47,47,104,116,109,108,52,47,108,111,111,115,101,46,100,116,100,34,62,10,100,117,114,105,110,103,32,116,104,105,115,32,112,101,114,105,111,100,60,47,116,100,62,60,47,116,114,62,60,47,116,97,98,108,101,62,99,108,111,115,101,108,121,32,114,101,108,97,116,101,100,32,116,111,102,111,114,32,116,104,101,32,102,105,114,115,116,32,116,105,109,101,59,102,111,110,116,45,119,101,105,103,104,116,58,98,111,108,100,59,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,60,115,112,97,110,32,115,116,121,108,101,61,34,102,111,110,116,45,111,110,114,101,97,100,121,115,116,97,116,101,99,104,97,110,103,101,9,60,100,105,118,32,99,108,97,115,115,61,34,99,108,101,97,114,100,111,99,117,109,101,110,116,46,108,111,99,97,116,105,111,110,46,32,70,111,114,32,101,120,97,109,112,108,101,44,32,116,104,101,32,97,32,119,105,100,101,32,118,97,114,105,101,116,121,32,111,102,32,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,13,10,60,38,110,98,115,112,59,38,110,98,115,112,59,38,110,98,115,112,59,34,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,115,116,121,108,101,61,34,102,108,111,97,116,58,108,101,102,116,59,99,111,110,99,101,114,110,101,100,32,119,105,116,104,32,116,104,101,61,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,105,110,32,112,111,112,117,108,97,114,32,99,117,108,116,117,114,101,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,47,62,105,116,32,105,115,32,112,111,115,115,105,98,108,101,32,116,111,32,72,97,114,118,97,114,100,32,85,110,105,118,101,114,115,105,116,121,116,121,108,101,115,104,101,101,116,34,32,104,114,101,102,61,34,47,116,104,101,32,109,97,105,110,32,99,104,97,114,97,99,116,101,114,79,120,102,111,114,100,32,85,110,105,118,101,114,115,105,116,121,32,32,110,97,109,101,61,34,107,101,121,119,111,114,100,115,34,32,99,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,116,104,101,32,85,110,105,116,101,100,32,75,105,110,103,100,111,109,102,101,100,101,114,97,108,32,103,111,118,101,114,110,109,101,110,116,60,100,105,118,32,115,116,121,108,101,61,34,109,97,114,103,105,110,32,100,101,112,101,110,100,105,110,103,32,111,110,32,116,104,101,32,100,101,115,99,114,105,112,116,105,111,110,32,111,102,32,116,104,101,60,100,105,118,32,99,108,97,115,115,61,34,104,101,97,100,101,114,46,109,105,110,46,106,115,34,62,60,47,115,99,114,105,112,116,62,100,101,115,116,114,117,99,116,105,111,110,32,111,102,32,116,104,101,115,108,105,103,104,116,108,121,32,100,105,102,102,101,114,101,110,116,105,110,32,97,99,99,111,114,100,97,110,99,101,32,119,105,116,104,116,101,108,101,99,111,109,109,117,110,105,99,97,116,105,111,110,115,105,110,100,105,99,97,116,101,115,32,116,104,97,116,32,116,104,101,115,104,111,114,116,108,121,32,116,104,101,114,101,97,102,116,101,114,101,115,112,101,99,105,97,108,108,121,32,105,110,32,116,104,101,32,69,117,114,111,112,101,97,110,32,99,111,117,110,116,114,105,101,115,72,111,119,101,118,101,114,44,32,116,104,101,114,101,32,97,114,101,115,114,99,61,34,104,116,116,112,58,47,47,115,116,97,116,105,99,115,117,103,103,101,115,116,101,100,32,116,104,97,116,32,116,104,101,34,32,115,114,99,61,34,104,116,116,112,58,47,47,119,119,119,46,97,32,108,97,114,103,101,32,110,117,109,98,101,114,32,111,102,32,84,101,108,101,99,111,109,109,117,110,105,99,97,116,105,111,110,115,34,32,114,101,108,61,34,110,111,102,111,108,108,111,119,34,32,116,72,111,108,121,32,82,111,109,97,110,32,69,109,112,101,114,111,114,97,108,109,111,115,116,32,101,120,99,108,117,115,105,118,101,108,121,34,32,98,111,114,100,101,114,61,34,48,34,32,97,108,116,61,34,83,101,99,114,101,116,97,114,121,32,111,102,32,83,116,97,116,101,99,117,108,109,105,110,97,116,105,110,103,32,105,110,32,116,104,101,67,73,65,32,87,111,114,108,100,32,70,97,99,116,98,111,111,107,116,104,101,32,109,111,115,116,32,105,109,112,111,114,116,97,110,116,97,110,110,105,118,101,114,115,97,114,121,32,111,102,32,116,104,101,115,116,121,108,101,61,34,98,97,99,107,103,114,111,117,110,100,45,60,108,105,62,60,101,109,62,60,97,32,104,114,101,102,61,34,47,116,104,101,32,65,116,108,97,110,116,105,99,32,79,99,101,97,110,115,116,114,105,99,116,108,121,32,115,112,101,97,107,105,110,103,44,115,104,111,114,116,108,121,32,98,101,102,111,114,101,32,116,104,101,100,105,102,102,101,114,101,110,116,32,116,121,112,101,115,32,111,102,116,104,101,32,79,116,116,111,109,97,110,32,69,109,112,105,114,101,62,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,65,110,32,73,110,116,114,111,100,117,99,116,105,111,110,32,116,111,99,111,110,115,101,113,117,101,110,99,101,32,111,102,32,116,104,101,100,101,112,97,114,116,117,114,101,32,102,114,111,109,32,116,104,101,67,111,110,102,101,100,101,114,97,116,101,32,83,116,97,116,101,115,105,110,100,105,103,101,110,111,117,115,32,112,101,111,112,108,101,115,80,114,111,99,101,101,100,105,110,103,115,32,111,102,32,116,104,101,105,110,102,111,114,109,97,116,105,111,110,32,111,110,32,116,104,101,116,104,101,111,114,105,101,115,32,104,97,118,101,32,98,101,101,110,105,110,118,111,108,118,101,109,101,110,116,32,105,110,32,116,104,101,100,105,118,105,100,101,100,32,105,110,116,111,32,116,104,114,101,101,97,100,106,97,99,101,110,116,32,99,111,117,110,116,114,105,101,115,105,115,32,114,101,115,112,111,110,115,105,98,108,101,32,102,111,114,100,105,115,115,111,108,117,116,105,111,110,32,111,102,32,116,104,101,99,111,108,108,97,98,111,114,97,116,105,111,110,32,119,105,116,104,119,105,100,101,108,121,32,114,101,103,97,114,100,101,100,32,97,115,104,105,115,32,99,111,110,116,101,109,112,111,114,97,114,105,101,115,102,111,117,110,100,105,110,103,32,109,101,109,98,101,114,32,111,102,68,111,109,105,110,105,99,97,110,32,82,101,112,117,98,108,105,99,103,101,110,101,114,97,108,108,121,32,97,99,99,101,112,116,101,100,116,104,101,32,112,111,115,115,105,98,105,108,105,116,121,32,111,102,97,114,101,32,97,108,115,111,32,97,118,97,105,108,97,98,108,101,117,110,100,101,114,32,99,111,110,115,116,114,117,99,116,105,111,110,114,101,115,116,111,114,97,116,105,111,110,32,111,102,32,116,104,101,116,104,101,32,103,101,110,101,114,97,108,32,112,117,98,108,105,99,105,115,32,97,108,109,111,115,116,32,101,110,116,105,114,101,108,121,112,97,115,115,101,115,32,116,104,114,111,117,103,104,32,116,104,101,104,97,115,32,98,101,101,110,32,115,117,103,103,101,115,116,101,100,99,111,109,112,117,116,101,114,32,97,110,100,32,118,105,100,101,111,71,101,114,109,97,110,105,99,32,108,97,110,103,117,97,103,101,115,32,97,99,99,111,114,100,105,110,103,32,116,111,32,116,104,101,32,100,105,102,102,101,114,101,110,116,32,102,114,111,109,32,116,104,101,115,104,111,114,116,108,121,32,97,102,116,101,114,119,97,114,100,115,104,114,101,102,61,34,104,116,116,112,115,58,47,47,119,119,119,46,114,101,99,101,110,116,32,100,101,118,101,108,111,112,109,101,110,116,66,111,97,114,100,32,111,102,32,68,105,114,101,99,116,111,114,115,60,100,105,118,32,99,108,97,115,115,61,34,115,101,97,114,99,104,124,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,73,110,32,112,97,114,116,105,99,117,108,97,114,44,32,116,104,101,77,117,108,116,105,112,108,101,32,102,111,111,116,110,111,116,101,115,111,114,32,111,116,104,101,114,32,115,117,98,115,116,97,110,99,101,116,104,111,117,115,97,110,100,115,32,111,102,32,121,101,97,114,115,116,114,97,110,115,108,97,116,105,111,110,32,111,102,32,116,104,101,60,47,100,105,118,62,13,10,60,47,100,105,118,62,13,10,13,10,60,97,32,104,114,101,102,61,34,105,110,100,101,120,46,112,104,112,119,97,115,32,101,115,116,97,98,108,105,115,104,101,100,32,105,110,109,105,110,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,112,97,114,116,105,99,105,112,97,116,101,32,105,110,32,116,104,101,97,32,115,116,114,111,110,103,32,105,110,102,108,117,101,110,99,101,115,116,121,108,101,61,34,109,97,114,103,105,110,45,116,111,112,58,114,101,112,114,101,115,101,110,116,101,100,32,98,121,32,116,104,101,103,114,97,100,117,97,116,101,100,32,102,114,111,109,32,116,104,101,84,114,97,100,105,116,105,111,110,97,108,108,121,44,32,116,104,101,69,108,101,109,101,110,116,40,34,115,99,114,105,112,116,34,41,59,72,111,119,101,118,101,114,44,32,115,105,110,99,101,32,116,104,101,47,100,105,118,62,10,60,47,100,105,118,62,10,60,100,105,118,32,108,101,102,116,59,32,109,97,114,103,105,110,45,108,101,102,116,58,112,114,111,116,101,99,116,105,111,110,32,97,103,97,105,110,115,116,48,59,32,118,101,114,116,105,99,97,108,45,97,108,105,103,110,58,85,110,102,111,114,116,117,110,97,116,101,108,121,44,32,116,104,101,116,121,112,101,61,34,105,109,97,103,101,47,120,45,105,99,111,110,47,100,105,118,62,10,60,100,105,118,32,99,108,97,115,115,61,34,32,99,108,97,115,115,61,34,99,108,101,97,114,102,105,120,34,62,60,100,105,118,32,99,108,97,115,115,61,34,102,111,111,116,101,114,9,9,60,47,100,105,118,62,10,9,9,60,47,100,105,118,62,10,116,104,101,32,109,111,116,105,111,110,32,112,105,99,116,117,114,101,208,145,209,138,208,187,208,179,208,176,209,128,209,129,208,186,208,184,208,177,209,138,208,187,208,179,208,176,209,128,209,129,208,186,208,184,208,164,208,181,208,180,208,181,209,128,208,176,209,134,208,184,208,184,208,189,208,181,209,129,208,186,208,190,208,187,209,140,208,186,208,190,209,129,208,190,208,190,208,177,209,137,208,181,208,189,208,184,208,181,209,129,208,190,208,190,208,177,209,137,208,181,208,189,208,184,209,143,208,191,209,128,208,190,208,179,209,128,208,176,208,188,208,188,209,139,208,158,209,130,208,191,209,128,208,176,208,178,208,184,209,130,209,140,208,177,208,181,209,129,208,191,208,187,208,176,209,130,208,189,208,190,208,188,208,176,209,130,208,181,209,128,208,184,208,176,208,187,209,139,208,191,208,190,208,183,208,178,208,190,208,187,209,143,208,181,209,130,208,191,208,190,209,129,208,187,208,181,208,180,208,189,208,184,208,181,209,128,208,176,208,183,208,187,208,184,209,135,208,189,209,139,209,133,208,191,209,128,208,190,208,180,209,131,208,186,209,134,208,184,208,184,208,191,209,128,208,190,208,179,209,128,208,176,208,188,208,188,208,176,208,191,208,190,208,187,208,189,208,190,209,129,209,130,209,140,209,142,208,189,208,176,209,133,208,190,208,180,208,184,209,130,209,129,209,143,208,184,208,183,208,177,209,128,208,176,208,189,208,189,208,190,208,181,208,189,208,176,209,129,208,181,208,187,208,181,208,189,208,184,209,143,208,184,208,183,208,188,208,181,208,189,208,181,208,189,208,184,209,143,208,186,208,176,209,130,208,181,208,179,208,190,209,128,208,184,208,184,208,144,208,187,208,181,208,186,209,129,208,176,208,189,208,180,209,128,224,164,166,224,165,141,224,164,181,224,164,190,224,164,176,224,164,190,224,164,174,224,165,136,224,164,168,224,165,129,224,164,133,224,164,178,224,164,170,224,165,141,224,164,176,224,164,166,224,164,190,224,164,168,224,164,173,224,164,190,224,164,176,224,164,164,224,165,128,224,164,175,224,164,133,224,164,168,224,165,129,224,164,166,224,165,135,224,164,182,224,164,185,224,164,191,224,164,168,224,165,141,224,164,166,224,165,128,224,164,135,224,164,130,224,164,161,224,164,191,224,164,175,224,164,190,224,164,166,224,164,191,224,164,178,224,165,141,224,164,178,224,165,128,224,164,133,224,164,167,224,164,191,224,164,149,224,164,190,224,164,176,224,164,181,224,165,128,224,164,161,224,164,191,224,164,175,224,165,139,224,164,154,224,164,191,224,164,159,224,165,141,224,164,160,224,165,135,224,164,184,224,164,174,224,164,190,224,164,154,224,164,190,224,164,176,224,164,156,224,164,130,224,164,149,224,165,141,224,164,182,224,164,168,224,164,166,224,165,129,224,164,168,224,164,191,224,164,175,224,164,190,224,164,170,224,165,141,224,164,176,224,164,175,224,165,139,224,164,151,224,164,133,224,164,168,224,165,129,224,164,184,224,164,190,224,164,176,224,164,145,224,164,168,224,164,178,224,164,190,224,164,135,224,164,168,224,164,170,224,164,190,224,164,176,224,165,141,224,164,159,224,165,128,224,164,182,224,164,176,224,165,141,224,164,164,224,165,139,224,164,130,224,164,178,224,165,139,224,164,149,224,164,184,224,164,173,224,164,190,224,164,171,224,164,188,224,165,141,224,164,178,224,165,136,224,164,182,224,164,182,224,164,176,224,165,141,224,164,164,224,165,135,224,164,130,224,164,170,224,165,141,224,164,176,224,164,166,224,165,135,224,164,182,224,164,170,224,165,141,224,164,178,224,165,135,224,164,175,224,164,176,224,164,149,224,165,135,224,164,130,224,164,166,224,165,141,224,164,176,224,164,184,224,165,141,224,164,165,224,164,191,224,164,164,224,164,191,224,164,137,224,164,164,224,165,141,224,164,170,224,164,190,224,164,166,224,164,137,224,164,168,224,165,141,224,164,185,224,165,135,224,164,130,224,164,154,224,164,191,224,164,159,224,165,141,224,164,160,224,164,190,224,164,175,224,164,190,224,164,164,224,165,141,224,164,176,224,164,190,224,164,156,224,165,141,224,164,175,224,164,190,224,164,166,224,164,190,224,164,170,224,165,129,224,164,176,224,164,190,224,164,168,224,165,135,224,164,156,224,165,139,224,164,161,224,164,188,224,165,135,224,164,130,224,164,133,224,164,168,224,165,129,224,164,181,224,164,190,224,164,166,224,164,182,224,165,141,224,164,176,224,165,135,224,164,163,224,165,128,224,164,182,224,164,191,224,164,149,224,165,141,224,164,183,224,164,190,224,164,184,224,164,176,224,164,149,224,164,190,224,164,176,224,165,128,224,164,184,224,164,130,224,164,151,224,165,141,224,164,176,224,164,185,224,164,170,224,164,176,224,164,191,224,164,163,224,164,190,224,164,174,224,164,172,224,165,141,224,164,176,224,164,190,224,164,130,224,164,161,224,164,172,224,164,154,224,165,141,224,164,154,224,165,139,224,164,130,224,164,137,224,164,170,224,164,178,224,164,172,224,165,141,224,164,167,224,164,174,224,164,130,224,164,164,224,165,141,224,164,176,224,165,128,224,164,184,224,164,130,224,164,170,224,164,176,224,165,141,224,164,149,224,164,137,224,164,174,224,165,141,224,164,174,224,165,128,224,164,166,224,164,174,224,164,190,224,164,167,224,165,141,224,164,175,224,164,174,224,164,184,224,164,185,224,164,190,224,164,175,224,164,164,224,164,190,224,164,182,224,164,172,224,165,141,224,164,166,224,165,139,224,164,130,224,164,174,224,165,128,224,164,161,224,164,191,224,164,175,224,164,190,224,164,134,224,164,136,224,164,170,224,165,128,224,164,143,224,164,178,224,164,174,224,165,139,224,164,172,224,164,190,224,164,135,224,164,178,224,164,184,224,164,130,224,164,150,224,165,141,224,164,175,224,164,190,224,164,134,224,164,170,224,164,176,224,165,135,224,164,182,224,164,168,224,164,133,224,164,168,224,165,129,224,164,172,224,164,130,224,164,167,224,164,172,224,164,190,224,164,156,224,164,188,224,164,190,224,164,176,224,164,168,224,164,181,224,165,128,224,164,168,224,164,164,224,164,174,224,164,170,224,165,141,224,164,176,224,164,174,224,165,129,224,164,150,224,164,170,224,165,141,224,164,176,224,164,182,224,165,141,224,164,168,224,164,170,224,164,176,224,164,191,224,164,181,224,164,190,224,164,176,224,164,168,224,165,129,224,164,149,224,164,184,224,164,190,224,164,168,224,164,184,224,164,174,224,164,176,224,165,141,224,164,165,224,164,168,224,164,134,224,164,175,224,165,139,224,164,156,224,164,191,224,164,164,224,164,184,224,165,139,224,164,174,224,164,181,224,164,190,224,164,176,216,167,217,132,217,133,216,180,216,167,216,177,217,131,216,167,216,170,216,167,217,132,217,133,217,134,216,170,216,175,217,138,216,167,216,170,216,167,217,132,217,131,217,133,216,168,217,138,217,136,216,170,216,177,216,167,217,132,217,133,216,180,216,167,217,135,216,175,216,167,216,170,216,185,216,175,216,175,216,167,217,132,216,178,217,136,216,167,216,177,216,185,216,175,216,175,216,167,217,132,216,177,216,175,217,136,216,175,216,167,217,132,216,165,216,179,217,132,216,167,217,133,217,138,216,169,216,167,217,132,217,129,217,136,216,170,217,136,216,180,217,136,216,168,216,167,217,132,217,133,216,179,216,167,216,168,217,130,216,167,216,170,216,167,217,132,217,133,216,185,217,132,217,136,217,133,216,167,216,170,216,167,217,132,217,133,216,179,217,132,216,179,217,132,216,167,216,170,216,167,217,132,216,172,216,177,216,167,217,129,217,138,217,131,216,179,216,167,217,132,216,167,216,179,217,132,216,167,217,133,217,138,216,169,216,167,217,132,216,167,216,170,216,181,216,167,217,132,216,167,216,170,107,101,121,119,111,114,100,115,34,32,99,111,110,116,101,110,116,61,34,119,51,46,111,114,103,47,49,57,57,57,47,120,104,116,109,108,34,62,60,97,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,32,116,101,120,116,47,104,116,109,108,59,32,99,104,97,114,115,101,116,61,34,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,60,116,97,98,108,101,32,99,101,108,108,112,97,100,100,105,110,103,61,34,97,117,116,111,99,111,109,112,108,101,116,101,61,34,111,102,102,34,32,116,101,120,116,45,97,108,105,103,110,58,32,99,101,110,116,101,114,59,116,111,32,108,97,115,116,32,118,101,114,115,105,111,110,32,98,121,32,98,97,99,107,103,114,111,117,110,100,45,99,111,108,111,114,58,32,35,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,47,100,105,118,62,60,47,100,105,118,62,60,100,105,118,32,105,100,61,60,97,32,104,114,101,102,61,34,35,34,32,99,108,97,115,115,61,34,34,62,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,99,114,105,112,116,34,32,115,114,99,61,34,104,116,116,112,58,47,47,10,60,115,99,114,105,112,116,32,108,97,110,103,117,97,103,101,61,34,47,47,69,78,34,32,34,104,116,116,112,58,47,47,119,119,119,46,119,101,110,99,111,100,101,85,82,73,67,111,109,112,111,110,101,110,116,40,34,32,104,114,101,102,61,34,106,97,118,97,115,99,114,105,112,116,58,60,100,105,118,32,99,108,97,115,115,61,34,99,111,110,116,101,110,116,100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,39,60,115,99,112,111,115,105,116,105,111,110,58,32,97,98,115,111,108,117,116,101,59,115,99,114,105,112,116,32,115,114,99,61,34,104,116,116,112,58,47,47,32,115,116,121,108,101,61,34,109,97,114,103,105,110,45,116,111,112,58,46,109,105,110,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,60,47,100,105,118,62,10,60,100,105,118,32,99,108,97,115,115,61,34,119,51,46,111,114,103,47,49,57,57,57,47,120,104,116,109,108,34,32,10,13,10,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,100,105,115,116,105,110,99,116,105,111,110,32,98,101,116,119,101,101,110,47,34,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,60,108,105,110,107,32,104,114,101,102,61,34,104,116,116,112,58,47,47,101,110,99,111,100,105,110,103,61,34,117,116,102,45,56,34,63,62,10,119,46,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,63,97,99,116,105,111,110,61,34,104,116,116,112,58,47,47,119,119,119,46,105,99,111,110,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,32,115,116,121,108,101,61,34,98,97,99,107,103,114,111,117,110,100,58,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,47,62,10,109,101,116,97,32,112,114,111,112,101,114,116,121,61,34,111,103,58,116,60,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,116,104,101,32,100,101,118,101,108,111,112,109,101,110,116,32,111,102,32,116,121,108,101,115,104,101,101,116,34,32,116,121,112,101,61,34,116,101,104,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,105,115,32,99,111,110,115,105,100,101,114,101,100,32,116,111,32,98,101,116,97,98,108,101,32,119,105,100,116,104,61,34,49,48,48,37,34,32,73,110,32,97,100,100,105,116,105,111,110,32,116,111,32,116,104,101,32,99,111,110,116,114,105,98,117,116,101,100,32,116,111,32,116,104,101,32,100,105,102,102,101,114,101,110,99,101,115,32,98,101,116,119,101,101,110,100,101,118,101,108,111,112,109,101,110,116,32,111,102,32,116,104,101,32,73,116,32,105,115,32,105,109,112,111,114,116,97,110,116,32,116,111,32,60,47,115,99,114,105,112,116,62,10,10,60,115,99,114,105,112,116,32,32,115,116,121,108,101,61,34,102,111,110,116,45,115,105,122,101,58,49,62,60,47,115,112,97,110,62,60,115,112,97,110,32,105,100,61,103,98,76,105,98,114,97,114,121,32,111,102,32,67,111,110,103,114,101,115,115,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,105,109,69,110,103,108,105,115,104,32,116,114,97,110,115,108,97,116,105,111,110,65,99,97,100,101,109,121,32,111,102,32,83,99,105,101,110,99,101,115,100,105,118,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,99,111,110,115,116,114,117,99,116,105,111,110,32,111,102,32,116,104,101,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,105,100,41,105,110,32,99,111,110,106,117,110,99,116,105,111,110,32,119,105,116,104,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41,59,32,60,109,101,116,97,32,112,114,111,112,101,114,116,121,61,34,111,103,58,208,145,209,138,208,187,208,179,208,176,209,128,209,129,208,186,208,184,10,32,116,121,112,101,61,34,116,101,120,116,34,32,110,97,109,101,61,34,62,80,114,105,118,97,99,121,32,80,111,108,105,99,121,60,47,97,62,97,100,109,105,110,105,115,116,101,114,101,100,32,98,121,32,116,104,101,101,110,97,98,108,101,83,105,110,103,108,101,82,101,113,117,101,115,116,115,116,121,108,101,61,38,113,117,111,116,59,109,97,114,103,105,110,58,60,47,100,105,118,62,60,47,100,105,118,62,60,47,100,105,118,62,60,62,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,105,32,115,116,121,108,101,61,38,113,117,111,116,59,102,108,111,97,116,58,114,101,102,101,114,114,101,100,32,116,111,32,97,115,32,116,104,101,32,116,111,116,97,108,32,112,111,112,117,108,97,116,105,111,110,32,111,102,105,110,32,87,97,115,104,105,110,103,116,111,110,44,32,68,46,67,46,32,115,116,121,108,101,61,34,98,97,99,107,103,114,111,117,110,100,45,97,109,111,110,103,32,111,116,104,101,114,32,116,104,105,110,103,115,44,111,114,103,97,110,105,122,97,116,105,111,110,32,111,102,32,116,104,101,112,97,114,116,105,99,105,112,97,116,101,100,32,105,110,32,116,104,101,116,104,101,32,105,110,116,114,111,100,117,99,116,105,111,110,32,111,102,105,100,101,110,116,105,102,105,101,100,32,119,105,116,104,32,116,104,101,102,105,99,116,105,111,110,97,108,32,99,104,97,114,97,99,116,101,114,32,79,120,102,111,114,100,32,85,110,105,118,101,114,115,105,116,121,32,109,105,115,117,110,100,101,114,115,116,97,110,100,105,110,103,32,111,102,84,104,101,114,101,32,97,114,101,44,32,104,111,119,101,118,101,114,44,115,116,121,108,101,115,104,101,101,116,34,32,104,114,101,102,61,34,47,67,111,108,117,109,98,105,97,32,85,110,105,118,101,114,115,105,116,121,101,120,112,97,110,100,101,100,32,116,111,32,105,110,99,108,117,100,101,117,115,117,97,108,108,121,32,114,101,102,101,114,114,101,100,32,116,111,105,110,100,105,99,97,116,105,110,103,32,116,104,97,116,32,116,104,101,104,97,118,101,32,115,117,103,103,101,115,116,101,100,32,116,104,97,116,97,102,102,105,108,105,97,116,101,100,32,119,105,116,104,32,116,104,101,99,111,114,114,101,108,97,116,105,111,110,32,98,101,116,119,101,101,110,110,117,109,98,101,114,32,111,102,32,100,105,102,102,101,114,101,110,116,62,60,47,116,100,62,60,47,116,114,62,60,47,116,97,98,108,101,62,82,101,112,117,98,108,105,99,32,111,102,32,73,114,101,108,97,110,100,10,60,47,115,99,114,105,112,116,62,10,60,115,99,114,105,112,116,32,117,110,100,101,114,32,116,104,101,32,105,110,102,108,117,101,110,99,101,99,111,110,116,114,105,98,117,116,105,111,110,32,116,111,32,116,104,101,79,102,102,105,99,105,97,108,32,119,101,98,115,105,116,101,32,111,102,104,101,97,100,113,117,97,114,116,101,114,115,32,111,102,32,116,104,101,99,101,110,116,101,114,101,100,32,97,114,111,117,110,100,32,116,104,101,105,109,112,108,105,99,97,116,105,111,110,115,32,111,102,32,116,104,101,104,97,118,101,32,98,101,101,110,32,100,101,118,101,108,111,112,101,100,70,101,100,101,114,97,108,32,82,101,112,117,98,108,105,99,32,111,102,98,101,99,97,109,101,32,105,110,99,114,101,97,115,105,110,103,108,121,99,111,110,116,105,110,117,97,116,105,111,110,32,111,102,32,116,104,101,78,111,116,101,44,32,104,111,119,101,118,101,114,44,32,116,104,97,116,115,105,109,105,108,97,114,32,116,111,32,116,104,97,116,32,111,102,32,99,97,112,97,98,105,108,105,116,105,101,115,32,111,102,32,116,104,101,97,99,99,111,114,100,97,110,99,101,32,119,105,116,104,32,116,104,101,112,97,114,116,105,99,105,112,97,110,116,115,32,105,110,32,116,104,101,102,117,114,116,104,101,114,32,100,101,118,101,108,111,112,109,101,110,116,117,110,100,101,114,32,116,104,101,32,100,105,114,101,99,116,105,111,110,105,115,32,111,102,116,101,110,32,99,111,110,115,105,100,101,114,101,100,104,105,115,32,121,111,117,110,103,101,114,32,98,114,111,116,104,101,114,60,47,116,100,62,60,47,116,114,62,60,47,116,97,98,108,101,62,60,97,32,104,116,116,112,45,101,113,117,105,118,61,34,88,45,85,65,45,112,104,121,115,105,99,97,108,32,112,114,111,112,101,114,116,105,101,115,111,102,32,66,114,105,116,105,115,104,32,67,111,108,117,109,98,105,97,104,97,115,32,98,101,101,110,32,99,114,105,116,105,99,105,122,101,100,40,119,105,116,104,32,116,104,101,32,101,120,99,101,112,116,105,111,110,113,117,101,115,116,105,111,110,115,32,97,98,111,117,116,32,116,104,101,112,97,115,115,105,110,103,32,116,104,114,111,117,103,104,32,116,104,101,48,34,32,99,101,108,108,112,97,100,100,105,110,103,61,34,48,34,32,116,104,111,117,115,97,110,100,115,32,111,102,32,112,101,111,112,108,101,114,101,100,105,114,101,99,116,115,32,104,101,114,101,46,32,70,111,114,104,97,118,101,32,99,104,105,108,100,114,101,110,32,117,110,100,101,114,37,51,69,37,51,67,47,115,99,114,105,112,116,37,51,69,34,41,41,59,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,60,108,105,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,115,105,116,101,95,110,97,109,101,34,32,99,111,110,116,101,110,116,61,34,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,32,110,111,110,101,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,88,45,110,101,119,32,68,97,116,101,40,41,46,103,101,116,84,105,109,101,40,41,32,116,121,112,101,61,34,105,109,97,103,101,47,120,45,105,99,111,110,34,60,47,115,112,97,110,62,60,115,112,97,110,32,99,108,97,115,115,61,34,108,97,110,103,117,97,103,101,61,34,106,97,118,97,115,99,114,105,112,116,119,105,110,100,111,119,46,108,111,99,97,116,105,111,110,46,104,114,101,102,60,97,32,104,114,101,102,61,34,106,97,118,97,115,99,114,105,112,116,58,45,45,62,13,10,60,115,99,114,105,112,116,32,116,121,112,101,61,34,116,60,97,32,104,114,101,102,61,39,104,116,116,112,58,47,47,119,119,119,46,104,111,114,116,99,117,116,32,105,99,111,110,34,32,104,114,101,102,61,34,60,47,100,105,118,62,13,10,60,100,105,118,32,99,108,97,115,115,61,34,60,115,99,114,105,112,116,32,115,114,99,61,34,104,116,116,112,58,47,47,34,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,116,60,47,100,105,118,62,10,60,115,99,114,105,112,116,32,116,121,112,101,61,47,97,62,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,32,97,108,108,111,119,84,114,97,110,115,112,97,114,101,110,99,121,61,34,88,45,85,65,45,67,111,109,112,97,116,105,98,108,101,34,32,99,111,110,114,101,108,97,116,105,111,110,115,104,105,112,32,98,101,116,119,101,101,110,10,60,47,115,99,114,105,112,116,62,13,10,60,115,99,114,105,112,116,32,60,47,97,62,60,47,108,105,62,60,47,117,108,62,60,47,100,105,118,62,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,116,104,101,32,112,114,111,103,114,97,109,109,105,110,103,32,108,97,110,103,117,97,103,101,60,47,97,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,60,47,97,62,60,47,108,105,62,60,108,105,32,99,108,97,115,115,61,34,102,111,114,109,32,97,99,116,105,111,110,61,34,104,116,116,112,58,47,47,60,100,105,118,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,116,121,112,101,61,34,116,101,120,116,34,32,110,97,109,101,61,34,113,34,60,116,97,98,108,101,32,119,105,100,116,104,61,34,49,48,48,37,34,32,98,97,99,107,103,114,111,117,110,100,45,112,111,115,105,116,105,111,110,58,34,32,98,111,114,100,101,114,61,34,48,34,32,119,105,100,116,104,61,34,114,101,108,61,34,115,104,111,114,116,99,117,116,32,105,99,111,110,34,32,104,54,62,60,117,108,62,60,108,105,62,60,97,32,104,114,101,102,61,34,32,32,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,99,115,115,34,32,109,101,100,105,97,61,34,115,99,114,101,101,110,34,32,114,101,115,112,111,110,115,105,98,108,101,32,102,111,114,32,116,104,101,32,34,32,116,121,112,101,61,34,97,112,112,108,105,99,97,116,105,111,110,47,34,32,115,116,121,108,101,61,34,98,97,99,107,103,114,111,117,110,100,45,104,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,34,32,97,108,108,111,119,116,114,97,110,115,112,97,114,101,110,99,121,61,34,115,116,121,108,101,115,104,101,101,116,34,32,116,121,112,101,61,34,116,101,13,10,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,62,60,47,115,112,97,110,62,60,115,112,97,110,32,99,108,97,115,115,61,34,48,34,32,99,101,108,108,115,112,97,99,105,110,103,61,34,48,34,62,59,10,60,47,115,99,114,105,112,116,62,10,60,115,99,114,105,112,116,32,115,111,109,101,116,105,109,101,115,32,99,97,108,108,101,100,32,116,104,101,100,111,101,115,32,110,111,116,32,110,101,99,101,115,115,97,114,105,108,121,70,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,97,116,32,116,104,101,32,98,101,103,105,110,110,105,110,103,32,111,102,32,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,60,104,116,109,108,112,97,114,116,105,99,117,108,97,114,108,121,32,105,110,32,116,104,101,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,110,97,109,101,61,34,106,97,118,97,115,99,114,105,112,116,58,118,111,105,100,40,48,41,59,34,101,102,102,101,99,116,105,118,101,110,101,115,115,32,111,102,32,116,104,101,32,97,117,116,111,99,111,109,112,108,101,116,101,61,34,111,102,102,34,32,103,101,110,101,114,97,108,108,121,32,99,111,110,115,105,100,101,114,101,100,62,60,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,34,62,60,47,115,99,114,105,112,116,62,13,10,60,115,99,114,105,112,116,116,104,114,111,117,103,104,111,117,116,32,116,104,101,32,119,111,114,108,100,99,111,109,109,111,110,32,109,105,115,99,111,110,99,101,112,116,105,111,110,97,115,115,111,99,105,97,116,105,111,110,32,119,105,116,104,32,116,104,101,60,47,100,105,118,62,10,60,47,100,105,118,62,10,60,100,105,118,32,99,100,117,114,105,110,103,32,104,105,115,32,108,105,102,101,116,105,109,101,44,99,111,114,114,101,115,112,111,110,100,105,110,103,32,116,111,32,116,104,101,116,121,112,101,61,34,105,109,97,103,101,47,120,45,105,99,111,110,34,32,97,110,32,105,110,99,114,101,97,115,105,110,103,32,110,117,109,98,101,114,100,105,112,108,111,109,97,116,105,99,32,114,101,108,97,116,105,111,110,115,97,114,101,32,111,102,116,101,110,32,99,111,110,115,105,100,101,114,101,100,109,101,116,97,32,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,32,60,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,101,120,97,109,112,108,101,115,32,105,110,99,108,117,100,101,32,116,104,101,34,62,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,105,112,97,114,116,105,99,105,112,97,116,105,111,110,32,105,110,32,116,104,101,116,104,101,32,101,115,116,97,98,108,105,115,104,109,101,110,116,32,111,102,10,60,47,100,105,118,62,10,60,100,105,118,32,99,108,97,115,115,61,34,38,97,109,112,59,110,98,115,112,59,38,97,109,112,59,110,98,115,112,59,116,111,32,100],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+174128);allocate([101,116,101,114,109,105,110,101,32,119,104,101,116,104,101,114,113,117,105,116,101,32,100,105,102,102,101,114,101,110,116,32,102,114,111,109,109,97,114,107,101,100,32,116,104,101,32,98,101,103,105,110,110,105,110,103,100,105,115,116,97,110,99,101,32,98,101,116,119,101,101,110,32,116,104,101,99,111,110,116,114,105,98,117,116,105,111,110,115,32,116,111,32,116,104,101,99,111,110,102,108,105,99,116,32,98,101,116,119,101,101,110,32,116,104,101,119,105,100,101,108,121,32,99,111,110,115,105,100,101,114,101,100,32,116,111,119,97,115,32,111,110,101,32,111,102,32,116,104,101,32,102,105,114,115,116,119,105,116,104,32,118,97,114,121,105,110,103,32,100,101,103,114,101,101,115,104,97,118,101,32,115,112,101,99,117,108,97,116,101,100,32,116,104,97,116,40,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,112,97,114,116,105,99,105,112,97,116,105,110,103,32,105,110,32,116,104,101,111,114,105,103,105,110,97,108,108,121,32,100,101,118,101,108,111,112,101,100,101,116,97,32,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,62,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,47,62,10,105,110,116,101,114,99,104,97,110,103,101,97,98,108,121,32,119,105,116,104,109,111,114,101,32,99,108,111,115,101,108,121,32,114,101,108,97,116,101,100,115,111,99,105,97,108,32,97,110,100,32,112,111,108,105,116,105,99,97,108,116,104,97,116,32,119,111,117,108,100,32,111,116,104,101,114,119,105,115,101,112,101,114,112,101,110,100,105,99,117,108,97,114,32,116,111,32,116,104,101,115,116,121,108,101,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,116,121,112,101,61,34,115,117,98,109,105,116,34,32,110,97,109,101,61,34,102,97,109,105,108,105,101,115,32,114,101,115,105,100,105,110,103,32,105,110,100,101,118,101,108,111,112,105,110,103,32,99,111,117,110,116,114,105,101,115,99,111,109,112,117,116,101,114,32,112,114,111,103,114,97,109,109,105,110,103,101,99,111,110,111,109,105,99,32,100,101,118,101,108,111,112,109,101,110,116,100,101,116,101,114,109,105,110,97,116,105,111,110,32,111,102,32,116,104,101,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,111,110,32,115,101,118,101,114,97,108,32,111,99,99,97,115,105,111,110,115,112,111,114,116,117,103,117,195,170,115,32,40,69,117,114,111,112,101,117,41,208,163,208,186,209,128,208,176,209,151,208,189,209,129,209,140,208,186,208,176,209,131,208,186,209,128,208,176,209,151,208,189,209,129,209,140,208,186,208,176,208,160,208,190,209,129,209,129,208,184,208,185,209,129,208,186,208,190,208,185,208,188,208,176,209,130,208,181,209,128,208,184,208,176,208,187,208,190,208,178,208,184,208,189,209,132,208,190,209,128,208,188,208,176,209,134,208,184,208,184,209,131,208,191,209,128,208,176,208,178,208,187,208,181,208,189,208,184,209,143,208,189,208,181,208,190,208,177,209,133,208,190,208,180,208,184,208,188,208,190,208,184,208,189,209,132,208,190,209,128,208,188,208,176,209,134,208,184,209,143,208,152,208,189,209,132,208,190,209,128,208,188,208,176,209,134,208,184,209,143,208,160,208,181,209,129,208,191,209,131,208,177,208,187,208,184,208,186,208,184,208,186,208,190,208,187,208,184,209,135,208,181,209,129,209,130,208,178,208,190,208,184,208,189,209,132,208,190,209,128,208,188,208,176,209,134,208,184,209,142,209,130,208,181,209,128,209,128,208,184,209,130,208,190,209,128,208,184,208,184,208,180,208,190,209,129,209,130,208,176,209,130,208,190,209,135,208,189,208,190,216,167,217,132,217,133,216,170,217,136,216,167,216,172,216,175,217,136,217,134,216,167,217,132,216,167,216,180,216,170,216,177,216,167,217,131,216,167,216,170,216,167,217,132,216,167,217,130,216,170,216,177,216,167,216,173,216,167,216,170,104,116,109,108,59,32,99,104,97,114,115,101,116,61,85,84,70,45,56,34,32,115,101,116,84,105,109,101,111,117,116,40,102,117,110,99,116,105,111,110,40,41,100,105,115,112,108,97,121,58,105,110,108,105,110,101,45,98,108,111,99,107,59,60,105,110,112,117,116,32,116,121,112,101,61,34,115,117,98,109,105,116,34,32,116,121,112,101,32,61,32,39,116,101,120,116,47,106,97,118,97,115,99,114,105,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,119,119,119,46,34,32,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,115,104,111,114,116,99,117,116,32,105,99,111,110,34,32,104,114,101,102,61,34,34,32,97,117,116,111,99,111,109,112,108,101,116,101,61,34,111,102,102,34,32,60,47,97,62,60,47,100,105,118,62,60,100,105,118,32,99,108,97,115,115,61,60,47,97,62,60,47,108,105,62,10,60,108,105,32,99,108,97,115,115,61,34,99,115,115,34,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,60,102,111,114,109,32,97,99,116,105,111,110,61,34,104,116,116,112,58,47,47,120,116,47,99,115,115,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,108,105,110,107,32,114,101,108,61,34,97,108,116,101,114,110,97,116,101,34,32,13,10,60,115,99,114,105,112,116,32,116,121,112,101,61,34,116,101,120,116,47,32,111,110,99,108,105,99,107,61,34,106,97,118,97,115,99,114,105,112,116,58,40,110,101,119,32,68,97,116,101,41,46,103,101,116,84,105,109,101,40,41,125,104,101,105,103,104,116,61,34,49,34,32,119,105,100,116,104,61,34,49,34,32,80,101,111,112,108,101,39,115,32,82,101,112,117,98,108,105,99,32,111,102,32,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,117,110,100,101,114,116,104,101,32,98,101,103,105,110,110,105,110,103,32,111,102,32,116,104,101,32,60,47,100,105,118,62,10,60,47,100,105,118,62,10,60,47,100,105,118,62,10,101,115,116,97,98,108,105,115,104,109,101,110,116,32,111,102,32,116,104,101,32,60,47,100,105,118,62,60,47,100,105,118,62,60,47,100,105,118,62,60,47,100,35,118,105,101,119,112,111,114,116,123,109,105,110,45,104,101,105,103,104,116,58,10,60,115,99,114,105,112,116,32,115,114,99,61,34,104,116,116,112,58,47,47,111,112,116,105,111,110,62,60,111,112,116,105,111,110,32,118,97,108,117,101,61,111,102,116,101,110,32,114,101,102,101,114,114,101,100,32,116,111,32,97,115,32,47,111,112,116,105,111,110,62,10,60,111,112,116,105,111,110,32,118,97,108,117,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,10,60,33,45,45,91,73,110,116,101,114,110,97,116,105,111,110,97,108,32,65,105,114,112,111,114,116,62,10,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,60,47,97,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,224,184,160,224,184,178,224,184,169,224,184,178,224,185,132,224,184,151,224,184,162,225,131,165,225,131,144,225,131,160,225,131,151,225,131,163,225,131,154,225,131,152,230,173,163,233,171,148,228,184,173,230,150,135,32,40,231,185,129,233,171,148,41,224,164,168,224,164,191,224,164,176,224,165,141,224,164,166,224,165,135,224,164,182,224,164,161,224,164,190,224,164,137,224,164,168,224,164,178,224,165,139,224,164,161,224,164,149,224,165,141,224,164,183,224,165,135,224,164,164,224,165,141,224,164,176,224,164,156,224,164,190,224,164,168,224,164,149,224,164,190,224,164,176,224,165,128,224,164,184,224,164,130,224,164,172,224,164,130,224,164,167,224,164,191,224,164,164,224,164,184,224,165,141,224,164,165,224,164,190,224,164,170,224,164,168,224,164,190,224,164,184,224,165,141,224,164,181,224,165,128,224,164,149,224,164,190,224,164,176,224,164,184,224,164,130,224,164,184,224,165,141,224,164,149,224,164,176,224,164,163,224,164,184,224,164,190,224,164,174,224,164,151,224,165,141,224,164,176,224,165,128,224,164,154,224,164,191,224,164,159,224,165,141,224,164,160,224,165,139,224,164,130,224,164,181,224,164,191,224,164,156,224,165,141,224,164,158,224,164,190,224,164,168,224,164,133,224,164,174,224,165,135,224,164,176,224,164,191,224,164,149,224,164,190,224,164,181,224,164,191,224,164,173,224,164,191,224,164,168,224,165,141,224,164,168,224,164,151,224,164,190,224,164,161,224,164,191,224,164,175,224,164,190,224,164,129,224,164,149,224,165,141,224,164,175,224,165,139,224,164,130,224,164,149,224,164,191,224,164,184,224,165,129,224,164,176,224,164,149,224,165,141,224,164,183,224,164,190,224,164,170,224,164,185,224,165,129,224,164,129,224,164,154,224,164,164,224,165,128,224,164,170,224,165,141,224,164,176,224,164,172,224,164,130,224,164,167,224,164,168,224,164,159,224,164,191,224,164,170,224,165,141,224,164,170,224,164,163,224,165,128,224,164,149,224,165,141,224,164,176,224,164,191,224,164,149,224,165,135,224,164,159,224,164,170,224,165,141,224,164,176,224,164,190,224,164,176,224,164,130,224,164,173,224,164,170,224,165,141,224,164,176,224,164,190,224,164,170,224,165,141,224,164,164,224,164,174,224,164,190,224,164,178,224,164,191,224,164,149,224,165,139,224,164,130,224,164,176,224,164,171,224,164,188,224,165,141,224,164,164,224,164,190,224,164,176,224,164,168,224,164,191,224,164,176,224,165,141,224,164,174,224,164,190,224,164,163,224,164,178,224,164,191,224,164,174,224,164,191,224,164,159,224,165,135,224,164,161,100,101,115,99,114,105,112,116,105,111,110,34,32,99,111,110,116,101,110,116,61,34,100,111,99,117,109,101,110,116,46,108,111,99,97,116,105,111,110,46,112,114,111,116,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,97,103,78,97,109,101,40,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,10,60,104,116,109,108,32,60,109,101,116,97,32,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,62,58,117,114,108,34,32,99,111,110,116,101,110,116,61,34,104,116,116,112,58,47,47,46,99,115,115,34,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,115,116,121,108,101,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,62,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,104,114,101,102,61,34,119,51,46,111,114,103,47,49,57,57,57,47,120,104,116,109,108,34,32,120,109,108,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,34,32,109,101,116,104,111,100,61,34,103,101,116,34,32,97,99,116,105,111,110,61,34,108,105,110,107,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,32,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,116,121,112,101,61,34,105,109,97,103,101,47,120,45,105,99,111,110,34,32,47,62,99,101,108,108,112,97,100,100,105,110,103,61,34,48,34,32,99,101,108,108,115,112,46,99,115,115,34,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,60,47,97,62,60,47,108,105,62,60,108,105,62,60,97,32,104,114,101,102,61,34,34,32,119,105,100,116,104,61,34,49,34,32,104,101,105,103,104,116,61,34,49,34,34,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,59,34,62,97,108,116,101,114,110,97,116,101,34,32,116,121,112,101,61,34,97,112,112,108,105,45,47,47,87,51,67,47,47,68,84,68,32,88,72,84,77,76,32,49,46,48,32,101,108,108,115,112,97,99,105,110,103,61,34,48,34,32,99,101,108,108,112,97,100,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,118,97,108,117,101,61,34,47,97,62,38,110,98,115,112,59,60,115,112,97,110,32,114,111,108,101,61,34,115,10,60,105,110,112,117,116,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,108,97,110,103,117,97,103,101,61,34,74,97,118,97,83,99,114,105,112,116,34,32,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,115,66,103,61,34,48,34,32,99,101,108,108,115,112,97,99,105,110,103,61,34,48,34,32,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,109,101,100,105,97,61,34,116,121,112,101,61,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,119,105,116,104,32,116,104,101,32,101,120,99,101,112,116,105,111,110,32,111,102,32,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,114,101,108,61,34,115,116,32,104,101,105,103,104,116,61,34,49,34,32,119,105,100,116,104,61,34,49,34,32,61,39,43,101,110,99,111,100,101,85,82,73,67,111,109,112,111,110,101,110,116,40,60,108,105,110,107,32,114,101,108,61,34,97,108,116,101,114,110,97,116,101,34,32,10,98,111,100,121,44,32,116,114,44,32,105,110,112,117,116,44,32,116,101,120,116,109,101,116,97,32,110,97,109,101,61,34,114,111,98,111,116,115,34,32,99,111,110,109,101,116,104,111,100,61,34,112,111,115,116,34,32,97,99,116,105,111,110,61,34,62,10,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,99,115,115,34,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,60,47,100,105,118,62,60,47,100,105,118,62,60,100,105,118,32,99,108,97,115,115,108,97,110,103,117,97,103,101,61,34,106,97,118,97,115,99,114,105,112,116,34,62,97,114,105,97,45,104,105,100,100,101,110,61,34,116,114,117,101,34,62,194,183,60,114,105,112,116,34,32,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,108,61,48,59,125,41,40,41,59,10,40,102,117,110,99,116,105,111,110,40,41,123,98,97,99,107,103,114,111,117,110,100,45,105,109,97,103,101,58,32,117,114,108,40,47,97,62,60,47,108,105,62,60,108,105,62,60,97,32,104,114,101,102,61,34,104,9,9,60,108,105,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,97,116,111,114,34,32,97,114,105,97,45,104,105,100,100,101,110,61,34,116,114,117,62,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,108,97,110,103,117,97,103,101,61,34,106,97,118,97,115,99,114,105,112,116,34,32,47,111,112,116,105,111,110,62,10,60,111,112,116,105,111,110,32,118,97,108,117,101,47,100,105,118,62,60,47,100,105,118,62,60,100,105,118,32,99,108,97,115,115,61,114,97,116,111,114,34,32,97,114,105,97,45,104,105,100,100,101,110,61,34,116,114,101,61,40,110,101,119,32,68,97,116,101,41,46,103,101,116,84,105,109,101,40,41,112,111,114,116,117,103,117,195,170,115,32,40,100,111,32,66,114,97,115,105,108,41,208,190,209,128,208,179,208,176,208,189,208,184,208,183,208,176,209,134,208,184,208,184,208,178,208,190,208,183,208,188,208,190,208,182,208,189,208,190,209,129,209,130,209,140,208,190,208,177,209,128,208,176,208,183,208,190,208,178,208,176,208,189,208,184,209,143,209,128,208,181,208,179,208,184,209,129,209,130,209,128,208,176,209,134,208,184,208,184,208,178,208,190,208,183,208,188,208,190,208,182,208,189,208,190,209,129,209,130,208,184,208,190,208,177,209,143,208,183,208,176,209,130,208,181,208,187,209,140,208,189,208,176,60,33,68,79,67,84,89,80,69,32,104,116,109,108,32,80,85,66,76,73,67,32,34,110,116,45,84,121,112,101,34,32,99,111,110,116,101,110,116,61,34,116,101,120,116,47,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,67,111,110,116,101,114,97,110,115,105,116,105,111,110,97,108,47,47,69,78,34,32,34,104,116,116,112,58,60,104,116,109,108,32,120,109,108,110,115,61,34,104,116,116,112,58,47,47,119,119,119,45,47,47,87,51,67,47,47,68,84,68,32,88,72,84,77,76,32,49,46,48,32,84,68,84,68,47,120,104,116,109,108,49,45,116,114,97,110,115,105,116,105,111,110,97,108,47,47,119,119,119,46,119,51,46,111,114,103,47,84,82,47,120,104,116,109,108,49,47,112,101,32,61,32,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,59,60,109,101,116,97,32,110,97,109,101,61,34,100,101,115,99,114,105,112,116,105,111,110,112,97,114,101,110,116,78,111,100,101,46,105,110,115,101,114,116,66,101,102,111,114,101,60,105,110,112,117,116,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,110,97,106,115,34,32,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,99,114,105,40,100,111,99,117,109,101,110,116,41,46,114,101,97,100,121,40,102,117,110,99,116,105,115,99,114,105,112,116,32,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,105,109,97,103,101,34,32,99,111,110,116,101,110,116,61,34,104,116,116,112,58,47,47,85,65,45,67,111,109,112,97,116,105,98,108,101,34,32,99,111,110,116,101,110,116,61,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,34,32,47,62,10,108,105,110,107,32,114,101,108,61,34,115,104,111,114,116,99,117,116,32,105,99,111,110,60,108,105,110,107,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,60,47,115,99,114,105,112,116,62,10,60,115,99,114,105,112,116,32,116,121,112,101,61,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,60,97,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,32,104,114,101,102,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,115,66,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,110,97,109,101,61,97,46,116,121,112,101,32,61,32,39,116,101,120,116,47,106,97,118,97,115,99,114,105,110,112,117,116,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,110,97,109,101,104,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,34,32,47,62,100,116,100,34,62,10,60,104,116,109,108,32,120,109,108,110,115,61,34,104,116,116,112,45,47,47,87,51,67,47,47,68,84,68,32,72,84,77,76,32,52,46,48,49,32,84,101,110,116,115,66,121,84,97,103,78,97,109,101,40,39,115,99,114,105,112,116,39,41,105,110,112,117,116,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,110,97,109,60,115,99,114,105,112,116,32,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,34,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,59,34,62,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,61,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,32,116,121,112,101,61,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,110,97,109,101,61,34,100,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,97,103,78,97,109,101,40,115,110,105,99,97,108,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,67,47,47,68,84,68,32,72,84,77,76,32,52,46,48,49,32,84,114,97,110,115,105,116,60,115,116,121,108,101,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,62,10,10,60,115,116,121,108,101,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,62,105,111,110,97,108,46,100,116,100,34,62,10,60,104,116,109,108,32,120,109,108,110,115,61,104,116,116,112,45,101,113,117,105,118,61,34,67,111,110,116,101,110,116,45,84,121,112,101,100,105,110,103,61,34,48,34,32,99,101,108,108,115,112,97,99,105,110,103,61,34,48,34,104,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,34,32,47,62,10,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,59,34,62,60,60,108,105,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,32,116,121,112,101,61,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,62,208,180,208,181,209,143,209,130,208,181,208,187,209,140,208,189,208,190,209,129,209,130,208,184,209,129,208,190,208,190,209,130,208,178,208,181,209,130,209,129,209,130,208,178,208,184,208,184,208,191,209,128,208,190,208,184,208,183,208,178,208,190,208,180,209,129,209,130,208,178,208,176,208,177,208,181,208,183,208,190,208,191,208,176,209,129,208,189,208,190,209,129,209,130,208,184,224,164,170,224,165,129,224,164,184,224,165,141,224,164,164,224,164,191,224,164,149,224,164,190,224,164,149,224,164,190,224,164,130,224,164,151,224,165,141,224,164,176,224,165,135,224,164,184,224,164,137,224,164,168,224,165,141,224,164,185,224,165,139,224,164,130,224,164,168,224,165,135,224,164,181,224,164,191,224,164,167,224,164,190,224,164,168,224,164,184,224,164,173,224,164,190,224,164,171,224,164,191,224,164,149,224,165,141,224,164,184,224,164,191,224,164,130,224,164,151,224,164,184,224,165,129,224,164,176,224,164,149,224,165,141,224,164,183,224,164,191,224,164,164,224,164,149,224,165,137,224,164,170,224,165,128,224,164,176,224,164,190,224,164,135,224,164,159,224,164,181,224,164,191,224,164,156,224,165,141,224,164,158,224,164,190,224,164,170,224,164,168,224,164,149,224,164,190,224,164,176,224,165,141,224,164,176,224,164,181,224,164,190,224,164,136,224,164,184,224,164,149,224,165,141,224,164,176,224,164,191,224,164,175,224,164,164,224,164,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,98,105,116,115,32,60,32,49,85,76,76,32,60,60,32,110,95,98,105,116,115,0,0,0,99,115,114,99,47,101,110,99,47,46,47,119,114,105,116,101,95,98,105,116,115,46,104,0,87,114,105,116,101,66,105,116,115,0,0,0,0,0,0,0,1,2,3,4,0,5,17,6,16,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,2,4,3,2,2,4,0,0,0,7,3,2,1,15,0,0,1,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,9,0,0,0,2,0,0,0,13,0,0,0,2,0,0,0,17,0,0,0,3,0,0,0,25,0,0,0,3,0,0,0,33,0,0,0,3,0,0,0,41,0,0,0,3,0,0,0,49,0,0,0,4,0,0,0,65,0,0,0,4,0,0,0,81,0,0,0,4,0,0,0,97,0,0,0,4,0,0,0,113,0,0,0,5,0,0,0,145,0,0,0,5,0,0,0,177,0,0,0,5,0,0,0,209,0,0,0,5,0,0,0,241,0,0,0,6,0,0,0,49,1,0,0,6,0,0,0,113,1,0,0,7,0,0,0,241,1,0,0,8,0,0,0,241,2,0,0,9,0,0,0,241,4,0,0,10,0,0,0,241,8,0,0,11,0,0,0,241,16,0,0,12,0,0,0,241,32,0,0,13,0,0,0,241,64,0,0,24,0,0,0,40,112,111,115,32,38,32,55,41,32,61,61,32,48,0,0,87,114,105,116,101,66,105,116,115,80,114,101,112,97,114,101,83,116,111,114,97,103,101,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,24,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,14,0,0,0,18,0,0,0,26,0,0,0,34,0,0,0,50,0,0,0,66,0,0,0,98,0,0,0,130,0,0,0,194,0,0,0,66,1,0,0,66,2,0,0,66,4,0,0,66,8,0,0,66,24,0,0,66,88,0,0,2,0,0,0,3,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,9,0,0,0,9,0,0,0,8,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,36,0,0,0,84,0,0,0,140,0,0,0,172,0,0,0,208,0,0,0,248,0,0,0,36,1,0,0,84,1,0,0,110,1,0,0,138,1,0,0,153,1,0,0,161,1,0,128,169,1,0,128,187,1,0,0,197,1,0,0,207,1,0,64,212,1,0,192,217,1,0,160,220,1,0,0,0,0,0,116,105,109,101,100,111,119,110,108,105,102,101,108,101,102,116,98,97,99,107,99,111,100,101,100,97,116,97,115,104,111,119,111,110,108,121,115,105,116,101,99,105,116,121,111,112,101,110,106,117,115,116,108,105,107,101,102,114,101,101,119,111,114,107,116,101,120,116,121,101,97,114,111,118,101,114,98,111,100,121,108,111,118,101,102,111,114,109,98,111,111,107,112,108,97,121,108,105,118,101,108,105,110,101,104,101,108,112,104,111,109,101,115,105,100,101,109,111,114,101,119,111,114,100,108,111,110,103,116,104,101,109,118,105,101,119,102,105,110,100,112,97,103,101,100,97,121,115,102,117,108,108,104,101,97,100,116,101,114,109,101,97,99,104,97,114,101,97,102,114,111,109,116,114,117,101,109,97,114,107,97,98,108,101,117,112,111,110,104,105,103,104,100,97,116,101,108,97,110,100,110,101,119,115,101,118,101,110,110,101,120,116,99,97,115,101,98,111,116,104,112,111,115,116,117,115,101,100,109,97,100,101,104,97,110,100,104,101,114,101,119,104,97,116,110,97,109,101,76,105,110,107,98,108,111,103,115,105,122,101,98,97,115,101,104,101,108,100,109,97,107,101,109,97,105,110,117,115,101,114,39,41,32,43,104,111,108,100,101,110,100,115,119,105,116,104,78,101,119,115,114,101,97,100,119,101,114,101,115,105,103,110,116,97,107,101,104,97,118,101,103,97,109,101,115,101,101,110,99,97,108,108,112,97,116,104,119,101,108,108,112,108,117,115,109,101,110,117,102,105,108,109,112,97,114,116,106,111,105,110,116,104,105,115,108,105,115,116,103,111,111,100,110,101,101,100,119,97,121,115,119,101,115,116,106,111,98,115,109,105,110,100,97,108,115,111,108,111,103,111,114,105,99,104,117,115,101,115,108,97,115,116,116,101,97,109,97,114,109,121,102,111,111,100,107,105,110,103,119,105,108,108,101,97,115,116,119,97,114,100,98,101,115,116,102,105,114,101,80,97,103,101,107,110,111,119,97,119,97,121,46,112,110,103,109,111,118,101,116,104,97,110,108,111,97,100,103,105,118,101,115,101,108,102,110,111,116,101,109,117,99,104,102,101,101,100,109,97,110,121,114,111,99,107,105,99,111,110,111,110,99,101,108,111,111,107,104,105,100,101,100,105,101,100,72,111,109,101,114,117,108,101,104,111,115,116,97,106,97,120,105,110,102,111,99,108,117,98,108,97,119,115,108,101,115,115,104,97,108,102,115,111,109,101,115,117,99,104,122,111,110,101,49,48,48,37,111,110,101,115,99,97,114,101,84,105,109,101,114,97,99,101,98,108,117,101,102,111,117,114,119,101,101,107,102,97,99,101,104,111,112,101,103,97,118,101,104,97,114,100,108,111,115,116,119,104,101,110,112,97,114,107,107,101,112,116,112,97,115,115,115,104,105,112,114,111,111,109,72,84,77,76,112,108,97,110,84,121,112,101,100,111,110,101,115,97,118,101,107,101,101,112,102,108,97,103,108,105,110,107,115,111,108,100,102,105,118,101,116,111,111,107,114,97,116,101,116,111,119,110,106,117,109,112,116,104,117,115,100,97,114,107,99,97,114,100,102,105,108,101,102,101,97,114,115,116,97,121,107,105,108,108,116,104,97,116,102,97,108,108,97,117,116,111,101,118,101,114,46,99,111,109,116,97,108,107,115,104,111,112,118,111,116,101,100,101,101,112,109,111,100,101,114,101,115,116,116,117,114,110,98,111,114,110,98,97,110,100,102,101,108,108,114,111,115,101,117,114,108,40,115,107,105,110,114,111,108,101,99,111,109,101,97,99,116,115,97,103,101,115,109,101,101,116,103,111,108,100,46,106,112,103,105,116,101,109,118,97,114,121,102,101,108,116,116,104,101,110,115,101,110,100,100,114,111,112,86,105,101,119,99,111,112,121,49,46,48,34,60,47,97,62,115,116,111,112,101,108,115,101,108,105,101,115,116,111,117,114,112,97,99,107,46,103,105,102,112,97,115,116,99,115,115,63,103,114,97,121,109,101,97,110,38,103,116,59,114,105,100,101,115,104,111,116,108,97,116,101,115,97,105,100,114,111,97,100,118,97,114,32,102,101,101,108,106,111,104,110,114,105,99,107,112,111,114,116,102,97,115,116,39,85,65,45,100,101,97,100,60,47,98,62,112,111,111,114,98,105,108,108,116,121,112,101,85,46,83,46,119,111,111,100,109,117,115,116,50,112,120,59,73,110,102,111,114,97,110,107,119,105,100,101,119,97,110,116,119,97,108,108,108,101,97,100,91,48,93,59,112,97,117,108,119,97,118,101,115,117,114,101,36,40,39,35,119,97,105,116,109,97,115,115,97,114,109,115,103,111,101,115,103,97,105,110,108,97,110,103,112,97,105,100,33,45,45,32,108,111,99,107,117,110,105,116,114,111,111,116,119,97,108,107,102,105,114,109,119,105,102,101,120,109,108,34,115,111,110,103,116,101,115,116,50,48,112,120,107,105,110,100,114,111,119,115,116,111,111,108,102,111,110,116,109,97,105,108,115,97,102,101,115,116,97,114,109,97,112,115,99,111,114,101,114,97,105,110,102,108,111,119,98,97,98,121,115,112,97,110,115,97,121,115,52,112,120,59,54,112,120,59,97,114,116,115,102,111,111,116,114,101,97,108,119,105,107,105,104,101,97,116,115,116,101,112,116,114,105,112,111,114,103,47,108,97,107,101,119,101,97,107,116,111,108,100,70,111,114,109,99,97,115,116,102,97,110,115,98,97,110,107,118,101,114,121,114,117,110,115,106,117,108,121,116,97,115,107,49,112,120,59,103,111,97,108,103,114,101,119,115,108,111,119,101,100,103,101,105,100,61,34,115,101,116,115,53,112,120,59,46,106,115,63,52,48,112,120,105,102,32,40,115,111,111,110,115,101,97,116,110,111,110,101,116,117,98,101,122,101,114,111,115,101,110,116,114,101,101,100,102,97,99,116,105,110,116,111,103,105,102,116,104,97,114,109,49,56,112,120,99,97,109,101,104,105,108,108,98,111,108,100,122,111,111,109,118,111,105,100,101,97,115,121,114,105,110,103,102,105,108,108,112,101,97,107,105,110,105,116,99,111,115,116,51,112,120,59,106,97,99,107,116,97,103,115,98,105,116,115,114,111,108,108,101,100,105,116,107,110,101,119,110,101,97,114,60,33,45,45,103,114,111,119,74,83,79,78,100,117,116,121,78,97,109,101,115,97,108,101,121,111,117,32,108,111,116,115,112,97,105,110,106,97,122,122,99,111,108,100,101,121,101,115,102,105,115,104,119,119,119,46,114,105,115,107,116,97,98,115,112,114,101,118,49,48,112,120,114,105,115,101,50,53,112,120,66,108,117,101,100,105,110,103,51,48,48,44,98,97,108,108,102,111,114,100,101,97,114,110,119,105,108,100,98,111,120,46,102,97,105,114,108,97,99,107,118,101,114,115,112,97,105,114,106,117,110,101,116,101,99,104,105,102,40,33,112,105,99,107,101,118,105,108,36,40,34,35,119,97,114,109,108,111,114,100,100,111,101,115,112,117,108,108,44,48,48,48,105,100,101,97,100,114,97,119,104,117,103,101,115,112,111,116,102,117,110,100,98,117,114,110,104,114,101,102,99,101,108,108,107,101,121,115,116,105,99,107,104,111,117,114,108,111,115,115,102,117,101,108,49,50,112,120,115,117,105,116,100,101,97,108,82,83,83,34,97,103,101,100,103,114,101,121,71,69,84,34,101,97,115,101,97,105,109,115,103,105,114,108,97,105,100,115,56,112,120,59,110,97,118,121,103,114,105,100,116,105,112,115,35,57,57,57,119,97,114,115,108,97,100,121,99,97,114,115,41,59,32,125,112,104,112,63,104,101,108,108,116,97,108,108,119,104,111,109,122,104,58,229,42,47,13,10,32,49,48,48,104,97,108,108,46,10,10,65,55,112,120,59,112,117,115,104,99,104,97,116,48,112,120,59,99,114,101,119,42,47,60,47,104,97,115,104,55,53,112,120,102,108,97,116,114,97,114,101,32,38,38,32,116,101,108,108,99,97,109,112,111,110,116,111,108,97,105,100,109,105,115,115,115,107,105,112,116,101,110,116,102,105,110,101,109,97,108,101,103,101,116,115,112,108,111,116,52,48,48,44,13,10,13,10,99,111,111,108,102,101,101,116,46,112,104,112,60,98,114,62,101,114,105,99,109,111,115,116,103,117,105,100,98,101,108,108,100,101,115,99,104,97,105,114,109,97,116,104,97,116,111,109,47,105,109,103,38,35,56,50,108,117,99,107,99,101,110,116,48,48,48,59,116,105,110,121,103,111,110,101,104,116,109,108,115,101,108,108,100,114,117,103,70,82,69,69,110,111,100,101,110,105,99,107,63,105,100,61,108,111,115,101,110,117,108,108,118,97,115,116,119,105,110,100,82,83,83,32,119,101,97,114,114,101,108,121,98,101,101,110,115,97,109,101,100,117,107,101,110,97,115,97,99,97,112,101,119,105,115,104,103,117,108,102,84,50,51,58,104,105,116,115,115,108,111,116,103,97,116,101,107,105,99,107,98,108,117,114,116,104,101,121,49,53,112,120,39,39,41,59,41,59,34,62,109,115,105,101,119,105,110,115,98,105,114,100,115,111,114,116,98,101,116,97,115,101,101,107,84,49,56,58,111,114,100,115,116,114,101,101,109,97,108,108,54,48,112,120,102,97,114,109,226,128,153,115,98,111,121,115,91,48,93,46,39,41,59,34,80,79,83,84,98,101,97,114,107,105,100,115,41,59,125,125,109,97,114,121,116,101,110,100,40,85,75,41,113,117,97,100,122,104,58,230,45,115,105,122,45,45,45,45,112,114,111,112,39,41,59,13,108,105,102,116,84,49,57,58,118,105,99,101,97,110,100,121,100,101,98,116,62,82,83,83,112,111,111,108,110,101,99,107,98,108,111,119,84,49,54,58,100,111,111,114,101,118,97,108,84,49,55,58,108,101,116,115,102,97,105,108,111,114,97,108,112,111,108,108,110,111,118,97,99,111,108,115,103,101,110,101,32,226,128,148,115,111,102,116,114,111,109,101,116,105,108,108,114,111,115,115,60,104,51,62,112,111,117,114,102,97,100,101,112,105,110,107,60,116,114,62,109,105,110,105,41,124,33,40,109,105,110,101,122,104,58,232,98,97,114,115,104,101,97,114,48,48,41,59,109,105,108,107,32,45,45,62,105,114,111,110,102,114,101,100,100,105,115,107,119,101,110,116,115,111,105,108,112,117,116,115,47,106,115,47,104,111,108,121,84,50,50,58,73,83,66,78,84,50,48,58,97,100,97,109,115,101,101,115,60,104,50,62,106,115,111,110,39,44,32,39,99,111,110,116,84,50,49,58,32,82,83,83,108,111,111,112,97,115,105,97,109,111,111,110,60,47,112,62,115,111,117,108,76,73,78,69,102,111,114,116,99,97,114,116,84,49,52,58,60,104,49,62,56,48,112,120,33,45,45,60,57,112,120,59,84,48,52,58,109,105,107,101,58,52,54,90,110,105,99,101,105,110,99,104,89,111,114,107,114,105,99,101,122,104,58,228,39,41,41,59,112,117,114,101,109,97,103,101,112,97,114,97,116,111,110,101,98,111,110,100,58,51,55,90,95,111,102,95,39,93,41,59,48,48,48,44,122,104,58,231,116,97,110,107,121,97,114,100,98,111,119,108,98,117,115,104,58,53,54,90,74,97,118,97,51,48,112,120,10,124,125,10,37,67,51,37,58,51,52,90,106,101,102,102,69,88,80,73,99,97,115,104,118,105,115,97,103,111,108,102,115,110,111,119,122,104,58,233,113,117,101,114,46,99,115,115,115,105,99,107,109,101,97,116,109,105,110,46,98,105,110,100,100,101,108,108,104,105,114,101,112,105,99,115,114,101,110,116,58,51,54,90,72,84,84,80,45,50,48,49,102,111,116,111,119,111,108,102,69,78,68,32,120,98,111,120,58,53,52,90,66,79,68,89,100,105,99,107,59,10,125,10,101,120,105,116,58,51,53,90,118,97,114,115,98,101,97,116,39,125,41,59,100,105,101,116,57,57,57,59,97,110,110,101,125,125,60,47,91,105,93,46,76,97,110,103,107,109,194,178,119,105,114,101,116,111,121,115,97,100,100,115,115,101,97,108,97,108,101,120,59,10,9,125,101,99,104,111,110,105,110,101,46,111,114,103,48,48,53,41,116,111,110,121,106,101,119,115,115,97,110,100,108,101,103,115,114,111,111,102,48,48,48,41,32,50,48,48,119,105,110,101,103,101,97,114,100,111,103,115,98,111,111,116,103,97,114,121,99,117,116,115,116,121,108,101,116,101,109,112,116,105,111,110,46,120,109,108,99,111,99,107,103,97,110,103,36,40,39,46,53,48,112,120,80,104,46,68,109,105,115,99,97,108,97,110,108,111,97,110,100,101,115,107,109,105,108,101,114,121,97,110,117,110,105,120,100,105,115,99,41,59,125,10,100,117,115,116,99,108,105,112,41,46,10,10,55,48,112,120,45,50,48,48,68,86,68,115,55,93,62,60,116,97,112,101,100,101,109,111,105,43,43,41,119,97,103,101,101,117,114,111,112,104,105,108,111,112,116,115,104,111,108,101,70,65,81,115,97,115,105,110,45,50,54,84,108,97,98,115,112,101,116,115,85,82,76,32,98,117,108,107,99,111,111,107,59,125,13,10,72,69,65,68,91,48,93,41,97,98,98,114,106,117,97,110,40,49,57,56,108,101,115,104,116,119,105,110,60,47,105,62,115,111,110,121,103,117,121,115,102,117,99,107,112,105,112,101,124,45,10,33,48,48,50,41,110,100,111,119,91,49,93,59,91,93,59,10,76,111,103,32,115,97,108,116,13,10,9,9,98,97,110,103,116,114,105,109,98,97,116,104,41,123,13,10,48,48,112,120,10,125,41,59,107,111,58,236,102,101,101,115,97,100,62,13,115,58,47,47,32,91,93,59,116,111,108,108,112,108,117,103,40,41,123,10,123,13,10,32,46,106,115,39,50,48,48,112,100,117,97,108,98,111,97,116,46,74,80,71,41,59,10,125,113,117,111,116,41,59,10,10,39,41,59,10,13,10,125,13,50,48,49,52,50,48,49,53,50,48,49,54,50,48,49,55,50,48,49,56,50,48,49,57,50,48,50,48,50,48,50,49,50,48,50,50,50,48,50,51,50,48,50,52,50,48,50,53,50,48,50,54,50,48,50,55,50,48,50,56,50,48,50,57,50,48,51,48,50,48,51,49,50,48,51,50,50,48,51,51,50,48,51,52,50,48,51,53,50,48,51,54,50,48,51,55,50,48,49,51,50,48,49,50,50,48,49,49,50,48,49,48,50,48,48,57,50,48,48,56,50,48,48,55,50,48,48,54,50,48,48,53,50,48,48,52,50,48,48,51,50,48,48,50,50,48,48,49,50,48,48,48,49,57,57,57,49,57,57,56,49,57,57,55,49,57,57,54,49,57,57,53,49,57,57,52,49,57,57,51,49,57,57,50,49,57,57,49,49,57,57,48,49,57,56,57,49,57,56,56,49,57,56,55,49,57,56,54,49,57,56,53,49,57,56,52,49,57,56,51,49,57,56,50,49,57,56,49,49,57,56,48,49,57,55,57,49,57,55,56,49,57,55,55,49,57,55,54,49,57,55,53,49,57,55,52,49,57,55,51,49,57,55,50,49,57,55,49,49,57,55,48,49,57,54,57,49,57,54,56,49,57,54,55,49,57,54,54,49,57,54,53,49,57,54,52,49,57,54,51,49,57,54,50,49,57,54,49,49,57,54,48,49,57,53,57,49,57,53,56,49,57,53,55,49,57,53,54,49,57,53,53,49,57,53,52,49,57,53,51,49,57,53,50,49,57,53,49,49,57,53,48,49,48,48,48,49,48,50,52,49,51,57,52,48,48,48,48,57,57,57,57,99,111,109,111,109,195,161,115,101,115,116,101,101,115,116,97,112,101,114,111,116,111,100,111,104,97,99,101,99,97,100,97,97,195,177,111,98,105,101,110,100,195,173,97,97,115,195,173,118,105,100,97,99,97,115,111,111,116,114,111,102,111,114,111,115,111,108,111,111,116,114,97,99,117,97,108,100,105,106,111,115,105,100,111,103,114,97,110,116,105,112,111,116,101,109,97,100,101,98,101,97,108,103,111,113,117,195,169,101,115,116,111,110,97,100,97,116,114,101,115,112,111,99,111,99,97,115,97,98,97,106,111,116,111,100,97,115,105,110,111,97,103,117,97,112,117,101,115,117,110,111,115,97,110,116,101,100,105,99,101,108,117,105,115],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+184368);allocate([101,108,108,97,109,97,121,111,122,111,110,97,97,109,111,114,112,105,115,111,111,98,114,97,99,108,105,99,101,108,108,111,100,105,111,115,104,111,114,97,99,97,115,105,208,183,208,176,208,189,208,176,208,190,208,188,209,128,208,176,209,128,209,131,209,130,208,176,208,189,208,181,208,191,208,190,208,190,209,130,208,184,208,183,208,189,208,190,208,180,208,190,209,130,208,190,208,182,208,181,208,190,208,189,208,184,209,133,208,157,208,176,208,181,208,181,208,177,209,139,208,188,209,139,208,146,209,139,209,129,208,190,208,178,209,139,208,178,208,190,208,157,208,190,208,190,208,177,208,159,208,190,208,187,208,184,208,189,208,184,208,160,208,164,208,157,208,181,208,156,209,139,209,130,209,139,208,158,208,189,208,184,208,188,208,180,208,176,208,151,208,176,208,148,208,176,208,157,209,131,208,158,208,177,209,130,208,181,208,152,208,183,208,181,208,185,208,189,209,131,208,188,208,188,208,162,209,139,209,131,208,182,217,129,217,138,216,163,217,134,217,133,216,167,217,133,216,185,217,131,217,132,216,163,217,136,216,177,216,175,217,138,216,167,217,129,217,137,217,135,217,136,217,132,217,133,217,132,217,131,216,167,217,136,217,132,217,135,216,168,216,179,216,167,217,132,216,165,217,134,217,135,217,138,216,163,217,138,217,130,216,175,217,135,217,132,216,171,217,133,216,168,217,135,217,132,217,136,217,132,217,138,216,168,217,132,216,167,217,138,216,168,217,131,216,180,217,138,216,167,217,133,216,163,217,133,217,134,216,170,216,168,217,138,217,132,217,134,216,173,216,168,217,135,217,133,217,133,216,180,217,136,216,180,102,105,114,115,116,118,105,100,101,111,108,105,103,104,116,119,111,114,108,100,109,101,100,105,97,119,104,105,116,101,99,108,111,115,101,98,108,97,99,107,114,105,103,104,116,115,109,97,108,108,98,111,111,107,115,112,108,97,99,101,109,117,115,105,99,102,105,101,108,100,111,114,100,101,114,112,111,105,110,116,118,97,108,117,101,108,101,118,101,108,116,97,98,108,101,98,111,97,114,100,104,111,117,115,101,103,114,111,117,112,119,111,114,107,115,121,101,97,114,115,115,116,97,116,101,116,111,100,97,121,119,97,116,101,114,115,116,97,114,116,115,116,121,108,101,100,101,97,116,104,112,111,119,101,114,112,104,111,110,101,110,105,103,104,116,101,114,114,111,114,105,110,112,117,116,97,98,111,117,116,116,101,114,109,115,116,105,116,108,101,116,111,111,108,115,101,118,101,110,116,108,111,99,97,108,116,105,109,101,115,108,97,114,103,101,119,111,114,100,115,103,97,109,101,115,115,104,111,114,116,115,112,97,99,101,102,111,99,117,115,99,108,101,97,114,109,111,100,101,108,98,108,111,99,107,103,117,105,100,101,114,97,100,105,111,115,104,97,114,101,119,111,109,101,110,97,103,97,105,110,109,111,110,101,121,105,109,97,103,101,110,97,109,101,115,121,111,117,110,103,108,105,110,101,115,108,97,116,101,114,99,111,108,111,114,103,114,101,101,110,102,114,111,110,116,38,97,109,112,59,119,97,116,99,104,102,111,114,99,101,112,114,105,99,101,114,117,108,101,115,98,101,103,105,110,97,102,116,101,114,118,105,115,105,116,105,115,115,117,101,97,114,101,97,115,98,101,108,111,119,105,110,100,101,120,116,111,116,97,108,104,111,117,114,115,108,97,98,101,108,112,114,105,110,116,112,114,101,115,115,98,117,105,108,116,108,105,110,107,115,115,112,101,101,100,115,116,117,100,121,116,114,97,100,101,102,111,117,110,100,115,101,110,115,101,117,110,100,101,114,115,104,111,119,110,102,111,114,109,115,114,97,110,103,101,97,100,100,101,100,115,116,105,108,108,109,111,118,101,100,116,97,107,101,110,97,98,111,118,101,102,108,97,115,104,102,105,120,101,100,111,102,116,101,110,111,116,104,101,114,118,105,101,119,115,99,104,101,99,107,108,101,103,97,108,114,105,118,101,114,105,116,101,109,115,113,117,105,99,107,115,104,97,112,101,104,117,109,97,110,101,120,105,115,116,103,111,105,110,103,109,111,118,105,101,116,104,105,114,100,98,97,115,105,99,112,101,97,99,101,115,116,97,103,101,119,105,100,116,104,108,111,103,105,110,105,100,101,97,115,119,114,111,116,101,112,97,103,101,115,117,115,101,114,115,100,114,105,118,101,115,116,111,114,101,98,114,101,97,107,115,111,117,116,104,118,111,105,99,101,115,105,116,101,115,109,111,110,116,104,119,104,101,114,101,98,117,105,108,100,119,104,105,99,104,101,97,114,116,104,102,111,114,117,109,116,104,114,101,101,115,112,111,114,116,112,97,114,116,121,67,108,105,99,107,108,111,119,101,114,108,105,118,101,115,99,108,97,115,115,108,97,121,101,114,101,110,116,114,121,115,116,111,114,121,117,115,97,103,101,115,111,117,110,100,99,111,117,114,116,121,111,117,114,32,98,105,114,116,104,112,111,112,117,112,116,121,112,101,115,97,112,112,108,121,73,109,97,103,101,98,101,105,110,103,117,112,112,101,114,110,111,116,101,115,101,118,101,114,121,115,104,111,119,115,109,101,97,110,115,101,120,116,114,97,109,97,116,99,104,116,114,97,99,107,107,110,111,119,110,101,97,114,108,121,98,101,103,97,110,115,117,112,101,114,112,97,112,101,114,110,111,114,116,104,108,101,97,114,110,103,105,118,101,110,110,97,109,101,100,101,110,100,101,100,84,101,114,109,115,112,97,114,116,115,71,114,111,117,112,98,114,97,110,100,117,115,105,110,103,119,111,109,97,110,102,97,108,115,101,114,101,97,100,121,97,117,100,105,111,116,97,107,101,115,119,104,105,108,101,46,99,111,109,47,108,105,118,101,100,99,97,115,101,115,100,97,105,108,121,99,104,105,108,100,103,114,101,97,116,106,117,100,103,101,116,104,111,115,101,117,110,105,116,115,110,101,118,101,114,98,114,111,97,100,99,111,97,115,116,99,111,118,101,114,97,112,112,108,101,102,105,108,101,115,99,121,99,108,101,115,99,101,110,101,112,108,97,110,115,99,108,105,99,107,119,114,105,116,101,113,117,101,101,110,112,105,101,99,101,101,109,97,105,108,102,114,97,109,101,111,108,100,101,114,112,104,111,116,111,108,105,109,105,116,99,97,99,104,101,99,105,118,105,108,115,99,97,108,101,101,110,116,101,114,116,104,101,109,101,116,104,101,114,101,116,111,117,99,104,98,111,117,110,100,114,111,121,97,108,97,115,107,101,100,119,104,111,108,101,115,105,110,99,101,115,116,111,99,107,32,110,97,109,101,102,97,105,116,104,104,101,97,114,116,101,109,112,116,121,111,102,102,101,114,115,99,111,112,101,111,119,110,101,100,109,105,103,104,116,97,108,98,117,109,116,104,105,110,107,98,108,111,111,100,97,114,114,97,121,109,97,106,111,114,116,114,117,115,116,99,97,110,111,110,117,110,105,111,110,99,111,117,110,116,118,97,108,105,100,115,116,111,110,101,83,116,121,108,101,76,111,103,105,110,104,97,112,112,121,111,99,99,117,114,108,101,102,116,58,102,114,101,115,104,113,117,105,116,101,102,105,108,109,115,103,114,97,100,101,110,101,101,100,115,117,114,98,97,110,102,105,103,104,116,98,97,115,105,115,104,111,118,101,114,97,117,116,111,59,114,111,117,116,101,46,104,116,109,108,109,105,120,101,100,102,105,110,97,108,89,111,117,114,32,115,108,105,100,101,116,111,112,105,99,98,114,111,119,110,97,108,111,110,101,100,114,97,119,110,115,112,108,105,116,114,101,97,99,104,82,105,103,104,116,100,97,116,101,115,109,97,114,99,104,113,117,111,116,101,103,111,111,100,115,76,105,110,107,115,100,111,117,98,116,97,115,121,110,99,116,104,117,109,98,97,108,108,111,119,99,104,105,101,102,121,111,117,116,104,110,111,118,101,108,49,48,112,120,59,115,101,114,118,101,117,110,116,105,108,104,97,110,100,115,67,104,101,99,107,83,112,97,99,101,113,117,101,114,121,106,97,109,101,115,101,113,117,97,108,116,119,105,99,101,48,44,48,48,48,83,116,97,114,116,112,97,110,101,108,115,111,110,103,115,114,111,117,110,100,101,105,103,104,116,115,104,105,102,116,119,111,114,116,104,112,111,115,116,115,108,101,97,100,115,119,101,101,107,115,97,118,111,105,100,116,104,101,115,101,109,105,108,101,115,112,108,97,110,101,115,109,97,114,116,97,108,112,104,97,112,108,97,110,116,109,97,114,107,115,114,97,116,101,115,112,108,97,121,115,99,108,97,105,109,115,97,108,101,115,116,101,120,116,115,115,116,97,114,115,119,114,111,110,103,60,47,104,51,62,116,104,105,110,103,46,111,114,103,47,109,117,108,116,105,104,101,97,114,100,80,111,119,101,114,115,116,97,110,100,116,111,107,101,110,115,111,108,105,100,40,116,104,105,115,98,114,105,110,103,115,104,105,112,115,115,116,97,102,102,116,114,105,101,100,99,97,108,108,115,102,117,108,108,121,102,97,99,116,115,97,103,101,110,116,84,104,105,115,32,47,47,45,45,62,97,100,109,105,110,101,103,121,112,116,69,118,101,110,116,49,53,112,120,59,69,109,97,105,108,116,114,117,101,34,99,114,111,115,115,115,112,101,110,116,98,108,111,103,115,98,111,120,34,62,110,111,116,101,100,108,101,97,118,101,99,104,105,110,97,115,105,122,101,115,103,117,101,115,116,60,47,104,52,62,114,111,98,111,116,104,101,97,118,121,116,114,117,101,44,115,101,118,101,110,103,114,97,110,100,99,114,105,109,101,115,105,103,110,115,97,119,97,114,101,100,97,110,99,101,112,104,97,115,101,62,60,33,45,45,101,110,95,85,83,38,35,51,57,59,50,48,48,112,120,95,110,97,109,101,108,97,116,105,110,101,110,106,111,121,97,106,97,120,46,97,116,105,111,110,115,109,105,116,104,85,46,83,46,32,104,111,108,100,115,112,101,116,101,114,105,110,100,105,97,110,97,118,34,62,99,104,97,105,110,115,99,111,114,101,99,111,109,101,115,100,111,105,110,103,112,114,105,111,114,83,104,97,114,101,49,57,57,48,115,114,111,109,97,110,108,105,115,116,115,106,97,112,97,110,102,97,108,108,115,116,114,105,97,108,111,119,110,101,114,97,103,114,101,101,60,47,104,50,62,97,98,117,115,101,97,108,101,114,116,111,112,101,114,97,34,45,47,47,87,99,97,114,100,115,104,105,108,108,115,116,101,97,109,115,80,104,111,116,111,116,114,117,116,104,99,108,101,97,110,46,112,104,112,63,115,97,105,110,116,109,101,116,97,108,108,111,117,105,115,109,101,97,110,116,112,114,111,111,102,98,114,105,101,102,114,111,119,34,62,103,101,110,114,101,116,114,117,99,107,108,111,111,107,115,86,97,108,117,101,70,114,97,109,101,46,110,101,116,47,45,45,62,10,60,116,114,121,32,123,10,118,97,114,32,109,97,107,101,115,99,111,115,116,115,112,108,97,105,110,97,100,117,108,116,113,117,101,115,116,116,114,97,105,110,108,97,98,111,114,104,101,108,112,115,99,97,117,115,101,109,97,103,105,99,109,111,116,111,114,116,104,101,105,114,50,53,48,112,120,108,101,97,115,116,115,116,101,112,115,67,111,117,110,116,99,111,117,108,100,103,108,97,115,115,115,105,100,101,115,102,117,110,100,115,104,111,116,101,108,97,119,97,114,100,109,111,117,116,104,109,111,118,101,115,112,97,114,105,115,103,105,118,101,115,100,117,116,99,104,116,101,120,97,115,102,114,117,105,116,110,117,108,108,44,124,124,91,93,59,116,111,112,34,62,10,60,33,45,45,80,79,83,84,34,111,99,101,97,110,60,98,114,47,62,102,108,111,111,114,115,112,101,97,107,100,101,112,116,104,32,115,105,122,101,98,97,110,107,115,99,97,116,99,104,99,104,97,114,116,50,48,112,120,59,97,108,105,103,110,100,101,97,108,115,119,111,117,108,100,53,48,112,120,59,117,114,108,61,34,112,97,114,107,115,109,111,117,115,101,77,111,115,116,32,46,46,46,60,47,97,109,111,110,103,98,114,97,105,110,98,111,100,121,32,110,111,110,101,59,98,97,115,101,100,99,97,114,114,121,100,114,97,102,116,114,101,102,101,114,112,97,103,101,95,104,111,109,101,46,109,101,116,101,114,100,101,108,97,121,100,114,101,97,109,112,114,111,118,101,106,111,105,110,116,60,47,116,114,62,100,114,117,103,115,60,33,45,45,32,97,112,114,105,108,105,100,101,97,108,97,108,108,101,110,101,120,97,99,116,102,111,114,116,104,99,111,100,101,115,108,111,103,105,99,86,105,101,119,32,115,101,101,109,115,98,108,97,110,107,112,111,114,116,115,32,40,50,48,48,115,97,118,101,100,95,108,105,110,107,103,111,97,108,115,103,114,97,110,116,103,114,101,101,107,104,111,109,101,115,114,105,110,103,115,114,97,116,101,100,51,48,112,120,59,119,104,111,115,101,112,97,114,115,101,40,41,59,34,32,66,108,111,99,107,108,105,110,117,120,106,111,110,101,115,112,105,120,101,108,39,41,59,34,62,41,59,105,102,40,45,108,101,102,116,100,97,118,105,100,104,111,114,115,101,70,111,99,117,115,114,97,105,115,101,98,111,120,101,115,84,114,97,99,107,101,109,101,110,116,60,47,101,109,62,98,97,114,34,62,46,115,114,99,61,116,111,119,101,114,97,108,116,61,34,99,97,98,108,101,104,101,110,114,121,50,52,112,120,59,115,101,116,117,112,105,116,97,108,121,115,104,97,114,112,109,105,110,111,114,116,97,115,116,101,119,97,110,116,115,116,104,105,115,46,114,101,115,101,116,119,104,101,101,108,103,105,114,108,115,47,99,115,115,47,49,48,48,37,59,99,108,117,98,115,115,116,117,102,102,98,105,98,108,101,118,111,116,101,115,32,49,48,48,48,107,111,114,101,97,125,41,59,13,10,98,97,110,100,115,113,117,101,117,101,61,32,123,125,59,56,48,112,120,59,99,107,105,110,103,123,13,10,9,9,97,104,101,97,100,99,108,111,99,107,105,114,105,115,104,108,105,107,101,32,114,97,116,105,111,115,116,97,116,115,70,111,114,109,34,121,97,104,111,111,41,91,48,93,59,65,98,111,117,116,102,105,110,100,115,60,47,104,49,62,100,101,98,117,103,116,97,115,107,115,85,82,76,32,61,99,101,108,108,115,125,41,40,41,59,49,50,112,120,59,112,114,105,109,101,116,101,108,108,115,116,117,114,110,115,48,120,54,48,48,46,106,112,103,34,115,112,97,105,110,98,101,97,99,104,116,97,120,101,115,109,105,99,114,111,97,110,103,101,108,45,45,62,60,47,103,105,102,116,115,115,116,101,118,101,45,108,105,110,107,98,111,100,121,46,125,41,59,10,9,109,111,117,110,116,32,40,49,57,57,70,65,81,60,47,114,111,103,101,114,102,114,97,110,107,67,108,97,115,115,50,56,112,120,59,102,101,101,100,115,60,104,49,62,60,115,99,111,116,116,116,101,115,116,115,50,50,112,120,59,100,114,105,110,107,41,32,124,124,32,108,101,119,105,115,115,104,97,108,108,35,48,51,57,59,32,102,111,114,32,108,111,118,101,100,119,97,115,116,101,48,48,112,120,59,106,97,58,227,130,115,105,109,111,110,60,102,111,110,116,114,101,112,108,121,109,101,101,116,115,117,110,116,101,114,99,104,101,97,112,116,105,103,104,116,66,114,97,110,100,41,32,33,61,32,100,114,101,115,115,99,108,105,112,115,114,111,111,109,115,111,110,107,101,121,109,111,98,105,108,109,97,105,110,46,78,97,109,101,32,112,108,97,116,101,102,117,110,110,121,116,114,101,101,115,99,111,109,47,34,49,46,106,112,103,119,109,111,100,101,112,97,114,97,109,83,84,65,82,84,108,101,102,116,32,105,100,100,101,110,44,32,50,48,49,41,59,10,125,10,102,111,114,109,46,118,105,114,117,115,99,104,97,105,114,116,114,97,110,115,119,111,114,115,116,80,97,103,101,115,105,116,105,111,110,112,97,116,99,104,60,33,45,45,10,111,45,99,97,99,102,105,114,109,115,116,111,117,114,115,44,48,48,48,32,97,115,105,97,110,105,43,43,41,123,97,100,111,98,101,39,41,91,48,93,105,100,61,49,48,98,111,116,104,59,109,101,110,117,32,46,50,46,109,105,46,112,110,103,34,107,101,118,105,110,99,111,97,99,104,67,104,105,108,100,98,114,117,99,101,50,46,106,112,103,85,82,76,41,43,46,106,112,103,124,115,117,105,116,101,115,108,105,99,101,104,97,114,114,121,49,50,48,34,32,115,119,101,101,116,116,114,62,13,10,110,97,109,101,61,100,105,101,103,111,112,97,103,101,32,115,119,105,115,115,45,45,62,10,10,35,102,102,102,59,34,62,76,111,103,46,99,111,109,34,116,114,101,97,116,115,104,101,101,116,41,32,38,38,32,49,52,112,120,59,115,108,101,101,112,110,116,101,110,116,102,105,108,101,100,106,97,58,227,131,105,100,61,34,99,78,97,109,101,34,119,111,114,115,101,115,104,111,116,115,45,98,111,120,45,100,101,108,116,97,10,38,108,116,59,98,101,97,114,115,58,52,56,90,60,100,97,116,97,45,114,117,114,97,108,60,47,97,62,32,115,112,101,110,100,98,97,107,101,114,115,104,111,112,115,61,32,34,34,59,112,104,112,34,62,99,116,105,111,110,49,51,112,120,59,98,114,105,97,110,104,101,108,108,111,115,105,122,101,61,111,61,37,50,70,32,106,111,105,110,109,97,121,98,101,60,105,109,103,32,105,109,103,34,62,44,32,102,106,115,105,109,103,34,32,34,41,91,48,93,77,84,111,112,66,84,121,112,101,34,110,101,119,108,121,68,97,110,115,107,99,122,101,99,104,116,114,97,105,108,107,110,111,119,115,60,47,104,53,62,102,97,113,34,62,122,104,45,99,110,49,48,41,59,10,45,49,34,41,59,116,121,112,101,61,98,108,117,101,115,116,114,117,108,121,100,97,118,105,115,46,106,115,39,59,62,13,10,60,33,115,116,101,101,108,32,121,111,117,32,104,50,62,13,10,102,111,114,109,32,106,101,115,117,115,49,48,48,37,32,109,101,110,117,46,13,10,9,13,10,119,97,108,101,115,114,105,115,107,115,117,109,101,110,116,100,100,105,110,103,98,45,108,105,107,116,101,97,99,104,103,105,102,34,32,118,101,103,97,115,100,97,110,115,107,101,101,115,116,105,115,104,113,105,112,115,117,111,109,105,115,111,98,114,101,100,101,115,100,101,101,110,116,114,101,116,111,100,111,115,112,117,101,100,101,97,195,177,111,115,101,115,116,195,161,116,105,101,110,101,104,97,115,116,97,111,116,114,111,115,112,97,114,116,101,100,111,110,100,101,110,117,101,118,111,104,97,99,101,114,102,111,114,109,97,109,105,115,109,111,109,101,106,111,114,109,117,110,100,111,97,113,117,195,173,100,195,173,97,115,115,195,179,108,111,97,121,117,100,97,102,101,99,104,97,116,111,100,97,115,116,97,110,116,111,109,101,110,111,115,100,97,116,111,115,111,116,114,97,115,115,105,116,105,111,109,117,99,104,111,97,104,111,114,97,108,117,103,97,114,109,97,121,111,114,101,115,116,111,115,104,111,114,97,115,116,101,110,101,114,97,110,116,101,115,102,111,116,111,115,101,115,116,97,115,112,97,195,173,115,110,117,101,118,97,115,97,108,117,100,102,111,114,111,115,109,101,100,105,111,113,117,105,101,110,109,101,115,101,115,112,111,100,101,114,99,104,105,108,101,115,101,114,195,161,118,101,99,101,115,100,101,99,105,114,106,111,115,195,169,101,115,116,97,114,118,101,110,116,97,103,114,117,112,111,104,101,99,104,111,101,108,108,111,115,116,101,110,103,111,97,109,105,103,111,99,111,115,97,115,110,105,118,101,108,103,101,110,116,101,109,105,115,109,97,97,105,114,101,115,106,117,108,105,111,116,101,109,97,115,104,97,99,105,97,102,97,118,111,114,106,117,110,105,111,108,105,98,114,101,112,117,110,116,111,98,117,101,110,111,97,117,116,111,114,97,98,114,105,108,98,117,101,110,97,116,101,120,116,111,109,97,114,122,111,115,97,98,101,114,108,105,115,116,97,108,117,101,103,111,99,195,179,109,111,101,110,101,114,111,106,117,101,103,111,112,101,114,195,186,104,97,98,101,114,101,115,116,111,121,110,117,110,99,97,109,117,106,101,114,118,97,108,111,114,102,117,101,114,97,108,105,98,114,111,103,117,115,116,97,105,103,117,97,108,118,111,116,111,115,99,97,115,111,115,103,117,195,173,97,112,117,101,100,111,115,111,109,111,115,97,118,105,115,111,117,115,116,101,100,100,101,98,101,110,110,111,99,104,101,98,117,115,99,97,102,97,108,116,97,101,117,114,111,115,115,101,114,105,101,100,105,99,104,111,99,117,114,115,111,99,108,97,118,101,99,97,115,97,115,108,101,195,179,110,112,108,97,122,111,108,97,114,103,111,111,98,114,97,115,118,105,115,116,97,97,112,111,121,111,106,117,110,116,111,116,114,97,116,97,118,105,115,116,111,99,114,101,97,114,99,97,109,112,111,104,101,109,111,115,99,105,110,99,111,99,97,114,103,111,112,105,115,111,115,111,114,100,101,110,104,97,99,101,110,195,161,114,101,97,100,105,115,99,111,112,101,100,114,111,99,101,114,99,97,112,117,101,100,97,112,97,112,101,108,109,101,110,111,114,195,186,116,105,108,99,108,97,114,111,106,111,114,103,101,99,97,108,108,101,112,111,110,101,114,116,97,114,100,101,110,97,100,105,101,109,97,114,99,97,115,105,103,117,101,101,108,108,97,115,115,105,103,108,111,99,111,99,104,101,109,111,116,111,115,109,97,100,114,101,99,108,97,115,101,114,101,115,116,111,110,105,195,177,111,113,117,101,100,97,112,97,115,97,114,98,97,110,99,111,104,105,106,111,115,118,105,97,106,101,112,97,98,108,111,195,169,115,116,101,118,105,101,110,101,114,101,105,110,111,100,101,106,97,114,102,111,110,100,111,99,97,110,97,108,110,111,114,116,101,108,101,116,114,97,99,97,117,115,97,116,111,109,97,114,109,97,110,111,115,108,117,110,101,115,97,117,116,111,115,118,105,108,108,97,118,101,110,100,111,112,101,115,97,114,116,105,112,111,115,116,101,110,103,97,109,97,114,99,111,108,108,101,118,97,112,97,100,114,101,117,110,105,100,111,118,97,109,111,115,122,111,110,97,115,97,109,98,111,115,98,97,110,100,97,109,97,114,105,97,97,98,117,115,111,109,117,99,104,97,115,117,98,105,114,114,105,111,106,97,118,105,118,105,114,103,114,97,100,111,99,104,105,99,97,97,108,108,195,173,106,111,118,101,110,100,105,99,104,97,101,115,116,97,110,116,97,108,101,115,115,97,108,105,114,115,117,101,108,111,112,101,115,111,115,102,105,110,101,115,108,108,97,109,97,98,117,115,99,111,195,169,115,116,97,108,108,101,103,97,110,101,103,114,111,112,108,97,122,97,104,117,109,111,114,112,97,103,97,114,106,117,110,116,97,100,111,98,108,101,105,115,108,97,115,98,111,108,115,97,98,97,195,177,111,104,97,98,108,97,108,117,99,104,97,195,129,114,101,97,100,105,99,101,110,106,117,103,97,114,110,111,116,97,115,118,97,108,108,101,97,108,108,195,161,99,97,114,103,97,100,111,108,111,114,97,98,97,106,111,101,115,116,195,169,103,117,115,116,111,109,101,110,116,101,109,97,114,105,111,102,105,114,109,97,99,111,115,116,111,102,105,99,104,97,112,108,97,116,97,104,111,103,97,114,97,114,116,101,115,108,101,121,101,115,97,113,117,101,108,109,117,115,101,111,98,97,115,101,115,112,111,99,111,115,109,105,116,97,100,99,105,101,108,111,99,104,105,99,111,109,105,101,100,111,103,97,110,97,114,115,97,110,116,111,101,116,97,112,97,100,101,98,101,115,112,108,97,121,97,114,101,100,101,115,115,105,101,116,101,99,111,114,116,101,99,111,114,101,97,100,117,100,97,115,100,101,115,101,111,118,105,101,106,111,100,101,115,101,97,97,103,117,97,115,38,113,117,111,116,59,100,111,109,97,105,110,99,111,109,109,111,110,115,116,97,116,117,115,101,118,101,110,116,115,109,97,115,116,101,114,115,121,115,116,101,109,97,99,116,105,111,110,98,97,110,110,101,114,114,101,109,111,118,101,115,99,114,111,108,108,117,112,100,97,116,101,103,108,111,98,97,108,109,101,100,105,117,109,102,105,108,116,101,114,110,117,109,98,101,114,99,104,97,110,103,101,114,101,115,117,108,116,112,117,98,108,105,99,115,99,114,101,101,110,99,104,111,111,115,101,110,111,114,109,97,108,116,114,97,118,101,108,105,115,115,117,101,115,115,111,117,114,99,101,116,97,114,103,101,116,115,112,114,105,110,103,109,111,100,117,108,101,109,111,98,105,108,101,115,119,105,116,99,104,112,104,111,116,111,115,98,111,114,100,101,114,114,101,103,105,111,110,105,116,115,101,108,102,115,111,99,105,97,108,97,99,116,105,118,101,99,111,108,117,109,110,114,101,99,111,114,100,102,111,108,108,111,119,116,105,116,108,101,62,101,105,116,104,101,114,108,101,110,103,116,104,102,97,109,105,108,121,102,114,105,101,110,100,108,97,121,111,117,116,97,117,116,104,111,114,99,114,101,97,116,101,114,101,118,105,101,119,115,117,109,109,101,114,115,101,114,118,101,114,112,108,97,121,101,100,112,108,97,121,101,114,101,120,112,97,110,100,112,111,108,105,99,121,102,111,114,109,97,116,100,111,117,98,108,101,112,111,105,110,116,115,115,101,114,105,101,115,112,101,114,115,111,110,108,105,118,105,110,103,100,101,115,105,103,110,109,111,110,116,104,115,102,111,114,99,101,115,117,110,105,113,117,101,119,101,105,103,104,116,112,101,111,112,108,101,101,110,101,114,103,121,110,97,116,117,114,101,115,101,97,114,99,104,102,105,103,117,114,101,104,97,118,105,110,103,99,117,115,116,111,109,111,102,102,115,101,116,108,101,116,116,101,114,119,105,110,100,111,119,115,117,98,109,105,116,114,101,110,100,101,114,103,114,111,117,112,115,117,112,108,111,97,100,104,101,97,108,116,104,109,101,116,104,111,100,118,105,100,101,111,115,115,99,104,111,111,108,102,117,116,117,114,101,115,104,97,100,111,119,100,101,98,97,116,101,118,97,108,117,101,115,79,98,106,101,99,116,111,116,104,101,114,115,114,105,103,104,116,115,108,101,97,103,117,101,99,104,114,111,109,101,115,105,109,112,108,101,110,111,116,105,99,101,115,104,97,114,101,100,101,110,100,105,110,103,115,101,97,115,111,110,114,101,112,111,114,116,111,110,108,105,110,101,115,113,117,97,114,101,98,117,116,116,111,110,105,109,97,103,101,115,101,110,97,98,108,101,109,111,118,105,110,103,108,97,116,101,115,116,119,105,110,116,101,114,70,114,97,110,99,101,112,101,114,105,111,100,115,116,114,111,110,103,114,101,112,101,97,116,76,111,110,100,111,110,100,101,116,97,105,108,102,111,114,109,101,100,100,101,109,97,110,100,115,101,99,117,114,101,112,97,115,115,101,100,116,111,103,103,108,101,112,108,97,99,101,115,100,101,118,105,99,101,115,116,97,116,105,99,99,105,116,105,101,115,115,116,114,101,97,109,121,101,108,108,111,119,97,116,116,97,99,107,115,116,114,101,101,116,102,108,105,103,104,116,104,105,100,100,101,110,105,110,102,111,34,62,111,112,101,110,101,100,117,115,101,102,117,108,118,97,108,108,101,121,99,97,117,115,101,115,108,101,97,100,101,114,115,101,99,114,101,116,115,101,99,111,110,100,100,97,109,97,103,101,115,112,111,114,116,115,101,120,99,101,112,116,114,97,116,105,110,103,115,105,103,110,101,100,116,104,105,110,103,115,101,102,102,101,99,116,102,105,101,108,100,115,115,116,97,116,101,115,111,102,102,105,99,101,118,105,115,117,97,108,101,100,105,116,111,114,118,111,108,117,109,101,82,101,112,111,114,116,109,117,115,101,117,109,109,111,118,105,101,115,112,97,114,101,110,116,97,99,99,101,115,115,109,111,115,116,108,121,109,111,116,104,101,114,34,32,105,100,61,34,109,97,114,107,101,116,103,114,111,117,110,100,99,104,97,110,99,101,115,117,114,118,101,121,98,101,102,111,114,101,115,121,109,98,111,108,109,111,109,101,110,116,115,112,101,101,99,104,109,111,116,105,111,110,105,110,115,105,100,101,109,97,116,116,101,114,67,101,110,116,101,114,111,98,106,101,99,116,101,120,105,115,116,115,109,105,100,100,108,101,69,117,114,111,112,101,103,114,111,119,116,104,108,101,103,97,99,121,109,97,110,110,101,114,101,110,111,117,103,104,99,97,114,101,101,114,97,110,115,119,101,114,111,114,105,103,105,110,112,111,114,116,97,108,99,108,105,101,110,116,115,101,108,101,99,116,114,97,110,100,111,109,99,108,111,115,101,100,116,111,112,105,99,115,99,111,109,105,110,103,102,97,116,104,101,114,111,112,116,105,111,110,115,105,109,112,108,121,114,97,105,115,101,100,101,115,99,97,112,101,99,104,111,115,101,110,99,104,117,114,99,104,100,101,102,105,110,101,114,101,97,115,111,110,99,111,114,110,101,114,111,117,116,112,117,116,109,101,109,111,114,121,105,102,114,97,109,101,112,111,108,105,99,101,109,111,100,101,108,115,78,117,109,98,101,114,100,117,114,105,110,103,111,102,102,101,114,115,115,116,121,108,101,115,107,105,108,108,101,100,108,105,115,116,101,100,99,97,108,108,101,100,115,105,108,118,101,114,109,97,114,103,105,110,100,101,108,101,116,101,98,101,116,116,101,114,98,114,111,119,115,101,108,105,109,105,116,115,71,108,111,98,97,108,115,105,110,103,108,101,119,105,100,103,101,116,99,101,110,116,101,114,98,117,100,103,101,116,110,111,119,114,97,112,99,114,101,100,105,116,99,108,97,105,109,115,101,110,103,105,110,101,115,97,102,101,116,121,99,104,111,105,99,101,115,112,105,114,105,116,45,115,116,121,108,101,115,112,114,101,97,100,109,97,107,105,110,103,110,101,101,100,101,100,114,117,115,115,105,97,112,108,101,97,115,101,101,120,116,101,110,116,83,99,114,105,112,116,98,114,111,107,101,110,97,108,108,111,119,115,99,104,97,114,103,101,100,105,118,105,100,101,102,97,99,116,111,114,109,101,109,98,101,114,45,98,97,115,101,100,116,104,101,111,114,121,99,111,110,102,105,103,97,114,111,117,110,100,119,111,114,107,101,100,104,101,108,112,101,100,67,104,117,114,99,104,105,109,112,97,99,116,115,104,111,117,108,100,97,108,119,97,121,115,108,111,103,111,34,32,98,111,116,116,111,109,108,105,115,116,34,62,41,123,118,97,114,32,112,114,101,102,105,120,111,114,97,110,103,101,72,101,97,100,101,114,46,112,117,115,104,40,99,111,117,112,108,101,103,97,114,100,101,110,98,114,105,100,103,101,108,97,117,110,99,104,82,101,118,105,101,119,116,97,107,105,110,103,118,105,115,105,111,110,108,105,116,116,108,101,100,97,116,105,110,103,66,117,116,116,111,110,98,101,97,117,116,121,116,104,101,109,101,115,102,111,114,103,111,116,83,101,97,114,99,104,97,110,99,104,111,114,97,108,109,111,115,116,108,111,97,100,101,100,67,104,97,110,103,101,114,101,116,117,114,110,115,116,114,105,110,103,114,101,108,111,97,100,77,111,98,105,108,101,105,110,99,111,109,101,115,117,112,112,108,121,83,111,117,114,99,101,111,114,100,101,114,115,118,105,101,119,101,100,38,110,98,115,112,59,99,111,117,114,115,101,65,98,111,117,116,32,105,115,108,97,110,100,60,104,116,109,108,32,99,111,111,107,105,101,110,97,109,101,61,34,97,109,97,122,111,110,109,111,100,101,114,110,97,100,118,105,99,101,105,110,60,47,97,62,58,32,84,104,101,32,100,105,97,108,111,103,104,111,117,115,101,115,66,69,71,73,78,32,77,101,120,105,99,111,115,116,97,114,116,115,99,101,110,116,114,101,104,101,105,103,104,116,97,100,100,105,110,103,73,115,108,97,110,100,97,115,115,101,116,115,69,109,112,105,114,101,83,99,104,111,111,108,101,102,102,111,114,116,100,105,114,101,99,116,110,101,97,114,108,121,109,97,110,117,97,108,83,101,108,101,99,116,46,10,10,79,110,101,106,111,105,110,101,100,109,101,110,117,34,62,80,104,105,108,105,112,97,119,97,114,100,115,104,97,110,100,108,101,105,109,112,111,114,116,79,102,102,105,99,101,114,101,103,97,114,100,115,107,105,108,108,115,110,97,116,105,111,110,83,112,111,114,116,115,100,101,103,114,101,101,119,101,101,107,108,121,32,40,101,46,103,46,98,101,104,105,110,100,100,111,99,116,111,114,108,111,103,103,101,100,117,110,105,116,101,100,60,47,98,62,60,47,98,101,103,105,110,115,112,108,97,110,116,115,97,115,115,105,115,116,97,114,116,105,115,116,105,115,115,117,101,100,51,48,48,112,120,124,99,97,110,97,100,97,97,103,101,110,99,121,115,99,104,101,109,101,114,101,109,97,105,110,66,114,97,122,105,108,115,97,109,112,108,101,108,111,103,111,34,62,98,101,121,111,110,100,45,115,99,97,108,101,97,99,99,101,112,116,115,101,114,118,101,100,109,97,114,105,110,101,70,111,111,116,101,114,99,97,109,101,114,97,60,47,104,49,62,10,95,102,111,114,109,34,108,101,97,118,101,115,115,116,114,101,115,115,34,32,47,62,13,10,46,103,105,102,34,32,111,110,108,111,97,100,108,111,97,100,101,114,79,120,102,111,114,100,115,105,115,116,101,114,115,117,114,118,105,118,108,105,115,116,101,110,102,101,109,97,108,101,68,101,115,105,103,110,115,105,122,101,61,34,97,112,112,101,97,108,116,101,120,116,34,62,108,101,118,101,108,115,116,104,97,110,107,115,104,105,103,104,101,114,102,111,114,99,101,100,97,110,105,109,97,108,97,110,121,111,110,101,65,102,114,105,99,97,97,103,114,101,101,100,114,101,99,101,110,116,80,101,111,112,108,101,60,98,114,32,47,62,119,111,110,100,101,114,112,114,105,99,101,115,116,117,114,110,101,100,124,124,32,123,125,59,109,97,105,110,34,62,105,110,108,105,110,101,115,117,110,100,97,121,119,114,97,112,34,62,102,97,105,108,101,100,99,101,110,115,117,115,109,105,110,117,116,101,98,101,97,99,111,110,113,117,111,116,101,115,49,53,48,112,120,124,101,115,116,97,116,101,114,101,109,111,116,101,101,109,97,105,108,34,108,105,110,107,101,100,114,105,103,104,116,59,115,105,103,110,97,108,102,111,114,109,97,108,49,46,104,116,109,108,115,105,103,110,117,112,112,114,105,110,99,101,102,108,111,97,116,58,46,112,110,103,34,32,102,111,114,117,109,46,65,99,99,101,115,115,112,97,112,101,114,115,115,111,117,110,100,115,101,120,116,101,110,100,72,101,105,103,104,116,115,108,105,100,101,114,85,84,70,45,56,34,38,97,109,112,59,32,66,101,102,111,114,101,46,32,87,105,116,104,115,116,117,100,105,111,111,119,110,101,114,115,109,97,110,97,103,101,112,114,111,102,105,116,106,81,117,101,114,121,97,110,110,117,97,108,112,97,114,97,109,115,98,111,117,103,104,116,102,97,109,111,117,115,103,111,111,103,108,101,108,111,110,103,101,114,105,43,43,41,32,123,105,115,114,97,101,108,115,97,121,105,110,103,100,101,99,105,100,101,104,111,109,101,34,62,104,101,97,100,101,114,101,110,115,117,114,101,98,114,97,110,99,104,112,105,101,99,101,115,98,108,111,99,107,59,115,116,97,116,101,100,116,111,112,34,62,60,114,97,99,105,110,103,114,101,115,105,122,101,45,45,38,103,116,59,112,97,99,105,116,121,115,101,120,117,97,108,98,117,114,101,97,117,46,106,112,103,34,32,49,48,44,48,48,48,111,98,116,97,105,110,116,105,116,108,101,115,97,109,111,117,110,116,44,32,73,110,99,46,99,111,109,101,100,121,109,101,110,117,34,32,108,121,114,105,99,115,116,111,100,97,121,46,105,110,100,101,101,100,99,111,117,110,116,121,95,108,111,103,111,46,70,97,109,105,108,121,108,111,111,107,101,100,77,97,114,107,101,116,108,115,101,32,105,102,80,108,97,121,101,114,116,117,114,107,101,121,41,59,118,97,114,32,102,111,114,101,115,116,103,105,118,105,110,103,101,114,114,111,114,115,68,111,109,97,105,110,125,101,108,115,101,123,105,110,115,101,114,116,66,108,111,103,60,47,102,111,111,116,101,114,108,111,103,105,110,46,102,97,115,116,101,114,97,103,101,110,116,115,60,98,111,100,121,32,49,48,112,120,32,48,112,114,97,103,109,97,102,114,105,100,97,121,106,117,110,105,111,114,100,111,108,108,97,114,112,108,97,99,101,100,99,111,118,101,114,115,112,108,117,103,105,110,53,44,48,48,48,32,112,97,103,101,34,62,98,111,115,116,111,110,46,116,101,115,116,40,97,118,97,116,97,114,116,101,115,116,101,100,95,99,111,117,110,116,102,111,114,117,109,115,115,99,104,101,109,97,105,110,100,101,120,44,102,105,108,108,101,100,115,104,97,114,101,115,114,101,97,100,101,114,97,108,101,114,116,40,97,112,112,101,97,114,83,117,98,109,105,116,108,105,110,101,34,62,98,111,100,121,34,62,10,42,32,84,104,101,84,104,111,117,103,104,115,101,101,105,110,103,106,101,114,115,101,121,78,101,119,115,60,47,118,101,114,105,102,121,101,120,112,101,114,116,105,110,106,117,114,121,119,105,100,116,104,61,67,111,111,107,105,101,83,84,65,82,84,32,97,99,114,111,115,115,95,105,109,97,103,101,116,104,114,101,97,100,110,97,116,105,118,101,112,111,99,107,101,116,98,111,120,34,62,10,83,121,115,116,101,109,32,68,97,118,105,100,99,97,110,99,101,114,116,97,98,108,101,115,112,114,111,118,101,100,65,112,114,105,108,32,114,101,97,108,108,121,100,114,105,118,101,114,105,116,101,109,34,62,109,111,114,101,34,62,98,111,97,114,100,115,99,111,108,111,114,115,99,97,109,112,117,115,102,105,114,115,116,32,124,124,32,91,93,59,109,101,100,105,97,46,103,117,105,116,97,114,102,105,110,105,115,104,119,105,100,116,104,58,115,104,111,119,101,100,79,116,104,101,114,32,46,112,104,112,34,32,97,115,115,117,109,101,108,97,121,101,114,115,119,105,108,115,111,110,115,116,111,114,101,115,114,101,108,105,101,102,115,119,101,100,101,110,67,117,115,116,111,109,101,97,115,105,108,121,32,121,111,117,114,32,83,116,114,105,110,103,10,10,87,104,105,108,116,97,121,108,111,114,99,108,101,97,114,58,114,101,115,111,114,116,102,114,101,110,99,104,116,104,111,117,103,104,34,41,32,43,32,34,60,98,111,100,121,62,98,117,121,105,110,103,98,114,97,110,100,115,77,101,109,98,101,114,110,97,109,101,34,62,111,112,112,105,110,103,115,101,99,116,111,114,53,112,120,59,34,62,118,115,112,97,99,101,112,111,115,116,101,114,109,97,106,111,114,32,99,111,102,102,101,101,109,97,114,116,105,110,109,97,116,117,114,101,104,97,112,112,101,110,60,47,110,97,118,62,107,97,110,115,97,115,108,105,110,107,34,62,73,109,97,103,101,115,61,102,97,108,115,101,119,104,105,108,101,32,104,115,112,97,99,101,48,38,97,109,112,59,32,10,10,73,110,32,32,112,111,119,101,114,80,111,108,115,107,105,45,99,111,108,111,114,106,111,114,100,97,110,66,111,116,116,111,109,83,116,97,114,116,32,45,99,111,117,110,116,50,46,104,116,109,108,110,101,119,115,34,62,48,49,46,106,112,103,79,110,108,105,110,101,45,114,105,103,104,116,109,105,108,108,101,114,115,101,110,105,111,114,73,83,66,78,32,48,48,44,48,48,48,32,103,117,105,100,101,115,118,97,108,117,101,41,101,99,116,105,111,110,114,101,112,97,105,114,46,120,109,108,34,32,32,114,105,103,104,116,115,46,104,116,109,108,45,98,108,111,99,107,114,101,103,69,120,112,58,104,111,118,101,114,119,105,116,104,105,110,118,105,114,103,105,110,112,104,111,110,101,115,60,47,116,114,62,13,117,115,105,110,103,32,10,9,118,97,114,32,62,39,41,59,10,9,60,47,116,100,62,10,60,47,116,114,62,10,98,97,104,97,115,97,98,114,97,115,105,108,103,97,108,101,103,111,109,97,103,121,97,114,112,111,108,115,107,105,115,114,112,115,107,105,216,177,216,175,217,136,228,184,173,230,150,135,231,174,128,228,189,147,231,185,129,233,171,148,228,191,161,230,129,175,228,184,173,229,155,189,230,136,145,228,187,172,228,184,128,228,184,170,229,133,172,229,143,184,231,174,161,231,144,134,232,174,186,229,157,155,229,143,175,228,187,165,230,156,141,229,138,161,230,151,182,233,151,180,228,184,170,228,186,186,228,186,167,229,147,129,232,135,170,229,183,177,228,188,129,228,184,154,230,159,165,231,156,139,229,183,165,228,189,156,232,129,148,231,179,187,230,178,161,230,156,137,231,189,145,231,171,153,230,137,128,230,156,137,232,175,132,232,174,186,228,184,173,229,191,131,230,150,135,231,171,160,231,148,168,230,136,183,233,166,150,233,161,181,228,189,156,232,128,133,230,138,128,230,156,175,233,151,174,233,162,152,231,155,184,229,133,179,228,184,139,232,189,189,230,144,156,231,180,162,228,189,191,231,148,168,232,189,175,228,187,182,229,156,168,231,186,191,228,184,187,233,162,152,232,181,132,230,150,153,232,167,134,233,162,145,229,155,158,229,164,141,230,179,168,229,134,140,231,189,145,231,187,156,230,148,182,232,151,143,229,134,133,229,174,185,230,142,168,232,141,144,229,184,130,229,156,186,230,182,136,230,129,175,231,169,186,233,151,180,229,143,145,229,184,131,228,187,128,228,185,136,229,165,189,229,143,139,231,148,159,230,180,187,229,155,190,231,137,135,229,143,145,229,177,149,229,166,130,230,158,156,230,137,139,230,156,186,230,150,176,233,151,187,230,156,128,230,150,176,230,150,185,229,188,143,229,140,151,228,186,172,230,143,144,228,190,155,229,133,179,228,186,142,230,155,180,229,164,154,232,191,153,228,184,170,231,179,187,231,187,159,231,159,165,233,129,147,230,184,184,230,136,143,229,185,191,229,145,138,229,133,182,228,187,150,229,143,145,232,161,168,229,174,137,229,133,168,231,172,172,228,184,128,228,188,154,229,145,152,232,191,155,232,161,140,231,130,185,229,135,187,231,137,136,230,157,131,231,148,181,229,173,144,228,184,150,231,149,140,232,174,190,232,174,161,229,133,141,232,180,185,230,149,153,232,130,178,229,138,160,229,133,165,230,180,187,229,138,168,228,187,150,228,187,172,229,149,134,229,147,129,229,141,154,229,174,162,231,142,176,229,156,168,228,184,138,230,181,183,229,166,130,228,189,149,229,183,178,231,187,143,231,149,153,232,168,128,232,175,166,231,187,134,231,164,190,229,140,186,231,153,187,229,189,149,230,156,172,231,171,153,233,156,128,232,166,129,228,187,183,230,160,188,230,148,175,230,140,129,229,155,189,233,153,133,233,147,190,230,142,165,229,155,189,229,174,182,229,187,186,232,174,190,230,156,139,229,143,139,233,152,133,232,175,187,230,179,149,229,190,139,228,189,141,231,189,174,231,187,143,230,181,142,233,128,137,230,139,169,232,191,153,230,160,183,229,189,147,229,137,141,229,136,134,231,177,187,230,142,146,232,161,140,229,155,160,228,184,186,228,186,164,230,152,147,230,156,128,229,144,142,233,159,179,228,185,144,228,184,141,232,131,189,233,128,154,232,191,135,232,161,140,228,184,154,231,167,145,230,138,128,229,143,175,232,131,189,232,174,190,229,164,135,229,144,136,228,189,156,229,164,167,229,174,182,231,164,190,228,188,154,231,160,148,231,169,182,228,184,147,228,184,154,229,133,168,233,131,168,233,161,185,231,155,174,232,191,153,233,135,140,232,191,152,230,152,175,229,188,128,229,167,139,230,131,133,229,134,181,231,148,181,232,132,145,230,150,135,228,187,182,229,147,129,231,137,140,229,184,174,229,138,169,230,150,135,229,140,150,232,181,132,230,186,144,229,164,167,229,173,166,229,173,166,228,185,160,229,156,176,229,157,128,230,181,143,232,167,136,230,138,149,232,181,132,229,183,165,231,168,139,232,166,129,230,177,130,230,128,142,228,185,136,230,151,182,229,128,153,229,138,159,232,131,189,228,184,187,232,166,129,231,155,174,229,137,141,232,181,132,232,174,175,229,159,142,229,184,130,230,150,185,230,179,149,231,148,181,229,189,177,230,139,155,232,129,152,229,163,176,230,152,142,228,187,187,228,189,149,229,129,165,229,186,183,230,149,176,230,141,174,231,190],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+194608);allocate([142,229,155,189,230,177,189,232,189,166,228,187,139,231,187,141,228,189,134,230,152,175,228,186,164,230,181,129,231,148,159,228,186,167,230,137,128,228,187,165,231,148,181,232,175,157,230,152,190,231,164,186,228,184,128,228,186,155,229,141,149,228,189,141,228,186,186,229,145,152,229,136,134,230,158,144,229,156,176,229,155,190,230,151,133,230,184,184,229,183,165,229,133,183,229,173,166,231,148,159,231,179,187,229,136,151,231,189,145,229,143,139,229,184,150,229,173,144,229,175,134,231,160,129,233,162,145,233,129,147,230,142,167,229,136,182,229,156,176,229,140,186,229,159,186,230,156,172,229,133,168,229,155,189,231,189,145,228,184,138,233,135,141,232,166,129,231,172,172,228,186,140,229,150,156,230,172,162,232,191,155,229,133,165,229,143,139,230,131,133,232,191,153,228,186,155,232,128,131,232,175,149,229,143,145,231,142,176,229,159,185,232,174,173,228,187,165,228,184,138,230,148,191,229,186,156,230,136,144,228,184,186,231,142,175,229,162,131,233,166,153,230,184,175,229,144,140,230,151,182,229,168,177,228,185,144,229,143,145,233,128,129,228,184,128,229,174,154,229,188,128,229,143,145,228,189,156,229,147,129,230,160,135,229,135,134,230,172,162,232,191,142,232,167,163,229,134,179,229,156,176,230,150,185,228,184,128,228,184,139,228,187,165,229,143,138,232,180,163,228,187,187,230,136,150,232,128,133,229,174,162,230,136,183,228,187,163,232,161,168,231,167,175,229,136,134,229,165,179,228,186,186,230,149,176,231,160,129,233,148,128,229,148,174,229,135,186,231,142,176,231,166,187,231,186,191,229,186,148,231,148,168,229,136,151,232,161,168,228,184,141,229,144,140,231,188,150,232,190,145,231,187,159,232,174,161,230,159,165,232,175,162,228,184,141,232,166,129,230,156,137,229,133,179,230,156,186,230,158,132,229,190,136,229,164,154,230,146,173,230,148,190,231,187,132,231,187,135,230,148,191,231,173,150,231,155,180,230,142,165,232,131,189,229,138,155,230,157,165,230,186,144,230,153,130,233,150,147,231,156,139,229,136,176,231,131,173,233,151,168,229,133,179,233,148,174,228,184,147,229,140,186,233,157,158,229,184,184,232,139,177,232,175,173,231,153,190,229,186,166,229,184,140,230,156,155,231,190,142,229,165,179,230,175,148,232,190,131,231,159,165,232,175,134,232,167,132,229,174,154,229,187,186,232,174,174,233,131,168,233,151,168,230,132,143,232,167,129,231,178,190,229,189,169,230,151,165,230,156,172,230,143,144,233,171,152,229,143,145,232,168,128,230,150,185,233,157,162,229,159,186,233,135,145,229,164,132,231,144,134,230,157,131,233,153,144,229,189,177,231,137,135,233,147,182,232,161,140,232,191,152,230,156,137,229,136,134,228,186,171,231,137,169,229,147,129,231,187,143,232,144,165,230,183,187,229,138,160,228,184,147,229,174,182,232,191,153,231,167,141,232,175,157,233,162,152,232,181,183,230,157,165,228,184,154,229,138,161,229,133,172,229,145,138,232,174,176,229,189,149,231,174,128,228,187,139,232,180,168,233,135,143,231,148,183,228,186,186,229,189,177,229,147,141,229,188,149,231,148,168,230,138,165,229,145,138,233,131,168,229,136,134,229,191,171,233,128,159,229,146,168,232,175,162,230,151,182,229,176,154,230,179,168,230,132,143,231,148,179,232,175,183,229,173,166,230,160,161,229,186,148,232,175,165,229,142,134,229,143,178,229,143,170,230,152,175,232,191,148,229,155,158,232,180,173,228,185,176,229,144,141,231,167,176,228,184,186,228,186,134,230,136,144,229,138,159,232,175,180,230,152,142,228,190,155,229,186,148,229,173,169,229,173,144,228,184,147,233,162,152,231,168,139,229,186,143,228,184,128,232,136,172,230,156,131,229,147,161,229,143,170,230,156,137,229,133,182,229,174,131,228,191,157,230,138,164,232,128,140,228,184,148,228,187,138,229,164,169,231,170,151,229,143,163,229,138,168,230,128,129,231,138,182,230,128,129,231,137,185,229,136,171,232,174,164,228,184,186,229,191,133,233,161,187,230,155,180,230,150,176,229,176,143,232,175,180,230,136,145,229,128,145,228,189,156,228,184,186,229,170,146,228,189,147,229,140,133,230,139,172,233,130,163,228,185,136,228,184,128,230,160,183,229,155,189,229,134,133,230,152,175,229,144,166,230,160,185,230,141,174,231,148,181,232,167,134,229,173,166,233,153,162,229,133,183,230,156,137,232,191,135,231,168,139,231,148,177,228,186,142,228,186,186,230,137,141,229,135,186,230,157,165,228,184,141,232,191,135,230,173,163,229,156,168,230,152,142,230,152,159,230,149,133,228,186,139,229,133,179,231,179,187,230,160,135,233,162,152,229,149,134,229,138,161,232,190,147,229,133,165,228,184,128,231,155,180,229,159,186,231,161,128,230,149,153,229,173,166,228,186,134,232,167,163,229,187,186,231,173,145,231,187,147,230,158,156,229,133,168,231,144,131,233,128,154,231,159,165,232,174,161,229,136,146,229,175,185,228,186,142,232,137,186,230,156,175,231,155,184,229,134,140,229,143,145,231,148,159,231,156,159,231,154,132,229,187,186,231,171,139,231,173,137,231,186,167,231,177,187,229,158,139,231,187,143,233,170,140,229,174,158,231,142,176,229,136,182,228,189,156,230,157,165,232,135,170,230,160,135,231,173,190,228,187,165,228,184,139,229,142,159,229,136,155,230,151,160,230,179,149,229,133,182,228,184,173,229,128,139,228,186,186,228,184,128,229,136,135,230,140,135,229,141,151,229,133,179,233,151,173,233,155,134,229,155,162,231,172,172,228,184,137,229,133,179,230,179,168,229,155,160,230,173,164,231,133,167,231,137,135,230,183,177,229,156,179,229,149,134,228,184,154,229,185,191,229,183,158,230,151,165,230,156,159,233,171,152,231,186,167,230,156,128,232,191,145,231,187,188,229,144,136,232,161,168,231,164,186,228,184,147,232,190,145,232,161,140,228,184,186,228,186,164,233,128,154,232,175,132,228,187,183,232,167,137,229,190,151,231,178,190,229,141,142,229,174,182,229,186,173,229,174,140,230,136,144,230,132,159,232,167,137,229,174,137,232,163,133,229,190,151,229,136,176,233,130,174,228,187,182,229,136,182,229,186,166,233,163,159,229,147,129,232,153,189,231,132,182,232,189,172,232,189,189,230,138,165,228,187,183,232,174,176,232,128,133,230,150,185,230,161,136,232,161,140,230,148,191,228,186,186,230,176,145,231,148,168,229,147,129,228,184,156,232,165,191,230,143,144,229,135,186,233,133,146,229,186,151,231,132,182,229,144,142,228,187,152,230,172,190,231,131,173,231,130,185,228,187,165,229,137,141,229,174,140,229,133,168,229,143,145,229,184,150,232,174,190,231,189,174,233,162,134,229,175,188,229,183,165,228,184,154,229,140,187,233,153,162,231,156,139,231,156,139,231,187,143,229,133,184,229,142,159,229,155,160,229,185,179,229,143,176,229,144,132,231,167,141,229,162,158,229,138,160,230,157,144,230,150,153,230,150,176,229,162,158,228,185,139,229,144,142,232,129,140,228,184,154,230,149,136,230,158,156,228,187,138,229,185,180,232,174,186,230,150,135,230,136,145,229,155,189,229,145,138,232,175,137,231,137,136,228,184,187,228,191,174,230,148,185,229,143,130,228,184,142,230,137,147,229,141,176,229,191,171,228,185,144,230,156,186,230,162,176,232,167,130,231,130,185,229,173,152,229,156,168,231,178,190,231,165,158,232,142,183,229,190,151,229,136,169,231,148,168,231,187,167,231,187,173,228,189,160,228,187,172,232,191,153,228,185,136,230,168,161,229,188,143,232,175,173,232,168,128,232,131,189,229,164,159,233,155,133,232,153,142,230,147,141,228,189,156,233,163,142,230,160,188,228,184,128,232,181,183,231,167,145,229,173,166,228,189,147,232,130,178,231,159,173,228,191,161,230,157,161,228,187,182,230,178,187,231,150,151,232,191,144,229,138,168,228,186,167,228,184,154,228,188,154,232,174,174,229,175,188,232,136,170,229,133,136,231,148,159,232,129,148,231,155,159,229,143,175,230,152,175,229,149,143,233,161,140,231,187,147,230,158,132,228,189,156,231,148,168,232,176,131,230,159,165,232,179,135,230,150,153,232,135,170,229,138,168,232,180,159,232,180,163,229,134,156,228,184,154,232,174,191,233,151,174,229,174,158,230,150,189,230,142,165,229,143,151,232,174,168,232,174,186,233,130,163,228,184,170,229,143,141,233,166,136,229,138,160,229,188,186,229,165,179,230,128,167,232,140,131,229,155,180,230,156,141,229,139,153,228,188,145,233,151,178,228,187,138,230,151,165,229,174,162,230,156,141,232,167,128,231,156,139,229,143,130,229,138,160,231,154,132,232,175,157,228,184,128,231,130,185,228,191,157,232,175,129,229,155,190,228,185,166,230,156,137,230,149,136,230,181,139,232,175,149,231,167,187,229,138,168,230,137,141,232,131,189,229,134,179,229,174,154,232,130,161,231,165,168,228,184,141,230,150,173,233,156,128,230,177,130,228,184,141,229,190,151,229,138,158,230,179,149,228,185,139,233,151,180,233,135,135,231,148,168,232,144,165,233,148,128,230,138,149,232,175,137,231,155,174,230,160,135,231,136,177,230,131,133,230,145,132,229,189,177,230,156,137,228,186,155,232,164,135,232,163,189,230,150,135,229,173,166,230,156,186,228,188,154,230,149,176,229,173,151,232,163,133,228,191,174,232,180,173,231,137,169,229,134,156,230,157,145,229,133,168,233,157,162,231,178,190,229,147,129,229,133,182,229,174,158,228,186,139,230,131,133,230,176,180,229,185,179,230,143,144,231,164,186,228,184,138,229,184,130,232,176,162,232,176,162,230,153,174,233,128,154,230,149,153,229,184,136,228,184,138,228,188,160,231,177,187,229,136,171,230,173,140,230,155,178,230,139,165,230,156,137,229,136,155,230,150,176,233,133,141,228,187,182,229,143,170,232,166,129,230,151,182,228,187,163,232,179,135,232,168,138,232,190,190,229,136,176,228,186,186,231,148,159,232,174,162,233,152,133,232,128,129,229,184,136,229,177,149,231,164,186,229,191,131,231,144,134,232,180,180,229,173,144,231,182,178,231,171,153,228,184,187,233,161,140,232,135,170,231,132,182,231,186,167,229,136,171,231,174,128,229,141,149,230,148,185,233,157,169,233,130,163,228,186,155,230,157,165,232,175,180,230,137,147,229,188,128,228,187,163,231,160,129,229,136,160,233,153,164,232,175,129,229,136,184,232,138,130,231,155,174,233,135,141,231,130,185,230,172,161,230,149,184,229,164,154,229,176,145,232,167,132,229,136,146,232,181,132,233,135,145,230,137,190,229,136,176,228,187,165,229,144,142,229,164,167,229,133,168,228,184,187,233,161,181,230,156,128,228,189,179,229,155,158,231,173,148,229,164,169,228,184,139,228,191,157,233,154,156,231,142,176,228,187,163,230,163,128,230,159,165,230,138,149,231,165,168,229,176,143,230,151,182,230,178,146,230,156,137,230,173,163,229,184,184,231,148,154,232,135,179,228,187,163,231,144,134,231,155,174,229,189,149,229,133,172,229,188,128,229,164,141,229,136,182,233,135,145,232,158,141,229,185,184,231,166,143,231,137,136,230,156,172,229,189,162,230,136,144,229,135,134,229,164,135,232,161,140,230,131,133,229,155,158,229,136,176,230,128,157,230,131,179,230,128,142,230,160,183,229,141,143,232,174,174,232,174,164,232,175,129,230,156,128,229,165,189,228,186,167,231,148,159,230,140,137,231,133,167,230,156,141,232,163,133,229,185,191,228,184,156,229,138,168,230,188,171,233,135,135,232,180,173,230,150,176,230,137,139,231,187,132,229,155,190,233,157,162,230,157,191,229,143,130,232,128,131,230,148,191,230,178,187,229,174,185,230,152,147,229,164,169,229,156,176,229,138,170,229,138,155,228,186,186,228,187,172,229,141,135,231,186,167,233,128,159,229,186,166,228,186,186,231,137,169,232,176,131,230,149,180,230,181,129,232,161,140,233,128,160,230,136,144,230,150,135,229,173,151,233,159,169,229,155,189,232,180,184,230,152,147,229,188,128,229,177,149,231,155,184,233,151,156,232,161,168,231,142,176,229,189,177,232,167,134,229,166,130,230,173,164,231,190,142,229,174,185,229,164,167,229,176,143,230,138,165,233,129,147,230,157,161,230,172,190,229,191,131,230,131,133,232,174,184,229,164,154,230,179,149,232,167,132,229,174,182,229,177,133,228,185,166,229,186,151,232,191,158,230,142,165,231,171,139,229,141,179,228,184,190,230,138,165,230,138,128,229,183,167,229,165,165,232,191,144,231,153,187,229,133,165,228,187,165,230,157,165,231,144,134,232,174,186,228,186,139,228,187,182,232,135,170,231,148,177,228,184,173,229,141,142,229,138,158,229,133,172,229,166,136,229,166,136,231,156,159,230,173,163,228,184,141,233,148,153,229,133,168,230,150,135,229,144,136,229,144,140,228,187,183,229,128,188,229,136,171,228,186,186,231,155,145,231,157,163,229,133,183,228,189,147,228,184,150,231,186,170,229,155,162,233,152,159,229,136,155,228,184,154,230,137,191,230,139,133,229,162,158,233,149,191,230,156,137,228,186,186,228,191,157,230,140,129,229,149,134,229,174,182,231,187,180,228,191,174,229,143,176,230,185,190,229,183,166,229,143,179,232,130,161,228,187,189,231,173,148,230,161,136,229,174,158,233,153,133,231,148,181,228,191,161,231,187,143,231,144,134,231,148,159,229,145,189,229,174,163,228,188,160,228,187,187,229,138,161,230,173,163,229,188,143,231,137,185,232,137,178,228,184,139,230,157,165,229,141,143,228,188,154,229,143,170,232,131,189,229,189,147,231,132,182,233,135,141,230,150,176,229,133,167,229,174,185,230,140,135,229,175,188,232,191,144,232,161,140,230,151,165,229,191,151,232,179,163,229,174,182,232,182,133,232,191,135,229,156,159,229,156,176,230,181,153,230,177,159,230,148,175,228,187,152,230,142,168,229,135,186,231,171,153,233,149,191,230,157,173,229,183,158,230,137,167,232,161,140,229,136,182,233,128,160,228,185,139,228,184,128,230,142,168,229,185,191,231,142,176,229,156,186,230,143,143,232,191,176,229,143,152,229,140,150,228,188,160,231,187,159,230,173,140,230,137,139,228,191,157,233,153,169,232,175,190,231,168,139,229,140,187,231,150,151,231,187,143,232,191,135,232,191,135,229,142,187,228,185,139,229,137,141,230,148,182,229,133,165,229,185,180,229,186,166,230,157,130,229,191,151,231,190,142,228,184,189,230,156,128,233,171,152,231,153,187,233,153,134,230,156,170,230,157,165,229,138,160,229,183,165,229,133,141,232,180,163,230,149,153,231,168,139,231,137,136,229,157,151,232,186,171,228,189,147,233,135,141,229,186,134,229,135,186,229,148,174,230,136,144,230,156,172,229,189,162,229,188,143,229,156,159,232,177,134,229,135,186,229,131,185,228,184,156,230,150,185,233,130,174,231,174,177,229,141,151,228,186,172,230,177,130,232,129,140,229,143,150,229,190,151,232,129,140,228,189,141,231,155,184,228,191,161,233,161,181,233,157,162,229,136,134,233,146,159,231,189,145,233,161,181,231,161,174,229,174,154,229,155,190,228,190,139,231,189,145,229,157,128,231,167,175,230,158,129,233,148,153,232,175,175,231,155,174,231,154,132,229,174,157,232,180,157,230,156,186,229,133,179,233,163,142,233,153,169,230,142,136,230,157,131,231,151,133,230,175,146,229,174,160,231,137,169,233,153,164,228,186,134,232,169,149,232,171,150,231,150,190,231,151,133,229,143,138,230,151,182,230,177,130,232,180,173,231,171,153,231,130,185,229,132,191,231,171,165,230,175,143,229,164,169,228,184,173,229,164,174,232,174,164,232,175,134,230,175,143,228,184,170,229,164,169,230,180,165,229,173,151,228,189,147,229,143,176,231,129,163,231,187,180,230,138,164,230,156,172,233,161,181,228,184,170,230,128,167,229,174,152,230,150,185,229,184,184,232,167,129,231,155,184,230,156,186,230,136,152,231,149,165,229,186,148,229,189,147,229,190,139,229,184,136,230,150,185,228,190,191,230,160,161,229,155,173,232,130,161,229,184,130,230,136,191,229,177,139,230,160,143,231,155,174,229,145,152,229,183,165,229,175,188,232,135,180,231,170,129,231,132,182,233,129,147,229,133,183,230,156,172,231,189,145,231,187,147,229,144,136,230,161,163,230,161,136,229,138,179,229,138,168,229,143,166,229,164,150,231,190,142,229,133,131,229,188,149,232,181,183,230,148,185,229,143,152,231,172,172,229,155,155,228,188,154,232,174,161,232,170,170,230,152,142,233,154,144,231,167,129,229,174,157,229,174,157,232,167,132,232,140,131,230,182,136,232,180,185,229,133,177,229,144,140,229,191,152,232,174,176,228,189,147,231,179,187,229,184,166,230,157,165,229,144,141,229,173,151,231,153,188,232,161,168,229,188,128,230,148,190,229,138,160,231,155,159,229,143,151,229,136,176,228,186,140,230,137,139,229,164,167,233,135,143,230,136,144,228,186,186,230,149,176,233,135,143,229,133,177,228,186,171,229,140,186,229,159,159,229,165,179,229,173,169,229,142,159,229,136,153,230,137,128,229,156,168,231,187,147,230,157,159,233,128,154,228,191,161,232,182,133,231,186,167,233,133,141,231,189,174,229,189,147,230,151,182,228,188,152,231,167,128,230,128,167,230,132,159,230,136,191,228,186,167,233,129,138,230,136,178,229,135,186,229,143,163,230,143,144,228,186,164,229,176,177,228,184,154,228,191,157,229,129,165,231,168,139,229,186,166,229,143,130,230,149,176,228,186,139,228,184,154,230,149,180,228,184,170,229,177,177,228,184,156,230,131,133,230,132,159,231,137,185,230,174,138,229,136,134,233,161,158,230,144,156,229,176,139,229,177,158,228,186,142,233,151,168,230,136,183,232,180,162,229,138,161,229,163,176,233,159,179,229,143,138,229,133,182,232,180,162,231,187,143,229,157,154,230,140,129,229,185,178,233,131,168,230,136,144,231,171,139,229,136,169,231,155,138,232,128,131,232,153,145,230,136,144,233,131,189,229,140,133,232,163,133,231,148,168,230,136,182,230,175,148,232,181,155,230,150,135,230,152,142,230,139,155,229,149,134,229,174,140,230,149,180,231,156,159,230,152,175,231,156,188,231,157,155,228,188,153,228,188,180,229,168,129,230,156,155,233,162,134,229,159,159,229,141,171,231,148,159,228,188,152,230,131,160,232,171,150,229,163,135,229,133,172,229,133,177,232,137,175,229,165,189,229,133,133,229,136,134,231,172,166,229,144,136,233,153,132,228,187,182,231,137,185,231,130,185,228,184,141,229,143,175,232,139,177,230,150,135,232,181,132,228,186,167,230,160,185,230,156,172,230,152,142,230,152,190,229,175,134,231,162,188,229,133,172,228,188,151,230,176,145,230,151,143,230,155,180,229,138,160,228,186,171,229,143,151,229,144,140,229,173,166,229,144,175,229,138,168,233,128,130,229,144,136,229,142,159,230,157,165,233,151,174,231,173,148,230,156,172,230,150,135,231,190,142,233,163,159,231,187,191,232,137,178,231,168,179,229,174,154,231,187,136,228,186,142,231,148,159,231,137,169,228,190,155,230,177,130,230,144,156,231,139,144,229,138,155,233,135,143,228,184,165,233,135,141,230,176,184,232,191,156,229,134,153,231,156,159,230,156,137,233,153,144,231,171,158,228,186,137,229,175,185,232,177,161,232,180,185,231,148,168,228,184,141,229,165,189,231,187,157,229,175,185,229,141,129,229,136,134,228,191,131,232,191,155,231,130,185,232,175,132,229,189,177,233,159,179,228,188,152,229,138,191,228,184,141,229,176,145,230,172,163,232,181,143,229,185,182,228,184,148,230,156,137,231,130,185,230,150,185,229,144,145,229,133,168,230,150,176,228,191,161,231,148,168,232,174,190,230,150,189,229,189,162,232,177,161,232,181,132,230,160,188,231,170,129,231,160,180,233,154,143,231,157,128,233,135,141,229,164,167,228,186,142,230,152,175,230,175,149,228,184,154,230,153,186,232,131,189,229,140,150,229,183,165,229,174,140,231,190,142,229,149,134,229,159,142,231,187,159,228,184,128,229,135,186,231,137,136,230,137,147,233,128,160,231,148,162,229,147,129,230,166,130,229,134,181,231,148,168,228,186,142,228,191,157,231,149,153,229,155,160,231,180,160,228,184,173,229,156,139,229,173,152,229,130,168,232,180,180,229,155,190,230,156,128,230,132,155,233,149,191,230,156,159,229,143,163,228,187,183,231,144,134,232,180,162,229,159,186,229,156,176,229,174,137,230,142,146,230,173,166,230,177,137,233,135,140,233,157,162,229,136,155,229,187,186,229,164,169,231,169,186,233,166,150,229,133,136,229,174,140,229,150,132,233,169,177,229,138,168,228,184,139,233,157,162,228,184,141,229,134,141,232,175,154,228,191,161,230,132,143,228,185,137,233,152,179,229,133,137,232,139,177,229,155,189,230,188,130,228,186,174,229,134,155,228,186,139,231,142,169,229,174,182,231,190,164,228,188,151,229,134,156,230,176,145,229,141,179,229,143,175,229,144,141,231,168,177,229,174,182,229,133,183,229,138,168,231,148,187,230,131,179,229,136,176,230,179,168,230,152,142,229,176,143,229,173,166,230,128,167,232,131,189,232,128,131,231,160,148,231,161,172,228,187,182,232,167,130,231,156,139,230,184,133,230,165,154,230,144,158,231,172,145,233,166,150,233,160,129,233,187,132,233,135,145,233,128,130,231,148,168,230,177,159,232,139,143,231,156,159,229,174,158,228,184,187,231,174,161,233,152,182,230,174,181,232,168,187,229,134,138,231,191,187,232,175,145,230,157,131,229,136,169,229,129,154,229,165,189,228,188,188,228,185,142,233,128,154,232,174,175,230,150,189,229,183,165,231,139,128,230,133,139,228,185,159,232,174,184,231,142,175,228,191,157,229,159,185,229,133,187,230,166,130,229,191,181,229,164,167,229,158,139,230,156,186,231,165,168,231,144,134,232,167,163,229,140,191,229,144,141,99,117,97,110,100,111,101,110,118,105,97,114,109,97,100,114,105,100,98,117,115,99,97,114,105,110,105,99,105,111,116,105,101,109,112,111,112,111,114,113,117,101,99,117,101,110,116,97,101,115,116,97,100,111,112,117,101,100,101,110,106,117,101,103,111,115,99,111,110,116,114,97,101,115,116,195,161,110,110,111,109,98,114,101,116,105,101,110,101,110,112,101,114,102,105,108,109,97,110,101,114,97,97,109,105,103,111,115,99,105,117,100,97,100,99,101,110,116,114,111,97,117,110,113,117,101,112,117,101,100,101,115,100,101,110,116,114,111,112,114,105,109,101,114,112,114,101,99,105,111,115,101,103,195,186,110,98,117,101,110,111,115,118,111,108,118,101,114,112,117,110,116,111,115,115,101,109,97,110,97,104,97,98,195,173,97,97,103,111,115,116,111,110,117,101,118,111,115,117,110,105,100,111,115,99,97,114,108,111,115,101,113,117,105,112,111,110,105,195,177,111,115,109,117,99,104,111,115,97,108,103,117,110,97,99,111,114,114,101,111,105,109,97,103,101,110,112,97,114,116,105,114,97,114,114,105,98,97,109,97,114,195,173,97,104,111,109,98,114,101,101,109,112,108,101,111,118,101,114,100,97,100,99,97,109,98,105,111,109,117,99,104,97,115,102,117,101,114,111,110,112,97,115,97,100,111,108,195,173,110,101,97,112,97,114,101,99,101,110,117,101,118,97,115,99,117,114,115,111,115,101,115,116,97,98,97,113,117,105,101,114,111,108,105,98,114,111,115,99,117,97,110,116,111,97,99,99,101,115,111,109,105,103,117,101,108,118,97,114,105,111,115,99,117,97,116,114,111,116,105,101,110,101,115,103,114,117,112,111,115,115,101,114,195,161,110,101,117,114,111,112,97,109,101,100,105,111,115,102,114,101,110,116,101,97,99,101,114,99,97,100,101,109,195,161,115,111,102,101,114,116,97,99,111,99,104,101,115,109,111,100,101,108,111,105,116,97,108,105,97,108,101,116,114,97,115,97,108,103,195,186,110,99,111,109,112,114,97,99,117,97,108,101,115,101,120,105,115,116,101,99,117,101,114,112,111,115,105,101,110,100,111,112,114,101,110,115,97,108,108,101,103,97,114,118,105,97,106,101,115,100,105,110,101,114,111,109,117,114,99,105,97,112,111,100,114,195,161,112,117,101,115,116,111,100,105,97,114,105,111,112,117,101,98,108,111,113,117,105,101,114,101,109,97,110,117,101,108,112,114,111,112,105,111,99,114,105,115,105,115,99,105,101,114,116,111,115,101,103,117,114,111,109,117,101,114,116,101,102,117,101,110,116,101,99,101,114,114,97,114,103,114,97,110,100,101,101,102,101,99,116,111,112,97,114,116,101,115,109,101,100,105,100,97,112,114,111,112,105,97,111,102,114,101,99,101,116,105,101,114,114,97,101,45,109,97,105,108,118,97,114,105,97,115,102,111,114,109,97,115,102,117,116,117,114,111,111,98,106,101,116,111,115,101,103,117,105,114,114,105,101,115,103,111,110,111,114,109,97,115,109,105,115,109,111,115,195,186,110,105,99,111,99,97,109,105,110,111,115,105,116,105,111,115,114,97,122,195,179,110,100,101,98,105,100,111,112,114,117,101,98,97,116,111,108,101,100,111,116,101,110,195,173,97,106,101,115,195,186,115,101,115,112,101,114,111,99,111,99,105,110,97,111,114,105,103,101,110,116,105,101,110,100,97,99,105,101,110,116,111,99,195,161,100,105,122,104,97,98,108,97,114,115,101,114,195,173,97,108,97,116,105,110,97,102,117,101,114,122,97,101,115,116,105,108,111,103,117,101,114,114,97,101,110,116,114,97,114,195,169,120,105,116,111,108,195,179,112,101,122,97,103,101,110,100,97,118,195,173,100,101,111,101,118,105,116,97,114,112,97,103,105,110,97,109,101,116,114,111,115,106,97,118,105,101,114,112,97,100,114,101,115,102,195,161,99,105,108,99,97,98,101,122,97,195,161,114,101,97,115,115,97,108,105,100,97,101,110,118,195,173,111,106,97,112,195,179,110,97,98,117,115,111,115,98,105,101,110,101,115,116,101,120,116,111,115,108,108,101,118,97,114,112,117,101,100,97,110,102,117,101,114,116,101,99,111,109,195,186,110,99,108,97,115,101,115,104,117,109,97,110,111,116,101,110,105,100,111,98,105,108,98,97,111,117,110,105,100,97,100,101,115,116,195,161,115,101,100,105,116,97,114,99,114,101,97,100,111,208,180,208,187,209,143,209,135,209,130,208,190,208,186,208,176,208,186,208,184,208,187,208,184,209,141,209,130,208,190,208,178,209,129,208,181,208,181,208,179,208,190,208,191,209,128,208,184,209,130,208,176,208,186,208,181,209,137,208,181,209,131,208,182,208,181,208,154,208,176,208,186,208,177,208,181,208,183,208,177,209,139,208,187,208,190,208,189,208,184,208,146,209,129,208,181,208,191,208,190,208,180,208,173,209,130,208,190,209,130,208,190,208,188,209,135,208,181,208,188,208,189,208,181,209,130,208,187,208,181,209,130,209,128,208,176,208,183,208,190,208,189,208,176,208,179,208,180,208,181,208,188,208,189,208,181,208,148,208,187,209,143,208,159,209,128,208,184,208,189,208,176,209,129,208,189,208,184,209,133,209,130,208,181,208,188,208,186,209,130,208,190,208,179,208,190,208,180,208,178,208,190,209,130,209,130,208,176,208,188,208,161,208,168,208,144,208,188,208,176,209,143,208,167,209,130,208,190,208,178,208,176,209,129,208,178,208,176,208,188,208,181,208,188,209,131,208,162,208,176,208,186,208,180,208,178,208,176,208,189,208,176,208,188,209,141,209,130,208,184,209,141,209,130,209,131,208,146,208,176,208,188,209,130,208,181,209,133,208,191,209,128,208,190,209,130,209,131,209,130,208,189,208,176,208,180,208,180,208,189,209,143,208,146,208,190,209,130,209,130,209,128,208,184,208,189,208,181,208,185,208,146,208,176,209,129,208,189,208,184,208,188,209,129,208,176,208,188,209,130,208,190,209,130,209,128,209,131,208,177,208,158,208,189,208,184,208,188,208,184,209,128,208,189,208,181,208,181,208,158,208,158,208,158,208,187,208,184,209,134,209,141,209,130,208,176,208,158,208,189,208,176,208,189,208,181,208,188,208,180,208,190,208,188,208,188,208,190,208,185,208,180,208,178,208,181,208,190,208,189,208,190,209,129,209,131,208,180,224,164,149,224,165,135,224,164,185,224,165,136,224,164,149,224,165,128,224,164,184,224,165,135,224,164,149,224,164,190,224,164,149,224,165,139,224,164,148,224,164,176,224,164,170,224,164,176,224,164,168,224,165,135,224,164,143,224,164,149,224,164,149,224,164,191,224,164,173,224,165,128,224,164,135,224,164,184,224,164,149,224,164,176,224,164,164,224,165,139,224,164,185,224,165,139,224,164,134,224,164,170,224,164,185,224,165,128,224,164,175,224,164,185,224,164,175,224,164,190,224,164,164,224,164,149,224,164,165,224,164,190,106,97,103,114,97,110,224,164,134,224,164,156,224,164,156,224,165,139,224,164,133,224,164,172,224,164,166,224,165,139,224,164,151,224,164,136,224,164,156,224,164,190,224,164,151,224,164,143,224,164,185,224,164,174,224,164,135,224,164,168,224,164,181,224,164,185,224,164,175,224,165,135,224,164,165,224,165,135,224,164,165,224,165,128,224,164,152,224,164,176,224,164,156,224,164,172,224,164,166,224,165,128,224,164,149,224,164,136,224,164,156,224,165,128,224,164,181,224,165,135,224,164,168,224,164,136,224,164,168,224,164,143,224,164,185,224,164,176,224,164,137,224,164,184,224,164,174,224,165,135,224,164,149,224,164,174,224,164,181,224,165,139,224,164,178,224,165,135,224,164,184,224,164,172,224,164,174,224,164,136,224,164,166,224,165,135,224,164,147,224,164,176,224,164,134,224,164,174,224,164,172,224,164,184,224,164,173,224,164,176,224,164,172,224,164,168,224,164,154,224,164,178,224,164,174,224,164,168,224,164,134,224,164,151,224,164,184,224,165,128,224,164,178,224,165,128,216,185,217,132,217,137,216,165,217,132,217,137,217,135,216,176,216,167,216,162,216,174,216,177,216,185,216,175,216,175,216,167,217,132,217,137,217,135,216,176,217,135,216,181,217,136,216,177,216,186,217,138,216,177,217,131,216,167,217,134,217,136,217,132,216,167,216,168,217,138,217,134,216,185,216,177,216,182,216,176,217,132,217,131,217,135,217,134,216,167,217,138,217,136,217,133,217,130,216,167,217,132,216,185,217,132,217,138,216,167,217,134,216,167,217,132,217,131,217,134,216,173,216,170,217,137,217,130,216,168,217,132,217,136,216,173,216,169,216,167,216,174,216,177,217,129,217,130,216,183,216,185,216,168,216,175,216,177,217,131,217,134,216,165,216,176,216,167,217,131,217,133,216,167,216,167,216,173,216,175,216,165,217,132,216,167,217,129,217,138,217,135,216,168,216,185,216,182,217,131,217,138,217,129,216,168,216,173,216,171,217,136,217,133,217,134,217,136,217,135,217,136,216,163,217,134,216,167,216,172,216,175,216,167,217,132,217,135,216,167,216,179,217,132,217,133,216,185,217,134,216,175,217,132,217,138,216,179,216,185,216,168,216,177,216,181,217,132,217,137,217,133,217,134,216,176,216,168,217,135,216,167,216,163,217,134,217,135,217,133,216,171,217,132,217,131,217,134,216,170,216,167,217,132,216,167,216,173,217,138,216,171,217,133,216,181,216,177,216,180,216,177,216,173,216,173,217,136,217,132,217,136,217,129,217,138,216,167,216,176,216,167,217,132,217,131,217,132,217,133,216,177,216,169,216,167,217,134,216,170,216,167,217,132,217,129,216,163,216,168,217,136,216,174,216,167,216,181,216,163,217,134,216,170,216,167,217,134,217,135,216,167,217,132,217,138,216,185,216,182,217,136,217,136,217,130,216,175,216,167,216,168,217,134,216,174,217,138,216,177,216,168,217,134,216,170,217,132,217,131,217,133,216,180,216,167,216,161,217,136,217,135,217,138,216,167,216,168,217,136,217,130,216,181,216,181,217,136,217,133,216,167,216,177,217,130,217,133,216,163,216,173,216,175,217,134,216,173,217,134,216,185,216,175,217,133,216,177,216,163,217,138,216,167,216,173,216,169,217,131,216,170,216,168,216,175,217,136,217,134,217,138,216,172,216,168,217,133,217,134,217,135,216,170,216,173,216,170,216,172,217,135,216,169,216,179,217,134,216,169,217,138,216,170,217,133,217,131,216,177,216,169,216,186,216,178,216,169,217,134,217,129,216,179,216,168,217,138,216,170,217,132,217,132,217,135,217,132,217,134,216,167,216,170,217,132,217,131,217,130,217,132,216,168,217,132,217,133,216,167,216,185,217,134,217,135,216,163,217,136,217,132,216,180,217,138,216,161,217,134,217,136,216,177,216,163,217,133,216,167,217,129,217,138,217,131,216,168,217,131,217,132,216,176,216,167,216,170,216,177,216,170,216,168,216,168,216,163,217,134,217,135,217,133,216,179,216,167,217,134,217,131,216,168,217,138,216,185,217,129,217,130,216,175,216,173,216,179,217,134,217,132,217,135,217,133,216,180,216,185,216,177,216,163,217,135,217,132,216,180,217,135,216,177,217,130,216,183,216,177,216,183,217,132,216,168,112,114,111,102,105,108,101,115,101,114,118,105,99,101,100,101,102,97,117,108,116,104,105,109,115,101,108,102,100,101,116,97,105,108,115,99,111,110,116,101,110,116,115,117,112,112,111,114,116,115,116,97,114,116,101,100,109,101,115,115,97,103,101,115,117,99,99,101,115,115,102,97,115,104,105,111,110,60,116,105,116,108,101,62,99,111,117,110,116,114,121,97,99,99,111,117,110,116,99,114,101,97,116,101,100,115,116,111,114,105,101,115,114,101,115,117,108,116,115,114,117,110,110,105,110,103,112,114,111,99,101,115,115,119,114,105,116,105,110,103,111,98,106,101,99,116,115,118,105,115,105,98,108,101,119,101,108,99,111,109,101,97,114,116,105,99,108,101,117,110,107,110,111,119,110,110,101,116,119,111,114,107,99,111,109,112,97,110,121,100,121,110,97,109,105,99,98,114,111,119,115,101,114,112,114,105,118,97,99,121,112,114,111,98,108,101,109,83,101,114,118,105,99,101,114,101,115,112,101,99,116,100,105,115,112,108,97,121,114,101,113,117,101,115,116,114,101,115,101,114,118,101,119,101,98,115,105,116,101,104,105,115,116,111,114,121,102,114,105,101,110,100,115,111,112,116,105,111,110,115,119,111,114,107,105,110,103,118,101,114,115,105,111,110,109,105,108,108,105,111,110,99,104,97,110,110,101,108,119,105,110,100,111,119,46,97,100,100,114,101,115,115,118,105,115,105,116,101,100,119,101,97,116,104,101,114,99,111,114,114,101,99,116,112,114,111,100,117,99,116,101,100,105,114,101,99,116,102,111,114,119,97,114,100,121,111,117,32,99,97,110,114,101,109,111,118,101,100,115,117,98,106,101,99,116,99,111,110,116,114,111,108,97,114,99,104,105,118,101,99,117,114,114,101,110,116,114,101,97,100,105,110,103,108,105,98,114,97,114,121,108,105,109,105,116,101,100,109,97,110,97,103,101,114,102,117,114,116,104,101,114,115,117,109,109,97,114,121,109,97,99,104,105,110,101,109,105,110,117,116,101,115,112,114,105,118,97,116,101,99,111,110,116,101,120,116,112,114,111,103,114,97,109,115,111,99,105,101,116,121,110,117,109,98,101,114,115,119,114,105,116,116,101,110,101,110,97,98,108,101,100,116,114,105,103,103,101,114,115,111,117,114,99,101,115,108,111,97,100,105,110,103,101,108,101,109,101,110,116,112,97,114,116,110,101,114,102,105,110,97,108,108,121,112,101,114,102,101,99,116,109,101,97,110,105,110,103,115,121,115,116,101,109,115,107,101,101,112,105,110,103,99,117,108,116,117,114,101,38,113,117,111,116,59,44,106,111,117,114,110,97,108,112,114,111,106,101,99,116,115,117,114,102,97,99,101,115,38,113,117,111,116,59,101,120,112,105,114,101,115,114,101,118,105,101,119,115,98,97,108,97,110,99,101,69,110,103,108,105,115,104,67,111,110,116,101,110,116,116,104,114,111,117,103,104,80,108,101,97,115,101,32,111,112,105,110,105,111,110,99,111,110,116,97,99,116,97,118,101,114,97,103,101,112,114,105,109,97,114,121,118,105,108,108,97,103,101,83,112,97,110,105,115,104,103,97,108,108,101,114,121,100,101,99,108,105,110,101,109,101,101,116,105,110,103,109,105,115,115,105,111,110,112,111,112,117,108,97,114,113,117,97,108,105,116,121,109,101,97,115,117,114,101,103,101,110,101,114,97,108,115,112,101,99,105,101,115,115,101,115,115,105,111,110,115,101,99,116,105,111,110,119,114,105,116,101,114,115,99,111,117,110,116,101,114,105,110,105,116,105,97,108,114,101,112,111,114,116,115,102,105,103,117,114,101,115,109,101,109,98,101,114,115,104,111,108,100,105,110,103,100,105,115,112,117,116,101,101,97,114,108,105,101,114,101,120,112,114,101,115,115,100,105,103,105,116,97,108,112,105,99,116,117,114,101,65,110,111,116,104,101,114,109,97,114,114,105,101,100,116,114,97,102,102,105,99,108,101,97,100,105,110,103,99,104,97,110,103,101,100,99,101,110,116,114,97,108,118,105,99,116,111,114,121,105,109,97,103,101,115,47,114,101,97,115,111,110,115,115,116,117,100,105,101,115,102,101,97,116,117,114,101,108,105,115,116,105,110,103,109,117,115,116,32,98,101,115,99,104,111,111,108,115,86,101,114,115,105,111,110,117,115,117,97,108,108,121,101,112,105,115,111,100,101,112,108,97,121,105,110,103,103,114,111,119,105,110,103,111,98,118,105,111,117,115,111,118,101,114,108,97,121,112,114,101,115,101,110,116,97,99,116,105,111,110,115,60,47,117,108,62,13,10,119,114,97,112,112,101,114,97,108,114,101,97,100,121,99,101,114,116,97,105,110,114,101,97,108,105,116,121,115,116,111,114,97,103,101,97,110,111,116,104,101,114,100,101,115,107,116,111,112,111,102,102,101,114,101,100,112,97,116,116,101,114,110,117,110,117,115,117,97,108,68,105,103,105,116,97,108,99,97,112,105,116,97,108,87,101,98,115,105,116,101,102,97,105,108,117,114,101,99,111,110,110,101,99,116,114,101,100,117,99,101,100,65,110,100,114,111,105,100,100,101,99,97,100,101,115,114,101,103,117,108,97,114,32,38,97,109,112,59,32,97,110,105,109,97,108,115,114,101,108,101,97,115,101,65,117,116,111,109,97,116,103,101,116,116,105,110,103,109,101,116,104,111,100,115,110,111,116,104,105,110,103,80,111,112,117,108,97,114,99,97,112,116,105,111,110,108,101,116,116,101,114,115,99,97,112,116,117,114,101,115,99,105,101,110,99,101,108,105,99,101,110,115,101,99,104,97,110,103,101,115,69,110,103,108,97,110,100,61,49,38,97,109,112,59,72,105,115,116,111,114,121,32,61,32,110,101,119,32,67,101,110,116,114,97,108,117,112,100,97,116,101,100,83,112,101,99,105,97,108,78,101,116,119,111,114,107,114,101,113,117,105,114,101,99,111,109,109,101,110,116,119,97,114,110,105,110,103,67,111,108,108,101,103,101,116,111,111,108,98,97,114,114,101,109,97,105,110,115,98,101,99,97,117,115,101,101,108,101,99,116,101,100,68,101,117,116,115,99,104,102,105,110,97,110,99,101,119,111,114,107,101,114,115,113,117,105,99,107,108,121,98,101,116,119,101,101,110,101,120,97,99,116,108,121,115,101,116,116,105,110,103,100,105,115,101,97,115,101,83,111,99,105,101,116,121,119,101,97,112,111,110,115,101,120,104,105,98,105,116,38,108,116,59,33,45,45,67,111,110,116,114,111,108,99,108,97,115,115,101,115,99,111,118,101,114,101,100,111,117,116,108,105,110,101,97,116,116,97,99,107,115,100,101,118,105,99,101,115,40,119,105,110,100,111,119,112,117,114,112,111,115,101,116,105,116,108,101,61,34,77,111,98,105,108,101,32,107,105,108,108,105,110,103,115,104,111,119,105,110,103,73,116,97,108,105,97,110,100,114,111,112,112,101,100,104,101,97,118,105,108,121,101,102,102,101,99,116,115,45,49,39,93,41,59,10,99,111,110,102,105,114,109,67,117,114,114,101,110,116,97,100,118,97,110,99,101,115,104,97,114,105,110,103,111,112,101,110,105,110,103,100,114,97,119,105,110,103,98,105,108,108,105,111,110,111,114,100,101,114,101,100,71,101,114,109,97,110,121,114,101,108,97,116,101,100,60,47,102,111,114,109,62,105,110,99,108,117,100,101,119,104,101,116,104,101,114,100,101,102,105,110,101,100,83,99,105,101,110,99,101,99,97,116,97,108,111,103,65,114,116,105,99,108,101,98,117,116,116,111,110,115,108,97,114,103,101,115,116,117,110,105,102,111,114,109,106,111,117,114,110,101,121,115,105,100,101,98,97,114,67,104,105,99,97,103,111,104,111,108,105,100,97,121,71,101,110,101,114,97,108,112,97,115,115,97,103,101,44,38,113,117,111,116,59,97,110,105,109,97,116,101,102,101,101,108,105,110,103,97,114,114,105,118,101,100,112,97,115,115,105,110,103,110,97,116,117,114,97,108,114,111,117,103,104,108,121,46,10,10,84,104,101,32,98,117,116,32,110,111,116,100,101,110,115,105,116,121,66,114,105,116,97,105,110,67,104,105,110,101,115,101,108,97,99,107,32,111,102,116,114,105,98,117,116,101,73,114,101,108,97,110,100,34,32,100,97,116,97,45,102,97,99,116,111,114,115,114,101,99,101,105,118,101,116,104,97,116,32,105,115,76,105,98,114,97,114,121,104,117,115,98,97,110,100,105,110,32,102,97,99,116,97,102,102,97,105,114,115,67,104,97,114,108,101,115,114,97,100,105,99,97,108,98,114,111,117,103,104,116,102,105,110,100,105,110,103,108,97,110,100,105,110,103,58,108,97,110,103,61,34,114,101,116,117,114,110,32,108,101,97,100,101,114,115,112,108,97,110,110,101,100,112,114,101,109,105,117,109,112,97,99,107,97,103,101,65,109,101,114,105,99,97,69,100,105,116,105,111,110,93,38,113,117,111,116,59,77,101,115,115,97,103,101,110,101,101,100,32,116,111,118,97,108,117,101,61,34,99,111,109,112,108,101,120,108,111,111,107,105,110,103,115,116,97,116,105,111,110,98,101,108,105,101,118,101,115,109,97,108,108,101,114,45,109,111,98,105,108,101,114,101,99,111,114,100,115,119,97,110,116,32,116,111,107,105,110,100,32,111,102,70,105,114,101,102,111,120,121,111,117,32,97,114,101,115,105,109,105,108,97,114,115,116,117,100,105,101,100,109,97,120,105,109,117,109,104,101,97,100,105,110,103,114,97,112,105,100,108,121,99,108,105,109,97,116,101,107,105,110,103,100,111,109,101,109,101,114,103,101,100,97,109,111,117,110,116,115,102,111,117,110,100,101,100,112,105,111,110,101,101,114,102,111,114,109,117,108,97,100,121,110,97,115,116,121,104,111,119,32,116,111,32,83,117,112,112,111,114,116,114,101,118,101,110,117,101,101,99,111,110,111,109,121,82,101,115,117,108,116,115,98,114,111,116,104,101,114,115,111,108,100,105,101,114,108,97,114,103,101,108,121,99,97,108,108,105,110,103,46,38,113,117,111,116,59,65,99,99,111,117,110,116,69,100,119,97,114,100,32,115,101,103,109,101,110,116,82,111,98,101,114,116,32,101,102,102,111,114,116,115,80,97,99,105,102,105,99,108,101,97,114,110,101,100,117,112,32,119,105,116,104,104,101,105,103,104,116,58,119,101,32,104,97,118,101,65,110,103,101,108,101,115,110,97,116,105,111,110,115,95,115,101,97,114,99,104,97,112,112,108,105,101,100,97,99,113,117,105,114,101,109,97,115,115,105,118,101,103,114,97,110,116,101,100,58,32,102,97,108,115,101,116,114,101,97,116,101,100,98,105,103,103,101,115,116,98,101,110,101,102,105,116,100,114,105,118,105,110,103,83,116,117,100,105,101,115,109,105,110,105,109,117,109,112,101,114,104,97,112,115,109,111,114,110,105,110,103,115,101,108,108,105,110,103,105,115,32,117,115,101,100,114,101,118,101,114,115,101,118,97,114,105,97,110,116,32,114,111,108,101,61,34,109,105,115,115,105,110,103,97,99,104,105,101,118,101,112,114,111,109,111,116,101,115,116,117,100,101,110,116,115,111,109,101,111,110,101,101,120,116,114,101,109,101,114,101,115,116,111,114,101,98,111,116,116,111,109,58,101,118,111,108,118,101,100,97,108,108,32,116,104,101,115,105,116,101,109,97,112,101,110,103,108,105,115,104,119,97,121,32,116,111,32,32,65,117,103,117,115,116,115,121,109,98,111,108,115,67,111,109,112,97,110,121,109,97,116,116,101,114,115,109,117,115,105,99,97,108,97,103,97,105,110,115,116,115,101,114,118,105,110,103,125,41,40,41,59,13,10,112,97,121,109,101,110,116,116,114,111,117,98,108,101,99,111,110,99,101,112,116,99,111,109,112,97,114,101,112,97,114,101,110,116,115],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+204848);allocate([112,108,97,121,101,114,115,114,101,103,105,111,110,115,109,111,110,105,116,111,114,32,39,39,84,104,101,32,119,105,110,110,105,110,103,101,120,112,108,111,114,101,97,100,97,112,116,101,100,71,97,108,108,101,114,121,112,114,111,100,117,99,101,97,98,105,108,105,116,121,101,110,104,97,110,99,101,99,97,114,101,101,114,115,41,46,32,84,104,101,32,99,111,108,108,101,99,116,83,101,97,114,99,104,32,97,110,99,105,101,110,116,101,120,105,115,116,101,100,102,111,111,116,101,114,32,104,97,110,100,108,101,114,112,114,105,110,116,101,100,99,111,110,115,111,108,101,69,97,115,116,101,114,110,101,120,112,111,114,116,115,119,105,110,100,111,119,115,67,104,97,110,110,101,108,105,108,108,101,103,97,108,110,101,117,116,114,97,108,115,117,103,103,101,115,116,95,104,101,97,100,101,114,115,105,103,110,105,110,103,46,104,116,109,108,34,62,115,101,116,116,108,101,100,119,101,115,116,101,114,110,99,97,117,115,105,110,103,45,119,101,98,107,105,116,99,108,97,105,109,101,100,74,117,115,116,105,99,101,99,104,97,112,116,101,114,118,105,99,116,105,109,115,84,104,111,109,97,115,32,109,111,122,105,108,108,97,112,114,111,109,105,115,101,112,97,114,116,105,101,115,101,100,105,116,105,111,110,111,117,116,115,105,100,101,58,102,97,108,115,101,44,104,117,110,100,114,101,100,79,108,121,109,112,105,99,95,98,117,116,116,111,110,97,117,116,104,111,114,115,114,101,97,99,104,101,100,99,104,114,111,110,105,99,100,101,109,97,110,100,115,115,101,99,111,110,100,115,112,114,111,116,101,99,116,97,100,111,112,116,101,100,112,114,101,112,97,114,101,110,101,105,116,104,101,114,103,114,101,97,116,108,121,103,114,101,97,116,101,114,111,118,101,114,97,108,108,105,109,112,114,111,118,101,99,111,109,109,97,110,100,115,112,101,99,105,97,108,115,101,97,114,99,104,46,119,111,114,115,104,105,112,102,117,110,100,105,110,103,116,104,111,117,103,104,116,104,105,103,104,101,115,116,105,110,115,116,101,97,100,117,116,105,108,105,116,121,113,117,97,114,116,101,114,67,117,108,116,117,114,101,116,101,115,116,105,110,103,99,108,101,97,114,108,121,101,120,112,111,115,101,100,66,114,111,119,115,101,114,108,105,98,101,114,97,108,125,32,99,97,116,99,104,80,114,111,106,101,99,116,101,120,97,109,112,108,101,104,105,100,101,40,41,59,70,108,111,114,105,100,97,97,110,115,119,101,114,115,97,108,108,111,119,101,100,69,109,112,101,114,111,114,100,101,102,101,110,115,101,115,101,114,105,111,117,115,102,114,101,101,100,111,109,83,101,118,101,114,97,108,45,98,117,116,116,111,110,70,117,114,116,104,101,114,111,117,116,32,111,102,32,33,61,32,110,117,108,108,116,114,97,105,110,101,100,68,101,110,109,97,114,107,118,111,105,100,40,48,41,47,97,108,108,46,106,115,112,114,101,118,101,110,116,82,101,113,117,101,115,116,83,116,101,112,104,101,110,10,10,87,104,101,110,32,111,98,115,101,114,118,101,60,47,104,50,62,13,10,77,111,100,101,114,110,32,112,114,111,118,105,100,101,34,32,97,108,116,61,34,98,111,114,100,101,114,115,46,10,10,70,111,114,32,10,10,77,97,110,121,32,97,114,116,105,115,116,115,112,111,119,101,114,101,100,112,101,114,102,111,114,109,102,105,99,116,105,111,110,116,121,112,101,32,111,102,109,101,100,105,99,97,108,116,105,99,107,101,116,115,111,112,112,111,115,101,100,67,111,117,110,99,105,108,119,105,116,110,101,115,115,106,117,115,116,105,99,101,71,101,111,114,103,101,32,66,101,108,103,105,117,109,46,46,46,60,47,97,62,116,119,105,116,116,101,114,110,111,116,97,98,108,121,119,97,105,116,105,110,103,119,97,114,102,97,114,101,32,79,116,104,101,114,32,114,97,110,107,105,110,103,112,104,114,97,115,101,115,109,101,110,116,105,111,110,115,117,114,118,105,118,101,115,99,104,111,108,97,114,60,47,112,62,13,10,32,67,111,117,110,116,114,121,105,103,110,111,114,101,100,108,111,115,115,32,111,102,106,117,115,116,32,97,115,71,101,111,114,103,105,97,115,116,114,97,110,103,101,60,104,101,97,100,62,60,115,116,111,112,112,101,100,49,39,93,41,59,13,10,105,115,108,97,110,100,115,110,111,116,97,98,108,101,98,111,114,100,101,114,58,108,105,115,116,32,111,102,99,97,114,114,105,101,100,49,48,48,44,48,48,48,60,47,104,51,62,10,32,115,101,118,101,114,97,108,98,101,99,111,109,101,115,115,101,108,101,99,116,32,119,101,100,100,105,110,103,48,48,46,104,116,109,108,109,111,110,97,114,99,104,111,102,102,32,116,104,101,116,101,97,99,104,101,114,104,105,103,104,108,121,32,98,105,111,108,111,103,121,108,105,102,101,32,111,102,111,114,32,101,118,101,110,114,105,115,101,32,111,102,38,114,97,113,117,111,59,112,108,117,115,111,110,101,104,117,110,116,105,110,103,40,116,104,111,117,103,104,68,111,117,103,108,97,115,106,111,105,110,105,110,103,99,105,114,99,108,101,115,70,111,114,32,116,104,101,65,110,99,105,101,110,116,86,105,101,116,110,97,109,118,101,104,105,99,108,101,115,117,99,104,32,97,115,99,114,121,115,116,97,108,118,97,108,117,101,32,61,87,105,110,100,111,119,115,101,110,106,111,121,101,100,97,32,115,109,97,108,108,97,115,115,117,109,101,100,60,97,32,105,100,61,34,102,111,114,101,105,103,110,32,65,108,108,32,114,105,104,111,119,32,116,104,101,68,105,115,112,108,97,121,114,101,116,105,114,101,100,104,111,119,101,118,101,114,104,105,100,100,101,110,59,98,97,116,116,108,101,115,115,101,101,107,105,110,103,99,97,98,105,110,101,116,119,97,115,32,110,111,116,108,111,111,107,32,97,116,99,111,110,100,117,99,116,103,101,116,32,116,104,101,74,97,110,117,97,114,121,104,97,112,112,101,110,115,116,117,114,110,105,110,103,97,58,104,111,118,101,114,79,110,108,105,110,101,32,70,114,101,110,99,104,32,108,97,99,107,105,110,103,116,121,112,105,99,97,108,101,120,116,114,97,99,116,101,110,101,109,105,101,115,101,118,101,110,32,105,102,103,101,110,101,114,97,116,100,101,99,105,100,101,100,97,114,101,32,110,111,116,47,115,101,97,114,99,104,98,101,108,105,101,102,115,45,105,109,97,103,101,58,108,111,99,97,116,101,100,115,116,97,116,105,99,46,108,111,103,105,110,34,62,99,111,110,118,101,114,116,118,105,111,108,101,110,116,101,110,116,101,114,101,100,102,105,114,115,116,34,62,99,105,114,99,117,105,116,70,105,110,108,97,110,100,99,104,101,109,105,115,116,115,104,101,32,119,97,115,49,48,112,120,59,34,62,97,115,32,115,117,99,104,100,105,118,105,100,101,100,60,47,115,112,97,110,62,119,105,108,108,32,98,101,108,105,110,101,32,111,102,97,32,103,114,101,97,116,109,121,115,116,101,114,121,47,105,110,100,101,120,46,102,97,108,108,105,110,103,100,117,101,32,116,111,32,114,97,105,108,119,97,121,99,111,108,108,101,103,101,109,111,110,115,116,101,114,100,101,115,99,101,110,116,105,116,32,119,105,116,104,110,117,99,108,101,97,114,74,101,119,105,115,104,32,112,114,111,116,101,115,116,66,114,105,116,105,115,104,102,108,111,119,101,114,115,112,114,101,100,105,99,116,114,101,102,111,114,109,115,98,117,116,116,111,110,32,119,104,111,32,119,97,115,108,101,99,116,117,114,101,105,110,115,116,97,110,116,115,117,105,99,105,100,101,103,101,110,101,114,105,99,112,101,114,105,111,100,115,109,97,114,107,101,116,115,83,111,99,105,97,108,32,102,105,115,104,105,110,103,99,111,109,98,105,110,101,103,114,97,112,104,105,99,119,105,110,110,101,114,115,60,98,114,32,47,62,60,98,121,32,116,104,101,32,78,97,116,117,114,97,108,80,114,105,118,97,99,121,99,111,111,107,105,101,115,111,117,116,99,111,109,101,114,101,115,111,108,118,101,83,119,101,100,105,115,104,98,114,105,101,102,108,121,80,101,114,115,105,97,110,115,111,32,109,117,99,104,67,101,110,116,117,114,121,100,101,112,105,99,116,115,99,111,108,117,109,110,115,104,111,117,115,105,110,103,115,99,114,105,112,116,115,110,101,120,116,32,116,111,98,101,97,114,105,110,103,109,97,112,112,105,110,103,114,101,118,105,115,101,100,106,81,117,101,114,121,40,45,119,105,100,116,104,58,116,105,116,108,101,34,62,116,111,111,108,116,105,112,83,101,99,116,105,111,110,100,101,115,105,103,110,115,84,117,114,107,105,115,104,121,111,117,110,103,101,114,46,109,97,116,99,104,40,125,41,40,41,59,10,10,98,117,114,110,105,110,103,111,112,101,114,97,116,101,100,101,103,114,101,101,115,115,111,117,114,99,101,61,82,105,99,104,97,114,100,99,108,111,115,101,108,121,112,108,97,115,116,105,99,101,110,116,114,105,101,115,60,47,116,114,62,13,10,99,111,108,111,114,58,35,117,108,32,105,100,61,34,112,111,115,115,101,115,115,114,111,108,108,105,110,103,112,104,121,115,105,99,115,102,97,105,108,105,110,103,101,120,101,99,117,116,101,99,111,110,116,101,115,116,108,105,110,107,32,116,111,68,101,102,97,117,108,116,60,98,114,32,47,62,10,58,32,116,114,117,101,44,99,104,97,114,116,101,114,116,111,117,114,105,115,109,99,108,97,115,115,105,99,112,114,111,99,101,101,100,101,120,112,108,97,105,110,60,47,104,49,62,13,10,111,110,108,105,110,101,46,63,120,109,108,32,118,101,104,101,108,112,105,110,103,100,105,97,109,111,110,100,117,115,101,32,116,104,101,97,105,114,108,105,110,101,101,110,100,32,45,45,62,41,46,97,116,116,114,40,114,101,97,100,101,114,115,104,111,115,116,105,110,103,35,102,102,102,102,102,102,114,101,97,108,105,122,101,86,105,110,99,101,110,116,115,105,103,110,97,108,115,32,115,114,99,61,34,47,80,114,111,100,117,99,116,100,101,115,112,105,116,101,100,105,118,101,114,115,101,116,101,108,108,105,110,103,80,117,98,108,105,99,32,104,101,108,100,32,105,110,74,111,115,101,112,104,32,116,104,101,97,116,114,101,97,102,102,101,99,116,115,60,115,116,121,108,101,62,97,32,108,97,114,103,101,100,111,101,115,110,39,116,108,97,116,101,114,44,32,69,108,101,109,101,110,116,102,97,118,105,99,111,110,99,114,101,97,116,111,114,72,117,110,103,97,114,121,65,105,114,112,111,114,116,115,101,101,32,116,104,101,115,111,32,116,104,97,116,77,105,99,104,97,101,108,83,121,115,116,101,109,115,80,114,111,103,114,97,109,115,44,32,97,110,100,32,32,119,105,100,116,104,61,101,38,113,117,111,116,59,116,114,97,100,105,110,103,108,101,102,116,34,62,10,112,101,114,115,111,110,115,71,111,108,100,101,110,32,65,102,102,97,105,114,115,103,114,97,109,109,97,114,102,111,114,109,105,110,103,100,101,115,116,114,111,121,105,100,101,97,32,111,102,99,97,115,101,32,111,102,111,108,100,101,115,116,32,116,104,105,115,32,105,115,46,115,114,99,32,61,32,99,97,114,116,111,111,110,114,101,103,105,115,116,114,67,111,109,109,111,110,115,77,117,115,108,105,109,115,87,104,97,116,32,105,115,105,110,32,109,97,110,121,109,97,114,107,105,110,103,114,101,118,101,97,108,115,73,110,100,101,101,100,44,101,113,117,97,108,108,121,47,115,104,111,119,95,97,111,117,116,100,111,111,114,101,115,99,97,112,101,40,65,117,115,116,114,105,97,103,101,110,101,116,105,99,115,121,115,116,101,109,44,73,110,32,116,104,101,32,115,105,116,116,105,110,103,72,101,32,97,108,115,111,73,115,108,97,110,100,115,65,99,97,100,101,109,121,10,9,9,60,33,45,45,68,97,110,105,101,108,32,98,105,110,100,105,110,103,98,108,111,99,107,34,62,105,109,112,111,115,101,100,117,116,105,108,105,122,101,65,98,114,97,104,97,109,40,101,120,99,101,112,116,123,119,105,100,116,104,58,112,117,116,116,105,110,103,41,46,104,116,109,108,40,124,124,32,91,93,59,10,68,65,84,65,91,32,42,107,105,116,99,104,101,110,109,111,117,110,116,101,100,97,99,116,117,97,108,32,100,105,97,108,101,99,116,109,97,105,110,108,121,32,95,98,108,97,110,107,39,105,110,115,116,97,108,108,101,120,112,101,114,116,115,105,102,40,116,121,112,101,73,116,32,97,108,115,111,38,99,111,112,121,59,32,34,62,84,101,114,109,115,98,111,114,110,32,105,110,79,112,116,105,111,110,115,101,97,115,116,101,114,110,116,97,108,107,105,110,103,99,111,110,99,101,114,110,103,97,105,110,101,100,32,111,110,103,111,105,110,103,106,117,115,116,105,102,121,99,114,105,116,105,99,115,102,97,99,116,111,114,121,105,116,115,32,111,119,110,97,115,115,97,117,108,116,105,110,118,105,116,101,100,108,97,115,116,105,110,103,104,105,115,32,111,119,110,104,114,101,102,61,34,47,34,32,114,101,108,61,34,100,101,118,101,108,111,112,99,111,110,99,101,114,116,100,105,97,103,114,97,109,100,111,108,108,97,114,115,99,108,117,115,116,101,114,112,104,112,63,105,100,61,97,108,99,111,104,111,108,41,59,125,41,40,41,59,117,115,105,110,103,32,97,62,60,115,112,97,110,62,118,101,115,115,101,108,115,114,101,118,105,118,97,108,65,100,100,114,101,115,115,97,109,97,116,101,117,114,97,110,100,114,111,105,100,97,108,108,101,103,101,100,105,108,108,110,101,115,115,119,97,108,107,105,110,103,99,101,110,116,101,114,115,113,117,97,108,105,102,121,109,97,116,99,104,101,115,117,110,105,102,105,101,100,101,120,116,105,110,99,116,68,101,102,101,110,115,101,100,105,101,100,32,105,110,10,9,60,33,45,45,32,99,117,115,116,111,109,115,108,105,110,107,105,110,103,76,105,116,116,108,101,32,66,111,111,107,32,111,102,101,118,101,110,105,110,103,109,105,110,46,106,115,63,97,114,101,32,116,104,101,107,111,110,116,97,107,116,116,111,100,97,121,39,115,46,104,116,109,108,34,32,116,97,114,103,101,116,61,119,101,97,114,105,110,103,65,108,108,32,82,105,103,59,10,125,41,40,41,59,114,97,105,115,105,110,103,32,65,108,115,111,44,32,99,114,117,99,105,97,108,97,98,111,117,116,34,62,100,101,99,108,97,114,101,45,45,62,10,60,115,99,102,105,114,101,102,111,120,97,115,32,109,117,99,104,97,112,112,108,105,101,115,105,110,100,101,120,44,32,115,44,32,98,117,116,32,116,121,112,101,32,61,32,10,13,10,60,33,45,45,116,111,119,97,114,100,115,82,101,99,111,114,100,115,80,114,105,118,97,116,101,70,111,114,101,105,103,110,80,114,101,109,105,101,114,99,104,111,105,99,101,115,86,105,114,116,117,97,108,114,101,116,117,114,110,115,67,111,109,109,101,110,116,80,111,119,101,114,101,100,105,110,108,105,110,101,59,112,111,118,101,114,116,121,99,104,97,109,98,101,114,76,105,118,105,110,103,32,118,111,108,117,109,101,115,65,110,116,104,111,110,121,108,111,103,105,110,34,32,82,101,108,97,116,101,100,69,99,111,110,111,109,121,114,101,97,99,104,101,115,99,117,116,116,105,110,103,103,114,97,118,105,116,121,108,105,102,101,32,105,110,67,104,97,112,116,101,114,45,115,104,97,100,111,119,78,111,116,97,98,108,101,60,47,116,100,62,13,10,32,114,101,116,117,114,110,115,116,97,100,105,117,109,119,105,100,103,101,116,115,118,97,114,121,105,110,103,116,114,97,118,101,108,115,104,101,108,100,32,98,121,119,104,111,32,97,114,101,119,111,114,107,32,105,110,102,97,99,117,108,116,121,97,110,103,117,108,97,114,119,104,111,32,104,97,100,97,105,114,112,111,114,116,116,111,119,110,32,111,102,10,10,83,111,109,101,32,39,99,108,105,99,107,39,99,104,97,114,103,101,115,107,101,121,119,111,114,100,105,116,32,119,105,108,108,99,105,116,121,32,111,102,40,116,104,105,115,41,59,65,110,100,114,101,119,32,117,110,105,113,117,101,32,99,104,101,99,107,101,100,111,114,32,109,111,114,101,51,48,48,112,120,59,32,114,101,116,117,114,110,59,114,115,105,111,110,61,34,112,108,117,103,105,110,115,119,105,116,104,105,110,32,104,101,114,115,101,108,102,83,116,97,116,105,111,110,70,101,100,101,114,97,108,118,101,110,116,117,114,101,112,117,98,108,105,115,104,115,101,110,116,32,116,111,116,101,110,115,105,111,110,97,99,116,114,101,115,115,99,111,109,101,32,116,111,102,105,110,103,101,114,115,68,117,107,101,32,111,102,112,101,111,112,108,101,44,101,120,112,108,111,105,116,119,104,97,116,32,105,115,104,97,114,109,111,110,121,97,32,109,97,106,111,114,34,58,34,104,116,116,112,105,110,32,104,105,115,32,109,101,110,117,34,62,10,109,111,110,116,104,108,121,111,102,102,105,99,101,114,99,111,117,110,99,105,108,103,97,105,110,105,110,103,101,118,101,110,32,105,110,83,117,109,109,97,114,121,100,97,116,101,32,111,102,108,111,121,97,108,116,121,102,105,116,110,101,115,115,97,110,100,32,119,97,115,101,109,112,101,114,111,114,115,117,112,114,101,109,101,83,101,99,111,110,100,32,104,101,97,114,105,110,103,82,117,115,115,105,97,110,108,111,110,103,101,115,116,65,108,98,101,114,116,97,108,97,116,101,114,97,108,115,101,116,32,111,102,32,115,109,97,108,108,34,62,46,97,112,112,101,110,100,100,111,32,119,105,116,104,102,101,100,101,114,97,108,98,97,110,107,32,111,102,98,101,110,101,97,116,104,68,101,115,112,105,116,101,67,97,112,105,116,97,108,103,114,111,117,110,100,115,41,44,32,97,110,100,32,112,101,114,99,101,110,116,105,116,32,102,114,111,109,99,108,111,115,105,110,103,99,111,110,116,97,105,110,73,110,115,116,101,97,100,102,105,102,116,101,101,110,97,115,32,119,101,108,108,46,121,97,104,111,111,46,114,101,115,112,111,110,100,102,105,103,104,116,101,114,111,98,115,99,117,114,101,114,101,102,108,101,99,116,111,114,103,97,110,105,99,61,32,77,97,116,104,46,101,100,105,116,105,110,103,111,110,108,105,110,101,32,112,97,100,100,105,110,103,97,32,119,104,111,108,101,111,110,101,114,114,111,114,121,101,97,114,32,111,102,101,110,100,32,111,102,32,98,97,114,114,105,101,114,119,104,101,110,32,105,116,104,101,97,100,101,114,32,104,111,109,101,32,111,102,114,101,115,117,109,101,100,114,101,110,97,109,101,100,115,116,114,111,110,103,62,104,101,97,116,105,110,103,114,101,116,97,105,110,115,99,108,111,117,100,102,114,119,97,121,32,111,102,32,77,97,114,99,104,32,49,107,110,111,119,105,110,103,105,110,32,112,97,114,116,66,101,116,119,101,101,110,108,101,115,115,111,110,115,99,108,111,115,101,115,116,118,105,114,116,117,97,108,108,105,110,107,115,34,62,99,114,111,115,115,101,100,69,78,68,32,45,45,62,102,97,109,111,117,115,32,97,119,97,114,100,101,100,76,105,99,101,110,115,101,72,101,97,108,116,104,32,102,97,105,114,108,121,32,119,101,97,108,116,104,121,109,105,110,105,109,97,108,65,102,114,105,99,97,110,99,111,109,112,101,116,101,108,97,98,101,108,34,62,115,105,110,103,105,110,103,102,97,114,109,101,114,115,66,114,97,115,105,108,41,100,105,115,99,117,115,115,114,101,112,108,97,99,101,71,114,101,103,111,114,121,102,111,110,116,32,99,111,112,117,114,115,117,101,100,97,112,112,101,97,114,115,109,97,107,101,32,117,112,114,111,117,110,100,101,100,98,111,116,104,32,111,102,98,108,111,99,107,101,100,115,97,119,32,116,104,101,111,102,102,105,99,101,115,99,111,108,111,117,114,115,105,102,40,100,111,99,117,119,104,101,110,32,104,101,101,110,102,111,114,99,101,112,117,115,104,40,102,117,65,117,103,117,115,116,32,85,84,70,45,56,34,62,70,97,110,116,97,115,121,105,110,32,109,111,115,116,105,110,106,117,114,101,100,85,115,117,97,108,108,121,102,97,114,109,105,110,103,99,108,111,115,117,114,101,111,98,106,101,99,116,32,100,101,102,101,110,99,101,117,115,101,32,111,102,32,77,101,100,105,99,97,108,60,98,111,100,121,62,10,101,118,105,100,101,110,116,98,101,32,117,115,101,100,107,101,121,67,111,100,101,115,105,120,116,101,101,110,73,115,108,97,109,105,99,35,48,48,48,48,48,48,101,110,116,105,114,101,32,119,105,100,101,108,121,32,97,99,116,105,118,101,32,40,116,121,112,101,111,102,111,110,101,32,99,97,110,99,111,108,111,114,32,61,115,112,101,97,107,101,114,101,120,116,101,110,100,115,80,104,121,115,105,99,115,116,101,114,114,97,105,110,60,116,98,111,100,121,62,102,117,110,101,114,97,108,118,105,101,119,105,110,103,109,105,100,100,108,101,32,99,114,105,99,107,101,116,112,114,111,112,104,101,116,115,104,105,102,116,101,100,100,111,99,116,111,114,115,82,117,115,115,101,108,108,32,116,97,114,103,101,116,99,111,109,112,97,99,116,97,108,103,101,98,114,97,115,111,99,105,97,108,45,98,117,108,107,32,111,102,109,97,110,32,97,110,100,60,47,116,100,62,10,32,104,101,32,108,101,102,116,41,46,118,97,108,40,41,102,97,108,115,101,41,59,108,111,103,105,99,97,108,98,97,110,107,105,110,103,104,111,109,101,32,116,111,110,97,109,105,110,103,32,65,114,105,122,111,110,97,99,114,101,100,105,116,115,41,59,10,125,41,59,10,102,111,117,110,100,101,114,105,110,32,116,117,114,110,67,111,108,108,105,110,115,98,101,102,111,114,101,32,66,117,116,32,116,104,101,99,104,97,114,103,101,100,84,105,116,108,101,34,62,67,97,112,116,97,105,110,115,112,101,108,108,101,100,103,111,100,100,101,115,115,84,97,103,32,45,45,62,65,100,100,105,110,103,58,98,117,116,32,119,97,115,82,101,99,101,110,116,32,112,97,116,105,101,110,116,98,97,99,107,32,105,110,61,102,97,108,115,101,38,76,105,110,99,111,108,110,119,101,32,107,110,111,119,67,111,117,110,116,101,114,74,117,100,97,105,115,109,115,99,114,105,112,116,32,97,108,116,101,114,101,100,39,93,41,59,10,32,32,104,97,115,32,116,104,101,117,110,99,108,101,97,114,69,118,101,110,116,39,44,98,111,116,104,32,105,110,110,111,116,32,97,108,108,10,10,60,33,45,45,32,112,108,97,99,105,110,103,104,97,114,100,32,116,111,32,99,101,110,116,101,114,115,111,114,116,32,111,102,99,108,105,101,110,116,115,115,116,114,101,101,116,115,66,101,114,110,97,114,100,97,115,115,101,114,116,115,116,101,110,100,32,116,111,102,97,110,116,97,115,121,100,111,119,110,32,105,110,104,97,114,98,111,117,114,70,114,101,101,100,111,109,106,101,119,101,108,114,121,47,97,98,111,117,116,46,46,115,101,97,114,99,104,108,101,103,101,110,100,115,105,115,32,109,97,100,101,109,111,100,101,114,110,32,111,110,108,121,32,111,110,111,110,108,121,32,116,111,105,109,97,103,101,34,32,108,105,110,101,97,114,32,112,97,105,110,116,101,114,97,110,100,32,110,111,116,114,97,114,101,108,121,32,97,99,114,111,110,121,109,100,101,108,105,118,101,114,115,104,111,114,116,101,114,48,48,38,97,109,112,59,97,115,32,109,97,110,121,119,105,100,116,104,61,34,47,42,32,60,33,91,67,116,105,116,108,101,32,61,111,102,32,116,104,101,32,108,111,119,101,115,116,32,112,105,99,107,101,100,32,101,115,99,97,112,101,100,117,115,101,115,32,111,102,112,101,111,112,108,101,115,32,80,117,98,108,105,99,77,97,116,116,104,101,119,116,97,99,116,105,99,115,100,97,109,97,103,101,100,119,97,121,32,102,111,114,108,97,119,115,32,111,102,101,97,115,121,32,116,111,32,119,105,110,100,111,119,115,116,114,111,110,103,32,32,115,105,109,112,108,101,125,99,97,116,99,104,40,115,101,118,101,110,116,104,105,110,102,111,98,111,120,119,101,110,116,32,116,111,112,97,105,110,116,101,100,99,105,116,105,122,101,110,73,32,100,111,110,39,116,114,101,116,114,101,97,116,46,32,83,111,109,101,32,119,119,46,34,41,59,10,98,111,109,98,105,110,103,109,97,105,108,116,111,58,109,97,100,101,32,105,110,46,32,77,97,110,121,32,99,97,114,114,105,101,115,124,124,123,125,59,119,105,119,111,114,107,32,111,102,115,121,110,111,110,121,109,100,101,102,101,97,116,115,102,97,118,111,114,101,100,111,112,116,105,99,97,108,112,97,103,101,84,114,97,117,110,108,101,115,115,32,115,101,110,100,105,110,103,108,101,102,116,34,62,60,99,111,109,83,99,111,114,65,108,108,32,116,104,101,106,81,117,101,114,121,46,116,111,117,114,105,115,116,67,108,97,115,115,105,99,102,97,108,115,101,34,32,87,105,108,104,101,108,109,115,117,98,117,114,98,115,103,101,110,117,105,110,101,98,105,115,104,111,112,115,46,115,112,108,105,116,40,103,108,111,98,97,108,32,102,111,108,108,111,119,115,98,111,100,121,32,111,102,110,111,109,105,110,97,108,67,111,110,116,97,99,116,115,101,99,117,108,97,114,108,101,102,116,32,116,111,99,104,105,101,102,108,121,45,104,105,100,100,101,110,45,98,97,110,110,101,114,60,47,108,105,62,10,10,46,32,87,104,101,110,32,105,110,32,98,111,116,104,100,105,115,109,105,115,115,69,120,112,108,111,114,101,97,108,119,97,121,115,32,118,105,97,32,116,104,101,115,112,97,195,177,111,108,119,101,108,102,97,114,101,114,117,108,105,110,103,32,97,114,114,97,110,103,101,99,97,112,116,97,105,110,104,105,115,32,115,111,110,114,117,108,101,32,111,102,104,101,32,116,111,111,107,105,116,115,101,108,102,44,61,48,38,97,109,112,59,40,99,97,108,108,101,100,115,97,109,112,108,101,115,116,111,32,109,97,107,101,99,111,109,47,112,97,103,77,97,114,116,105,110,32,75,101,110,110,101,100,121,97,99,99,101,112,116,115,102,117,108,108,32,111,102,104,97,110,100,108,101,100,66,101,115,105,100,101,115,47,47,45,45,62,60,47,97,98,108,101,32,116,111,116,97,114,103,101,116,115,101,115,115,101,110,99,101,104,105,109,32,116,111,32,105,116,115,32,98,121,32,99,111,109,109,111,110,46,109,105,110,101,114,97,108,116,111,32,116,97,107,101,119,97,121,115,32,116,111,115,46,111,114,103,47,108,97,100,118,105,115,101,100,112,101,110,97,108,116,121,115,105,109,112,108,101,58,105,102,32,116,104,101,121,76,101,116,116,101,114,115,97,32,115,104,111,114,116,72,101,114,98,101,114,116,115,116,114,105,107,101,115,32,103,114,111,117,112,115,46,108,101,110,103,116,104,102,108,105,103,104,116,115,111,118,101,114,108,97,112,115,108,111,119,108,121,32,108,101,115,115,101,114,32,115,111,99,105,97,108,32,60,47,112,62,10,9,9,105,116,32,105,110,116,111,114,97,110,107,101,100,32,114,97,116,101,32,111,102,117,108,62,13,10,32,32,97,116,116,101,109,112,116,112,97,105,114,32,111,102,109,97,107,101,32,105,116,75,111,110,116,97,107,116,65,110,116,111,110,105,111,104,97,118,105,110,103,32,114,97,116,105,110,103,115,32,97,99,116,105,118,101,115,116,114,101,97,109,115,116,114,97,112,112,101,100,34,41,46,99,115,115,40,104,111,115,116,105,108,101,108,101,97,100,32,116,111,108,105,116,116,108,101,32,103,114,111,117,112,115,44,80,105,99,116,117,114,101,45,45,62,13,10,13,10,32,114,111,119,115,61,34,32,111,98,106,101,99,116,105,110,118,101,114,115,101,60,102,111,111,116,101,114,67,117,115,116,111,109,86,62,60,92,47,115,99,114,115,111,108,118,105,110,103,67,104,97,109,98,101,114,115,108,97,118,101,114,121,119,111,117,110,100,101,100,119,104,101,114,101,97,115,33,61,32,39,117,110,100,102,111,114,32,97,108,108,112,97,114,116,108,121,32,45,114,105,103,104,116,58,65,114,97,98,105,97,110,98,97,99,107,101,100,32,99,101,110,116,117,114,121,117,110,105,116,32,111,102,109,111,98,105,108,101,45,69,117,114,111,112,101,44,105,115,32,104,111,109,101,114,105,115,107,32,111,102,100,101,115,105,114,101,100,67,108,105,110,116,111,110,99,111,115,116,32,111,102,97,103,101,32,111,102,32,98,101,99,111,109,101,32,110,111,110,101,32,111,102,112,38,113,117,111,116,59,77,105,100,100,108,101,32,101,97,100,39,41,91,48,67,114,105,116,105,99,115,115,116,117,100,105,111,115,62,38,99,111,112,121,59,103,114,111,117,112,34,62,97,115,115,101,109,98,108,109,97,107,105,110,103,32,112,114,101,115,115,101,100,119,105,100,103,101,116,46,112,115,58,34,32,63,32,114,101,98,117,105,108,116,98,121,32,115,111,109,101,70,111,114,109,101,114,32,101,100,105,116,111,114,115,100,101,108,97,121,101,100,67,97,110,111,110,105,99,104,97,100,32,116,104,101,112,117,115,104,105,110,103,99,108,97,115,115,61,34,98,117,116,32,97,114,101,112,97,114,116,105,97,108,66,97,98,121,108,111,110,98,111,116,116,111,109,32,99,97,114,114,105,101,114,67,111,109,109,97,110,100,105,116,115,32,117,115,101,65,115,32,119,105,116,104,99,111,117,114,115,101,115,97,32,116,104,105,114,100,100,101,110,111,116,101,115,97,108,115,111,32,105,110,72,111,117,115,116,111,110,50,48,112,120,59,34,62,97,99,99,117,115,101,100,100,111,117,98,108,101,32,103,111,97,108,32,111,102,70,97,109,111,117,115,32,41,46,98,105,110,100,40,112,114,105,101,115,116,115,32,79,110,108,105,110,101,105,110,32,74,117,108,121,115,116,32,43,32,34,103,99,111,110,115,117,108,116,100,101,99,105,109,97,108,104,101,108,112,102,117,108,114,101,118,105,118,101,100,105,115,32,118,101,114,121,114,39,43,39,105,112,116,108,111,115,105,110,103,32,102,101,109,97,108,101,115,105,115,32,97,108,115,111,115,116,114,105,110,103,115,100,97,121,115,32,111,102,97,114,114,105,118,97,108,102,117,116,117,114,101,32,60,111,98,106,101,99,116,102,111,114,99,105,110,103,83,116,114,105,110,103,40,34,32,47,62,10,9,9,104,101,114,101,32,105,115,101,110,99,111,100,101,100,46,32,32,84,104,101,32,98,97,108,108,111,111,110,100,111,110,101,32,98,121,47,99,111,109,109,111,110,98,103,99,111,108,111,114,108,97,119,32,111,102,32,73,110,100,105,97,110,97,97,118,111,105,100,101,100,98,117,116,32,116,104,101,50,112,120,32,51,112,120,106,113,117,101,114,121,46,97,102,116,101,114,32,97,112,111,108,105,99,121,46,109,101,110,32,97,110,100,102,111,111,116,101,114,45,61,32,116,114,117,101,59,102,111,114,32,117,115,101,115,99,114,101,101,110,46,73,110,100,105,97,110,32,105,109,97,103,101,32,61,102,97,109,105,108,121,44,104,116,116,112,58,47,47,32,38,110,98,115,112,59,100,114,105,118,101,114,115,101,116,101,114,110,97,108,115,97,109,101,32,97,115,110,111,116,105,99,101,100,118,105,101,119,101,114,115,125,41,40,41,59,10,32,105,115,32,109,111,114,101,115,101,97,115,111,110,115,102,111,114,109,101,114,32,116,104,101,32,110,101,119,105,115,32,106,117,115,116,99,111,110,115,101,110,116,32,83,101,97,114,99,104,119,97,115,32,116,104,101,119,104,121,32,116,104,101,115,104,105,112,112,101,100,98,114,62,60,98,114,62,119,105,100,116,104,58,32,104,101,105,103,104,116,61,109,97,100,101,32,111,102,99,117,105,115,105,110,101,105,115,32,116,104,97,116,97,32,118,101,114,121,32,65,100,109,105,114,97,108,32,102,105,120,101,100,59,110,111,114,109,97,108,32,77,105,115,115,105,111,110,80,114,101,115,115,44,32,111,110,116,97,114,105,111,99,104,97,114,115,101,116,116,114,121,32,116,111,32,105,110,118,97,100,101,100,61,34,116,114,117,101,34,115,112,97,99,105,110,103,105,115,32,109,111,115,116,97,32,109,111,114,101,32,116,111,116,97,108,108,121,102,97,108,108,32,111,102,125,41,59,13,10,32,32,105,109,109,101,110,115,101,116,105,109,101,32,105,110,115,101,116,32,111,117,116,115,97,116,105,115,102,121,116,111,32,102,105,110,100,100,111,119,110,32,116,111,108,111,116,32,111,102,32,80,108,97,121,101,114,115,105,110,32,74,117,110,101,113,117,97,110,116,117,109,110,111,116,32,116,104,101,116,105,109,101,32,116,111,100,105,115,116,97,110,116,70,105,110,110,105,115,104,115,114,99,32,61,32,40,115,105,110,103,108,101,32,104,101,108,112,32,111,102,71,101,114,109,97,110,32,108,97,119,32,97,110,100,108,97,98,101,108,101,100,102,111,114,101,115,116,115,99,111,111,107,105,110,103,115,112,97,99,101,34,62,104,101,97,100,101,114,45,119,101,108,108,32,97,115,83,116,97,110,108,101,121,98,114,105,100,103,101,115,47,103,108,111,98,97,108,67,114,111,97,116,105,97,32,65,98,111,117,116,32,91,48,93,59,10,32,32,105,116,44,32,97,110,100,103,114,111,117,112,101,100,98,101,105,110,103,32,97,41,123,116,104,114,111,119,104,101,32,109,97,100,101,108,105,103,104,116,101,114,101,116,104,105,99,97,108,70,70,70,70,70,70,34,98,111,116,116,111,109,34,108,105,107,101,32,97,32,101,109,112,108,111,121,115,108,105,118,101,32,105,110,97,115,32,115,101,101,110,112,114,105,110,116,101,114,109,111,115,116,32,111,102,117,98,45,108,105,110,107,114,101,106,101,99,116,115,97,110,100,32,117,115,101,105,109,97,103,101,34,62,115,117,99,99,101,101,100,102,101,101,100,105,110,103,78,117,99,108,101,97,114,105,110,102,111,114,109,97,116,111,32,104,101,108,112,87,111,109,101,110,39,115,78,101,105,116,104,101,114,77,101,120,105,99,97,110,112,114,111,116,101,105,110,60,116,97,98,108,101,32,98,121,32,109,97,110,121,104,101,97,108,116,104,121,108,97,119,115,117,105,116,100,101,118,105,115,101,100,46,112,117,115,104,40,123,115,101,108,108,101,114,115,115,105,109,112,108,121,32,84,104,114,111,117,103,104,46,99,111,111,107,105,101,32,73,109,97,103,101,40,111,108,100,101,114,34,62,117,115,46,106,115,34,62,32,83,105,110,99,101,32,117,110,105,118,101,114,115,108,97,114,103,101,114,32,111,112,101,110,32,116,111,33,45,45,32,101,110,100,108,105,101,115,32,105,110,39,93,41,59,13,10,32,32,109,97,114,107,101,116,119,104,111,32,105,115,32,40,34,68,79,77,67,111,109,97,110,97,103,101,100,111,110,101,32,102,111,114,116,121,112,101,111,102,32,75,105,110,103,100,111,109,112,114,111,102,105,116,115,112,114,111,112,111,115,101,116,111,32,115,104,111,119,99,101,110,116,101,114,59,109,97,100,101,32,105,116,100,114,101,115,115,101,100,119,101,114,101,32,105,110,109,105,120,116,117,114,101,112,114,101,99,105,115,101,97,114,105,115,105,110,103,115,114,99,32,61,32,39,109,97,107,101,32,97,32,115,101,99,117,114,101,100,66,97,112,116,105,115,116,118,111,116,105,110,103,32,10,9,9,118,97,114,32,77,97,114,99,104,32,50,103,114,101,119,32,117,112,67,108,105,109,97,116,101,46,114,101,109,111,118,101,115,107,105,108,108,101,100,119,97,121,32,116,104,101,60,47,104,101,97,100,62,102,97,99,101,32,111,102,97,99,116,105,110,103,32,114,105,103,104,116,34,62,116,111,32,119,111,114,107,114,101,100,117,99,101,115,104,97,115,32,104,97,100,101,114,101,99,116,101,100,115,104,111,119,40,41,59,97,99,116,105,111,110,61,98,111,111,107,32,111,102,97,110,32,97,114,101,97,61,61,32,34,104,116,116,60,104,101,97,100,101,114,10,60,104,116,109,108,62,99,111,110,102,111,114,109,102,97,99,105,110,103,32,99,111,111,107,105,101,46,114,101,108,121,32,111,110,104,111,115,116,101,100,32,46,99,117,115,116,111,109,104,101,32,119,101,110,116,98,117,116,32,102,111,114,115,112,114,101,97,100,32,70,97,109,105,108,121,32,97,32,109,101,97,110,115,111,117,116,32,116,104,101,102,111,114,117,109,115,46,102,111,111,116,97,103,101,34,62,77,111,98,105,108,67,108,101,109,101,110,116,115,34,32,105,100,61,34,97,115,32,104,105,103,104,105,110,116,101,110,115,101,45,45,62,60,33,45,45,102,101,109,97,108,101,32,105,115,32,115,101,101,110,105,109,112,108,105,101,100,115,101,116,32,116,104,101,97,32,115,116,97,116,101,97,110,100,32,104,105,115,102,97,115,116,101,115,116,98,101,115,105,100,101,115,98,117,116,116,111,110,95,98,111,117,110,100,101,100,34,62,60,105,109,103,32,73,110,102,111,98,111,120,101,118,101,110,116,115,44,97,32,121,111,117,110,103,97,110,100,32,97,114,101,78,97,116,105,118,101,32,99,104,101,97,112,101,114,84,105,109,101,111,117,116,97,110,100,32,104,97,115,101,110,103,105,110,101,115,119,111,110,32,116,104,101,40,109,111,115,116,108,121,114,105,103,104,116,58,32,102,105,110,100,32,97,32,45,98,111,116,116,111,109,80,114,105,110,99,101,32,97,114,101,97,32,111,102,109,111,114,101,32,111,102,115,101,97,114,99,104,95,110,97,116,117,114,101,44,108,101,103,97,108,108,121,112,101,114,105,111,100,44,108,97,110,100,32,111,102,111,114,32,119,105,116,104,105,110,100,117,99,101,100,112,114,111,118,105,110,103,109,105,115,115,105,108,101,108,111,99,97,108,108,121,65,103,97,105,110,115,116,116,104,101,32,119,97,121,107,38,113,117,111,116,59,112,120,59,34,62,13,10,112,117,115,104,101,100,32,97,98,97,110,100,111,110,110,117,109,101,114,97,108,67,101,114,116,97,105,110,73,110,32,116,104,105,115,109,111,114,101,32,105,110,111,114,32,115,111,109,101,110,97,109,101,32,105,115,97,110,100,44,32,105,110,99,114,111,119,110,101,100,73,83,66,78,32,48,45,99,114,101,97,116,101,115,79,99,116,111,98,101,114,109,97,121,32,110,111,116,99,101,110,116,101,114,32,108,97,116,101,32,105,110,68,101,102,101,110,99,101,101,110,97,99,116,101,100,119,105,115,104,32,116,111,98,114,111,97,100,108,121,99,111,111,108,105,110,103,111,110,108,111,97,100,61,105,116,46,32,84,104,101,114,101,99,111,118,101,114,77,101,109,98,101,114,115,104,101,105,103,104,116,32,97,115,115,117,109,101,115,60,104,116,109,108,62,10,112,101,111,112,108,101,46,105,110,32,111,110,101,32,61,119,105,110,100,111,119,102,111,111,116,101,114,95,97,32,103,111,111,100,32,114,101,107,108,97,109,97,111,116,104,101,114,115,44,116,111,32,116,104,105,115,95,99,111,111,107,105,101,112,97,110,101,108,34,62,76,111,110,100,111,110,44,100,101,102,105,110,101,115,99,114,117,115,104,101,100,98,97,112,116,105,115,109,99,111,97,115,116,97,108,115,116,97,116,117,115,32,116,105,116,108,101,34,32,109,111,118,101,32,116,111,108,111,115,116,32,105,110,98,101,116,116,101,114,32,105,109,112,108,105,101,115,114,105,118,97,108,114,121,115,101,114,118,101,114,115,32,83,121,115,116,101,109,80,101,114,104,97,112,115,101,115,32,97,110,100,32,99,111,110,116,101,110,100,102,108,111,119,105,110,103,108,97,115,116,101,100,32,114,105,115,101,32,105,110,71,101,110,101,115,105,115,118,105,101,119,32,111,102,114,105,115,105,110,103,32,115,101,101,109,32,116,111,98,117,116,32,105,110,32,98,97,99,107,105,110,103,104,101,32,119,105,108,108,103,105,118,101,110,32,97,103,105,118,105,110,103,32,99,105,116,105,101,115,46,102,108,111,119,32,111,102,32,76,97,116,101,114,32,97,108,108,32,98,117,116,72,105,103,104,119,97,121,111,110,108,121,32,98,121,115,105,103,110,32,111,102,104,101,32,100,111,101,115,100,105,102,102,101,114,115,98,97,116,116,101,114,121,38,97,109,112,59,108,97,115,105,110,103,108,101,115,116,104,114,101,97,116,115,105,110,116,101,103,101,114,116,97,107,101,32,111,110,114,101,102,117,115,101,100,99,97,108,108,101,100,32,61,85,83,38,97,109,112,83,101,101,32,116,104,101,110,97,116,105,118,101,115,98,121,32,116,104,105,115,115,121,115,116,101,109,46,104,101,97,100,32,111,102,58,104,111,118,101,114,44,108,101,115,98,105,97,110,115,117,114,110,97,109,101,97,110,100,32,97,108,108,99,111,109,109,111,110,47,104,101,97,100,101,114,95,95,112,97,114,97,109,115,72,97,114,118,97,114,100,47,112,105,120,101,108,46,114,101,109,111,118,97,108,115,111,32,108,111,110,103,114,111,108,101,32,111,102,106,111,105,110,116,108,121,115,107,121,115,99,114,97,85,110,105,99,111,100,101,98,114,32,47,62,13,10,65,116,108,97,110,116,97,110,117,99,108,101,117,115,67,111,117,110,116,121,44,112,117,114,101,108,121,32,99,111,117,110,116,34,62,101,97,115,105,108,121,32,98,117,105,108,100,32,97,111,110,99,108,105,99,107,97,32,103,105,118,101,110,112,111,105,110,116,101,114,104,38,113,117,111,116,59,101,118,101,110,116,115,32,101,108,115,101,32,123,10,100,105,116,105,111,110,115,110,111,119,32,116,104,101,44,32,119,105,116,104,32,109,97,110,32,119,104,111,111,114,103,47,87,101,98,111,110,101,32,97,110,100,99,97,118,97,108,114,121,72,101,32,100,105,101,100,115,101,97,116,116,108,101,48,48,44,48,48,48,32,123,119,105,110,100,111,119,104,97,118,101,32,116,111,105,102,40,119,105,110,100,97,110,100,32,105,116,115,115,111,108,101,108,121,32,109,38,113,117,111,116,59,114,101,110,101,119,101,100,68,101,116,114,111,105,116,97,109,111,110,103,115,116,101,105,116,104,101,114,32,116,104,101,109,32,105,110,83,101,110,97,116,111,114,85,115,60,47,97,62,60,75,105,110,103,32,111,102,70,114,97,110,99,105,115,45,112,114,111,100,117,99,104,101,32,117,115,101,100,97,114,116,32,97,110,100,104,105,109,32,97,110,100,117,115,101,100,32,98,121,115,99,111,114,105,110,103,97,116,32,104,111,109,101,116,111,32,104,97,118,101,114,101,108,97,116,101,115,105,98,105,108,105,116,121,102,97,99,116,105,111,110,66,117,102,102,97,108,111,108,105,110,107,34,62,60,119,104,97,116,32,104,101,102,114,101,101,32,116,111,67,105,116,121,32,111,102,99,111,109,101,32,105,110,115,101,99,116,111,114,115,99,111,117,110,116,101,100,111,110,101,32,100,97,121,110,101,114,118,111,117,115,115,113,117,97,114,101,32,125,59,105,102,40,103,111,105,110,32,119,104,97,116,105,109,103,34,32,97,108,105,115,32,111,110,108,121,115,101,97,114,99,104,47,116,117,101,115,100,97,121,108,111,111,115,101,108,121,83,111,108,111,109,111,110,115,101,120,117,97,108,32,45,32,60,97,32,104,114,109,101,100,105,117,109,34,68,79,32,78,79,84,32,70,114,97,110,99,101,44,119,105,116,104,32,97,32,119,97,114,32,97,110,100,115,101,99,111,110,100,32,116,97,107,101,32,97,32,62,13,10,13,10,13,10,109,97,114,107,101,116,46,104,105,103,104,119,97,121,100,111,110,101,32,105,110,99,116,105,118,105,116,121,34,108,97,115,116,34,62,111,98,108,105,103,101,100,114,105,115,101,32,116,111,34,117,110,100,101,102,105,109,97,100,101,32,116,111,32,69,97,114,108,121,32,112,114,97,105,115,101,100,105,110,32,105,116,115,32,102,111,114,32,104,105,115,97,116,104,108,101,116,101,74,117,112,105,116,101,114,89,97,104,111,111,33,32,116,101,114,109,101,100,32,115,111,32,109,97,110,121,114,101,97,108,108,121,32,115,46,32,84,104,101],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+215088);allocate([32,97,32,119,111,109,97,110,63,118,97,108,117,101,61,100,105,114,101,99,116,32,114,105,103,104,116,34,32,98,105,99,121,99,108,101,97,99,105,110,103,61,34,100,97,121,32,97,110,100,115,116,97,116,105,110,103,82,97,116,104,101,114,44,104,105,103,104,101,114,32,79,102,102,105,99,101,32,97,114,101,32,110,111,119,116,105,109,101,115,44,32,119,104,101,110,32,97,32,112,97,121,32,102,111,114,111,110,32,116,104,105,115,45,108,105,110,107,34,62,59,98,111,114,100,101,114,97,114,111,117,110,100,32,97,110,110,117,97,108,32,116,104,101,32,78,101,119,112,117,116,32,116,104,101,46,99,111,109,34,32,116,97,107,105,110,32,116,111,97,32,98,114,105,101,102,40,105,110,32,116,104,101,103,114,111,117,112,115,46,59,32,119,105,100,116,104,101,110,122,121,109,101,115,115,105,109,112,108,101,32,105,110,32,108,97,116,101,123,114,101,116,117,114,110,116,104,101,114,97,112,121,97,32,112,111,105,110,116,98,97,110,110,105,110,103,105,110,107,115,34,62,10,40,41,59,34,32,114,101,97,32,112,108,97,99,101,92,117,48,48,51,67,97,97,98,111,117,116,32,97,116,114,62,13,10,9,9,99,99,111,117,110,116,32,103,105,118,101,115,32,97,60,83,67,82,73,80,84,82,97,105,108,119,97,121,116,104,101,109,101,115,47,116,111,111,108,98,111,120,66,121,73,100,40,34,120,104,117,109,97,110,115,44,119,97,116,99,104,101,115,105,110,32,115,111,109,101,32,105,102,32,40,119,105,99,111,109,105,110,103,32,102,111,114,109,97,116,115,32,85,110,100,101,114,32,98,117,116,32,104,97,115,104,97,110,100,101,100,32,109,97,100,101,32,98,121,116,104,97,110,32,105,110,102,101,97,114,32,111,102,100,101,110,111,116,101,100,47,105,102,114,97,109,101,108,101,102,116,32,105,110,118,111,108,116,97,103,101,105,110,32,101,97,99,104,97,38,113,117,111,116,59,98,97,115,101,32,111,102,73,110,32,109,97,110,121,117,110,100,101,114,103,111,114,101,103,105,109,101,115,97,99,116,105,111,110,32,60,47,112,62,13,10,60,117,115,116,111,109,86,97,59,38,103,116,59,60,47,105,109,112,111,114,116,115,111,114,32,116,104,97,116,109,111,115,116,108,121,32,38,97,109,112,59,114,101,32,115,105,122,101,61,34,60,47,97,62,60,47,104,97,32,99,108,97,115,115,112,97,115,115,105,118,101,72,111,115,116,32,61,32,87,104,101,116,104,101,114,102,101,114,116,105,108,101,86,97,114,105,111,117,115,61,91,93,59,40,102,117,99,97,109,101,114,97,115,47,62,60,47,116,100,62,97,99,116,115,32,97,115,73,110,32,115,111,109,101,62,13,10,13,10,60,33,111,114,103,97,110,105,115,32,60,98,114,32,47,62,66,101,105,106,105,110,103,99,97,116,97,108,195,160,100,101,117,116,115,99,104,101,117,114,111,112,101,117,101,117,115,107,97,114,97,103,97,101,105,108,103,101,115,118,101,110,115,107,97,101,115,112,97,195,177,97,109,101,110,115,97,106,101,117,115,117,97,114,105,111,116,114,97,98,97,106,111,109,195,169,120,105,99,111,112,195,161,103,105,110,97,115,105,101,109,112,114,101,115,105,115,116,101,109,97,111,99,116,117,98,114,101,100,117,114,97,110,116,101,97,195,177,97,100,105,114,101,109,112,114,101,115,97,109,111,109,101,110,116,111,110,117,101,115,116,114,111,112,114,105,109,101,114,97,116,114,97,118,195,169,115,103,114,97,99,105,97,115,110,117,101,115,116,114,97,112,114,111,99,101,115,111,101,115,116,97,100,111,115,99,97,108,105,100,97,100,112,101,114,115,111,110,97,110,195,186,109,101,114,111,97,99,117,101,114,100,111,109,195,186,115,105,99,97,109,105,101,109,98,114,111,111,102,101,114,116,97,115,97,108,103,117,110,111,115,112,97,195,173,115,101,115,101,106,101,109,112,108,111,100,101,114,101,99,104,111,97,100,101,109,195,161,115,112,114,105,118,97,100,111,97,103,114,101,103,97,114,101,110,108,97,99,101,115,112,111,115,105,98,108,101,104,111,116,101,108,101,115,115,101,118,105,108,108,97,112,114,105,109,101,114,111,195,186,108,116,105,109,111,101,118,101,110,116,111,115,97,114,99,104,105,118,111,99,117,108,116,117,114,97,109,117,106,101,114,101,115,101,110,116,114,97,100,97,97,110,117,110,99,105,111,101,109,98,97,114,103,111,109,101,114,99,97,100,111,103,114,97,110,100,101,115,101,115,116,117,100,105,111,109,101,106,111,114,101,115,102,101,98,114,101,114,111,100,105,115,101,195,177,111,116,117,114,105,115,109,111,99,195,179,100,105,103,111,112,111,114,116,97,100,97,101,115,112,97,99,105,111,102,97,109,105,108,105,97,97,110,116,111,110,105,111,112,101,114,109,105,116,101,103,117,97,114,100,97,114,97,108,103,117,110,97,115,112,114,101,99,105,111,115,97,108,103,117,105,101,110,115,101,110,116,105,100,111,118,105,115,105,116,97,115,116,195,173,116,117,108,111,99,111,110,111,99,101,114,115,101,103,117,110,100,111,99,111,110,115,101,106,111,102,114,97,110,99,105,97,109,105,110,117,116,111,115,115,101,103,117,110,100,97,116,101,110,101,109,111,115,101,102,101,99,116,111,115,109,195,161,108,97,103,97,115,101,115,105,195,179,110,114,101,118,105,115,116,97,103,114,97,110,97,100,97,99,111,109,112,114,97,114,105,110,103,114,101,115,111,103,97,114,99,195,173,97,97,99,99,105,195,179,110,101,99,117,97,100,111,114,113,117,105,101,110,101,115,105,110,99,108,117,115,111,100,101,98,101,114,195,161,109,97,116,101,114,105,97,104,111,109,98,114,101,115,109,117,101,115,116,114,97,112,111,100,114,195,173,97,109,97,195,177,97,110,97,195,186,108,116,105,109,97,101,115,116,97,109,111,115,111,102,105,99,105,97,108,116,97,109,98,105,101,110,110,105,110,103,195,186,110,115,97,108,117,100,111,115,112,111,100,101,109,111,115,109,101,106,111,114,97,114,112,111,115,105,116,105,111,110,98,117,115,105,110,101,115,115,104,111,109,101,112,97,103,101,115,101,99,117,114,105,116,121,108,97,110,103,117,97,103,101,115,116,97,110,100,97,114,100,99,97,109,112,97,105,103,110,102,101,97,116,117,114,101,115,99,97,116,101,103,111,114,121,101,120,116,101,114,110,97,108,99,104,105,108,100,114,101,110,114,101,115,101,114,118,101,100,114,101,115,101,97,114,99,104,101,120,99,104,97,110,103,101,102,97,118,111,114,105,116,101,116,101,109,112,108,97,116,101,109,105,108,105,116,97,114,121,105,110,100,117,115,116,114,121,115,101,114,118,105,99,101,115,109,97,116,101,114,105,97,108,112,114,111,100,117,99,116,115,122,45,105,110,100,101,120,58,99,111,109,109,101,110,116,115,115,111,102,116,119,97,114,101,99,111,109,112,108,101,116,101,99,97,108,101,110,100,97,114,112,108,97,116,102,111,114,109,97,114,116,105,99,108,101,115,114,101,113,117,105,114,101,100,109,111,118,101,109,101,110,116,113,117,101,115,116,105,111,110,98,117,105,108,100,105,110,103,112,111,108,105,116,105,99,115,112,111,115,115,105,98,108,101,114,101,108,105,103,105,111,110,112,104,121,115,105,99,97,108,102,101,101,100,98,97,99,107,114,101,103,105,115,116,101,114,112,105,99,116,117,114,101,115,100,105,115,97,98,108,101,100,112,114,111,116,111,99,111,108,97,117,100,105,101,110,99,101,115,101,116,116,105,110,103,115,97,99,116,105,118,105,116,121,101,108,101,109,101,110,116,115,108,101,97,114,110,105,110,103,97,110,121,116,104,105,110,103,97,98,115,116,114,97,99,116,112,114,111,103,114,101,115,115,111,118,101,114,118,105,101,119,109,97,103,97,122,105,110,101,101,99,111,110,111,109,105,99,116,114,97,105,110,105,110,103,112,114,101,115,115,117,114,101,118,97,114,105,111,117,115,32,60,115,116,114,111,110,103,62,112,114,111,112,101,114,116,121,115,104,111,112,112,105,110,103,116,111,103,101,116,104,101,114,97,100,118,97,110,99,101,100,98,101,104,97,118,105,111,114,100,111,119,110,108,111,97,100,102,101,97,116,117,114,101,100,102,111,111,116,98,97,108,108,115,101,108,101,99,116,101,100,76,97,110,103,117,97,103,101,100,105,115,116,97,110,99,101,114,101,109,101,109,98,101,114,116,114,97,99,107,105,110,103,112,97,115,115,119,111,114,100,109,111,100,105,102,105,101,100,115,116,117,100,101,110,116,115,100,105,114,101,99,116,108,121,102,105,103,104,116,105,110,103,110,111,114,116,104,101,114,110,100,97,116,97,98,97,115,101,102,101,115,116,105,118,97,108,98,114,101,97,107,105,110,103,108,111,99,97,116,105,111,110,105,110,116,101,114,110,101,116,100,114,111,112,100,111,119,110,112,114,97,99,116,105,99,101,101,118,105,100,101,110,99,101,102,117,110,99,116,105,111,110,109,97,114,114,105,97,103,101,114,101,115,112,111,110,115,101,112,114,111,98,108,101,109,115,110,101,103,97,116,105,118,101,112,114,111,103,114,97,109,115,97,110,97,108,121,115,105,115,114,101,108,101,97,115,101,100,98,97,110,110,101,114,34,62,112,117,114,99,104,97,115,101,112,111,108,105,99,105,101,115,114,101,103,105,111,110,97,108,99,114,101,97,116,105,118,101,97,114,103,117,109,101,110,116,98,111,111,107,109,97,114,107,114,101,102,101,114,114,101,114,99,104,101,109,105,99,97,108,100,105,118,105,115,105,111,110,99,97,108,108,98,97,99,107,115,101,112,97,114,97,116,101,112,114,111,106,101,99,116,115,99,111,110,102,108,105,99,116,104,97,114,100,119,97,114,101,105,110,116,101,114,101,115,116,100,101,108,105,118,101,114,121,109,111,117,110,116,97,105,110,111,98,116,97,105,110,101,100,61,32,102,97,108,115,101,59,102,111,114,40,118,97,114,32,97,99,99,101,112,116,101,100,99,97,112,97,99,105,116,121,99,111,109,112,117,116,101,114,105,100,101,110,116,105,116,121,97,105,114,99,114,97,102,116,101,109,112,108,111,121,101,100,112,114,111,112,111,115,101,100,100,111,109,101,115,116,105,99,105,110,99,108,117,100,101,115,112,114,111,118,105,100,101,100,104,111,115,112,105,116,97,108,118,101,114,116,105,99,97,108,99,111,108,108,97,112,115,101,97,112,112,114,111,97,99,104,112,97,114,116,110,101,114,115,108,111,103,111,34,62,60,97,100,97,117,103,104,116,101,114,97,117,116,104,111,114,34,32,99,117,108,116,117,114,97,108,102,97,109,105,108,105,101,115,47,105,109,97,103,101,115,47,97,115,115,101,109,98,108,121,112,111,119,101,114,102,117,108,116,101,97,99,104,105,110,103,102,105,110,105,115,104,101,100,100,105,115,116,114,105,99,116,99,114,105,116,105,99,97,108,99,103,105,45,98,105,110,47,112,117,114,112,111,115,101,115,114,101,113,117,105,114,101,115,101,108,101,99,116,105,111,110,98,101,99,111,109,105,110,103,112,114,111,118,105,100,101,115,97,99,97,100,101,109,105,99,101,120,101,114,99,105,115,101,97,99,116,117,97,108,108,121,109,101,100,105,99,105,110,101,99,111,110,115,116,97,110,116,97,99,99,105,100,101,110,116,77,97,103,97,122,105,110,101,100,111,99,117,109,101,110,116,115,116,97,114,116,105,110,103,98,111,116,116,111,109,34,62,111,98,115,101,114,118,101,100,58,32,38,113,117,111,116,59,101,120,116,101,110,100,101,100,112,114,101,118,105,111,117,115,83,111,102,116,119,97,114,101,99,117,115,116,111,109,101,114,100,101,99,105,115,105,111,110,115,116,114,101,110,103,116,104,100,101,116,97,105,108,101,100,115,108,105,103,104,116,108,121,112,108,97,110,110,105,110,103,116,101,120,116,97,114,101,97,99,117,114,114,101,110,99,121,101,118,101,114,121,111,110,101,115,116,114,97,105,103,104,116,116,114,97,110,115,102,101,114,112,111,115,105,116,105,118,101,112,114,111,100,117,99,101,100,104,101,114,105,116,97,103,101,115,104,105,112,112,105,110,103,97,98,115,111,108,117,116,101,114,101,99,101,105,118,101,100,114,101,108,101,118,97,110,116,98,117,116,116,111,110,34,32,118,105,111,108,101,110,99,101,97,110,121,119,104,101,114,101,98,101,110,101,102,105,116,115,108,97,117,110,99,104,101,100,114,101,99,101,110,116,108,121,97,108,108,105,97,110,99,101,102,111,108,108,111,119,101,100,109,117,108,116,105,112,108,101,98,117,108,108,101,116,105,110,105,110,99,108,117,100,101,100,111,99,99,117,114,114,101,100,105,110,116,101,114,110,97,108,36,40,116,104,105,115,41,46,114,101,112,117,98,108,105,99,62,60,116,114,62,60,116,100,99,111,110,103,114,101,115,115,114,101,99,111,114,100,101,100,117,108,116,105,109,97,116,101,115,111,108,117,116,105,111,110,60,117,108,32,105,100,61,34,100,105,115,99,111,118,101,114,72,111,109,101,60,47,97,62,119,101,98,115,105,116,101,115,110,101,116,119,111,114,107,115,97,108,116,104,111,117,103,104,101,110,116,105,114,101,108,121,109,101,109,111,114,105,97,108,109,101,115,115,97,103,101,115,99,111,110,116,105,110,117,101,97,99,116,105,118,101,34,62,115,111,109,101,119,104,97,116,118,105,99,116,111,114,105,97,87,101,115,116,101,114,110,32,32,116,105,116,108,101,61,34,76,111,99,97,116,105,111,110,99,111,110,116,114,97,99,116,118,105,115,105,116,111,114,115,68,111,119,110,108,111,97,100,119,105,116,104,111,117,116,32,114,105,103,104,116,34,62,10,109,101,97,115,117,114,101,115,119,105,100,116,104,32,61,32,118,97,114,105,97,98,108,101,105,110,118,111,108,118,101,100,118,105,114,103,105,110,105,97,110,111,114,109,97,108,108,121,104,97,112,112,101,110,101,100,97,99,99,111,117,110,116,115,115,116,97,110,100,105,110,103,110,97,116,105,111,110,97,108,82,101,103,105,115,116,101,114,112,114,101,112,97,114,101,100,99,111,110,116,114,111,108,115,97,99,99,117,114,97,116,101,98,105,114,116,104,100,97,121,115,116,114,97,116,101,103,121,111,102,102,105,99,105,97,108,103,114,97,112,104,105,99,115,99,114,105,109,105,110,97,108,112,111,115,115,105,98,108,121,99,111,110,115,117,109,101,114,80,101,114,115,111,110,97,108,115,112,101,97,107,105,110,103,118,97,108,105,100,97,116,101,97,99,104,105,101,118,101,100,46,106,112,103,34,32,47,62,109,97,99,104,105,110,101,115,60,47,104,50,62,10,32,32,107,101,121,119,111,114,100,115,102,114,105,101,110,100,108,121,98,114,111,116,104,101,114,115,99,111,109,98,105,110,101,100,111,114,105,103,105,110,97,108,99,111,109,112,111,115,101,100,101,120,112,101,99,116,101,100,97,100,101,113,117,97,116,101,112,97,107,105,115,116,97,110,102,111,108,108,111,119,34,32,118,97,108,117,97,98,108,101,60,47,108,97,98,101,108,62,114,101,108,97,116,105,118,101,98,114,105,110,103,105,110,103,105,110,99,114,101,97,115,101,103,111,118,101,114,110,111,114,112,108,117,103,105,110,115,47,76,105,115,116,32,111,102,32,72,101,97,100,101,114,34,62,34,32,110,97,109,101,61,34,32,40,38,113,117,111,116,59,103,114,97,100,117,97,116,101,60,47,104,101,97,100,62,10,99,111,109,109,101,114,99,101,109,97,108,97,121,115,105,97,100,105,114,101,99,116,111,114,109,97,105,110,116,97,105,110,59,104,101,105,103,104,116,58,115,99,104,101,100,117,108,101,99,104,97,110,103,105,110,103,98,97,99,107,32,116,111,32,99,97,116,104,111,108,105,99,112,97,116,116,101,114,110,115,99,111,108,111,114,58,32,35,103,114,101,97,116,101,115,116,115,117,112,112,108,105,101,115,114,101,108,105,97,98,108,101,60,47,117,108,62,10,9,9,60,115,101,108,101,99,116,32,99,105,116,105,122,101,110,115,99,108,111,116,104,105,110,103,119,97,116,99,104,105,110,103,60,108,105,32,105,100,61,34,115,112,101,99,105,102,105,99,99,97,114,114,121,105,110,103,115,101,110,116,101,110,99,101,60,99,101,110,116,101,114,62,99,111,110,116,114,97,115,116,116,104,105,110,107,105,110,103,99,97,116,99,104,40,101,41,115,111,117,116,104,101,114,110,77,105,99,104,97,101,108,32,109,101,114,99,104,97,110,116,99,97,114,111,117,115,101,108,112,97,100,100,105,110,103,58,105,110,116,101,114,105,111,114,46,115,112,108,105,116,40,34,108,105,122,97,116,105,111,110,79,99,116,111,98,101,114,32,41,123,114,101,116,117,114,110,105,109,112,114,111,118,101,100,45,45,38,103,116,59,10,10,99,111,118,101,114,97,103,101,99,104,97,105,114,109,97,110,46,112,110,103,34,32,47,62,115,117,98,106,101,99,116,115,82,105,99,104,97,114,100,32,119,104,97,116,101,118,101,114,112,114,111,98,97,98,108,121,114,101,99,111,118,101,114,121,98,97,115,101,98,97,108,108,106,117,100,103,109,101,110,116,99,111,110,110,101,99,116,46,46,99,115,115,34,32,47,62,32,119,101,98,115,105,116,101,114,101,112,111,114,116,101,100,100,101,102,97,117,108,116,34,47,62,60,47,97,62,13,10,101,108,101,99,116,114,105,99,115,99,111,116,108,97,110,100,99,114,101,97,116,105,111,110,113,117,97,110,116,105,116,121,46,32,73,83,66,78,32,48,100,105,100,32,110,111,116,32,105,110,115,116,97,110,99,101,45,115,101,97,114,99,104,45,34,32,108,97,110,103,61,34,115,112,101,97,107,101,114,115,67,111,109,112,117,116,101,114,99,111,110,116,97,105,110,115,97,114,99,104,105,118,101,115,109,105,110,105,115,116,101,114,114,101,97,99,116,105,111,110,100,105,115,99,111,117,110,116,73,116,97,108,105,97,110,111,99,114,105,116,101,114,105,97,115,116,114,111,110,103,108,121,58,32,39,104,116,116,112,58,39,115,99,114,105,112,116,39,99,111,118,101,114,105,110,103,111,102,102,101,114,105,110,103,97,112,112,101,97,114,101,100,66,114,105,116,105,115,104,32,105,100,101,110,116,105,102,121,70,97,99,101,98,111,111,107,110,117,109,101,114,111,117,115,118,101,104,105,99,108,101,115,99,111,110,99,101,114,110,115,65,109,101,114,105,99,97,110,104,97,110,100,108,105,110,103,100,105,118,32,105,100,61,34,87,105,108,108,105,97,109,32,112,114,111,118,105,100,101,114,95,99,111,110,116,101,110,116,97,99,99,117,114,97,99,121,115,101,99,116,105,111,110,32,97,110,100,101,114,115,111,110,102,108,101,120,105,98,108,101,67,97,116,101,103,111,114,121,108,97,119,114,101,110,99,101,60,115,99,114,105,112,116,62,108,97,121,111,117,116,61,34,97,112,112,114,111,118,101,100,32,109,97,120,105,109,117,109,104,101,97,100,101,114,34,62,60,47,116,97,98,108,101,62,83,101,114,118,105,99,101,115,104,97,109,105,108,116,111,110,99,117,114,114,101,110,116,32,99,97,110,97,100,105,97,110,99,104,97,110,110,101,108,115,47,116,104,101,109,101,115,47,47,97,114,116,105,99,108,101,111,112,116,105,111,110,97,108,112,111,114,116,117,103,97,108,118,97,108,117,101,61,34,34,105,110,116,101,114,118,97,108,119,105,114,101,108,101,115,115,101,110,116,105,116,108,101,100,97,103,101,110,99,105,101,115,83,101,97,114,99,104,34,32,109,101,97,115,117,114,101,100,116,104,111,117,115,97,110,100,115,112,101,110,100,105,110,103,38,104,101,108,108,105,112,59,110,101,119,32,68,97,116,101,34,32,115,105,122,101,61,34,112,97,103,101,78,97,109,101,109,105,100,100,108,101,34,32,34,32,47,62,60,47,97,62,104,105,100,100,101,110,34,62,115,101,113,117,101,110,99,101,112,101,114,115,111,110,97,108,111,118,101,114,102,108,111,119,111,112,105,110,105,111,110,115,105,108,108,105,110,111,105,115,108,105,110,107,115,34,62,10,9,60,116,105,116,108,101,62,118,101,114,115,105,111,110,115,115,97,116,117,114,100,97,121,116,101,114,109,105,110,97,108,105,116,101,109,112,114,111,112,101,110,103,105,110,101,101,114,115,101,99,116,105,111,110,115,100,101,115,105,103,110,101,114,112,114,111,112,111,115,97,108,61,34,102,97,108,115,101,34,69,115,112,97,195,177,111,108,114,101,108,101,97,115,101,115,115,117,98,109,105,116,34,32,101,114,38,113,117,111,116,59,97,100,100,105,116,105,111,110,115,121,109,112,116,111,109,115,111,114,105,101,110,116,101,100,114,101,115,111,117,114,99,101,114,105,103,104,116,34,62,60,112,108,101,97,115,117,114,101,115,116,97,116,105,111,110,115,104,105,115,116,111,114,121,46,108,101,97,118,105,110,103,32,32,98,111,114,100,101,114,61,99,111,110,116,101,110,116,115,99,101,110,116,101,114,34,62,46,10,10,83,111,109,101,32,100,105,114,101,99,116,101,100,115,117,105,116,97,98,108,101,98,117,108,103,97,114,105,97,46,115,104,111,119,40,41,59,100,101,115,105,103,110,101,100,71,101,110,101,114,97,108,32,99,111,110,99,101,112,116,115,69,120,97,109,112,108,101,115,119,105,108,108,105,97,109,115,79,114,105,103,105,110,97,108,34,62,60,115,112,97,110,62,115,101,97,114,99,104,34,62,111,112,101,114,97,116,111,114,114,101,113,117,101,115,116,115,97,32,38,113,117,111,116,59,97,108,108,111,119,105,110,103,68,111,99,117,109,101,110,116,114,101,118,105,115,105,111,110,46,32,10,10,84,104,101,32,121,111,117,114,115,101,108,102,67,111,110,116,97,99,116,32,109,105,99,104,105,103,97,110,69,110,103,108,105,115,104,32,99,111,108,117,109,98,105,97,112,114,105,111,114,105,116,121,112,114,105,110,116,105,110,103,100,114,105,110,107,105,110,103,102,97,99,105,108,105,116,121,114,101,116,117,114,110,101,100,67,111,110,116,101,110,116,32,111,102,102,105,99,101,114,115,82,117,115,115,105,97,110,32,103,101,110,101,114,97,116,101,45,56,56,53,57,45,49,34,105,110,100,105,99,97,116,101,102,97,109,105,108,105,97,114,32,113,117,97,108,105,116,121,109,97,114,103,105,110,58,48,32,99,111,110,116,101,110,116,118,105,101,119,112,111,114,116,99,111,110,116,97,99,116,115,45,116,105,116,108,101,34,62,112,111,114,116,97,98,108,101,46,108,101,110,103,116,104,32,101,108,105,103,105,98,108,101,105,110,118,111,108,118,101,115,97,116,108,97,110,116,105,99,111,110,108,111,97,100,61,34,100,101,102,97,117,108,116,46,115,117,112,112,108,105,101,100,112,97,121,109,101,110,116,115,103,108,111,115,115,97,114,121,10,10,65,102,116,101,114,32,103,117,105,100,97,110,99,101,60,47,116,100,62,60,116,100,101,110,99,111,100,105,110,103,109,105,100,100,108,101,34,62,99,97,109,101,32,116,111,32,100,105,115,112,108,97,121,115,115,99,111,116,116,105,115,104,106,111,110,97,116,104,97,110,109,97,106,111,114,105,116,121,119,105,100,103,101,116,115,46,99,108,105,110,105,99,97,108,116,104,97,105,108,97,110,100,116,101,97,99,104,101,114,115,60,104,101,97,100,62,10,9,97,102,102,101,99,116,101,100,115,117,112,112,111,114,116,115,112,111,105,110,116,101,114,59,116,111,83,116,114,105,110,103,60,47,115,109,97,108,108,62,111,107,108,97,104,111,109,97,119,105,108,108,32,98,101,32,105,110,118,101,115,116,111,114,48,34,32,97,108,116,61,34,104,111,108,105,100,97,121,115,82,101,115,111,117,114,99,101,108,105,99,101,110,115,101,100,32,40,119,104,105,99,104,32,46,32,65,102,116,101,114,32,99,111,110,115,105,100,101,114,118,105,115,105,116,105,110,103,101,120,112,108,111,114,101,114,112,114,105,109,97,114,121,32,115,101,97,114,99,104,34,32,97,110,100,114,111,105,100,34,113,117,105,99,107,108,121,32,109,101,101,116,105,110,103,115,101,115,116,105,109,97,116,101,59,114,101,116,117,114,110,32,59,99,111,108,111,114,58,35,32,104,101,105,103,104,116,61,97,112,112,114,111,118,97,108,44,32,38,113,117,111,116,59,32,99,104,101,99,107,101,100,46,109,105,110,46,106,115,34,109,97,103,110,101,116,105,99,62,60,47,97,62,60,47,104,102,111,114,101,99,97,115,116,46,32,87,104,105,108,101,32,116,104,117,114,115,100,97,121,100,118,101,114,116,105,115,101,38,101,97,99,117,116,101,59,104,97,115,67,108,97,115,115,101,118,97,108,117,97,116,101,111,114,100,101,114,105,110,103,101,120,105,115,116,105,110,103,112,97,116,105,101,110,116,115,32,79,110,108,105,110,101,32,99,111,108,111,114,97,100,111,79,112,116,105,111,110,115,34,99,97,109,112,98,101,108,108,60,33,45,45,32,101,110,100,60,47,115,112,97,110,62,60,60,98,114,32,47,62,13,10,95,112,111,112,117,112,115,124,115,99,105,101,110,99,101,115,44,38,113,117,111,116,59,32,113,117,97,108,105,116,121,32,87,105,110,100,111,119,115,32,97,115,115,105,103,110,101,100,104,101,105,103,104,116,58,32,60,98,32,99,108,97,115,115,108,101,38,113,117,111,116,59,32,118,97,108,117,101,61,34,32,67,111,109,112,97,110,121,101,120,97,109,112,108,101,115,60,105,102,114,97,109,101,32,98,101,108,105,101,118,101,115,112,114,101,115,101,110,116,115,109,97,114,115,104,97,108,108,112,97,114,116,32,111,102,32,112,114,111,112,101,114,108,121,41,46,10,10,84,104,101,32,116,97,120,111,110,111,109,121,109,117,99,104,32,111,102,32,60,47,115,112,97,110,62,10,34,32,100,97,116,97,45,115,114,116,117,103,117,195,170,115,115,99,114,111,108,108,84,111,32,112,114,111,106,101,99,116,60,104,101,97,100,62,13,10,97,116,116,111,114,110,101,121,101,109,112,104,97,115,105,115,115,112,111,110,115,111,114,115,102,97,110,99,121,98,111,120,119,111,114,108,100,39,115,32,119,105,108,100,108,105,102,101,99,104,101,99,107,101,100,61,115,101,115,115,105,111,110,115,112,114,111,103,114,97,109,109,112,120,59,102,111,110,116,45,32,80,114,111,106,101,99,116,106,111,117,114,110,97,108,115,98,101,108,105,101,118,101,100,118,97,99,97,116,105,111,110,116,104,111,109,112,115,111,110,108,105,103,104,116,105,110,103,97,110,100,32,116,104,101,32,115,112,101,99,105,97,108,32,98,111,114,100,101,114,61,48,99,104,101,99,107,105,110,103,60,47,116,98,111,100,121,62,60,98,117,116,116,111,110,32,67,111,109,112,108,101,116,101,99,108,101,97,114,102,105,120,10,60,104,101,97,100,62,10,97,114,116,105,99,108,101,32,60,115,101,99,116,105,111,110,102,105,110,100,105,110,103,115,114,111,108,101,32,105,110,32,112,111,112,117,108,97,114,32,32,79,99,116,111,98,101,114,119,101,98,115,105,116,101,32,101,120,112,111,115,117,114,101,117,115,101,100,32,116,111,32,32,99,104,97,110,103,101,115,111,112,101,114,97,116,101,100,99,108,105,99,107,105,110,103,101,110,116,101,114,105,110,103,99,111,109,109,97,110,100,115,105,110,102,111,114,109,101,100,32,110,117,109,98,101,114,115,32,32,60,47,100,105,118,62,99,114,101,97,116,105,110,103,111,110,83,117,98,109,105,116,109,97,114,121,108,97,110,100,99,111,108,108,101,103,101,115,97,110,97,108,121,116,105,99,108,105,115,116,105,110,103,115,99,111,110,116,97,99,116,46,108,111,103,103,101,100,73,110,97,100,118,105,115,111,114,121,115,105,98,108,105,110,103,115,99,111,110,116,101,110,116,34,115,38,113,117,111,116,59,41,115,46,32,84,104,105,115,32,112,97,99,107,97,103,101,115,99,104,101,99,107,98,111,120,115,117,103,103,101,115,116,115,112,114,101,103,110,97,110,116,116,111,109,111,114,114,111,119,115,112,97,99,105,110,103,61,105,99,111,110,46,112,110,103,106,97,112,97,110,101,115,101,99,111,100,101,98,97,115,101,98,117,116,116,111,110,34,62,103,97,109,98,108,105,110,103,115,117,99,104,32,97,115,32,44,32,119,104,105,108,101,32,60,47,115,112,97,110,62,32,109,105,115,115,111,117,114,105,115,112,111,114,116,105,110,103,116,111,112,58,49,112,120,32,46,60,47,115,112,97,110,62,116,101,110,115,105,111,110,115,119,105,100,116,104,61,34,50,108,97,122,121,108,111,97,100,110,111,118,101,109,98,101,114,117,115,101,100,32,105,110,32,104,101,105,103,104,116,61,34,99,114,105,112,116,34,62,10,38,110,98,115,112,59,60,47,60,116,114,62,60,116,100,32,104,101,105,103,104,116,58,50,47,112,114,111,100,117,99,116,99,111,117,110,116,114,121,32,105,110,99,108,117,100,101,32,102,111,111,116,101,114,34,32,38,108,116,59,33,45,45,32,116,105,116,108,101,34,62,60,47,106,113,117,101,114,121,46,60,47,102,111,114,109,62,10,40,231,174,128,228,189,147,41,40,231,185,129,233,171,148,41,104,114,118,97,116,115,107,105,105,116,97,108,105,97,110,111,114,111,109,195,162,110,196,131,116,195,188,114,107,195,167,101,216,167,216,177,216,175,217,136,116,97,109,98,105,195,169,110,110,111,116,105,99,105,97,115,109,101,110,115,97,106,101,115,112,101,114,115,111,110,97,115,100,101,114,101,99,104,111,115,110,97,99,105,111,110,97,108,115,101,114,118,105,99,105,111,99,111,110,116,97,99,116,111,117,115,117,97,114,105,111,115,112,114,111,103,114,97,109,97,103,111,98,105,101,114,110,111,101,109,112,114,101,115,97,115,97,110,117,110,99,105,111,115,118,97,108,101,110,99,105,97,99,111,108,111,109,98,105,97,100,101,115,112,117,195,169,115,100,101,112,111,114,116,101,115,112,114,111,121,101,99,116,111,112,114,111,100,117,99,116,111,112,195,186,98,108,105,99,111,110,111,115,111,116,114,111,115,104,105,115,116,111,114,105,97,112,114,101,115,101,110,116,101,109,105,108,108,111,110,101,115,109,101,100,105,97,110,116,101,112,114,101,103,117,110,116,97,97,110,116,101,114,105,111,114,114,101,99,117,114,115,111,115,112,114,111,98,108,101,109,97,115,97,110,116,105,97,103,111,110,117,101,115,116,114,111,115,111,112,105,110,105,195,179,110,105,109,112,114,105,109,105,114,109,105,101,110,116,114,97,115,97,109,195,169,114,105,99,97,118,101,110,100,101,100,111,114,115,111,99,105,101,100,97,100,114,101,115,112,101,99,116,111,114,101,97,108,105,122,97,114,114,101,103,105,115,116,114,111,112,97,108,97,98,114,97,115,105,110,116,101,114,195,169,115,101,110,116,111,110,99,101,115,101,115,112,101,99,105,97,108,109,105,101,109,98,114,111,115,114,101,97,108,105,100,97,100,99,195,179,114,100,111,98,97,122,97,114,97,103,111,122,97,112,195,161,103,105,110,97,115,115,111,99,105,97,108,101,115,98,108,111,113,117,101,97,114,103,101,115,116,105,195,179,110,97,108,113,117,105,108,101,114,115,105,115,116,101,109,97,115,99,105,101,110,99,105,97,115,99,111,109,112,108,101,116,111,118,101,114,115,105,195,179,110,99,111,109,112,108,101,116,97,101,115,116,117,100,105,111,115,112,195,186,98,108,105,99,97,111,98,106,101,116,105,118,111,97,108,105,99,97,110,116,101,98,117,115,99,97,100,111,114,99,97,110,116,105,100,97,100,101,110,116,114,97,100,97,115,97,99,99,105,111,110,101,115,97,114,99,104,105,118,111,115,115,117,112,101,114,105,111,114,109,97,121,111,114,195,173,97,97,108,101,109,97,110,105,97,102,117,110,99,105,195,179,110,195,186,108,116,105,109,111,115,104,97,99,105,101,110,100,111,97,113,117,101,108,108,111,115,101,100,105,99,105,195,179,110,102,101,114,110,97,110,100,111,97,109,98,105,101,110,116,101,102,97,99,101,98,111,111,107,110,117,101,115,116,114,97,115,99,108,105,101,110,116,101,115,112,114,111,99,101,115,111,115,98,97,115,116,97,110,116,101,112,114,101,115,101,110,116,97,114,101,112,111,114,116,97,114,99,111,110,103,114,101,115,111,112,117,98,108,105,99,97,114,99,111,109,101,114,99,105,111,99,111,110,116,114,97,116,111,106,195,179,118,101,110,101,115,100,105,115,116,114,105,116,111,116,195,169,99,110,105,99,97,99,111,110,106,117,110,116,111,101,110,101,114,103,195,173,97,116,114,97,98,97,106,97,114,97,115,116,117,114,105,97,115,114,101,99,105,101,110,116,101,117,116,105,108,105,122,97,114,98,111,108,101,116,195,173,110,115,97,108,118,97,100,111,114,99,111,114,114,101,99,116,97,116,114,97,98,97,106,111,115,112,114,105,109,101,114,111,115,110,101,103,111,99,105,111,115,108,105,98,101,114,116,97,100,100,101,116,97,108,108,101,115,112,97,110,116,97,108,108,97,112,114,195,179,120,105,109,111,97,108,109,101,114,195,173,97,97,110,105,109,97,108,101,115,113,117,105,195,169,110,101,115,99,111,114,97,122,195,179,110,115,101,99,99,105,195,179,110,98,117,115,99,97,110,100,111,111,112,99,105,111,110,101,115,101,120,116,101,114,105,111,114,99,111,110,99,101,112,116,111,116,111,100,97,118,195,173,97,103,97,108,101,114,195,173,97,101,115,99,114,105,98,105,114,109,101,100,105,99,105,110,97,108,105,99,101,110,99,105,97,99,111,110,115,117,108,116,97,97,115,112,101,99,116,111,115,99,114,195,173,116,105,99,97,100,195,179,108,97,114,101,115,106,117,115,116,105,99,105,97,100,101,98,101,114,195,161,110,112,101,114,195,173,111,100,111,110,101,99,101,115,105,116,97,109,97,110,116,101,110,101,114,112,101,113,117,101,195,177,111,114,101,99,105,98,105,100,97,116,114,105,98,117,110,97,108,116,101,110,101,114,105,102,101,99,97,110,99,105,195,179,110,99,97,110,97,114,105,97,115,100,101,115,99,97,114,103,97,100,105,118,101,114,115,111,115,109,97,108,108,111,114,99,97,114,101,113,117,105,101,114,101,116,195,169,99,110,105,99,111,100,101,98,101,114,195,173,97,118,105,118,105,101,110,100,97,102,105,110,97,110,122,97,115,97,100,101,108,97,110,116,101,102,117,110,99,105,111,110,97,99,111,110,115,101,106,111,115,100,105,102,195,173,99,105,108,99,105,117,100,97,100,101,115,97,110,116,105,103,117,97,115,97,118,97,110,122,97,100,97,116,195,169,114,109,105,110,111,117,110,105,100,97,100,101,115,115,195,161,110,99,104,101,122,99,97,109,112,97,195,177,97,115,111,102,116,111,110,105,99,114,101,118,105,115,116,97,115,99,111,110,116,105,101,110,101,115,101,99,116,111,114,101,115,109,111,109,101,110,116,111,115,102,97,99,117,108,116,97,100,99,114,195,169,100,105,116,111,100,105,118,101,114,115,97,115,115,117,112,117,101,115,116,111,102,97,99,116,111,114,101,115,115,101,103,117,110,100,111,115,112,101,113,117,101,195,177,97,208,179,208,190,208,180,208,176,208,181,209,129,208,187,208,184,208,181,209,129,209,130,209,140,208,177,209,139,208,187,208,190,208,177,209,139,209,130,209,140,209,141,209,130,208,190,208,188,208,149,209,129,208,187,208,184,209,130,208,190,208,179,208,190,208,188,208,181,208,189,209,143,208,178,209,129,208,181,209,133,209,141,209,130,208,190,208,185,208,180,208,176,208,182,208,181,208,177,209,139,208,187,208,184,208,179,208,190,208,180,209,131,208,180,208,181,208,189,209,140,209,141,209,130,208,190,209,130,208,177,209,139,208,187,208,176,209,129,208,181,208,177,209,143,208,190,208,180,208,184,208,189,209,129,208,181,208,177,208,181,208,189,208,176,208,180,208,190,209,129,208,176,208,185,209,130,209,132,208,190,209,130,208,190,208,189,208,181,208,179,208,190,209,129,208,178,208,190,208,184,209,129,208,178,208,190,208,185,208,184,208,179,209,128,209,139,209,130,208,190,208,182,208,181,208,178,209,129,208,181,208,188,209,129,208,178,208,190,209,142,208,187,208,184,209,136,209,140,209,141,209,130,208,184,209,133,208,191,208,190,208,186,208,176,208,180,208,189,208,181,208,185,208,180,208,190,208,188,208,176,208,188,208,184,209,128,208,176,208,187,208,184,208,177,208,190,209,130,208,181,208,188,209,131,209,133,208,190,209,130,209,143,208,180,208,178,209,131,209,133,209,129,208,181,209,130,208,184,208,187,209,142,208,180,208,184,208,180,208,181,208,187,208,190,208,188,208,184,209,128,208,181,209,130,208,181,208,177,209,143,209,129,208,178,208,190,208,181,208,178,208,184,208,180,208,181,209,135,208,181,208,179,208,190,209,141,209,130,208,184,208,188,209,129,209,135,208,181,209,130,209,130,208,181,208,188,209,139,209,134,208,181,208,189,209,139,209,129,209,130,208,176,208,187,208,178,208,181,208,180,209,140,209,130,208,181,208,188,208,181,208,178,208,190,208,180,209,139,209,130,208,181,208,177,208,181,208,178,209,139,209,136,208,181,208,189,208,176,208,188,208,184,209,130,208,184,208,191,208,176,209,130,208,190,208,188,209,131,208,191,209,128,208,176,208,178,208,187,208,184,209,134,208,176,208,190,208,180,208,189,208,176,208,179,208,190,208,180,209,139,208,183,208,189,208,176,209,142,208,188,208,190,208,179,209,131,208,180,209,128,209,131,208,179,208,178,209,129,208,181,208,185,208,184,208,180,208,181,209,130,208,186,208,184,208,189,208,190,208,190,208,180,208,189,208,190,208,180,208,181,208,187,208,176,208,180,208,181,208,187,208,181,209,129,209,128,208,190,208,186,208,184,209,142,208,189,209,143,208,178,208,181,209,129,209,140,208,149,209,129,209,130,209,140,209,128,208,176,208,183,208,176,208,189,208,176,209,136,208,184,216,167,217,132,217,132,217,135,216,167,217,132,216,170,217,138,216,172,217,133,217,138,216,185,216,174,216,167,216,181,216,169,216,167,217,132,216,176,217,138,216,185,217,132,217,138,217,135,216,172,216,175,217,138,216,175,216,167,217,132,216,162,217,134,216,167,217,132,216,177,216,175,216,170,216,173,217,131,217,133,216,181,217,129,216,173,216,169,217,131,216,167,217,134,216,170,216,167,217,132,217,132,217,138,217,138,217,131,217,136,217,134,216,180,216,168,217,131,216,169,217,129,217,138,217,135,216,167,216,168,217,134,216,167,216,170,216,173,217,136,216,167,216,161,216,163,217,131,216,171,216,177,216,174,217,132,216,167,217,132,216,167,217,132,216,173,216,168,216,175,217,132,217,138,217,132,216,175,216,177,217,136,216,179,216,167,216,182,216,186,216,183,216,170,217,131,217,136,217,134,217,135,217,134,216,167,217,131,216,179,216,167,216,173,216,169,217,134,216,167,216,175,217,138,216,167,217,132,216,183,216,168,216,185,217,132,217,138,217,131,216,180,217,131,216,177,216,167,217,138,217,133,217,131,217,134,217,133,217,134,217,135,216,167,216,180,216,177,217,131,216,169,216,177,216,166,217,138,216,179,217,134,216,180,217,138,216,183,217,133,216,167,216,176,216,167,216,167,217,132,217,129,217,134,216,180,216,168,216,167,216,168,216,170,216,185,216,168,216,177,216,177,216,173,217,133,216,169,217,131,216,167,217,129,216,169,217,138,217,130,217,136,217,132,217,133,216,177,217,131,216,178,217,131,217,132,217,133,216,169,216,163,216,173,217,133,216,175,217,130,217,132,216,168,217,138,217,138,216,185,217,134,217,138,216,181,217,136,216,177,216,169,216,183,216,177,217,138,217,130,216,180,216,167,216,177,217,131,216,172,217,136,216,167,217,132,216,163,216,174,216,177,217,137,217,133,216,185,217,134,216,167,216,167,216,168,216,173,216,171,216,185,216,177,217,136,216,182,216,168,216,180,217,131,217,132,217,133,216,179,216,172,217,132,216,168,217,134,216,167,217,134,216,174,216,167,217,132,216,175,217,131,216,170,216,167,216,168,217,131,217,132,217,138,216,169,216,168,216,175,217,136,217,134,216,163,217,138,216,182,216,167,217,138,217,136,216,172,216,175,217,129,216,177,217,138,217,130,217,131,216,170,216,168,216,170,216,163,217,129,216,182,217,132,217,133,216,183,216,168,216,174,216,167,217,131,216,171,216,177,216,168,216,167,216,177,217,131,216,167,217,129,216,182,217,132,216,167,216,173,217,132,217,137,217,134,217,129,216,179,217,135,216,163,217,138,216,167,217,133,216,177,216,175,217,136,216,175,216,163,217,134,217,135,216,167,216,175,217,138,217,134,216,167,216,167,217,132,216,167,217,134,217,133,216,185,216,177,216,182,216,170,216,185,217,132,217,133,216,175,216,167,216,174,217,132,217,133,217,133,217,131,217,134,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,2,0,2,0,2,0,2,0,4,0,4,0,4,0,4,0,0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0,8,9,10,11,12,13,14,15,15,14,13,12,11,10,9,8,16,17,18,19,20,21,22,23,23,22,21,20,19,18,17,16,24,25,26,27,28,29,30,31,31,30,29,28,27,26,25,24,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,255,255,0,1,0,0,0,1,0,0,255,255,0,1,0,0,0,8,0,8,0,8,0,8,0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,114,101,115,111,117,114,99,101,115,99,111,117,110,116,114,105,101,115,113,117,101,115,116,105,111,110,115,101,113,117,105,112,109,101,110,116,99,111,109,109,117,110,105,116,121,97,118,97,105,108,97,98,108,101,104,105,103,104,108,105,103,104,116,68,84,68,47,120,104,116,109,108,109,97,114,107,101,116,105,110,103,107,110,111,119,108,101,100,103,101,115,111,109,101,116,104,105,110,103,99,111,110,116,97,105,110,101,114,100,105,114,101,99,116,105,111,110,115,117,98,115,99,114,105,98,101,97,100,118,101,114,116,105,115,101,99,104,97,114,97,99,116,101,114,34,32,118,97,108,117,101,61,34,60,47,115,101,108,101,99,116,62,65,117,115,116,114,97,108,105,97,34,32,99,108,97,115,115,61,34,115,105,116,117,97,116,105,111,110,97,117,116,104,111,114,105,116,121,102,111,108,108,111,119,105,110,103,112,114,105,109,97,114,105,108,121,111,112,101,114,97,116,105,111,110,99,104,97,108,108,101,110,103,101,100,101,118,101,108,111,112,101,100,97,110,111,110,121,109,111,117,115,102,117,110,99,116,105,111,110,32,102,117,110,99,116,105,111,110,115,99,111,109,112,97,110,105,101,115,115,116,114,117,99,116,117,114,101,97,103,114,101,101,109,101,110,116,34,32,116,105,116,108,101,61,34,112,111,116,101,110,116,105,97,108,101,100,117,99,97,116,105,111,110,97,114,103,117,109,101,110,116,115,115,101,99,111,110,100,97,114,121,99,111,112,121,114,105,103,104,116,108,97,110,103,117,97,103,101,115,101,120,99,108,117,115,105,118,101,99,111,110,100,105,116,105,111,110,60,47,102,111,114,109,62,13,10,115,116,97,116,101,109,101,110,116,97,116,116,101,110,116,105,111,110,66,105,111,103,114,97,112,104,121,125,32,101,108,115,101,32,123,10,115,111,108,117,116,105,111,110,115,119,104,101,110,32,116,104,101,32,65,110,97,108,121,116,105,99,115,116,101,109,112,108,97,116,101,115,100,97,110,103,101,114,111,117,115,115,97,116,101,108,108,105,116,101,100,111,99,117,109,101,110,116,115,112,117,98,108,105,115,104,101,114,105,109,112,111,114,116,97,110,116,112,114,111,116,111,116,121,112,101,105,110,102,108,117,101,110,99,101,38,114,97,113,117,111,59,60,47,101,102,102,101,99,116,105,118,101,103,101,110,101,114,97,108,108,121,116,114,97,110,115,102,111,114,109,98,101,97,117,116,105,102,117,108,116,114,97,110,115,112,111,114,116,111,114,103,97,110,105,122,101,100,112,117,98,108,105,115,104,101,100,112,114,111,109,105,110,101,110,116,117,110,116,105,108,32,116,104,101,116,104,117,109,98,110,97,105,108,78,97,116,105,111,110,97,108,32,46,102,111,99,117,115,40,41,59,111],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+225328);allocate([118,101,114,32,116,104,101,32,109,105,103,114,97,116,105,111,110,97,110,110,111,117,110,99,101,100,102,111,111,116,101,114,34,62,10,101,120,99,101,112,116,105,111,110,108,101,115,115,32,116,104,97,110,101,120,112,101,110,115,105,118,101,102,111,114,109,97,116,105,111,110,102,114,97,109,101,119,111,114,107,116,101,114,114,105,116,111,114,121,110,100,105,99,97,116,105,111,110,99,117,114,114,101,110,116,108,121,99,108,97,115,115,78,97,109,101,99,114,105,116,105,99,105,115,109,116,114,97,100,105,116,105,111,110,101,108,115,101,119,104,101,114,101,65,108,101,120,97,110,100,101,114,97,112,112,111,105,110,116,101,100,109,97,116,101,114,105,97,108,115,98,114,111,97,100,99,97,115,116,109,101,110,116,105,111,110,101,100,97,102,102,105,108,105,97,116,101,60,47,111,112,116,105,111,110,62,116,114,101,97,116,109,101,110,116,100,105,102,102,101,114,101,110,116,47,100,101,102,97,117,108,116,46,80,114,101,115,105,100,101,110,116,111,110,99,108,105,99,107,61,34,98,105,111,103,114,97,112,104,121,111,116,104,101,114,119,105,115,101,112,101,114,109,97,110,101,110,116,70,114,97,110,195,167,97,105,115,72,111,108,108,121,119,111,111,100,101,120,112,97,110,115,105,111,110,115,116,97,110,100,97,114,100,115,60,47,115,116,121,108,101,62,10,114,101,100,117,99,116,105,111,110,68,101,99,101,109,98,101,114,32,112,114,101,102,101,114,114,101,100,67,97,109,98,114,105,100,103,101,111,112,112,111,110,101,110,116,115,66,117,115,105,110,101,115,115,32,99,111,110,102,117,115,105,111,110,62,10,60,116,105,116,108,101,62,112,114,101,115,101,110,116,101,100,101,120,112,108,97,105,110,101,100,100,111,101,115,32,110,111,116,32,119,111,114,108,100,119,105,100,101,105,110,116,101,114,102,97,99,101,112,111,115,105,116,105,111,110,115,110,101,119,115,112,97,112,101,114,60,47,116,97,98,108,101,62,10,109,111,117,110,116,97,105,110,115,108,105,107,101,32,116,104,101,32,101,115,115,101,110,116,105,97,108,102,105,110,97,110,99,105,97,108,115,101,108,101,99,116,105,111,110,97,99,116,105,111,110,61,34,47,97,98,97,110,100,111,110,101,100,69,100,117,99,97,116,105,111,110,112,97,114,115,101,73,110,116,40,115,116,97,98,105,108,105,116,121,117,110,97,98,108,101,32,116,111,60,47,116,105,116,108,101,62,10,114,101,108,97,116,105,111,110,115,78,111,116,101,32,116,104,97,116,101,102,102,105,99,105,101,110,116,112,101,114,102,111,114,109,101,100,116,119,111,32,121,101,97,114,115,83,105,110,99,101,32,116,104,101,116,104,101,114,101,102,111,114,101,119,114,97,112,112,101,114,34,62,97,108,116,101,114,110,97,116,101,105,110,99,114,101,97,115,101,100,66,97,116,116,108,101,32,111,102,112,101,114,99,101,105,118,101,100,116,114,121,105,110,103,32,116,111,110,101,99,101,115,115,97,114,121,112,111,114,116,114,97,121,101,100,101,108,101,99,116,105,111,110,115,69,108,105,122,97,98,101,116,104,60,47,105,102,114,97,109,101,62,100,105,115,99,111,118,101,114,121,105,110,115,117,114,97,110,99,101,115,46,108,101,110,103,116,104,59,108,101,103,101,110,100,97,114,121,71,101,111,103,114,97,112,104,121,99,97,110,100,105,100,97,116,101,99,111,114,112,111,114,97,116,101,115,111,109,101,116,105,109,101,115,115,101,114,118,105,99,101,115,46,105,110,104,101,114,105,116,101,100,60,47,115,116,114,111,110,103,62,67,111,109,109,117,110,105,116,121,114,101,108,105,103,105,111,117,115,108,111,99,97,116,105,111,110,115,67,111,109,109,105,116,116,101,101,98,117,105,108,100,105,110,103,115,116,104,101,32,119,111,114,108,100,110,111,32,108,111,110,103,101,114,98,101,103,105,110,110,105,110,103,114,101,102,101,114,101,110,99,101,99,97,110,110,111,116,32,98,101,102,114,101,113,117,101,110,99,121,116,121,112,105,99,97,108,108,121,105,110,116,111,32,116,104,101,32,114,101,108,97,116,105,118,101,59,114,101,99,111,114,100,105,110,103,112,114,101,115,105,100,101,110,116,105,110,105,116,105,97,108,108,121,116,101,99,104,110,105,113,117,101,116,104,101,32,111,116,104,101,114,105,116,32,99,97,110,32,98,101,101,120,105,115,116,101,110,99,101,117,110,100,101,114,108,105,110,101,116,104,105,115,32,116,105,109,101,116,101,108,101,112,104,111,110,101,105,116,101,109,115,99,111,112,101,112,114,97,99,116,105,99,101,115,97,100,118,97,110,116,97,103,101,41,59,114,101,116,117,114,110,32,70,111,114,32,111,116,104,101,114,112,114,111,118,105,100,105,110,103,100,101,109,111,99,114,97,99,121,98,111,116,104,32,116,104,101,32,101,120,116,101,110,115,105,118,101,115,117,102,102,101,114,105,110,103,115,117,112,112,111,114,116,101,100,99,111,109,112,117,116,101,114,115,32,102,117,110,99,116,105,111,110,112,114,97,99,116,105,99,97,108,115,97,105,100,32,116,104,97,116,105,116,32,109,97,121,32,98,101,69,110,103,108,105,115,104,60,47,102,114,111,109,32,116,104,101,32,115,99,104,101,100,117,108,101,100,100,111,119,110,108,111,97,100,115,60,47,108,97,98,101,108,62,10,115,117,115,112,101,99,116,101,100,109,97,114,103,105,110,58,32,48,115,112,105,114,105,116,117,97,108,60,47,104,101,97,100,62,10,10,109,105,99,114,111,115,111,102,116,103,114,97,100,117,97,108,108,121,100,105,115,99,117,115,115,101,100,104,101,32,98,101,99,97,109,101,101,120,101,99,117,116,105,118,101,106,113,117,101,114,121,46,106,115,104,111,117,115,101,104,111,108,100,99,111,110,102,105,114,109,101,100,112,117,114,99,104,97,115,101,100,108,105,116,101,114,97,108,108,121,100,101,115,116,114,111,121,101,100,117,112,32,116,111,32,116,104,101,118,97,114,105,97,116,105,111,110,114,101,109,97,105,110,105,110,103,105,116,32,105,115,32,110,111,116,99,101,110,116,117,114,105,101,115,74,97,112,97,110,101,115,101,32,97,109,111,110,103,32,116,104,101,99,111,109,112,108,101,116,101,100,97,108,103,111,114,105,116,104,109,105,110,116,101,114,101,115,116,115,114,101,98,101,108,108,105,111,110,117,110,100,101,102,105,110,101,100,101,110,99,111,117,114,97,103,101,114,101,115,105,122,97,98,108,101,105,110,118,111,108,118,105,110,103,115,101,110,115,105,116,105,118,101,117,110,105,118,101,114,115,97,108,112,114,111,118,105,115,105,111,110,40,97,108,116,104,111,117,103,104,102,101,97,116,117,114,105,110,103,99,111,110,100,117,99,116,101,100,41,44,32,119,104,105,99,104,32,99,111,110,116,105,110,117,101,100,45,104,101,97,100,101,114,34,62,70,101,98,114,117,97,114,121,32,110,117,109,101,114,111,117,115,32,111,118,101,114,102,108,111,119,58,99,111,109,112,111,110,101,110,116,102,114,97,103,109,101,110,116,115,101,120,99,101,108,108,101,110,116,99,111,108,115,112,97,110,61,34,116,101,99,104,110,105,99,97,108,110,101,97,114,32,116,104,101,32,65,100,118,97,110,99,101,100,32,115,111,117,114,99,101,32,111,102,101,120,112,114,101,115,115,101,100,72,111,110,103,32,75,111,110,103,32,70,97,99,101,98,111,111,107,109,117,108,116,105,112,108,101,32,109,101,99,104,97,110,105,115,109,101,108,101,118,97,116,105,111,110,111,102,102,101,110,115,105,118,101,60,47,102,111,114,109,62,10,9,115,112,111,110,115,111,114,101,100,100,111,99,117,109,101,110,116,46,111,114,32,38,113,117,111,116,59,116,104,101,114,101,32,97,114,101,116,104,111,115,101,32,119,104,111,109,111,118,101,109,101,110,116,115,112,114,111,99,101,115,115,101,115,100,105,102,102,105,99,117,108,116,115,117,98,109,105,116,116,101,100,114,101,99,111,109,109,101,110,100,99,111,110,118,105,110,99,101,100,112,114,111,109,111,116,105,110,103,34,32,119,105,100,116,104,61,34,46,114,101,112,108,97,99,101,40,99,108,97,115,115,105,99,97,108,99,111,97,108,105,116,105,111,110,104,105,115,32,102,105,114,115,116,100,101,99,105,115,105,111,110,115,97,115,115,105,115,116,97,110,116,105,110,100,105,99,97,116,101,100,101,118,111,108,117,116,105,111,110,45,119,114,97,112,112,101,114,34,101,110,111,117,103,104,32,116,111,97,108,111,110,103,32,116,104,101,100,101,108,105,118,101,114,101,100,45,45,62,13,10,60,33,45,45,65,109,101,114,105,99,97,110,32,112,114,111,116,101,99,116,101,100,78,111,118,101,109,98,101,114,32,60,47,115,116,121,108,101,62,60,102,117,114,110,105,116,117,114,101,73,110,116,101,114,110,101,116,32,32,111,110,98,108,117,114,61,34,115,117,115,112,101,110,100,101,100,114,101,99,105,112,105,101,110,116,98,97,115,101,100,32,111,110,32,77,111,114,101,111,118,101,114,44,97,98,111,108,105,115,104,101,100,99,111,108,108,101,99,116,101,100,119,101,114,101,32,109,97,100,101,101,109,111,116,105,111,110,97,108,101,109,101,114,103,101,110,99,121,110,97,114,114,97,116,105,118,101,97,100,118,111,99,97,116,101,115,112,120,59,98,111,114,100,101,114,99,111,109,109,105,116,116,101,100,100,105,114,61,34,108,116,114,34,101,109,112,108,111,121,101,101,115,114,101,115,101,97,114,99,104,46,32,115,101,108,101,99,116,101,100,115,117,99,99,101,115,115,111,114,99,117,115,116,111,109,101,114,115,100,105,115,112,108,97,121,101,100,83,101,112,116,101,109,98,101,114,97,100,100,67,108,97,115,115,40,70,97,99,101,98,111,111,107,32,115,117,103,103,101,115,116,101,100,97,110,100,32,108,97,116,101,114,111,112,101,114,97,116,105,110,103,101,108,97,98,111,114,97,116,101,83,111,109,101,116,105,109,101,115,73,110,115,116,105,116,117,116,101,99,101,114,116,97,105,110,108,121,105,110,115,116,97,108,108,101,100,102,111,108,108,111,119,101,114,115,74,101,114,117,115,97,108,101,109,116,104,101,121,32,104,97,118,101,99,111,109,112,117,116,105,110,103,103,101,110,101,114,97,116,101,100,112,114,111,118,105,110,99,101,115,103,117,97,114,97,110,116,101,101,97,114,98,105,116,114,97,114,121,114,101,99,111,103,110,105,122,101,119,97,110,116,101,100,32,116,111,112,120,59,119,105,100,116,104,58,116,104,101,111,114,121,32,111,102,98,101,104,97,118,105,111,117,114,87,104,105,108,101,32,116,104,101,101,115,116,105,109,97,116,101,100,98,101,103,97,110,32,116,111,32,105,116,32,98,101,99,97,109,101,109,97,103,110,105,116,117,100,101,109,117,115,116,32,104,97,118,101,109,111,114,101,32,116,104,97,110,68,105,114,101,99,116,111,114,121,101,120,116,101,110,115,105,111,110,115,101,99,114,101,116,97,114,121,110,97,116,117,114,97,108,108,121,111,99,99,117,114,114,105,110,103,118,97,114,105,97,98,108,101,115,103,105,118,101,110,32,116,104,101,112,108,97,116,102,111,114,109,46,60,47,108,97,98,101,108,62,60,102,97,105,108,101,100,32,116,111,99,111,109,112,111,117,110,100,115,107,105,110,100,115,32,111,102,32,115,111,99,105,101,116,105,101,115,97,108,111,110,103,115,105,100,101,32,45,45,38,103,116,59,10,10,115,111,117,116,104,119,101,115,116,116,104,101,32,114,105,103,104,116,114,97,100,105,97,116,105,111,110,109,97,121,32,104,97,118,101,32,117,110,101,115,99,97,112,101,40,115,112,111,107,101,110,32,105,110,34,32,104,114,101,102,61,34,47,112,114,111,103,114,97,109,109,101,111,110,108,121,32,116,104,101,32,99,111,109,101,32,102,114,111,109,100,105,114,101,99,116,111,114,121,98,117,114,105,101,100,32,105,110,97,32,115,105,109,105,108,97,114,116,104,101,121,32,119,101,114,101,60,47,102,111,110,116,62,60,47,78,111,114,119,101,103,105,97,110,115,112,101,99,105,102,105,101,100,112,114,111,100,117,99,105,110,103,112,97,115,115,101,110,103,101,114,40,110,101,119,32,68,97,116,101,116,101,109,112,111,114,97,114,121,102,105,99,116,105,111,110,97,108,65,102,116,101,114,32,116,104,101,101,113,117,97,116,105,111,110,115,100,111,119,110,108,111,97,100,46,114,101,103,117,108,97,114,108,121,100,101,118,101,108,111,112,101,114,97,98,111,118,101,32,116,104,101,108,105,110,107,101,100,32,116,111,112,104,101,110,111,109,101,110,97,112,101,114,105,111,100,32,111,102,116,111,111,108,116,105,112,34,62,115,117,98,115,116,97,110,99,101,97,117,116,111,109,97,116,105,99,97,115,112,101,99,116,32,111,102,65,109,111,110,103,32,116,104,101,99,111,110,110,101,99,116,101,100,101,115,116,105,109,97,116,101,115,65,105,114,32,70,111,114,99,101,115,121,115,116,101,109,32,111,102,111,98,106,101,99,116,105,118,101,105,109,109,101,100,105,97,116,101,109,97,107,105,110,103,32,105,116,112,97,105,110,116,105,110,103,115,99,111,110,113,117,101,114,101,100,97,114,101,32,115,116,105,108,108,112,114,111,99,101,100,117,114,101,103,114,111,119,116,104,32,111,102,104,101,97,100,101,100,32,98,121,69,117,114,111,112,101,97,110,32,100,105,118,105,115,105,111,110,115,109,111,108,101,99,117,108,101,115,102,114,97,110,99,104,105,115,101,105,110,116,101,110,116,105,111,110,97,116,116,114,97,99,116,101,100,99,104,105,108,100,104,111,111,100,97,108,115,111,32,117,115,101,100,100,101,100,105,99,97,116,101,100,115,105,110,103,97,112,111,114,101,100,101,103,114,101,101,32,111,102,102,97,116,104,101,114,32,111,102,99,111,110,102,108,105,99,116,115,60,47,97,62,60,47,112,62,10,99,97,109,101,32,102,114,111,109,119,101,114,101,32,117,115,101,100,110,111,116,101,32,116,104,97,116,114,101,99,101,105,118,105,110,103,69,120,101,99,117,116,105,118,101,101,118,101,110,32,109,111,114,101,97,99,99,101,115,115,32,116,111,99,111,109,109,97,110,100,101,114,80,111,108,105,116,105,99,97,108,109,117,115,105,99,105,97,110,115,100,101,108,105,99,105,111,117,115,112,114,105,115,111,110,101,114,115,97,100,118,101,110,116,32,111,102,85,84,70,45,56,34,32,47,62,60,33,91,67,68,65,84,65,91,34,62,67,111,110,116,97,99,116,83,111,117,116,104,101,114,110,32,98,103,99,111,108,111,114,61,34,115,101,114,105,101,115,32,111,102,46,32,73,116,32,119,97,115,32,105,110,32,69,117,114,111,112,101,112,101,114,109,105,116,116,101,100,118,97,108,105,100,97,116,101,46,97,112,112,101,97,114,105,110,103,111,102,102,105,99,105,97,108,115,115,101,114,105,111,117,115,108,121,45,108,97,110,103,117,97,103,101,105,110,105,116,105,97,116,101,100,101,120,116,101,110,100,105,110,103,108,111,110,103,45,116,101,114,109,105,110,102,108,97,116,105,111,110,115,117,99,104,32,116,104,97,116,103,101,116,67,111,111,107,105,101,109,97,114,107,101,100,32,98,121,60,47,98,117,116,116,111,110,62,105,109,112,108,101,109,101,110,116,98,117,116,32,105,116,32,105,115,105,110,99,114,101,97,115,101,115,100,111,119,110,32,116,104,101,32,114,101,113,117,105,114,105,110,103,100,101,112,101,110,100,101,110,116,45,45,62,10,60,33,45,45,32,105,110,116,101,114,118,105,101,119,87,105,116,104,32,116,104,101,32,99,111,112,105,101,115,32,111,102,99,111,110,115,101,110,115,117,115,119,97,115,32,98,117,105,108,116,86,101,110,101,122,117,101,108,97,40,102,111,114,109,101,114,108,121,116,104,101,32,115,116,97,116,101,112,101,114,115,111,110,110,101,108,115,116,114,97,116,101,103,105,99,102,97,118,111,117,114,32,111,102,105,110,118,101,110,116,105,111,110,87,105,107,105,112,101,100,105,97,99,111,110,116,105,110,101,110,116,118,105,114,116,117,97,108,108,121,119,104,105,99,104,32,119,97,115,112,114,105,110,99,105,112,108,101,67,111,109,112,108,101,116,101,32,105,100,101,110,116,105,99,97,108,115,104,111,119,32,116,104,97,116,112,114,105,109,105,116,105,118,101,97,119,97,121,32,102,114,111,109,109,111,108,101,99,117,108,97,114,112,114,101,99,105,115,101,108,121,100,105,115,115,111,108,118,101,100,85,110,100,101,114,32,116,104,101,118,101,114,115,105,111,110,61,34,62,38,110,98,115,112,59,60,47,73,116,32,105,115,32,116,104,101,32,84,104,105,115,32,105,115,32,119,105,108,108,32,104,97,118,101,111,114,103,97,110,105,115,109,115,115,111,109,101,32,116,105,109,101,70,114,105,101,100,114,105,99,104,119,97,115,32,102,105,114,115,116,116,104,101,32,111,110,108,121,32,102,97,99,116,32,116,104,97,116,102,111,114,109,32,105,100,61,34,112,114,101,99,101,100,105,110,103,84,101,99,104,110,105,99,97,108,112,104,121,115,105,99,105,115,116,111,99,99,117,114,115,32,105,110,110,97,118,105,103,97,116,111,114,115,101,99,116,105,111,110,34,62,115,112,97,110,32,105,100,61,34,115,111,117,103,104,116,32,116,111,98,101,108,111,119,32,116,104,101,115,117,114,118,105,118,105,110,103,125,60,47,115,116,121,108,101,62,104,105,115,32,100,101,97,116,104,97,115,32,105,110,32,116,104,101,99,97,117,115,101,100,32,98,121,112,97,114,116,105,97,108,108,121,101,120,105,115,116,105,110,103,32,117,115,105,110,103,32,116,104,101,119,97,115,32,103,105,118,101,110,97,32,108,105,115,116,32,111,102,108,101,118,101,108,115,32,111,102,110,111,116,105,111,110,32,111,102,79,102,102,105,99,105,97,108,32,100,105,115,109,105,115,115,101,100,115,99,105,101,110,116,105,115,116,114,101,115,101,109,98,108,101,115,100,117,112,108,105,99,97,116,101,101,120,112,108,111,115,105,118,101,114,101,99,111,118,101,114,101,100,97,108,108,32,111,116,104,101,114,103,97,108,108,101,114,105,101,115,123,112,97,100,100,105,110,103,58,112,101,111,112,108,101,32,111,102,114,101,103,105,111,110,32,111,102,97,100,100,114,101,115,115,101,115,97,115,115,111,99,105,97,116,101,105,109,103,32,97,108,116,61,34,105,110,32,109,111,100,101,114,110,115,104,111,117,108,100,32,98,101,109,101,116,104,111,100,32,111,102,114,101,112,111,114,116,105,110,103,116,105,109,101,115,116,97,109,112,110,101,101,100,101,100,32,116,111,116,104,101,32,71,114,101,97,116,114,101,103,97,114,100,105,110,103,115,101,101,109,101,100,32,116,111,118,105,101,119,101,100,32,97,115,105,109,112,97,99,116,32,111,110,105,100,101,97,32,116,104,97,116,116,104,101,32,87,111,114,108,100,104,101,105,103,104,116,32,111,102,101,120,112,97,110,100,105,110,103,84,104,101,115,101,32,97,114,101,99,117,114,114,101,110,116,34,62,99,97,114,101,102,117,108,108,121,109,97,105,110,116,97,105,110,115,99,104,97,114,103,101,32,111,102,67,108,97,115,115,105,99,97,108,97,100,100,114,101,115,115,101,100,112,114,101,100,105,99,116,101,100,111,119,110,101,114,115,104,105,112,60,100,105,118,32,105,100,61,34,114,105,103,104,116,34,62,13,10,114,101,115,105,100,101,110,99,101,108,101,97,118,101,32,116,104,101,99,111,110,116,101,110,116,34,62,97,114,101,32,111,102,116,101,110,32,32,125,41,40,41,59,13,10,112,114,111,98,97,98,108,121,32,80,114,111,102,101,115,115,111,114,45,98,117,116,116,111,110,34,32,114,101,115,112,111,110,100,101,100,115,97,121,115,32,116,104,97,116,104,97,100,32,116,111,32,98,101,112,108,97,99,101,100,32,105,110,72,117,110,103,97,114,105,97,110,115,116,97,116,117,115,32,111,102,115,101,114,118,101,115,32,97,115,85,110,105,118,101,114,115,97,108,101,120,101,99,117,116,105,111,110,97,103,103,114,101,103,97,116,101,102,111,114,32,119,104,105,99,104,105,110,102,101,99,116,105,111,110,97,103,114,101,101,100,32,116,111,104,111,119,101,118,101,114,44,32,112,111,112,117,108,97,114,34,62,112,108,97,99,101,100,32,111,110,99,111,110,115,116,114,117,99,116,101,108,101,99,116,111,114,97,108,115,121,109,98,111,108,32,111,102,105,110,99,108,117,100,105,110,103,114,101,116,117,114,110,32,116,111,97,114,99,104,105,116,101,99,116,67,104,114,105,115,116,105,97,110,112,114,101,118,105,111,117,115,32,108,105,118,105,110,103,32,105,110,101,97,115,105,101,114,32,116,111,112,114,111,102,101,115,115,111,114,10,38,108,116,59,33,45,45,32,101,102,102,101,99,116,32,111,102,97,110,97,108,121,116,105,99,115,119,97,115,32,116,97,107,101,110,119,104,101,114,101,32,116,104,101,116,111,111,107,32,111,118,101,114,98,101,108,105,101,102,32,105,110,65,102,114,105,107,97,97,110,115,97,115,32,102,97,114,32,97,115,112,114,101,118,101,110,116,101,100,119,111,114,107,32,119,105,116,104,97,32,115,112,101,99,105,97,108,60,102,105,101,108,100,115,101,116,67,104,114,105,115,116,109,97,115,82,101,116,114,105,101,118,101,100,10,10,73,110,32,116,104,101,32,98,97,99,107,32,105,110,116,111,110,111,114,116,104,101,97,115,116,109,97,103,97,122,105,110,101,115,62,60,115,116,114,111,110,103,62,99,111,109,109,105,116,116,101,101,103,111,118,101,114,110,105,110,103,103,114,111,117,112,115,32,111,102,115,116,111,114,101,100,32,105,110,101,115,116,97,98,108,105,115,104,97,32,103,101,110,101,114,97,108,105,116,115,32,102,105,114,115,116,116,104,101,105,114,32,111,119,110,112,111,112,117,108,97,116,101,100,97,110,32,111,98,106,101,99,116,67,97,114,105,98,98,101,97,110,97,108,108,111,119,32,116,104,101,100,105,115,116,114,105,99,116,115,119,105,115,99,111,110,115,105,110,108,111,99,97,116,105,111,110,46,59,32,119,105,100,116,104,58,32,105,110,104,97,98,105,116,101,100,83,111,99,105,97,108,105,115,116,74,97,110,117,97,114,121,32,49,60,47,102,111,111,116,101,114,62,115,105,109,105,108,97,114,108,121,99,104,111,105,99,101,32,111,102,116,104,101,32,115,97,109,101,32,115,112,101,99,105,102,105,99,32,98,117,115,105,110,101,115,115,32,84,104,101,32,102,105,114,115,116,46,108,101,110,103,116,104,59,32,100,101,115,105,114,101,32,116,111,100,101,97,108,32,119,105,116,104,115,105,110,99,101,32,116,104,101,117,115,101,114,65,103,101,110,116,99,111,110,99,101,105,118,101,100,105,110,100,101,120,46,112,104,112,97,115,32,38,113,117,111,116,59,101,110,103,97,103,101,32,105,110,114,101,99,101,110,116,108,121,44,102,101,119,32,121,101,97,114,115,119,101,114,101,32,97,108,115,111,10,60,104,101,97,100,62,10,60,101,100,105,116,101,100,32,98,121,97,114,101,32,107,110,111,119,110,99,105,116,105,101,115,32,105,110,97,99,99,101,115,115,107,101,121,99,111,110,100,101,109,110,101,100,97,108,115,111,32,104,97,118,101,115,101,114,118,105,99,101,115,44,102,97,109,105,108,121,32,111,102,83,99,104,111,111,108,32,111,102,99,111,110,118,101,114,116,101,100,110,97,116,117,114,101,32,111,102,32,108,97,110,103,117,97,103,101,109,105,110,105,115,116,101,114,115,60,47,111,98,106,101,99,116,62,116,104,101,114,101,32,105,115,32,97,32,112,111,112,117,108,97,114,115,101,113,117,101,110,99,101,115,97,100,118,111,99,97,116,101,100,84,104,101,121,32,119,101,114,101,97,110,121,32,111,116,104,101,114,108,111,99,97,116,105,111,110,61,101,110,116,101,114,32,116,104,101,109,117,99,104,32,109,111,114,101,114,101,102,108,101,99,116,101,100,119,97,115,32,110,97,109,101,100,111,114,105,103,105,110,97,108,32,97,32,116,121,112,105,99,97,108,119,104,101,110,32,116,104,101,121,101,110,103,105,110,101,101,114,115,99,111,117,108,100,32,110,111,116,114,101,115,105,100,101,110,116,115,119,101,100,110,101,115,100,97,121,116,104,101,32,116,104,105,114,100,32,112,114,111,100,117,99,116,115,74,97,110,117,97,114,121,32,50,119,104,97,116,32,116,104,101,121,97,32,99,101,114,116,97,105,110,114,101,97,99,116,105,111,110,115,112,114,111,99,101,115,115,111,114,97,102,116,101,114,32,104,105,115,116,104,101,32,108,97,115,116,32,99,111,110,116,97,105,110,101,100,34,62,60,47,100,105,118,62,10,60,47,97,62,60,47,116,100,62,100,101,112,101,110,100,32,111,110,115,101,97,114,99,104,34,62,10,112,105,101,99,101,115,32,111,102,99,111,109,112,101,116,105,110,103,82,101,102,101,114,101,110,99,101,116,101,110,110,101,115,115,101,101,119,104,105,99,104,32,104,97,115,32,118,101,114,115,105,111,110,61,60,47,115,112,97,110,62,32,60,60,47,104,101,97,100,101,114,62,103,105,118,101,115,32,116,104,101,104,105,115,116,111,114,105,97,110,118,97,108,117,101,61,34,34,62,112,97,100,100,105,110,103,58,48,118,105,101,119,32,116,104,97,116,116,111,103,101,116,104,101,114,44,116,104,101,32,109,111,115,116,32,119,97,115,32,102,111,117,110,100,115,117,98,115,101,116,32,111,102,97,116,116,97,99,107,32,111,110,99,104,105,108,100,114,101,110,44,112,111,105,110,116,115,32,111,102,112,101,114,115,111,110,97,108,32,112,111,115,105,116,105,111,110,58,97,108,108,101,103,101,100,108,121,67,108,101,118,101,108,97,110,100,119,97,115,32,108,97,116,101,114,97,110,100,32,97,102,116,101,114,97,114,101,32,103,105,118,101,110,119,97,115,32,115,116,105,108,108,115,99,114,111,108,108,105,110,103,100,101,115,105,103,110,32,111,102,109,97,107,101,115,32,116,104,101,109,117,99,104,32,108,101,115,115,65,109,101,114,105,99,97,110,115,46,10,10,65,102,116,101,114,32,44,32,98,117,116,32,116,104,101,77,117,115,101,117,109,32,111,102,108,111,117,105,115,105,97,110,97,40,102,114,111,109,32,116,104,101,109,105,110,110,101,115,111,116,97,112,97,114,116,105,99,108,101,115,97,32,112,114,111,99,101,115,115,68,111,109,105,110,105,99,97,110,118,111,108,117,109,101,32,111,102,114,101,116,117,114,110,105,110,103,100,101,102,101,110,115,105,118,101,48,48,112,120,124,114,105,103,104,109,97,100,101,32,102,114,111,109,109,111,117,115,101,111,118,101,114,34,32,115,116,121,108,101,61,34,115,116,97,116,101,115,32,111,102,40,119,104,105,99,104,32,105,115,99,111,110,116,105,110,117,101,115,70,114,97,110,99,105,115,99,111,98,117,105,108,100,105,110,103,32,119,105,116,104,111,117,116,32,97,119,105,116,104,32,115,111,109,101,119,104,111,32,119,111,117,108,100,97,32,102,111,114,109,32,111,102,97,32,112,97,114,116,32,111,102,98,101,102,111,114,101,32,105,116,107,110,111,119,110,32,97,115,32,32,83,101,114,118,105,99,101,115,108,111,99,97,116,105,111,110,32,97,110,100,32,111,102,116,101,110,109,101,97,115,117,114,105,110,103,97,110,100,32,105,116,32,105,115,112,97,112,101,114,98,97,99,107,118,97,108,117,101,115,32,111,102,13,10,60,116,105,116,108,101,62,61,32,119,105,110,100,111,119,46,100,101,116,101,114,109,105,110,101,101,114,38,113,117,111,116,59,32,112,108,97,121,101,100,32,98,121,97,110,100,32,101,97,114,108,121,60,47,99,101,110,116,101,114,62,102,114,111,109,32,116,104,105,115,116,104,101,32,116,104,114,101,101,112,111,119,101,114,32,97,110,100,111,102,32,38,113,117,111,116,59,105,110,110,101,114,72,84,77,76,60,97,32,104,114,101,102,61,34,121,58,105,110,108,105,110,101,59,67,104,117,114,99,104,32,111,102,116,104,101,32,101,118,101,110,116,118,101,114,121,32,104,105,103,104,111,102,102,105,99,105,97,108,32,45,104,101,105,103,104,116,58,32,99,111,110,116,101,110,116,61,34,47,99,103,105,45,98,105,110,47,116,111,32,99,114,101,97,116,101,97,102,114,105,107,97,97,110,115,101,115,112,101,114,97,110,116,111,102,114,97,110,195,167,97,105,115,108,97,116,118,105,101,197,161,117,108,105,101,116,117,118,105,197,179,196,140,101,197,161,116,105,110,97,196,141,101,197,161,116,105,110,97,224,185,132,224,184,151,224,184,162,230,151,165,230,156,172,232,170,158,231,174,128,228,189,147,229,173,151,231,185,129,233,171,148,229,173,151,237,149,156,234,181,173,236,150,180,228,184,186,228,187,128,228,185,136,232,174,161,231,174,151,230,156,186,231,172,148,232,174,176,230,156,172,232,168,142,232,171,150,229,141,128,230,156,141,229,138,161,229,153,168,228,186,146,232,129,148,231,189,145,230,136,191,229,156,176,228,186,167,228,191,177,228,185,144,233,131,168,229,135,186,231,137,136,231,164,190,230,142,146,232,161,140,230,166,156,233,131,168,232,144,189,230,160,188,232,191,155,228,184,128,230,173,165,230,148,175,228,187,152,229,174,157,233,170,140,232,175,129,231,160,129,229,167,148,229,145,152,228,188,154,230,149,176,230,141,174,229,186,147,230,182,136,232,180,185,232,128,133,229,138,158,229,133,172,229,174,164,232,174,168,232,174,186,229,140,186,230,183,177,229,156,179,229,184,130,230,146,173,230,148,190,229,153,168,229,140,151,228,186,172,229,184,130,229,164,167,229,173,166,231,148,159,232,182,138,230,157,165,232,182,138,231,174,161,231,144,134,229,145,152,228,191,161,230,129,175,231,189,145,115,101,114,118,105,99,105,111,115,97,114,116,195,173,99,117,108,111,97,114,103,101,110,116,105,110,97,98,97,114,99,101,108,111,110,97,99,117,97,108,113,117,105,101,114,112,117,98,108,105,99,97,100,111,112,114,111,100,117,99,116,111,115,112,111,108,195,173,116,105,99,97,114,101,115,112,117,101,115,116,97,119,105,107,105,112,101,100,105,97,115,105,103,117,105,101,110,116,101,98,195,186,115,113,117,101,100,97,99,111,109,117,110,105,100,97,100,115,101,103,117,114,105,100,97,100,112,114,105,110,99,105,112,97,108,112,114,101,103,117,110,116,97,115,99,111,110,116,101,110,105,100,111,114,101,115,112,111,110,100,101,114,118,101,110,101,122,117,101,108,97,112,114,111,98,108,101,109,97,115,100,105,99,105,101,109,98,114,101,114,101,108,97,99,105,195,179,110,110,111,118,105,101,109,98,114,101,115,105,109,105,108,97,114,101,115,112,114,111,121,101,99,116,111,115,112,114,111,103,114,97,109,97,115,105,110,115,116,105,116,117,116,111,97,99,116,105,118,105,100,97,100,101,110,99,117,101,110,116,114,97,101,99,111,110,111,109,195,173,97,105,109,195,161,103,101,110,101,115,99,111,110,116,97,99,116,97,114,100,101,115,99,97,114,103,97,114,110,101,99,101,115,97,114,105,111,97,116,101,110,99,105,195,179,110,116,101,108,195,169,102,111,110,111,99,111,109,105,115,105,195,179,110,99,97,110,99,105,111,110,101,115,99,97,112,97,99,105,100,97,100,101,110,99,111,110,116,114,97,114,97,110,195,161,108,105,115,105,115,102,97,118,111,114,105,116,111,115,116,195,169,114,109,105,110,111,115,112,114,111,118,105,110,99,105,97,101,116,105,113,117,101,116,97,115,101,108,101,109,101,110,116,111,115,102,117,110,99,105,111,110,101,115,114,101,115,117,108,116,97,100,111,99,97,114,195,161,99,116,101,114,112,114,111,112,105,101,100,97,100,112,114,105,110,99,105,112,105,111,110,101,99,101,115,105,100,97,100,109,117,110,105,99,105,112,97,108,99,114,101,97,99,105,195,179,110,100,101,115,99,97,114,103,97,115,112,114,101,115,101,110,99,105,97,99,111,109,101,114,99,105,97,108,111,112,105,110,105,111,110,101,115,101,106,101,114,99,105,99,105,111,101,100,105,116,111,114,105,97,108,115,97,108,97,109,97,110,99,97,103,111,110,122,195,161,108,101,122,100,111,99,117,109,101,110,116,111,112,101,108,195,173,99,117,108,97,114,101,99,105,101,110,116,101,115,103,101,110,101,114,97,108,101,115,116,97,114,114,97,103,111,110,97,112,114,195,161,99,116,105,99,97,110,111,118,101,100,97,100,101,115,112,114,111,112,117,101,115,116,97,112,97,99,105,101,110,116,101,115,116,195,169,99,110,105,99,97,115,111,98,106,101,116,105,118,111,115,99,111,110,116,97,99,116,111,115,224,164,174,224,165,135,224,164,130,224,164,178,224,164,191,224,164,143,224,164,185,224,165,136,224,164,130,224,164,151,224,164,175,224,164,190,224,164,184,224,164,190,224,164,165,224,164,143,224,164,181,224,164,130,224,164,176,224,164,185,224,165,135,224,164,149,224,165,139,224,164,136,224,164,149,224,165,129,224,164,155,224,164,176,224,164,185,224,164,190,224,164,172,224,164,190,224,164,166,224,164,149,224,164,185,224,164,190,224,164,184,224,164,173,224,165,128,224,164,185,224,165,129,224,164,143,224,164,176,224,164,185,224,165,128,224,164,174,224,165,136,224,164,130,224,164,166,224,164,191,224,164,168,224,164,172,224,164,190,224,164,164,100,105,112,108,111,100,111,99,115,224,164,184,224,164,174,224,164,175,224,164,176,224,165,130,224,164,170,224,164,168,224,164,190,224,164,174,224,164,170,224,164,164,224,164,190,224,164,171,224,164,191,224,164,176,224,164,148,224,164,184,224,164,164,224,164,164,224,164,176,224,164,185,224,164,178,224,165,139,224,164,151,224,164,185,224,165,129,224,164,134,224,164,172,224,164,190,224,164,176,224,164,166,224,165,135,224,164,182,224,164,185,224,165,129,224,164,136,224,164,150,224,165,135,224,164,178,224,164,175,224,164,166,224,164,191,224,164,149,224,164,190,224,164,174,224,164,181,224,165,135,224,164,172,224,164,164,224,165,128,224,164,168,224,164,172,224,165,128,224,164,154,224,164,174,224,165,140,224,164,164,224,164,184,224,164,190,224,164,178,224,164,178,224,165,135,224,164,150,224,164,156,224,165,137,224,164,172,224,164,174,224,164,166,224,164,166,224,164,164,224,164,165,224,164,190,224,164,168,224,164,185,224,165,128,224,164,182,224,164,185,224,164,176,224,164,133,224,164,178,224,164,151,224,164,149,224,164,173,224,165,128,224,164,168,224,164,151,224,164,176,224,164,170,224,164,190,224,164,184,224,164,176,224,164,190,224,164,164,224,164,149,224,164,191,224,164,143,224,164,137,224,164,184,224,165,135,224,164,151,224,164,175,224,165,128,224,164,185,224,165,130,224,164,129,224,164,134,224,164,151,224,165,135,224,164,159,224,165,128,224,164,174,224,164,150,224,165,139,224,164,156,224,164,149,224,164,190,224,164,176,224,164,133,224,164,173,224,165,128,224,164,151,224,164,175,224,165,135,224,164,164,224,165,129,224,164,174,224,164,181,224,165,139,224,164,159,224,164,166,224,165,135,224,164,130,224,164,133,224,164,151,224,164,176,224,164,144,224,164,184,224,165,135,224,164,174,224,165,135,224,164,178,224,164,178,224,164,151,224,164,190,224,164,185,224,164,190,224,164,178,224,164,138,224,164,170,224,164,176,224,164,154,224,164,190,224,164,176,224,164,144,224,164,184,224,164,190,224,164,166,224,165,135,224,164,176,224,164,156,224,164,191,224,164,184,224,164,166,224,164,191,224,164,178,224,164,172,224,164,130,224,164,166,224,164,172,224,164,168,224,164,190,224,164,185,224,165,130,224,164,130,224,164,178,224,164,190,224,164,150,224,164,156,224,165,128,224,164,164,224,164,172,224,164,159,224,164,168,224,164,174,224,164,191,224,164,178,224,164,135,224,164,184,224,165,135,224,164,134,224,164,168,224,165,135,224,164,168,224,164,175,224,164,190,224,164,149,224,165,129,224,164,178,224,164,178,224,165,137,224,164,151,224,164,173,224,164,190,224,164,151,224,164,176,224,165,135,224,164,178,224,164,156,224,164,151,224,164,185,224,164,176,224,164,190,224,164,174,224,164,178,224,164,151,224,165,135,224,164,170,224,165,135,224,164,156,224,164,185,224,164,190,224,164,165,224,164,135,224,164,184,224,165,128,224,164,184,224,164,185,224,165,128,224,164,149,224,164,178,224,164,190,224,164,160,224,165,128,224,164,149,224,164,185,224,164,190,224,164,129,224,164,166,224,165,130,224,164,176,224,164,164,224,164,185,224,164,164,224,164,184,224,164,190,224,164,164,224,164,175,224,164,190,224,164,166,224,164,134,224,164,175,224,164,190,224,164,170,224,164,190,224,164,149,224,164,149,224,165,140,224,164,168,224,164,182,224,164,190,224,164,174,224,164,166,224,165,135,224,164,150,224,164,175,224,164,185,224,165,128,224,164,176,224,164,190,224,164,175,224,164,150,224,165,129,224,164,166,224,164,178,224,164,151,224,165,128,99,97,116,101,103,111,114,105,101,115,101,120,112,101,114,105,101,110,99,101,60,47,116,105,116,108,101,62,13,10,67,111,112,121,114,105,103,104,116,32,106,97,118,97,115,99,114,105,112,116,99,111,110,100,105,116,105,111,110,115,101,118,101,114,121,116,104,105,110,103,60,112,32,99,108,97,115,115,61,34,116,101,99,104,110,111,108,111,103,121,98,97,99,107,103,114,111,117,110,100,60,97,32,99,108,97,115,115,61,34,109,97,110,97,103,101,109,101,110,116,38,99,111,112,121,59,32,50,48,49,106,97,118,97,83,99,114,105,112,116,99,104,97,114,97,99,116,101,114,115,98,114,101,97,100,99,114,117,109,98,116,104,101,109,115,101,108,118,101,115,104,111,114,105,122,111,110,116,97,108,103,111,118,101,114,110,109,101,110,116,67,97,108,105,102,111,114,110,105,97,97,99,116,105,118,105,116,105,101,115,100,105,115,99,111,118,101,114,101,100,78,97,118,105,103,97,116,105,111,110,116,114,97,110,115,105,116,105,111,110,99,111,110,110,101,99,116,105,111,110,110,97,118,105,103,97,116,105,111,110,97,112,112,101,97,114,97,110,99,101,60,47,116,105,116,108,101,62,60,109,99,104,101,99,107,98,111,120,34,32,116,101,99,104,110,105,113,117,101,115,112,114,111,116,101,99,116,105,111,110,97,112,112,97,114,101,110,116,108,121,97,115,32,119,101,108,108,32,97,115,117,110,116,39,44,32,39,85,65,45,114,101,115,111,108,117,116,105,111,110,111,112,101,114,97,116,105,111,110,115,116,101,108,101,118,105,115,105,111,110,116,114,97,110,115,108,97,116,101,100,87,97,115,104,105,110,103,116,111,110,110,97,118,105,103,97,116,111,114,46,32,61,32,119,105,110,100,111,119,46,105,109,112,114,101,115,115,105,111,110,38,108,116,59,98,114,38,103,116,59,108,105,116,101,114,97,116,117,114,101,112,111,112,117,108,97,116,105,111,110,98,103,99,111,108,111,114,61,34,35,101,115,112,101,99,105,97,108,108,121,32,99,111,110,116,101,110,116,61,34,112,114,111,100,117,99,116,105,111,110,110,101,119,115,108,101,116,116,101,114,112,114,111,112,101,114,116,105,101,115,100,101,102,105,110,105,116,105,111,110,108,101,97,100,101,114,115,104,105,112,84,101,99,104,110,111,108,111,103,121,80,97,114,108,105,97,109,101,110,116,99,111,109,112,97,114,105,115,111,110,117,108,32,99,108,97,115,115,61,34,46,105,110,100,101,120,79,102,40,34,99,111,110,99,108,117,115,105,111,110,100,105,115,99,117,115,115,105,111,110,99,111,109,112,111,110,101,110,116,115,98,105,111,108,111,103,105,99,97,108,82,101,118,111,108,117,116,105,111,110,95,99,111,110,116,97,105,110,101,114,117,110,100,101,114,115,116,111,111,100,110,111,115,99,114,105,112,116,62,60,112,101,114,109,105,115,115,105,111,110,101,97,99,104,32,111,116,104,101,114,97,116,109,111,115,112,104,101,114,101,32,111,110,102,111,99,117,115,61,34,60,102,111,114,109,32,105,100,61,34,112,114,111,99,101,115,115,105,110,103,116,104,105,115,46,118,97,108,117,101,103,101,110,101,114,97,116,105,111,110,67,111,110,102,101,114,101,110,99,101,115,117,98,115,101,113,117,101,110,116,119,101,108,108,45,107,110,111,119,110,118,97,114,105,97,116,105,111,110,115,114,101,112,117,116,97,116,105,111,110,112,104,101,110,111,109,101,110,111,110,100,105,115,99,105,112,108,105,110,101,108,111,103,111,46,112,110,103,34,32,40,100,111,99,117,109,101,110,116,44,98,111,117,110,100,97,114,105,101,115,101,120,112,114,101,115,115,105,111,110,115,101,116,116,108,101,109,101,110,116,66,97,99,107,103,114,111,117,110,100,111,117,116,32,111,102,32,116,104,101,101,110,116,101,114,112,114,105,115,101,40,34,104,116,116,112,115,58,34,32,117,110,101,115,99,97,112,101,40,34,112,97,115,115,119,111,114,100,34,32,100,101,109,111,99,114,97,116,105,99,60,97,32,104,114,101,102,61,34,47,119,114,97,112,112,101,114,34,62,10,109,101,109,98,101,114,115,104,105,112,108,105,110,103,117,105,115,116,105,99,112,120,59,112,97,100,100,105,110,103,112,104,105,108,111,115,111,112,104,121,97,115,115,105,115,116,97,110,99,101,117,110,105,118,101,114,115,105,116,121,102,97,99,105,108,105,116,105,101,115,114,101,99,111,103,110,105,122,101,100,112,114,101,102,101,114,101,110,99,101,105,102,32,40,116,121,112,101,111,102,109,97,105,110,116,97,105,110,101,100,118,111,99,97,98,117,108,97,114,121,104,121,112,111,116,104,101,115,105,115,46,115,117,98,109,105,116,40,41,59,38,97,109,112,59,110,98,115,112,59,97,110,110,111,116,97,116,105,111,110,98,101,104,105,110,100,32,116,104,101,70,111,117,110,100,97,116,105,111,110,112,117,98,108,105,115,104,101,114,34,97,115,115,117,109,112,116,105,111,110,105,110,116,114,111,100,117,99,101,100,99,111,114,114,117,112,116,105,111,110,115,99,105,101,110,116,105,115,116,115,101,120,112,108,105,99,105,116,108,121,105,110,115,116,101,97,100,32,111,102,100,105,109,101,110,115,105,111,110,115,32,111,110,67,108,105,99,107,61,34,99,111,110,115,105,100,101,114,101,100,100,101,112,97,114,116,109,101,110,116,111,99,99,117,112,97,116,105,111,110,115,111,111,110,32,97,102,116,101,114,105,110,118,101,115,116,109,101,110,116,112,114,111,110,111,117,110,99,101,100,105,100,101,110,116,105,102,105,101,100,101,120,112,101,114,105,109,101,110,116,77,97,110,97,103,101,109,101,110,116,103,101,111,103,114,97,112,104,105,99,34,32,104,101,105,103,104,116,61,34,108,105,110,107,32,114,101,108,61,34,46,114,101,112,108,97,99,101,40,47,100,101,112,114,101,115,115,105,111,110,99,111,110,102,101,114,101,110,99,101,112,117,110,105,115,104,109,101,110,116,101,108,105,109,105,110,97,116,101,100,114,101,115,105,115,116,97,110,99,101,97,100,97,112,116,97,116,105,111,110,111,112,112,111,115,105,116,105,111,110,119,101,108,108,32,107,110,111,119,110,115,117,112,112,108,101,109,101,110,116,100,101,116,101,114,109,105,110,101,100,104,49,32,99,108,97,115,115,61,34,48,112,120,59,109,97,114,103,105,110,109,101,99,104,97,110,105,99,97,108,115,116,97,116,105,115,116,105,99,115,99,101,108,101,98,114,97,116,101,100,71,111,118,101,114,110,109,101,110,116,10,10,68,117,114,105,110,103,32,116,100,101,118,101,108,111,112,101,114,115,97,114,116,105,102,105,99,105,97,108,101,113,117,105,118,97,108,101,110,116,111,114,105,103,105,110,97,116,101,100,67,111,109,109,105,115,115,105,111,110,97,116,116,97,99,104,109,101,110,116,60,115,112,97,110,32,105,100,61,34,116,104,101,114,101,32,119,101,114,101,78,101,100,101,114,108,97,110,100,115,98,101,121,111,110,100,32,116,104,101,114,101,103,105,115,116,101,114,101,100,106,111,117,114,110,97,108,105,115,116,102,114,101,113,117,101,110,116,108,121,97,108,108,32,111,102,32,116,104,101,108,97,110,103],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+235568);allocate([61,34,101,110,34,32,60,47,115,116,121,108,101,62,13,10,97,98,115,111,108,117,116,101,59,32,115,117,112,112,111,114,116,105,110,103,101,120,116,114,101,109,101,108,121,32,109,97,105,110,115,116,114,101,97,109,60,47,115,116,114,111,110,103,62,32,112,111,112,117,108,97,114,105,116,121,101,109,112,108,111,121,109,101,110,116,60,47,116,97,98,108,101,62,13,10,32,99,111,108,115,112,97,110,61,34,60,47,102,111,114,109,62,10,32,32,99,111,110,118,101,114,115,105,111,110,97,98,111,117,116,32,116,104,101,32,60,47,112,62,60,47,100,105,118,62,105,110,116,101,103,114,97,116,101,100,34,32,108,97,110,103,61,34,101,110,80,111,114,116,117,103,117,101,115,101,115,117,98,115,116,105,116,117,116,101,105,110,100,105,118,105,100,117,97,108,105,109,112,111,115,115,105,98,108,101,109,117,108,116,105,109,101,100,105,97,97,108,109,111,115,116,32,97,108,108,112,120,32,115,111,108,105,100,32,35,97,112,97,114,116,32,102,114,111,109,115,117,98,106,101,99,116,32,116,111,105,110,32,69,110,103,108,105,115,104,99,114,105,116,105,99,105,122,101,100,101,120,99,101,112,116,32,102,111,114,103,117,105,100,101,108,105,110,101,115,111,114,105,103,105,110,97,108,108,121,114,101,109,97,114,107,97,98,108,101,116,104,101,32,115,101,99,111,110,100,104,50,32,99,108,97,115,115,61,34,60,97,32,116,105,116,108,101,61,34,40,105,110,99,108,117,100,105,110,103,112,97,114,97,109,101,116,101,114,115,112,114,111,104,105,98,105,116,101,100,61,32,34,104,116,116,112,58,47,47,100,105,99,116,105,111,110,97,114,121,112,101,114,99,101,112,116,105,111,110,114,101,118,111,108,117,116,105,111,110,102,111,117,110,100,97,116,105,111,110,112,120,59,104,101,105,103,104,116,58,115,117,99,99,101,115,115,102,117,108,115,117,112,112,111,114,116,101,114,115,109,105,108,108,101,110,110,105,117,109,104,105,115,32,102,97,116,104,101,114,116,104,101,32,38,113,117,111,116,59,110,111,45,114,101,112,101,97,116,59,99,111,109,109,101,114,99,105,97,108,105,110,100,117,115,116,114,105,97,108,101,110,99,111,117,114,97,103,101,100,97,109,111,117,110,116,32,111,102,32,117,110,111,102,102,105,99,105,97,108,101,102,102,105,99,105,101,110,99,121,82,101,102,101,114,101,110,99,101,115,99,111,111,114,100,105,110,97,116,101,100,105,115,99,108,97,105,109,101,114,101,120,112,101,100,105,116,105,111,110,100,101,118,101,108,111,112,105,110,103,99,97,108,99,117,108,97,116,101,100,115,105,109,112,108,105,102,105,101,100,108,101,103,105,116,105,109,97,116,101,115,117,98,115,116,114,105,110,103,40,48,34,32,99,108,97,115,115,61,34,99,111,109,112,108,101,116,101,108,121,105,108,108,117,115,116,114,97,116,101,102,105,118,101,32,121,101,97,114,115,105,110,115,116,114,117,109,101,110,116,80,117,98,108,105,115,104,105,110,103,49,34,32,99,108,97,115,115,61,34,112,115,121,99,104,111,108,111,103,121,99,111,110,102,105,100,101,110,99,101,110,117,109,98,101,114,32,111,102,32,97,98,115,101,110,99,101,32,111,102,102,111,99,117,115,101,100,32,111,110,106,111,105,110,101,100,32,116,104,101,115,116,114,117,99,116,117,114,101,115,112,114,101,118,105,111,117,115,108,121,62,60,47,105,102,114,97,109,101,62,111,110,99,101,32,97,103,97,105,110,98,117,116,32,114,97,116,104,101,114,105,109,109,105,103,114,97,110,116,115,111,102,32,99,111,117,114,115,101,44,97,32,103,114,111,117,112,32,111,102,76,105,116,101,114,97,116,117,114,101,85,110,108,105,107,101,32,116,104,101,60,47,97,62,38,110,98,115,112,59,10,102,117,110,99,116,105,111,110,32,105,116,32,119,97,115,32,116,104,101,67,111,110,118,101,110,116,105,111,110,97,117,116,111,109,111,98,105,108,101,80,114,111,116,101,115,116,97,110,116,97,103,103,114,101,115,115,105,118,101,97,102,116,101,114,32,116,104,101,32,83,105,109,105,108,97,114,108,121,44,34,32,47,62,60,47,100,105,118,62,99,111,108,108,101,99,116,105,111,110,13,10,102,117,110,99,116,105,111,110,118,105,115,105,98,105,108,105,116,121,116,104,101,32,117,115,101,32,111,102,118,111,108,117,110,116,101,101,114,115,97,116,116,114,97,99,116,105,111,110,117,110,100,101,114,32,116,104,101,32,116,104,114,101,97,116,101,110,101,100,42,60,33,91,67,68,65,84,65,91,105,109,112,111,114,116,97,110,99,101,105,110,32,103,101,110,101,114,97,108,116,104,101,32,108,97,116,116,101,114,60,47,102,111,114,109,62,10,60,47,46,105,110,100,101,120,79,102,40,39,105,32,61,32,48,59,32,105,32,60,100,105,102,102,101,114,101,110,99,101,100,101,118,111,116,101,100,32,116,111,116,114,97,100,105,116,105,111,110,115,115,101,97,114,99,104,32,102,111,114,117,108,116,105,109,97,116,101,108,121,116,111,117,114,110,97,109,101,110,116,97,116,116,114,105,98,117,116,101,115,115,111,45,99,97,108,108,101,100,32,125,10,60,47,115,116,121,108,101,62,101,118,97,108,117,97,116,105,111,110,101,109,112,104,97,115,105,122,101,100,97,99,99,101,115,115,105,98,108,101,60,47,115,101,99,116,105,111,110,62,115,117,99,99,101,115,115,105,111,110,97,108,111,110,103,32,119,105,116,104,77,101,97,110,119,104,105,108,101,44,105,110,100,117,115,116,114,105,101,115,60,47,97,62,60,98,114,32,47,62,104,97,115,32,98,101,99,111,109,101,97,115,112,101,99,116,115,32,111,102,84,101,108,101,118,105,115,105,111,110,115,117,102,102,105,99,105,101,110,116,98,97,115,107,101,116,98,97,108,108,98,111,116,104,32,115,105,100,101,115,99,111,110,116,105,110,117,105,110,103,97,110,32,97,114,116,105,99,108,101,60,105,109,103,32,97,108,116,61,34,97,100,118,101,110,116,117,114,101,115,104,105,115,32,109,111,116,104,101,114,109,97,110,99,104,101,115,116,101,114,112,114,105,110,99,105,112,108,101,115,112,97,114,116,105,99,117,108,97,114,99,111,109,109,101,110,116,97,114,121,101,102,102,101,99,116,115,32,111,102,100,101,99,105,100,101,100,32,116,111,34,62,60,115,116,114,111,110,103,62,112,117,98,108,105,115,104,101,114,115,74,111,117,114,110,97,108,32,111,102,100,105,102,102,105,99,117,108,116,121,102,97,99,105,108,105,116,97,116,101,97,99,99,101,112,116,97,98,108,101,115,116,121,108,101,46,99,115,115,34,9,102,117,110,99,116,105,111,110,32,105,110,110,111,118,97,116,105,111,110,62,67,111,112,121,114,105,103,104,116,115,105,116,117,97,116,105,111,110,115,119,111,117,108,100,32,104,97,118,101,98,117,115,105,110,101,115,115,101,115,68,105,99,116,105,111,110,97,114,121,115,116,97,116,101,109,101,110,116,115,111,102,116,101,110,32,117,115,101,100,112,101,114,115,105,115,116,101,110,116,105,110,32,74,97,110,117,97,114,121,99,111,109,112,114,105,115,105,110,103,60,47,116,105,116,108,101,62,10,9,100,105,112,108,111,109,97,116,105,99,99,111,110,116,97,105,110,105,110,103,112,101,114,102,111,114,109,105,110,103,101,120,116,101,110,115,105,111,110,115,109,97,121,32,110,111,116,32,98,101,99,111,110,99,101,112,116,32,111,102,32,111,110,99,108,105,99,107,61,34,73,116,32,105,115,32,97,108,115,111,102,105,110,97,110,99,105,97,108,32,109,97,107,105,110,103,32,116,104,101,76,117,120,101,109,98,111,117,114,103,97,100,100,105,116,105,111,110,97,108,97,114,101,32,99,97,108,108,101,100,101,110,103,97,103,101,100,32,105,110,34,115,99,114,105,112,116,34,41,59,98,117,116,32,105,116,32,119,97,115,101,108,101,99,116,114,111,110,105,99,111,110,115,117,98,109,105,116,61,34,10,60,33,45,45,32,69,110,100,32,101,108,101,99,116,114,105,99,97,108,111,102,102,105,99,105,97,108,108,121,115,117,103,103,101,115,116,105,111,110,116,111,112,32,111,102,32,116,104,101,117,110,108,105,107,101,32,116,104,101,65,117,115,116,114,97,108,105,97,110,79,114,105,103,105,110,97,108,108,121,114,101,102,101,114,101,110,99,101,115,10,60,47,104,101,97,100,62,13,10,114,101,99,111,103,110,105,115,101,100,105,110,105,116,105,97,108,105,122,101,108,105,109,105,116,101,100,32,116,111,65,108,101,120,97,110,100,114,105,97,114,101,116,105,114,101,109,101,110,116,65,100,118,101,110,116,117,114,101,115,102,111,117,114,32,121,101,97,114,115,10,10,38,108,116,59,33,45,45,32,105,110,99,114,101,97,115,105,110,103,100,101,99,111,114,97,116,105,111,110,104,51,32,99,108,97,115,115,61,34,111,114,105,103,105,110,115,32,111,102,111,98,108,105,103,97,116,105,111,110,114,101,103,117,108,97,116,105,111,110,99,108,97,115,115,105,102,105,101,100,40,102,117,110,99,116,105,111,110,40,97,100,118,97,110,116,97,103,101,115,98,101,105,110,103,32,116,104,101,32,104,105,115,116,111,114,105,97,110,115,60,98,97,115,101,32,104,114,101,102,114,101,112,101,97,116,101,100,108,121,119,105,108,108,105,110,103,32,116,111,99,111,109,112,97,114,97,98,108,101,100,101,115,105,103,110,97,116,101,100,110,111,109,105,110,97,116,105,111,110,102,117,110,99,116,105,111,110,97,108,105,110,115,105,100,101,32,116,104,101,114,101,118,101,108,97,116,105,111,110,101,110,100,32,111,102,32,116,104,101,115,32,102,111,114,32,116,104,101,32,97,117,116,104,111,114,105,122,101,100,114,101,102,117,115,101,100,32,116,111,116,97,107,101,32,112,108,97,99,101,97,117,116,111,110,111,109,111,117,115,99,111,109,112,114,111,109,105,115,101,112,111,108,105,116,105,99,97,108,32,114,101,115,116,97,117,114,97,110,116,116,119,111,32,111,102,32,116,104,101,70,101,98,114,117,97,114,121,32,50,113,117,97,108,105,116,121,32,111,102,115,119,102,111,98,106,101,99,116,46,117,110,100,101,114,115,116,97,110,100,110,101,97,114,108,121,32,97,108,108,119,114,105,116,116,101,110,32,98,121,105,110,116,101,114,118,105,101,119,115,34,32,119,105,100,116,104,61,34,49,119,105,116,104,100,114,97,119,97,108,102,108,111,97,116,58,108,101,102,116,105,115,32,117,115,117,97,108,108,121,99,97,110,100,105,100,97,116,101,115,110,101,119,115,112,97,112,101,114,115,109,121,115,116,101,114,105,111,117,115,68,101,112,97,114,116,109,101,110,116,98,101,115,116,32,107,110,111,119,110,112,97,114,108,105,97,109,101,110,116,115,117,112,112,114,101,115,115,101,100,99,111,110,118,101,110,105,101,110,116,114,101,109,101,109,98,101,114,101,100,100,105,102,102,101,114,101,110,116,32,115,121,115,116,101,109,97,116,105,99,104,97,115,32,108,101,100,32,116,111,112,114,111,112,97,103,97,110,100,97,99,111,110,116,114,111,108,108,101,100,105,110,102,108,117,101,110,99,101,115,99,101,114,101,109,111,110,105,97,108,112,114,111,99,108,97,105,109,101,100,80,114,111,116,101,99,116,105,111,110,108,105,32,99,108,97,115,115,61,34,83,99,105,101,110,116,105,102,105,99,99,108,97,115,115,61,34,110,111,45,116,114,97,100,101,109,97,114,107,115,109,111,114,101,32,116,104,97,110,32,119,105,100,101,115,112,114,101,97,100,76,105,98,101,114,97,116,105,111,110,116,111,111,107,32,112,108,97,99,101,100,97,121,32,111,102,32,116,104,101,97,115,32,108,111,110,103,32,97,115,105,109,112,114,105,115,111,110,101,100,65,100,100,105,116,105,111,110,97,108,10,60,104,101,97,100,62,10,60,109,76,97,98,111,114,97,116,111,114,121,78,111,118,101,109,98,101,114,32,50,101,120,99,101,112,116,105,111,110,115,73,110,100,117,115,116,114,105,97,108,118,97,114,105,101,116,121,32,111,102,102,108,111,97,116,58,32,108,101,102,68,117,114,105,110,103,32,116,104,101,97,115,115,101,115,115,109,101,110,116,104,97,118,101,32,98,101,101,110,32,100,101,97,108,115,32,119,105,116,104,83,116,97,116,105,115,116,105,99,115,111,99,99,117,114,114,101,110,99,101,47,117,108,62,60,47,100,105,118,62,99,108,101,97,114,102,105,120,34,62,116,104,101,32,112,117,98,108,105,99,109,97,110,121,32,121,101,97,114,115,119,104,105,99,104,32,119,101,114,101,111,118,101,114,32,116,105,109,101,44,115,121,110,111,110,121,109,111,117,115,99,111,110,116,101,110,116,34,62,10,112,114,101,115,117,109,97,98,108,121,104,105,115,32,102,97,109,105,108,121,117,115,101,114,65,103,101,110,116,46,117,110,101,120,112,101,99,116,101,100,105,110,99,108,117,100,105,110,103,32,99,104,97,108,108,101,110,103,101,100,97,32,109,105,110,111,114,105,116,121,117,110,100,101,102,105,110,101,100,34,98,101,108,111,110,103,115,32,116,111,116,97,107,101,110,32,102,114,111,109,105,110,32,79,99,116,111,98,101,114,112,111,115,105,116,105,111,110,58,32,115,97,105,100,32,116,111,32,98,101,114,101,108,105,103,105,111,117,115,32,70,101,100,101,114,97,116,105,111,110,32,114,111,119,115,112,97,110,61,34,111,110,108,121,32,97,32,102,101,119,109,101,97,110,116,32,116,104,97,116,108,101,100,32,116,111,32,116,104,101,45,45,62,13,10,60,100,105,118,32,60,102,105,101,108,100,115,101,116,62,65,114,99,104,98,105,115,104,111,112,32,99,108,97,115,115,61,34,110,111,98,101,105,110,103,32,117,115,101,100,97,112,112,114,111,97,99,104,101,115,112,114,105,118,105,108,101,103,101,115,110,111,115,99,114,105,112,116,62,10,114,101,115,117,108,116,115,32,105,110,109,97,121,32,98,101,32,116,104,101,69,97,115,116,101,114,32,101,103,103,109,101,99,104,97,110,105,115,109,115,114,101,97,115,111,110,97,98,108,101,80,111,112,117,108,97,116,105,111,110,67,111,108,108,101,99,116,105,111,110,115,101,108,101,99,116,101,100,34,62,110,111,115,99,114,105,112,116,62,13,47,105,110,100,101,120,46,112,104,112,97,114,114,105,118,97,108,32,111,102,45,106,115,115,100,107,39,41,41,59,109,97,110,97,103,101,100,32,116,111,105,110,99,111,109,112,108,101,116,101,99,97,115,117,97,108,116,105,101,115,99,111,109,112,108,101,116,105,111,110,67,104,114,105,115,116,105,97,110,115,83,101,112,116,101,109,98,101,114,32,97,114,105,116,104,109,101,116,105,99,112,114,111,99,101,100,117,114,101,115,109,105,103,104,116,32,104,97,118,101,80,114,111,100,117,99,116,105,111,110,105,116,32,97,112,112,101,97,114,115,80,104,105,108,111,115,111,112,104,121,102,114,105,101,110,100,115,104,105,112,108,101,97,100,105,110,103,32,116,111,103,105,118,105,110,103,32,116,104,101,116,111,119,97,114,100,32,116,104,101,103,117,97,114,97,110,116,101,101,100,100,111,99,117,109,101,110,116,101,100,99,111,108,111,114,58,35,48,48,48,118,105,100,101,111,32,103,97,109,101,99,111,109,109,105,115,115,105,111,110,114,101,102,108,101,99,116,105,110,103,99,104,97,110,103,101,32,116,104,101,97,115,115,111,99,105,97,116,101,100,115,97,110,115,45,115,101,114,105,102,111,110,107,101,121,112,114,101,115,115,59,32,112,97,100,100,105,110,103,58,72,101,32,119,97,115,32,116,104,101,117,110,100,101,114,108,121,105,110,103,116,121,112,105,99,97,108,108,121,32,44,32,97,110,100,32,116,104,101,32,115,114,99,69,108,101,109,101,110,116,115,117,99,99,101,115,115,105,118,101,115,105,110,99,101,32,116,104,101,32,115,104,111,117,108,100,32,98,101,32,110,101,116,119,111,114,107,105,110,103,97,99,99,111,117,110,116,105,110,103,117,115,101,32,111,102,32,116,104,101,108,111,119,101,114,32,116,104,97,110,115,104,111,119,115,32,116,104,97,116,60,47,115,112,97,110,62,10,9,9,99,111,109,112,108,97,105,110,116,115,99,111,110,116,105,110,117,111,117,115,113,117,97,110,116,105,116,105,101,115,97,115,116,114,111,110,111,109,101,114,104,101,32,100,105,100,32,110,111,116,100,117,101,32,116,111,32,105,116,115,97,112,112,108,105,101,100,32,116,111,97,110,32,97,118,101,114,97,103,101,101,102,102,111,114,116,115,32,116,111,116,104,101,32,102,117,116,117,114,101,97,116,116,101,109,112,116,32,116,111,84,104,101,114,101,102,111,114,101,44,99,97,112,97,98,105,108,105,116,121,82,101,112,117,98,108,105,99,97,110,119,97,115,32,102,111,114,109,101,100,69,108,101,99,116,114,111,110,105,99,107,105,108,111,109,101,116,101,114,115,99,104,97,108,108,101,110,103,101,115,112,117,98,108,105,115,104,105,110,103,116,104,101,32,102,111,114,109,101,114,105,110,100,105,103,101,110,111,117,115,100,105,114,101,99,116,105,111,110,115,115,117,98,115,105,100,105,97,114,121,99,111,110,115,112,105,114,97,99,121,100,101,116,97,105,108,115,32,111,102,97,110,100,32,105,110,32,116,104,101,97,102,102,111,114,100,97,98,108,101,115,117,98,115,116,97,110,99,101,115,114,101,97,115,111,110,32,102,111,114,99,111,110,118,101,110,116,105,111,110,105,116,101,109,116,121,112,101,61,34,97,98,115,111,108,117,116,101,108,121,115,117,112,112,111,115,101,100,108,121,114,101,109,97,105,110,101,100,32,97,97,116,116,114,97,99,116,105,118,101,116,114,97,118,101,108,108,105,110,103,115,101,112,97,114,97,116,101,108,121,102,111,99,117,115,101,115,32,111,110,101,108,101,109,101,110,116,97,114,121,97,112,112,108,105,99,97,98,108,101,102,111,117,110,100,32,116,104,97,116,115,116,121,108,101,115,104,101,101,116,109,97,110,117,115,99,114,105,112,116,115,116,97,110,100,115,32,102,111,114,32,110,111,45,114,101,112,101,97,116,40,115,111,109,101,116,105,109,101,115,67,111,109,109,101,114,99,105,97,108,105,110,32,65,109,101,114,105,99,97,117,110,100,101,114,116,97,107,101,110,113,117,97,114,116,101,114,32,111,102,97,110,32,101,120,97,109,112,108,101,112,101,114,115,111,110,97,108,108,121,105,110,100,101,120,46,112,104,112,63,60,47,98,117,116,116,111,110,62,10,112,101,114,99,101,110,116,97,103,101,98,101,115,116,45,107,110,111,119,110,99,114,101,97,116,105,110,103,32,97,34,32,100,105,114,61,34,108,116,114,76,105,101,117,116,101,110,97,110,116,10,60,100,105,118,32,105,100,61,34,116,104,101,121,32,119,111,117,108,100,97,98,105,108,105,116,121,32,111,102,109,97,100,101,32,117,112,32,111,102,110,111,116,101,100,32,116,104,97,116,99,108,101,97,114,32,116,104,97,116,97,114,103,117,101,32,116,104,97,116,116,111,32,97,110,111,116,104,101,114,99,104,105,108,100,114,101,110,39,115,112,117,114,112,111,115,101,32,111,102,102,111,114,109,117,108,97,116,101,100,98,97,115,101,100,32,117,112,111,110,116,104,101,32,114,101,103,105,111,110,115,117,98,106,101,99,116,32,111,102,112,97,115,115,101,110,103,101,114,115,112,111,115,115,101,115,115,105,111,110,46,10,10,73,110,32,116,104,101,32,66,101,102,111,114,101,32,116,104,101,97,102,116,101,114,119,97,114,100,115,99,117,114,114,101,110,116,108,121,32,97,99,114,111,115,115,32,116,104,101,115,99,105,101,110,116,105,102,105,99,99,111,109,109,117,110,105,116,121,46,99,97,112,105,116,97,108,105,115,109,105,110,32,71,101,114,109,97,110,121,114,105,103,104,116,45,119,105,110,103,116,104,101,32,115,121,115,116,101,109,83,111,99,105,101,116,121,32,111,102,112,111,108,105,116,105,99,105,97,110,100,105,114,101,99,116,105,111,110,58,119,101,110,116,32,111,110,32,116,111,114,101,109,111,118,97,108,32,111,102,32,78,101,119,32,89,111,114,107,32,97,112,97,114,116,109,101,110,116,115,105,110,100,105,99,97,116,105,111,110,100,117,114,105,110,103,32,116,104,101,117,110,108,101,115,115,32,116,104,101,104,105,115,116,111,114,105,99,97,108,104,97,100,32,98,101,101,110,32,97,100,101,102,105,110,105,116,105,118,101,105,110,103,114,101,100,105,101,110,116,97,116,116,101,110,100,97,110,99,101,67,101,110,116,101,114,32,102,111,114,112,114,111,109,105,110,101,110,99,101,114,101,97,100,121,83,116,97,116,101,115,116,114,97,116,101,103,105,101,115,98,117,116,32,105,110,32,116,104,101,97,115,32,112,97,114,116,32,111,102,99,111,110,115,116,105,116,117,116,101,99,108,97,105,109,32,116,104,97,116,108,97,98,111,114,97,116,111,114,121,99,111,109,112,97,116,105,98,108,101,102,97,105,108,117,114,101,32,111,102,44,32,115,117,99,104,32,97,115,32,98,101,103,97,110,32,119,105,116,104,117,115,105,110,103,32,116,104,101,32,116,111,32,112,114,111,118,105,100,101,102,101,97,116,117,114,101,32,111,102,102,114,111,109,32,119,104,105,99,104,47,34,32,99,108,97,115,115,61,34,103,101,111,108,111,103,105,99,97,108,115,101,118,101,114,97,108,32,111,102,100,101,108,105,98,101,114,97,116,101,105,109,112,111,114,116,97,110,116,32,104,111,108,100,115,32,116,104,97,116,105,110,103,38,113,117,111,116,59,32,118,97,108,105,103,110,61,116,111,112,116,104,101,32,71,101,114,109,97,110,111,117,116,115,105,100,101,32,111,102,110,101,103,111,116,105,97,116,101,100,104,105,115,32,99,97,114,101,101,114,115,101,112,97,114,97,116,105,111,110,105,100,61,34,115,101,97,114,99,104,119,97,115,32,99,97,108,108,101,100,116,104,101,32,102,111,117,114,116,104,114,101,99,114,101,97,116,105,111,110,111,116,104,101,114,32,116,104,97,110,112,114,101,118,101,110,116,105,111,110,119,104,105,108,101,32,116,104,101,32,101,100,117,99,97,116,105,111,110,44,99,111,110,110,101,99,116,105,110,103,97,99,99,117,114,97,116,101,108,121,119,101,114,101,32,98,117,105,108,116,119,97,115,32,107,105,108,108,101,100,97,103,114,101,101,109,101,110,116,115,109,117,99,104,32,109,111,114,101,32,68,117,101,32,116,111,32,116,104,101,119,105,100,116,104,58,32,49,48,48,115,111,109,101,32,111,116,104,101,114,75,105,110,103,100,111,109,32,111,102,116,104,101,32,101,110,116,105,114,101,102,97,109,111,117,115,32,102,111,114,116,111,32,99,111,110,110,101,99,116,111,98,106,101,99,116,105,118,101,115,116,104,101,32,70,114,101,110,99,104,112,101,111,112,108,101,32,97,110,100,102,101,97,116,117,114,101,100,34,62,105,115,32,115,97,105,100,32,116,111,115,116,114,117,99,116,117,114,97,108,114,101,102,101,114,101,110,100,117,109,109,111,115,116,32,111,102,116,101,110,97,32,115,101,112,97,114,97,116,101,45,62,10,60,100,105,118,32,105,100,32,79,102,102,105,99,105,97,108,32,119,111,114,108,100,119,105,100,101,46,97,114,105,97,45,108,97,98,101,108,116,104,101,32,112,108,97,110,101,116,97,110,100,32,105,116,32,119,97,115,100,34,32,118,97,108,117,101,61,34,108,111,111,107,105,110,103,32,97,116,98,101,110,101,102,105,99,105,97,108,97,114,101,32,105,110,32,116,104,101,109,111,110,105,116,111,114,105,110,103,114,101,112,111,114,116,101,100,108,121,116,104,101,32,109,111,100,101,114,110,119,111,114,107,105,110,103,32,111,110,97,108,108,111,119,101,100,32,116,111,119,104,101,114,101,32,116,104,101,32,105,110,110,111,118,97,116,105,118,101,60,47,97,62,60,47,100,105,118,62,115,111,117,110,100,116,114,97,99,107,115,101,97,114,99,104,70,111,114,109,116,101,110,100,32,116,111,32,98,101,105,110,112,117,116,32,105,100,61,34,111,112,101,110,105,110,103,32,111,102,114,101,115,116,114,105,99,116,101,100,97,100,111,112,116,101,100,32,98,121,97,100,100,114,101,115,115,105,110,103,116,104,101,111,108,111,103,105,97,110,109,101,116,104,111,100,115,32,111,102,118,97,114,105,97,110,116,32,111,102,67,104,114,105,115,116,105,97,110,32,118,101,114,121,32,108,97,114,103,101,97,117,116,111,109,111,116,105,118,101,98,121,32,102,97,114,32,116,104,101,114,97,110,103,101,32,102,114,111,109,112,117,114,115,117,105,116,32,111,102,102,111,108,108,111,119,32,116,104,101,98,114,111,117,103,104,116,32,116,111,105,110,32,69,110,103,108,97,110,100,97,103,114,101,101,32,116,104,97,116,97,99,99,117,115,101,100,32,111,102,99,111,109,101,115,32,102,114,111,109,112,114,101,118,101,110,116,105,110,103,100,105,118,32,115,116,121,108,101,61,104,105,115,32,111,114,32,104,101,114,116,114,101,109,101,110,100,111,117,115,102,114,101,101,100,111,109,32,111,102,99,111,110,99,101,114,110,105,110,103,48,32,49,101,109,32,49,101,109,59,66,97,115,107,101,116,98,97,108,108,47,115,116,121,108,101,46,99,115,115,97,110,32,101,97,114,108,105,101,114,101,118,101,110,32,97,102,116,101,114,47,34,32,116,105,116,108,101,61,34,46,99,111,109,47,105,110,100,101,120,116,97,107,105,110,103,32,116,104,101,112,105,116,116,115,98,117,114,103,104,99,111,110,116,101,110,116,34,62,13,60,115,99,114,105,112,116,62,40,102,116,117,114,110,101,100,32,111,117,116,104,97,118,105,110,103,32,116,104,101,60,47,115,112,97,110,62,13,10,32,111,99,99,97,115,105,111,110,97,108,98,101,99,97,117,115,101,32,105,116,115,116,97,114,116,101,100,32,116,111,112,104,121,115,105,99,97,108,108,121,62,60,47,100,105,118,62,10,32,32,99,114,101,97,116,101,100,32,98,121,67,117,114,114,101,110,116,108,121,44,32,98,103,99,111,108,111,114,61,34,116,97,98,105,110,100,101,120,61,34,100,105,115,97,115,116,114,111,117,115,65,110,97,108,121,116,105,99,115,32,97,108,115,111,32,104,97,115,32,97,62,60,100,105,118,32,105,100,61,34,60,47,115,116,121,108,101,62,10,60,99,97,108,108,101,100,32,102,111,114,115,105,110,103,101,114,32,97,110,100,46,115,114,99,32,61,32,34,47,47,118,105,111,108,97,116,105,111,110,115,116,104,105,115,32,112,111,105,110,116,99,111,110,115,116,97,110,116,108,121,105,115,32,108,111,99,97,116,101,100,114,101,99,111,114,100,105,110,103,115,100,32,102,114,111,109,32,116,104,101,110,101,100,101,114,108,97,110,100,115,112,111,114,116,117,103,117,195,170,115,215,162,215,145,215,168,215,153,215,170,217,129,216,167,216,177,216,179,219,140,100,101,115,97,114,114,111,108,108,111,99,111,109,101,110,116,97,114,105,111,101,100,117,99,97,99,105,195,179,110,115,101,112,116,105,101,109,98,114,101,114,101,103,105,115,116,114,97,100,111,100,105,114,101,99,99,105,195,179,110,117,98,105,99,97,99,105,195,179,110,112,117,98,108,105,99,105,100,97,100,114,101,115,112,117,101,115,116,97,115,114,101,115,117,108,116,97,100,111,115,105,109,112,111,114,116,97,110,116,101,114,101,115,101,114,118,97,100,111,115,97,114,116,195,173,99,117,108,111,115,100,105,102,101,114,101,110,116,101,115,115,105,103,117,105,101,110,116,101,115,114,101,112,195,186,98,108,105,99,97,115,105,116,117,97,99,105,195,179,110,109,105,110,105,115,116,101,114,105,111,112,114,105,118,97,99,105,100,97,100,100,105,114,101,99,116,111,114,105,111,102,111,114,109,97,99,105,195,179,110,112,111,98,108,97,99,105,195,179,110,112,114,101,115,105,100,101,110,116,101,99,111,110,116,101,110,105,100,111,115,97,99,99,101,115,111,114,105,111,115,116,101,99,104,110,111,114,97,116,105,112,101,114,115,111,110,97,108,101,115,99,97,116,101,103,111,114,195,173,97,101,115,112,101,99,105,97,108,101,115,100,105,115,112,111,110,105,98,108,101,97,99,116,117,97,108,105,100,97,100,114,101,102,101,114,101,110,99,105,97,118,97,108,108,97,100,111,108,105,100,98,105,98,108,105,111,116,101,99,97,114,101,108,97,99,105,111,110,101,115,99,97,108,101,110,100,97,114,105,111,112,111,108,195,173,116,105,99,97,115,97,110,116,101,114,105,111,114,101,115,100,111,99,117,109,101,110,116,111,115,110,97,116,117,114,97,108,101,122,97,109,97,116,101,114,105,97,108,101,115,100,105,102,101,114,101,110,99,105,97,101,99,111,110,195,179,109,105,99,97,116,114,97,110,115,112,111,114,116,101,114,111,100,114,195,173,103,117,101,122,112,97,114,116,105,99,105,112,97,114,101,110,99,117,101,110,116,114,97,110,100,105,115,99,117,115,105,195,179,110,101,115,116,114,117,99,116,117,114,97,102,117,110,100,97,99,105,195,179,110,102,114,101,99,117,101,110,116,101,115,112,101,114,109,97,110,101,110,116,101,116,111,116,97,108,109,101,110,116,101,208,188,208,190,208,182,208,189,208,190,208,177,209,131,208,180,208,181,209,130,208,188,208,190,208,182,208,181,209,130,208,178,209,128,208,181,208,188,209,143,209,130,208,176,208,186,208,182,208,181,209,135,209,130,208,190,208,177,209,139,208,177,208,190,208,187,208,181,208,181,208,190,209,135,208,181,208,189,209,140,209,141,209,130,208,190,208,179,208,190,208,186,208,190,208,179,208,180,208,176,208,191,208,190,209,129,208,187,208,181,208,178,209,129,208,181,208,179,208,190,209,129,208,176,208,185,209,130,208,181,209,135,208,181,209,128,208,181,208,183,208,188,208,190,208,179,209,131,209,130,209,129,208,176,208,185,209,130,208,176,208,182,208,184,208,183,208,189,208,184,208,188,208,181,208,182,208,180,209,131,208,177,209,131,208,180,209,131,209,130,208,159,208,190,208,184,209,129,208,186,208,183,208,180,208,181,209,129,209,140,208,178,208,184,208,180,208,181,208,190,209,129,208,178,209,143,208,183,208,184,208,189,209,131,208,182,208,189,208,190,209,129,208,178,208,190,208,181,208,185,208,187,209,142,208,180,208,181,208,185,208,191,208,190,209,128,208,189,208,190,208,188,208,189,208,190,208,179,208,190,208,180,208,181,209,130,208,181,208,185,209,129,208,178,208,190,208,184,209,133,208,191,209,128,208,176,208,178,208,176,209,130,208,176,208,186,208,190,208,185,208,188,208,181,209,129,209,130,208,190,208,184,208,188,208,181,208,181,209,130,208,182,208,184,208,183,208,189,209,140,208,190,208,180,208,189,208,190,208,185,208,187,209,131,209,135,209,136,208,181,208,191,208,181,209,128,208,181,208,180,209,135,208,176,209,129,209,130,208,184,209,135,208,176,209,129,209,130,209,140,209,128,208,176,208,177,208,190,209,130,208,189,208,190,208,178,209,139,209,133,208,191,209,128,208,176,208,178,208,190,209,129,208,190,208,177,208,190,208,185,208,191,208,190,209,130,208,190,208,188,208,188,208,181,208,189,208,181,208,181,209,135,208,184,209,129,208,187,208,181,208,189,208,190,208,178,209,139,208,181,209,131,209,129,208,187,209,131,208,179,208,190,208,186,208,190,208,187,208,190,208,189,208,176,208,183,208,176,208,180,209,130,208,176,208,186,208,190,208,181,209,130,208,190,208,179,208,180,208,176,208,191,208,190,209,135,209,130,208,184,208,159,208,190,209,129,208,187,208,181,209,130,208,176,208,186,208,184,208,181,208,189,208,190,208,178,209,139,208,185,209,129,209,130,208,190,208,184,209,130,209,130,208,176,208,186,208,184,209,133,209,129,209,128,208,176,208,183,209,131,208,161,208,176,208,189,208,186,209,130,209,132,208,190,209,128,209,131,208,188,208,154,208,190,208,179,208,180,208,176,208,186,208,189,208,184,208,179,208,184,209,129,208,187,208,190,208,178,208,176,208,189,208,176,209,136,208,181,208,185,208,189,208,176,208,185,209,130,208,184,209,129,208,178,208,190,208,184,208,188,209,129,208,178,209,143,208,183,209,140,208,187,209,142,208,177,208,190,208,185,209,135,208,176,209,129,209,130,208,190,209,129,209,128,208,181,208,180,208,184,208,154,209,128,208,190,208,188,208,181,208,164,208,190,209,128,209,131,208,188,209,128,209,139,208,189,208,186,208,181,209,129,209,130,208,176,208,187,208,184,208,191,208,190,208,184,209,129,208,186,209,130,209,139,209,129,209,143,209,135,208,188,208,181,209,129,209,143,209,134,209,134,208,181,208,189,209,130,209,128,209,130,209,128,209,131,208,180,208,176,209,129,208,176,208,188,209,139,209,133,209,128,209,139,208,189,208,186,208,176,208,157,208,190,208,178,209,139,208,185,209,135,208,176,209,129,208,190,208,178,208,188,208,181,209,129,209,130,208,176,209,132,208,184,208,187,209,140,208,188,208,188,208,176,209,128,209,130,208,176,209,129,209,130,209,128,208,176,208,189,208,188,208,181,209,129,209,130,208,181,209,130,208,181,208,186,209,129,209,130,208,189,208,176,209,136,208,184,209,133,208,188,208,184,208,189,209,131,209,130,208,184,208,188,208,181,208,189,208,184,208,184,208,188,208,181,209,142,209,130,208,189,208,190,208,188,208,181,209,128,208,179,208,190,209,128,208,190,208,180,209,129,208,176,208,188,208,190,208,188,209,141,209,130,208,190,208,188,209,131,208,186,208,190,208,189,209,134,208,181,209,129,208,178,208,190,208,181,208,188,208,186,208,176,208,186,208,190,208,185,208,144,209,128,209,133,208,184,208,178,217,133,217,134,216,170,216,175,217,137,216,165,216,177,216,179,216,167,217,132,216,177,216,179,216,167,217,132,216,169,216,167,217,132,216,185,216,167,217,133,217,131,216,170,216,168,217,135,216,167,216,168,216,177,216,167,217,133,216,172,216,167,217,132,217,138,217,136,217,133,216,167,217,132,216,181,217,136,216,177,216,172,216,175,217,138,216,175,216,169,216,167,217,132,216,185,216,182,217,136,216,165,216,182,216,167,217,129,216,169,216,167,217,132,217,130,216,179,217,133,216,167,217,132,216,185,216,167,216,168,216,170,216,173,217,133,217,138,217,132,217,133,217,132,217,129,216,167,216,170,217,133,217,132,216,170,217,130,217,137,216,170,216,185,216,175,217,138,217,132,216,167,217,132,216,180,216,185,216,177,216,163,216,174,216,168,216,167,216,177,216,170,216,183,217,136,217,138,216,177,216,185,217,132,217,138,217,131,217,133,216,165,216,177,217,129,216,167,217,130,216,183,217,132,216,168,216,167,216,170,216,167,217,132,217,132,216,186,216,169,216,170,216,177,216,170,217,138,216,168,216,167,217,132,217,134,216,167,216,179,216,167,217,132,216,180,217,138,216,174,217,133,217,134,216,170,216,175,217,138,216,167,217,132,216,185,216,177,216,168,216,167,217,132,217,130,216,181,216,181,216,167,217,129,217,132,216,167,217,133,216,185,217,132,217,138,217,135,216,167,216,170,216,173,216,175,217,138,216,171,216,167,217,132,217,132,217,135,217,133,216,167,217,132,216,185,217,133,217,132,217,133,217,131,216,170,216,168,216,169,217,138,217,133,217,131,217,134,217,131,216,167,217,132,216,183,217,129,217,132,217,129,217,138,216,175,217,138,217,136,216,165,216,175,216,167,216,177,216,169,216,170,216,167,216,177,217,138,216,174,216,167,217,132,216,181,216,173,216,169,216,170,216,179,216,172,217,138,217,132,216,167,217,132,217,136,217,130,216,170,216,185,217,134,216,175,217,133,216,167,217,133,216,175,217,138,217,134,216,169,216,170,216,181,217,133,217,138,217,133,216,163,216,177,216,180,217,138,217,129,216,167,217,132,216,176,217,138,217,134,216,185,216,177,216,168,217,138,216,169,216,168,217,136,216,167,216,168,216,169,216,163,217,132,216,185,216,167,216,168,216,167,217,132,216,179,217,129,216,177,217,133,216,180,216,167,217,131,217,132,216,170,216,185,216,167,217,132,217,137,216,167,217,132,216,163,217,136,217,132,216,167,217,132,216,179,217,134,216,169,216,172,216,167,217,133,216,185,216,169,216,167,217,132,216,181,216,173,217,129,216,167,217,132,216,175,217,138,217,134,217,131,217,132,217,133,216,167,216,170,216,167,217,132,216,174,216,167,216,181,216,167,217,132,217,133,217,132,217,129,216,163,216,185,216,182,216,167,216,161,217,131,216,170,216,167,216,168,216,169,216,167,217,132,216,174,217,138,216,177,216,177,216,179,216,167,216,166,217,132,216,167,217,132,217,130,217,132,216,168,216,167,217,132,216,163,216,175,216,168,217,133,217,130,216,167,216,183,216,185,217,133,216,177,216,167,216,179,217,132,217,133,217,134,216,183,217,130,216,169,216,167,217,132,217,131,216,170,216,168,216,167,217,132,216,177,216,172,217,132,216,167,216,180,216,170,216,177,217,131,216,167,217,132,217,130,216,175,217,133,217,138,216,185,216,183,217,138,217,131,115,66,121,84,97,103,78,97,109,101,40,46,106,112,103,34,32,97,108,116,61,34,49,112,120,32,115,111,108,105,100,32,35,46,103,105,102,34,32,97,108,116,61,34,116,114,97,110,115,112,97,114,101,110,116,105,110,102,111,114,109,97,116,105,111,110,97,112,112,108,105,99,97,116,105,111,110,34,32,111,110,99,108,105,99,107,61,34,101,115,116,97,98,108,105,115,104,101,100,97,100,118,101,114,116,105,115,105,110,103,46,112,110,103,34,32,97,108,116,61,34,101,110,118,105,114,111,110,109,101,110,116,112,101,114,102,111,114,109,97,110,99,101,97,112,112,114,111,112,114,105,97,116,101,38,97,109,112,59,109,100,97,115,104,59,105,109,109,101,100,105,97,116,101,108,121,60,47,115,116,114,111,110,103,62,60,47,114,97,116,104,101,114,32,116,104,97,110,116,101,109,112,101,114,97,116,117,114,101,100,101,118,101,108,111,112,109,101,110,116,99,111,109,112,101,116,105,116,105,111,110,112,108,97,99,101,104,111,108,100,101,114,118,105,115,105,98,105,108,105,116,121,58,99,111,112,121,114,105,103,104,116,34,62,48,34,32,104,101,105,103,104,116,61,34,101,118,101,110,32,116,104,111,117,103,104,114,101,112,108,97,99,101,109,101,110,116,100,101,115,116,105,110,97,116,105,111,110,67,111,114,112,111,114,97,116,105,111,110,60,117,108,32,99,108,97,115,115,61,34,65,115,115,111,99,105,97,116,105,111,110,105,110,100,105,118,105,100,117,97,108,115,112,101,114,115,112,101,99,116,105,118,101,115,101,116,84,105,109,101,111,117,116,40,117,114,108,40,104,116,116,112,58,47,47,109,97,116,104,101,109,97,116,105,99,115,109,97,114,103,105,110,45,116,111,112,58,101,118,101,110,116,117,97,108,108,121,32,100,101,115,99,114,105,112,116,105,111,110,41,32,110,111,45,114,101,112,101,97,116,99,111,108,108,101,99,116,105,111,110,115,46,74,80,71,124,116,104,117,109,98,124,112,97,114,116,105,99,105,112,97,116,101,47,104,101,97,100,62,60,98,111,100,121,102,108,111,97,116,58,108,101,102,116,59,60,108,105,32,99,108,97,115,115,61,34,104,117,110,100,114,101,100,115,32,111,102,10,10,72,111,119,101,118,101,114,44,32,99,111,109,112,111,115,105,116,105,111,110,99,108,101,97,114,58,98,111,116,104,59,99,111,111,112,101,114,97,116,105,111,110,119,105,116,104,105,110,32,116,104,101,32,108,97,98,101,108,32,102,111,114,61,34,98,111,114,100,101,114,45,116,111,112,58,78,101,119,32,90,101,97,108,97,110,100,114,101,99,111,109,109,101,110,100,101,100,112,104,111,116,111,103,114,97,112,104,121,105,110,116,101,114,101,115,116,105,110,103,38,108,116,59,115,117,112,38,103,116,59,99,111,110,116,114,111,118,101,114,115,121,78,101,116,104,101,114,108,97,110,100,115,97,108,116,101,114,110,97,116,105,118,101,109,97,120,108,101,110,103,116,104,61,34,115,119,105,116,122,101,114,108,97,110,100,68,101,118,101,108,111,112,109,101,110,116,101,115,115,101,110,116,105,97,108,108,121,10,10,65,108,116,104,111,117,103,104,32,60,47,116,101,120,116,97,114,101,97,62,116,104,117,110,100,101,114,98,105,114,100,114,101,112,114,101,115,101,110,116,101,100,38,97,109,112,59,110,100,97,115,104,59,115,112,101,99,117,108,97,116,105,111,110,99,111,109,109,117,110,105,116,105,101,115,108,101,103,105,115,108,97,116,105,111,110,101,108,101,99,116,114,111,110,105,99,115,10,9,60,100,105,118,32,105,100,61,34,105,108,108,117,115,116,114,97,116,101,100,101,110,103,105,110,101,101,114,105,110,103,116,101,114,114,105,116,111,114,105,101,115,97,117,116,104,111,114,105,116,105,101,115,100,105,115,116,114,105,98,117,116,101,100,54,34,32,104,101,105,103,104,116,61,34,115,97,110,115,45,115,101,114,105,102,59,99,97,112,97,98,108,101,32,111,102,32,100,105,115,97,112,112,101,97,114,101,100,105,110,116,101,114,97,99,116,105,118,101,108,111,111,107,105,110,103,32,102,111,114,105,116,32,119,111,117,108,100,32,98,101,65,102,103,104,97,110,105,115,116,97,110,119,97,115,32,99,114,101,97,116,101,100,77,97,116,104,46,102,108,111,111,114,40,115,117,114,114,111,117,110,100,105,110,103,99,97,110,32,97,108,115,111,32,98,101,111,98,115,101,114,118,97,116,105,111,110,109,97,105,110,116,101,110,97,110,99,101,101,110,99,111,117,110,116,101,114,101,100,60,104,50,32,99,108,97,115,115,61,34,109,111,114,101,32,114,101,99,101,110,116,105,116,32,104,97,115,32,98,101,101,110,105,110,118,97,115,105,111,110,32,111,102,41,46,103,101,116,84,105,109,101,40,41,102,117,110,100,97,109,101,110,116,97,108,68,101,115,112,105,116,101,32,116,104,101,34,62,60,100,105,118,32,105,100,61,34,105,110,115,112,105,114,97,116,105,111,110,101,120,97,109,105,110,97,116,105,111,110,112,114,101,112,97,114,97,116,105,111,110,101,120,112,108,97,110,97,116,105,111,110,60,105,110,112,117,116,32,105,100,61,34,60,47,97,62,60,47,115,112,97,110,62,118,101,114,115,105,111,110,115,32,111,102,105,110,115,116,114,117,109,101,110,116,115,98,101,102,111,114,101,32,116,104,101,32,32,61,32,39,104,116,116,112,58,47,47,68,101,115,99,114,105,112,116,105,111,110,114,101,108,97,116,105,118,101,108,121,32,46,115,117,98,115,116,114,105,110,103,40,101,97,99,104,32,111,102,32,116,104,101,101,120,112,101,114,105,109,101,110,116,115,105,110,102,108,117,101,110,116,105,97,108,105,110,116,101,103,114,97,116,105,111,110,109,97,110,121,32,112,101,111,112,108,101,100,117,101,32,116,111,32,116,104,101,32,99,111,109,98,105,110,97,116,105,111,110,100,111,32,110,111,116,32,104,97,118,101,77,105,100,100,108,101,32,69,97,115,116,60,110,111,115,99,114,105,112,116,62,60,99,111,112,121,114,105,103,104,116,34,32,112,101,114,104,97,112,115,32,116,104,101,105,110,115,116,105,116,117,116,105,111,110,105,110,32,68,101,99,101,109,98,101,114,97,114,114,97,110,103,101,109,101,110,116,109,111,115,116,32,102,97,109,111,117,115,112,101,114,115,111,110,97,108,105,116,121,99,114,101,97,116,105,111,110,32,111,102,108,105,109,105,116,97,116,105,111,110,115,101,120,99,108,117,115,105,118,101,108,121,115,111,118,101,114,101,105,103,110,116,121,45,99,111,110,116,101,110,116,34,62,10,60,116,100,32,99,108,97,115,115,61,34,117,110,100,101,114,103,114,111,117,110,100,112,97,114,97,108,108,101,108,32,116,111,100,111,99,116,114,105,110,101,32,111,102,111,99,99,117,112,105,101,100,32,98,121,116,101,114,109,105,110,111,108,111,103,121,82,101,110,97,105,115,115,97,110,99,101,97,32,110,117,109,98,101,114,32,111,102,115,117,112,112,111,114,116,32,102,111,114,101,120,112,108,111,114,97,116,105,111,110,114,101,99,111,103,110,105,116,105,111,110,112,114,101,100,101,99,101,115,115,111,114,60,105,109],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+245808);allocate([103,32,115,114,99,61,34,47,60,104,49,32,99,108,97,115,115,61,34,112,117,98,108,105,99,97,116,105,111,110,109,97,121,32,97,108,115,111,32,98,101,115,112,101,99,105,97,108,105,122,101,100,60,47,102,105,101,108,100,115,101,116,62,112,114,111,103,114,101,115,115,105,118,101,109,105,108,108,105,111,110,115,32,111,102,115,116,97,116,101,115,32,116,104,97,116,101,110,102,111,114,99,101,109,101,110,116,97,114,111,117,110,100,32,116,104,101,32,111,110,101,32,97,110,111,116,104,101,114,46,112,97,114,101,110,116,78,111,100,101,97,103,114,105,99,117,108,116,117,114,101,65,108,116,101,114,110,97,116,105,118,101,114,101,115,101,97,114,99,104,101,114,115,116,111,119,97,114,100,115,32,116,104,101,77,111,115,116,32,111,102,32,116,104,101,109,97,110,121,32,111,116,104,101,114,32,40,101,115,112,101,99,105,97,108,108,121,60,116,100,32,119,105,100,116,104,61,34,59,119,105,100,116,104,58,49,48,48,37,105,110,100,101,112,101,110,100,101,110,116,60,104,51,32,99,108,97,115,115,61,34,32,111,110,99,104,97,110,103,101,61,34,41,46,97,100,100,67,108,97,115,115,40,105,110,116,101,114,97,99,116,105,111,110,79,110,101,32,111,102,32,116,104,101,32,100,97,117,103,104,116,101,114,32,111,102,97,99,99,101,115,115,111,114,105,101,115,98,114,97,110,99,104,101,115,32,111,102,13,10,60,100,105,118,32,105,100,61,34,116,104,101,32,108,97,114,103,101,115,116,100,101,99,108,97,114,97,116,105,111,110,114,101,103,117,108,97,116,105,111,110,115,73,110,102,111,114,109,97,116,105,111,110,116,114,97,110,115,108,97,116,105,111,110,100,111,99,117,109,101,110,116,97,114,121,105,110,32,111,114,100,101,114,32,116,111,34,62,10,60,104,101,97,100,62,10,60,34,32,104,101,105,103,104,116,61,34,49,97,99,114,111,115,115,32,116,104,101,32,111,114,105,101,110,116,97,116,105,111,110,41,59,60,47,115,99,114,105,112,116,62,105,109,112,108,101,109,101,110,116,101,100,99,97,110,32,98,101,32,115,101,101,110,116,104,101,114,101,32,119,97,115,32,97,100,101,109,111,110,115,116,114,97,116,101,99,111,110,116,97,105,110,101,114,34,62,99,111,110,110,101,99,116,105,111,110,115,116,104,101,32,66,114,105,116,105,115,104,119,97,115,32,119,114,105,116,116,101,110,33,105,109,112,111,114,116,97,110,116,59,112,120,59,32,109,97,114,103,105,110,45,102,111,108,108,111,119,101,100,32,98,121,97,98,105,108,105,116,121,32,116,111,32,99,111,109,112,108,105,99,97,116,101,100,100,117,114,105,110,103,32,116,104,101,32,105,109,109,105,103,114,97,116,105,111,110,97,108,115,111,32,99,97,108,108,101,100,60,104,52,32,99,108,97,115,115,61,34,100,105,115,116,105,110,99,116,105,111,110,114,101,112,108,97,99,101,100,32,98,121,103,111,118,101,114,110,109,101,110,116,115,108,111,99,97,116,105,111,110,32,111,102,105,110,32,78,111,118,101,109,98,101,114,119,104,101,116,104,101,114,32,116,104,101,60,47,112,62,10,60,47,100,105,118,62,97,99,113,117,105,115,105,116,105,111,110,99,97,108,108,101,100,32,116,104,101,32,112,101,114,115,101,99,117,116,105,111,110,100,101,115,105,103,110,97,116,105,111,110,123,102,111,110,116,45,115,105,122,101,58,97,112,112,101,97,114,101,100,32,105,110,105,110,118,101,115,116,105,103,97,116,101,101,120,112,101,114,105,101,110,99,101,100,109,111,115,116,32,108,105,107,101,108,121,119,105,100,101,108,121,32,117,115,101,100,100,105,115,99,117,115,115,105,111,110,115,112,114,101,115,101,110,99,101,32,111,102,32,40,100,111,99,117,109,101,110,116,46,101,120,116,101,110,115,105,118,101,108,121,73,116,32,104,97,115,32,98,101,101,110,105,116,32,100,111,101,115,32,110,111,116,99,111,110,116,114,97,114,121,32,116,111,105,110,104,97,98,105,116,97,110,116,115,105,109,112,114,111,118,101,109,101,110,116,115,99,104,111,108,97,114,115,104,105,112,99,111,110,115,117,109,112,116,105,111,110,105,110,115,116,114,117,99,116,105,111,110,102,111,114,32,101,120,97,109,112,108,101,111,110,101,32,111,114,32,109,111,114,101,112,120,59,32,112,97,100,100,105,110,103,116,104,101,32,99,117,114,114,101,110,116,97,32,115,101,114,105,101,115,32,111,102,97,114,101,32,117,115,117,97,108,108,121,114,111,108,101,32,105,110,32,116,104,101,112,114,101,118,105,111,117,115,108,121,32,100,101,114,105,118,97,116,105,118,101,115,101,118,105,100,101,110,99,101,32,111,102,101,120,112,101,114,105,101,110,99,101,115,99,111,108,111,114,115,99,104,101,109,101,115,116,97,116,101,100,32,116,104,97,116,99,101,114,116,105,102,105,99,97,116,101,60,47,97,62,60,47,100,105,118,62,10,32,115,101,108,101,99,116,101,100,61,34,104,105,103,104,32,115,99,104,111,111,108,114,101,115,112,111,110,115,101,32,116,111,99,111,109,102,111,114,116,97,98,108,101,97,100,111,112,116,105,111,110,32,111,102,116,104,114,101,101,32,121,101,97,114,115,116,104,101,32,99,111,117,110,116,114,121,105,110,32,70,101,98,114,117,97,114,121,115,111,32,116,104,97,116,32,116,104,101,112,101,111,112,108,101,32,119,104,111,32,112,114,111,118,105,100,101,100,32,98,121,60,112,97,114,97,109,32,110,97,109,101,97,102,102,101,99,116,101,100,32,98,121,105,110,32,116,101,114,109,115,32,111,102,97,112,112,111,105,110,116,109,101,110,116,73,83,79,45,56,56,53,57,45,49,34,119,97,115,32,98,111,114,110,32,105,110,104,105,115,116,111,114,105,99,97,108,32,114,101,103,97,114,100,101,100,32,97,115,109,101,97,115,117,114,101,109,101,110,116,105,115,32,98,97,115,101,100,32,111,110,32,97,110,100,32,111,116,104,101,114,32,58,32,102,117,110,99,116,105,111,110,40,115,105,103,110,105,102,105,99,97,110,116,99,101,108,101,98,114,97,116,105,111,110,116,114,97,110,115,109,105,116,116,101,100,47,106,115,47,106,113,117,101,114,121,46,105,115,32,107,110,111,119,110,32,97,115,116,104,101,111,114,101,116,105,99,97,108,32,116,97,98,105,110,100,101,120,61,34,105,116,32,99,111,117,108,100,32,98,101,60,110,111,115,99,114,105,112,116,62,10,104,97,118,105,110,103,32,98,101,101,110,13,10,60,104,101,97,100,62,13,10,60,32,38,113,117,111,116,59,84,104,101,32,99,111,109,112,105,108,97,116,105,111,110,104,101,32,104,97,100,32,98,101,101,110,112,114,111,100,117,99,101,100,32,98,121,112,104,105,108,111,115,111,112,104,101,114,99,111,110,115,116,114,117,99,116,101,100,105,110,116,101,110,100,101,100,32,116,111,97,109,111,110,103,32,111,116,104,101,114,99,111,109,112,97,114,101,100,32,116,111,116,111,32,115,97,121,32,116,104,97,116,69,110,103,105,110,101,101,114,105,110,103,97,32,100,105,102,102,101,114,101,110,116,114,101,102,101,114,114,101,100,32,116,111,100,105,102,102,101,114,101,110,99,101,115,98,101,108,105,101,102,32,116,104,97,116,112,104,111,116,111,103,114,97,112,104,115,105,100,101,110,116,105,102,121,105,110,103,72,105,115,116,111,114,121,32,111,102,32,82,101,112,117,98,108,105,99,32,111,102,110,101,99,101,115,115,97,114,105,108,121,112,114,111,98,97,98,105,108,105,116,121,116,101,99,104,110,105,99,97,108,108,121,108,101,97,118,105,110,103,32,116,104,101,115,112,101,99,116,97,99,117,108,97,114,102,114,97,99,116,105,111,110,32,111,102,101,108,101,99,116,114,105,99,105,116,121,104,101,97,100,32,111,102,32,116,104,101,114,101,115,116,97,117,114,97,110,116,115,112,97,114,116,110,101,114,115,104,105,112,101,109,112,104,97,115,105,115,32,111,110,109,111,115,116,32,114,101,99,101,110,116,115,104,97,114,101,32,119,105,116,104,32,115,97,121,105,110,103,32,116,104,97,116,102,105,108,108,101,100,32,119,105,116,104,100,101,115,105,103,110,101,100,32,116,111,105,116,32,105,115,32,111,102,116,101,110,34,62,60,47,105,102,114,97,109,101,62,97,115,32,102,111,108,108,111,119,115,58,109,101,114,103,101,100,32,119,105,116,104,116,104,114,111,117,103,104,32,116,104,101,99,111,109,109,101,114,99,105,97,108,32,112,111,105,110,116,101,100,32,111,117,116,111,112,112,111,114,116,117,110,105,116,121,118,105,101,119,32,111,102,32,116,104,101,114,101,113,117,105,114,101,109,101,110,116,100,105,118,105,115,105,111,110,32,111,102,112,114,111,103,114,97,109,109,105,110,103,104,101,32,114,101,99,101,105,118,101,100,115,101,116,73,110,116,101,114,118,97,108,34,62,60,47,115,112,97,110,62,60,47,105,110,32,78,101,119,32,89,111,114,107,97,100,100,105,116,105,111,110,97,108,32,99,111,109,112,114,101,115,115,105,111,110,10,10,60,100,105,118,32,105,100,61,34,105,110,99,111,114,112,111,114,97,116,101,59,60,47,115,99,114,105,112,116,62,60,97,116,116,97,99,104,69,118,101,110,116,98,101,99,97,109,101,32,116,104,101,32,34,32,116,97,114,103,101,116,61,34,95,99,97,114,114,105,101,100,32,111,117,116,83,111,109,101,32,111,102,32,116,104,101,115,99,105,101,110,99,101,32,97,110,100,116,104,101,32,116,105,109,101,32,111,102,67,111,110,116,97,105,110,101,114,34,62,109,97,105,110,116,97,105,110,105,110,103,67,104,114,105,115,116,111,112,104,101,114,77,117,99,104,32,111,102,32,116,104,101,119,114,105,116,105,110,103,115,32,111,102,34,32,104,101,105,103,104,116,61,34,50,115,105,122,101,32,111,102,32,116,104,101,118,101,114,115,105,111,110,32,111,102,32,109,105,120,116,117,114,101,32,111,102,32,98,101,116,119,101,101,110,32,116,104,101,69,120,97,109,112,108,101,115,32,111,102,101,100,117,99,97,116,105,111,110,97,108,99,111,109,112,101,116,105,116,105,118,101,32,111,110,115,117,98,109,105,116,61,34,100,105,114,101,99,116,111,114,32,111,102,100,105,115,116,105,110,99,116,105,118,101,47,68,84,68,32,88,72,84,77,76,32,114,101,108,97,116,105,110,103,32,116,111,116,101,110,100,101,110,99,121,32,116,111,112,114,111,118,105,110,99,101,32,111,102,119,104,105,99,104,32,119,111,117,108,100,100,101,115,112,105,116,101,32,116,104,101,115,99,105,101,110,116,105,102,105,99,32,108,101,103,105,115,108,97,116,117,114,101,46,105,110,110,101,114,72,84,77,76,32,97,108,108,101,103,97,116,105,111,110,115,65,103,114,105,99,117,108,116,117,114,101,119,97,115,32,117,115,101,100,32,105,110,97,112,112,114,111,97,99,104,32,116,111,105,110,116,101,108,108,105,103,101,110,116,121,101,97,114,115,32,108,97,116,101,114,44,115,97,110,115,45,115,101,114,105,102,100,101,116,101,114,109,105,110,105,110,103,80,101,114,102,111,114,109,97,110,99,101,97,112,112,101,97,114,97,110,99,101,115,44,32,119,104,105,99,104,32,105,115,32,102,111,117,110,100,97,116,105,111,110,115,97,98,98,114,101,118,105,97,116,101,100,104,105,103,104,101,114,32,116,104,97,110,115,32,102,114,111,109,32,116,104,101,32,105,110,100,105,118,105,100,117,97,108,32,99,111,109,112,111,115,101,100,32,111,102,115,117,112,112,111,115,101,100,32,116,111,99,108,97,105,109,115,32,116,104,97,116,97,116,116,114,105,98,117,116,105,111,110,102,111,110,116,45,115,105,122,101,58,49,101,108,101,109,101,110,116,115,32,111,102,72,105,115,116,111,114,105,99,97,108,32,104,105,115,32,98,114,111,116,104,101,114,97,116,32,116,104,101,32,116,105,109,101,97,110,110,105,118,101,114,115,97,114,121,103,111,118,101,114,110,101,100,32,98,121,114,101,108,97,116,101,100,32,116,111,32,117,108,116,105,109,97,116,101,108,121,32,105,110,110,111,118,97,116,105,111,110,115,105,116,32,105,115,32,115,116,105,108,108,99,97,110,32,111,110,108,121,32,98,101,100,101,102,105,110,105,116,105,111,110,115,116,111,71,77,84,83,116,114,105,110,103,65,32,110,117,109,98,101,114,32,111,102,105,109,103,32,99,108,97,115,115,61,34,69,118,101,110,116,117,97,108,108,121,44,119,97,115,32,99,104,97,110,103,101,100,111,99,99,117,114,114,101,100,32,105,110,110,101,105,103,104,98,111,114,105,110,103,100,105,115,116,105,110,103,117,105,115,104,119,104,101,110,32,104,101,32,119,97,115,105,110,116,114,111,100,117,99,105,110,103,116,101,114,114,101,115,116,114,105,97,108,77,97,110,121,32,111,102,32,116,104,101,97,114,103,117,101,115,32,116,104,97,116,97,110,32,65,109,101,114,105,99,97,110,99,111,110,113,117,101,115,116,32,111,102,119,105,100,101,115,112,114,101,97,100,32,119,101,114,101,32,107,105,108,108,101,100,115,99,114,101,101,110,32,97,110,100,32,73,110,32,111,114,100,101,114,32,116,111,101,120,112,101,99,116,101,100,32,116,111,100,101,115,99,101,110,100,97,110,116,115,97,114,101,32,108,111,99,97,116,101,100,108,101,103,105,115,108,97,116,105,118,101,103,101,110,101,114,97,116,105,111,110,115,32,98,97,99,107,103,114,111,117,110,100,109,111,115,116,32,112,101,111,112,108,101,121,101,97,114,115,32,97,102,116,101,114,116,104,101,114,101,32,105,115,32,110,111,116,104,101,32,104,105,103,104,101,115,116,102,114,101,113,117,101,110,116,108,121,32,116,104,101,121,32,100,111,32,110,111,116,97,114,103,117,101,100,32,116,104,97,116,115,104,111,119,101,100,32,116,104,97,116,112,114,101,100,111,109,105,110,97,110,116,116,104,101,111,108,111,103,105,99,97,108,98,121,32,116,104,101,32,116,105,109,101,99,111,110,115,105,100,101,114,105,110,103,115,104,111,114,116,45,108,105,118,101,100,60,47,115,112,97,110,62,60,47,97,62,99,97,110,32,98,101,32,117,115,101,100,118,101,114,121,32,108,105,116,116,108,101,111,110,101,32,111,102,32,116,104,101,32,104,97,100,32,97,108,114,101,97,100,121,105,110,116,101,114,112,114,101,116,101,100,99,111,109,109,117,110,105,99,97,116,101,102,101,97,116,117,114,101,115,32,111,102,103,111,118,101,114,110,109,101,110,116,44,60,47,110,111,115,99,114,105,112,116,62,101,110,116,101,114,101,100,32,116,104,101,34,32,104,101,105,103,104,116,61,34,51,73,110,100,101,112,101,110,100,101,110,116,112,111,112,117,108,97,116,105,111,110,115,108,97,114,103,101,45,115,99,97,108,101,46,32,65,108,116,104,111,117,103,104,32,117,115,101,100,32,105,110,32,116,104,101,100,101,115,116,114,117,99,116,105,111,110,112,111,115,115,105,98,105,108,105,116,121,115,116,97,114,116,105,110,103,32,105,110,116,119,111,32,111,114,32,109,111,114,101,101,120,112,114,101,115,115,105,111,110,115,115,117,98,111,114,100,105,110,97,116,101,108,97,114,103,101,114,32,116,104,97,110,104,105,115,116,111,114,121,32,97,110,100,60,47,111,112,116,105,111,110,62,13,10,67,111,110,116,105,110,101,110,116,97,108,101,108,105,109,105,110,97,116,105,110,103,119,105,108,108,32,110,111,116,32,98,101,112,114,97,99,116,105,99,101,32,111,102,105,110,32,102,114,111,110,116,32,111,102,115,105,116,101,32,111,102,32,116,104,101,101,110,115,117,114,101,32,116,104,97,116,116,111,32,99,114,101,97,116,101,32,97,109,105,115,115,105,115,115,105,112,112,105,112,111,116,101,110,116,105,97,108,108,121,111,117,116,115,116,97,110,100,105,110,103,98,101,116,116,101,114,32,116,104,97,110,119,104,97,116,32,105,115,32,110,111,119,115,105,116,117,97,116,101,100,32,105,110,109,101,116,97,32,110,97,109,101,61,34,84,114,97,100,105,116,105,111,110,97,108,115,117,103,103,101,115,116,105,111,110,115,84,114,97,110,115,108,97,116,105,111,110,116,104,101,32,102,111,114,109,32,111,102,97,116,109,111,115,112,104,101,114,105,99,105,100,101,111,108,111,103,105,99,97,108,101,110,116,101,114,112,114,105,115,101,115,99,97,108,99,117,108,97,116,105,110,103,101,97,115,116,32,111,102,32,116,104,101,114,101,109,110,97,110,116,115,32,111,102,112,108,117,103,105,110,115,112,97,103,101,47,105,110,100,101,120,46,112,104,112,63,114,101,109,97,105,110,101,100,32,105,110,116,114,97,110,115,102,111,114,109,101,100,72,101,32,119,97,115,32,97,108,115,111,119,97,115,32,97,108,114,101,97,100,121,115,116,97,116,105,115,116,105,99,97,108,105,110,32,102,97,118,111,114,32,111,102,77,105,110,105,115,116,114,121,32,111,102,109,111,118,101,109,101,110,116,32,111,102,102,111,114,109,117,108,97,116,105,111,110,105,115,32,114,101,113,117,105,114,101,100,60,108,105,110,107,32,114,101,108,61,34,84,104,105,115,32,105,115,32,116,104,101,32,60,97,32,104,114,101,102,61,34,47,112,111,112,117,108,97,114,105,122,101,100,105,110,118,111,108,118,101,100,32,105,110,97,114,101,32,117,115,101,100,32,116,111,97,110,100,32,115,101,118,101,114,97,108,109,97,100,101,32,98,121,32,116,104,101,115,101,101,109,115,32,116,111,32,98,101,108,105,107,101,108,121,32,116,104,97,116,80,97,108,101,115,116,105,110,105,97,110,110,97,109,101,100,32,97,102,116,101,114,105,116,32,104,97,100,32,98,101,101,110,109,111,115,116,32,99,111,109,109,111,110,116,111,32,114,101,102,101,114,32,116,111,98,117,116,32,116,104,105,115,32,105,115,99,111,110,115,101,99,117,116,105,118,101,116,101,109,112,111,114,97,114,105,108,121,73,110,32,103,101,110,101,114,97,108,44,99,111,110,118,101,110,116,105,111,110,115,116,97,107,101,115,32,112,108,97,99,101,115,117,98,100,105,118,105,115,105,111,110,116,101,114,114,105,116,111,114,105,97,108,111,112,101,114,97,116,105,111,110,97,108,112,101,114,109,97,110,101,110,116,108,121,119,97,115,32,108,97,114,103,101,108,121,111,117,116,98,114,101,97,107,32,111,102,105,110,32,116,104,101,32,112,97,115,116,102,111,108,108,111,119,105,110,103,32,97,32,120,109,108,110,115,58,111,103,61,34,62,60,97,32,99,108,97,115,115,61,34,99,108,97,115,115,61,34,116,101,120,116,67,111,110,118,101,114,115,105,111,110,32,109,97,121,32,98,101,32,117,115,101,100,109,97,110,117,102,97,99,116,117,114,101,97,102,116,101,114,32,98,101,105,110,103,99,108,101,97,114,102,105,120,34,62,10,113,117,101,115,116,105,111,110,32,111,102,119,97,115,32,101,108,101,99,116,101,100,116,111,32,98,101,99,111,109,101,32,97,98,101,99,97,117,115,101,32,111,102,32,115,111,109,101,32,112,101,111,112,108,101,105,110,115,112,105,114,101,100,32,98,121,115,117,99,99,101,115,115,102,117,108,32,97,32,116,105,109,101,32,119,104,101,110,109,111,114,101,32,99,111,109,109,111,110,97,109,111,110,103,115,116,32,116,104,101,97,110,32,111,102,102,105,99,105,97,108,119,105,100,116,104,58,49,48,48,37,59,116,101,99,104,110,111,108,111,103,121,44,119,97,115,32,97,100,111,112,116,101,100,116,111,32,107,101,101,112,32,116,104,101,115,101,116,116,108,101,109,101,110,116,115,108,105,118,101,32,98,105,114,116,104,115,105,110,100,101,120,46,104,116,109,108,34,67,111,110,110,101,99,116,105,99,117,116,97,115,115,105,103,110,101,100,32,116,111,38,97,109,112,59,116,105,109,101,115,59,97,99,99,111,117,110,116,32,102,111,114,97,108,105,103,110,61,114,105,103,104,116,116,104,101,32,99,111,109,112,97,110,121,97,108,119,97,121,115,32,98,101,101,110,114,101,116,117,114,110,101,100,32,116,111,105,110,118,111,108,118,101,109,101,110,116,66,101,99,97,117,115,101,32,116,104,101,116,104,105,115,32,112,101,114,105,111,100,34,32,110,97,109,101,61,34,113,34,32,99,111,110,102,105,110,101,100,32,116,111,97,32,114,101,115,117,108,116,32,111,102,118,97,108,117,101,61,34,34,32,47,62,105,115,32,97,99,116,117,97,108,108,121,69,110,118,105,114,111,110,109,101,110,116,13,10,60,47,104,101,97,100,62,13,10,67,111,110,118,101,114,115,101,108,121,44,62,10,60,100,105,118,32,105,100,61,34,48,34,32,119,105,100,116,104,61,34,49,105,115,32,112,114,111,98,97,98,108,121,104,97,118,101,32,98,101,99,111,109,101,99,111,110,116,114,111,108,108,105,110,103,116,104,101,32,112,114,111,98,108,101,109,99,105,116,105,122,101,110,115,32,111,102,112,111,108,105,116,105,99,105,97,110,115,114,101,97,99,104,101,100,32,116,104,101,97,115,32,101,97,114,108,121,32,97,115,58,110,111,110,101,59,32,111,118,101,114,60,116,97,98,108,101,32,99,101,108,108,118,97,108,105,100,105,116,121,32,111,102,100,105,114,101,99,116,108,121,32,116,111,111,110,109,111,117,115,101,100,111,119,110,119,104,101,114,101,32,105,116,32,105,115,119,104,101,110,32,105,116,32,119,97,115,109,101,109,98,101,114,115,32,111,102,32,114,101,108,97,116,105,111,110,32,116,111,97,99,99,111,109,109,111,100,97,116,101,97,108,111,110,103,32,119,105,116,104,32,73,110,32,116,104,101,32,108,97,116,101,116,104,101,32,69,110,103,108,105,115,104,100,101,108,105,99,105,111,117,115,34,62,116,104,105,115,32,105,115,32,110,111,116,116,104,101,32,112,114,101,115,101,110,116,105,102,32,116,104,101,121,32,97,114,101,97,110,100,32,102,105,110,97,108,108,121,97,32,109,97,116,116,101,114,32,111,102,13,10,9,60,47,100,105,118,62,13,10,13,10,60,47,115,99,114,105,112,116,62,102,97,115,116,101,114,32,116,104,97,110,109,97,106,111,114,105,116,121,32,111,102,97,102,116,101,114,32,119,104,105,99,104,99,111,109,112,97,114,97,116,105,118,101,116,111,32,109,97,105,110,116,97,105,110,105,109,112,114,111,118,101,32,116,104,101,97,119,97,114,100,101,100,32,116,104,101,101,114,34,32,99,108,97,115,115,61,34,102,114,97,109,101,98,111,114,100,101,114,114,101,115,116,111,114,97,116,105,111,110,105,110,32,116,104,101,32,115,97,109,101,97,110,97,108,121,115,105,115,32,111,102,116,104,101,105,114,32,102,105,114,115,116,68,117,114,105,110,103,32,116,104,101,32,99,111,110,116,105,110,101,110,116,97,108,115,101,113,117,101,110,99,101,32,111,102,102,117,110,99,116,105,111,110,40,41,123,102,111,110,116,45,115,105,122,101,58,32,119,111,114,107,32,111,110,32,116,104,101,60,47,115,99,114,105,112,116,62,10,60,98,101,103,105,110,115,32,119,105,116,104,106,97,118,97,115,99,114,105,112,116,58,99,111,110,115,116,105,116,117,101,110,116,119,97,115,32,102,111,117,110,100,101,100,101,113,117,105,108,105,98,114,105,117,109,97,115,115,117,109,101,32,116,104,97,116,105,115,32,103,105,118,101,110,32,98,121,110,101,101,100,115,32,116,111,32,98,101,99,111,111,114,100,105,110,97,116,101,115,116,104,101,32,118,97,114,105,111,117,115,97,114,101,32,112,97,114,116,32,111,102,111,110,108,121,32,105,110,32,116,104,101,115,101,99,116,105,111,110,115,32,111,102,105,115,32,97,32,99,111,109,109,111,110,116,104,101,111,114,105,101,115,32,111,102,100,105,115,99,111,118,101,114,105,101,115,97,115,115,111,99,105,97,116,105,111,110,101,100,103,101,32,111,102,32,116,104,101,115,116,114,101,110,103,116,104,32,111,102,112,111,115,105,116,105,111,110,32,105,110,112,114,101,115,101,110,116,45,100,97,121,117,110,105,118,101,114,115,97,108,108,121,116,111,32,102,111,114,109,32,116,104,101,98,117,116,32,105,110,115,116,101,97,100,99,111,114,112,111,114,97,116,105,111,110,97,116,116,97,99,104,101,100,32,116,111,105,115,32,99,111,109,109,111,110,108,121,114,101,97,115,111,110,115,32,102,111,114,32,38,113,117,111,116,59,116,104,101,32,99,97,110,32,98,101,32,109,97,100,101,119,97,115,32,97,98,108,101,32,116,111,119,104,105,99,104,32,109,101,97,110,115,98,117,116,32,100,105,100,32,110,111,116,111,110,77,111,117,115,101,79,118,101,114,97,115,32,112,111,115,115,105,98,108,101,111,112,101,114,97,116,101,100,32,98,121,99,111,109,105,110,103,32,102,114,111,109,116,104,101,32,112,114,105,109,97,114,121,97,100,100,105,116,105,111,110,32,111,102,102,111,114,32,115,101,118,101,114,97,108,116,114,97,110,115,102,101,114,114,101,100,97,32,112,101,114,105,111,100,32,111,102,97,114,101,32,97,98,108,101,32,116,111,104,111,119,101,118,101,114,44,32,105,116,115,104,111,117,108,100,32,104,97,118,101,109,117,99,104,32,108,97,114,103,101,114,10,9,60,47,115,99,114,105,112,116,62,97,100,111,112,116,101,100,32,116,104,101,112,114,111,112,101,114,116,121,32,111,102,100,105,114,101,99,116,101,100,32,98,121,101,102,102,101,99,116,105,118,101,108,121,119,97,115,32,98,114,111,117,103,104,116,99,104,105,108,100,114,101,110,32,111,102,80,114,111,103,114,97,109,109,105,110,103,108,111,110,103,101,114,32,116,104,97,110,109,97,110,117,115,99,114,105,112,116,115,119,97,114,32,97,103,97,105,110,115,116,98,121,32,109,101,97,110,115,32,111,102,97,110,100,32,109,111,115,116,32,111,102,115,105,109,105,108,97,114,32,116,111,32,112,114,111,112,114,105,101,116,97,114,121,111,114,105,103,105,110,97,116,105,110,103,112,114,101,115,116,105,103,105,111,117,115,103,114,97,109,109,97,116,105,99,97,108,101,120,112,101,114,105,101,110,99,101,46,116,111,32,109,97,107,101,32,116,104,101,73,116,32,119,97,115,32,97,108,115,111,105,115,32,102,111,117,110,100,32,105,110,99,111,109,112,101,116,105,116,111,114,115,105,110,32,116,104,101,32,85,46,83,46,114,101,112,108,97,99,101,32,116,104,101,98,114,111,117,103,104,116,32,116,104,101,99,97,108,99,117,108,97,116,105,111,110,102,97,108,108,32,111,102,32,116,104,101,116,104,101,32,103,101,110,101,114,97,108,112,114,97,99,116,105,99,97,108,108,121,105,110,32,104,111,110,111,114,32,111,102,114,101,108,101,97,115,101,100,32,105,110,114,101,115,105,100,101,110,116,105,97,108,97,110,100,32,115,111,109,101,32,111,102,107,105,110,103,32,111,102,32,116,104,101,114,101,97,99,116,105,111,110,32,116,111,49,115,116,32,69,97,114,108,32,111,102,99,117,108,116,117,114,101,32,97,110,100,112,114,105,110,99,105,112,97,108,108,121,60,47,116,105,116,108,101,62,10,32,32,116,104,101,121,32,99,97,110,32,98,101,98,97,99,107,32,116,111,32,116,104,101,115,111,109,101,32,111,102,32,104,105,115,101,120,112,111,115,117,114,101,32,116,111,97,114,101,32,115,105,109,105,108,97,114,102,111,114,109,32,111,102,32,116,104,101,97,100,100,70,97,118,111,114,105,116,101,99,105,116,105,122,101,110,115,104,105,112,112,97,114,116,32,105,110,32,116,104,101,112,101,111,112,108,101,32,119,105,116,104,105,110,32,112,114,97,99,116,105,99,101,116,111,32,99,111,110,116,105,110,117,101,38,97,109,112,59,109,105,110,117,115,59,97,112,112,114,111,118,101,100,32,98,121,32,116,104,101,32,102,105,114,115,116,32,97,108,108,111,119,101,100,32,116,104,101,97,110,100,32,102,111,114,32,116,104,101,102,117,110,99,116,105,111,110,105,110,103,112,108,97,121,105,110,103,32,116,104,101,115,111,108,117,116,105,111,110,32,116,111,104,101,105,103,104,116,61,34,48,34,32,105,110,32,104,105,115,32,98,111,111,107,109,111,114,101,32,116,104,97,110,32,97,102,111,108,108,111,119,115,32,116,104,101,99,114,101,97,116,101,100,32,116,104,101,112,114,101,115,101,110,99,101,32,105,110,38,110,98,115,112,59,60,47,116,100,62,110,97,116,105,111,110,97,108,105,115,116,116,104,101,32,105,100,101,97,32,111,102,97,32,99,104,97,114,97,99,116,101,114,119,101,114,101,32,102,111,114,99,101,100,32,99,108,97,115,115,61,34,98,116,110,100,97,121,115,32,111,102,32,116,104,101,102,101,97,116,117,114,101,100,32,105,110,115,104,111,119,105,110,103,32,116,104,101,105,110,116,101,114,101,115,116,32,105,110,105,110,32,112,108,97,99,101,32,111,102,116,117,114,110,32,111,102,32,116,104,101,116,104,101,32,104,101,97,100,32,111,102,76,111,114,100,32,111,102,32,116,104,101,112,111,108,105,116,105,99,97,108,108,121,104,97,115,32,105,116,115,32,111,119,110,69,100,117,99,97,116,105,111,110,97,108,97,112,112,114,111,118,97,108,32,111,102,115,111,109,101,32,111,102,32,116,104,101,101,97,99,104,32,111,116,104,101,114,44,98,101,104,97,118,105,111,114,32,111,102,97,110,100,32,98,101,99,97,117,115,101,97,110,100,32,97,110,111,116,104,101,114,97,112,112,101,97,114,101,100,32,111,110,114,101,99,111,114,100,101,100,32,105,110,98,108,97,99,107,38,113,117,111,116,59,109,97,121,32,105,110,99,108,117,100,101,116,104,101,32,119,111,114,108,100,39,115,99,97,110,32,108,101,97,100,32,116,111,114,101,102,101,114,115,32,116,111,32,97,98,111,114,100,101,114,61,34,48,34,32,103,111,118,101,114,110,109,101,110,116,32,119,105,110,110,105,110,103,32,116,104,101,114,101,115,117,108,116,101,100,32,105,110,32,119,104,105,108,101,32,116,104,101,32,87,97,115,104,105,110,103,116,111,110,44,116,104,101,32,115,117,98,106,101,99,116,99,105,116,121,32,105,110,32,116,104,101,62,60,47,100,105,118,62,13,10,9,9,114,101,102,108,101,99,116,32,116,104,101,116,111,32,99,111,109,112,108,101,116,101,98,101,99,97,109,101,32,109,111,114,101,114,97,100,105,111,97,99,116,105,118,101,114,101,106,101,99,116,101,100,32,98,121,119,105,116,104,111,117,116,32,97,110,121,104,105,115,32,102,97,116,104,101,114,44,119,104,105,99,104,32,99,111,117,108,100,99,111,112,121,32,111,102,32,116,104,101,116,111,32,105,110,100,105,99,97,116,101,97,32,112,111,108,105,116,105,99,97,108,97,99,99,111,117,110,116,115,32,111,102,99,111,110,115,116,105,116,117,116,101,115,119,111,114,107,101,100,32,119,105,116,104,101,114,60,47,97,62,60,47,108,105,62,111,102,32,104,105,115,32,108,105,102,101,97,99,99,111,109,112,97,110,105,101,100,99,108,105,101,110,116,87,105,100,116,104,112,114,101,118,101,110,116,32,116,104,101,76,101,103,105,115,108,97,116,105,118,101,100,105,102,102,101,114,101,110,116,108,121,116,111,103,101,116,104,101,114,32,105,110,104,97,115,32,115,101,118,101,114,97,108,102,111,114,32,97,110,111,116,104,101,114,116,101,120,116,32,111,102,32,116,104,101,102,111,117,110,100,101,100,32,116,104,101,101,32,119,105,116,104,32,116,104,101,32,105,115,32,117,115,101,100,32,102,111,114,99,104,97,110,103,101,100,32,116,104,101,117,115,117,97,108,108,121,32,116,104,101,112,108,97,99,101,32,119,104,101,114,101,119,104,101,114,101,97,115,32,116,104,101,62,32,60,97,32,104,114,101,102,61,34,34,62,60,97,32,104,114,101,102,61,34,116,104,101,109,115,101,108,118,101,115,44,97,108,116,104,111,117,103,104,32,104,101,116,104,97,116,32,99,97,110,32,98,101,116,114,97,100,105,116,105,111,110,97,108,114,111,108,101,32,111,102,32,116,104,101,97,115,32,97,32,114,101,115,117,108,116,114,101,109,111,118,101,67,104,105,108,100,100,101,115,105,103,110,101,100,32,98,121,119,101,115,116,32,111,102,32,116,104,101,83,111,109,101,32,112,101,111,112,108,101,112,114,111,100,117,99,116,105,111,110,44,115,105,100,101,32,111,102,32,116,104,101,110,101,119,115,108,101,116,116,101,114,115,117,115,101,100,32,98,121,32,116,104,101,100,111,119,110,32,116,111,32,116,104,101,97,99,99,101,112,116,101,100,32,98,121,108,105,118,101,32,105,110,32,116,104,101,97,116,116,101,109,112,116,115,32,116,111,111,117,116,115,105,100,101,32,116,104,101,102,114,101,113,117,101,110,99,105,101,115,72,111,119,101,118,101,114,44,32,105,110,112,114,111,103,114,97,109,109,101,114,115,97,116,32,108,101,97,115,116,32,105,110,97,112,112,114,111,120,105,109,97,116,101,97,108,116,104,111,117,103,104,32,105,116,119,97,115,32,112,97,114,116,32,111,102,97,110,100,32,118,97,114,105,111,117,115,71,111,118,101,114,110,111,114,32,111,102,116,104,101,32,97,114,116,105,99,108,101,116,117,114,110,101,100,32,105,110,116,111,62,60,97,32,104,114,101,102,61,34,47,116,104,101,32,101,99,111,110,111,109,121,105,115,32,116,104,101,32,109,111,115,116,109,111,115,116,32,119,105,100,101,108,121,119,111,117,108,100,32,108,97,116,101,114,97,110,100,32,112,101,114,104,97,112,115,114,105,115,101,32,116,111,32,116,104,101,111,99,99,117,114,115,32,119,104,101,110,117,110,100,101,114,32,119,104,105,99,104,99,111,110,100,105,116,105,111,110,115,46,116,104,101,32,119,101,115,116,101,114,110,116,104,101,111,114,121,32,116,104,97,116,105,115,32,112,114,111,100,117,99,101,100,116,104,101,32,99,105,116,121,32,111,102,105,110,32,119,104,105,99,104,32,104,101,115,101,101,110,32,105,110,32,116,104,101,116,104,101,32,99,101,110,116,114,97,108,98,117,105,108,100,105,110,103,32,111,102,109,97,110,121,32,111,102,32,104,105,115,97,114,101,97,32,111,102,32,116,104,101,105,115,32,116,104,101,32,111,110,108,121,109,111,115,116,32,111,102,32,116,104,101,109,97,110,121,32,111,102,32,116,104,101,116,104,101,32,87,101,115,116,101,114,110,84,104,101,114,101,32,105,115,32,110,111,101,120,116,101,110,100,101,100,32,116,111,83,116,97,116,105,115,116,105,99,97,108,99,111,108,115,112,97,110,61,50,32,124,115,104,111,114,116,32,115,116,111,114,121,112,111,115,115,105,98,108,101,32,116,111,116,111,112,111,108,111,103,105,99,97,108,99,114,105,116,105,99,97,108,32,111,102,114,101,112,111,114,116,101,100,32,116,111,97,32,67,104,114,105,115,116,105,97,110,100,101,99,105,115,105,111,110,32,116,111,105,115,32,101,113,117,97,108,32,116,111,112,114,111,98,108,101,109,115,32,111,102,84,104,105,115,32,99,97,110,32,98,101,109,101,114,99,104,97,110,100,105,115,101,102,111,114,32,109,111,115,116,32,111,102,110,111,32,101,118,105,100,101,110,99,101,101,100,105,116,105,111,110,115,32,111,102,101,108,101,109,101,110,116,115,32,105,110,38,113,117,111,116,59,46,32,84,104,101,99,111,109,47,105,109,97,103,101,115,47,119,104,105,99,104,32,109,97,107,101,115,116,104,101,32,112,114,111,99,101,115,115,114,101,109,97,105,110,115,32,116,104,101,108,105,116,101,114,97,116,117,114,101,44,105,115,32,97,32,109,101,109,98,101,114,116,104,101,32,112,111,112,117,108,97,114,116,104,101,32,97,110,99,105,101,110,116,112,114,111,98,108,101,109,115,32,105,110,116,105,109,101,32,111,102,32,116,104,101,100,101,102,101,97,116,101,100,32,98,121,98,111,100,121,32,111,102,32,116,104,101,97,32,102,101,119,32,121,101,97,114,115,109,117,99,104,32,111,102,32,116,104,101,116,104,101,32,119,111,114,107,32,111,102,67,97,108,105,102,111,114,110,105,97,44,115,101,114,118,101,100,32,97,115,32,97,103,111,118,101,114,110,109,101,110,116,46,99,111,110,99,101,112,116,115,32,111,102,109,111,118,101,109,101,110,116,32,105,110,9,9,60,100,105,118,32,105,100,61,34,105,116,34,32,118,97,108,117,101,61,34,108,97,110,103,117,97,103,101,32,111,102,97,115,32,116,104,101,121,32,97,114,101,112,114,111,100,117,99,101,100,32,105,110,105,115,32,116,104,97,116,32,116,104,101,101,120,112,108,97,105,110,32,116,104,101,100,105,118,62,60,47,100,105,118,62,10,72,111,119,101,118,101,114,32,116,104,101,108,101,97,100,32,116,111,32,116,104,101,9,60,97,32,104,114,101,102,61,34,47,119,97,115,32,103,114,97,110,116,101,100,112,101,111,112,108,101,32,104,97,118,101,99,111,110,116,105,110,117,97,108,108,121,119,97,115,32,115,101,101,110,32,97,115,97,110,100,32,114,101,108,97,116,101,100,116,104,101,32,114,111,108,101,32,111,102,112,114,111,112,111,115,101,100,32,98,121,111,102,32,116,104,101,32,98,101,115,116,101,97,99,104,32,111,116,104,101,114,46,67,111,110,115,116,97,110,116,105,110,101,112,101,111,112,108,101,32,102,114,111,109,100,105,97,108,101,99,116,115,32,111,102,116,111,32,114,101,118,105,115,105,111,110,119,97,115,32,114,101,110,97,109,101,100,97,32,115,111,117,114,99,101,32,111,102,116,104,101,32,105,110,105,116,105,97,108,108,97,117,110,99,104,101,100,32,105,110,112,114,111,118,105,100,101,32,116,104,101,116,111,32,116,104,101,32,119,101,115,116,119,104,101,114,101,32,116,104,101,114,101,97,110,100,32,115,105,109,105,108,97,114,98,101,116,119,101,101,110,32,116,119,111,105,115,32,97,108,115,111,32,116,104,101,69,110,103,108,105,115,104,32,97,110,100,99,111,110,100,105,116,105,111,110,115,44,116,104,97,116,32,105,116,32,119,97,115,101,110,116,105,116,108,101,100,32,116,111,116,104,101,109,115,101,108,118,101,115,46,113,117,97,110,116,105,116,121,32,111,102,114,97,110,115,112,97,114,101,110,99,121,116,104,101,32,115,97,109,101,32,97,115,116,111,32,106,111,105,110,32,116,104,101,99,111,117,110,116,114,121,32,97,110,100,116,104,105,115,32,105,115,32,116,104,101,84,104,105,115,32,108,101,100,32,116,111,97,32,115,116,97,116,101,109,101,110,116,99,111,110,116,114,97,115,116,32,116,111,108,97,115,116,73,110,100,101,120,79,102,116,104,114,111,117,103,104,32,104,105,115,105,115,32,100,101,115,105,103,110,101,100,116,104,101,32,116,101,114,109,32,105,115,105,115,32,112,114,111,118,105,100,101,100,112,114,111,116,101,99,116,32,116,104,101,110,103,60,47,97,62,60,47,108,105,62,84,104,101,32,99,117,114,114,101,110,116,116,104,101,32,115,105,116,101,32,111,102,115,117,98,115,116,97,110,116,105,97,108,101,120,112,101,114,105,101,110,99,101,44,105,110,32,116,104,101,32,87,101,115,116,116,104,101,121,32,115,104,111,117,108,100,115,108,111,118,101,110,196,141,105,110,97,99,111,109,101,110,116,97,114,105,111,115,117,110,105,118,101,114,115,105,100,97,100,99,111,110,100,105,99,105,111,110,101,115,97,99,116,105,118,105,100,97,100,101,115,101,120,112,101,114,105,101,110,99,105,97,116,101,99,110,111,108,111,103,195,173,97,112,114,111,100,117,99,99,105,195,179,110,112,117,110,116,117,97,99,105,195,179,110,97,112,108,105,99,97,99,105,195,179,110,99,111,110,116,114,97,115,101,195,177,97,99,97,116,101,103,111,114,195,173,97,115,114,101,103,105,115,116,114,97,114,115,101,112,114,111,102,101,115,105,111,110,97,108,116,114,97,116,97,109,105,101,110,116,111,114,101,103,195,173,115,116,114,97,116,101,115,101,99,114,101,116,97,114,195,173,97,112,114,105,110,99,105,112,97,108,101,115,112,114,111,116,101,99,99,105,195,179,110,105,109,112,111,114,116,97,110,116,101,115,105,109,112,111,114,116,97,110,99,105,97,112,111,115,105,98,105,108,105,100,97,100,105,110,116,101,114,101,115,97,110,116,101,99,114,101,99,105,109,105,101,110,116,111,110,101,99,101,115,105,100,97,100,101,115,115,117,115,99,114,105,98,105,114,115,101,97,115,111,99,105,97,99,105,195,179,110,100,105,115,112,111,110,105,98,108,101,115,101,118,97,108,117,97,99,105,195,179,110,101,115,116,117,100,105,97,110,116,101,115,114,101,115,112,111,110,115,97,98,108,101,114,101,115,111,108,117,99,105,195,179,110,103,117,97,100,97,108,97,106,97,114,97,114,101,103,105,115,116,114,97,100,111,115,111,112,111,114,116,117,110,105,100,97,100,99,111,109,101,114,99,105,97,108,101,115,102,111,116,111,103,114,97,102,195,173,97,97,117,116,111,114,105,100,97,100,101,115,105,110,103,101,110,105,101,114,195,173,97,116,101,108,101,118,105,115,105,195,179,110,99,111,109,112,101,116,101,110,99,105,97,111,112,101,114,97,99,105,111,110,101,115,101,115,116,97,98,108,101,99,105,100,111,115,105,109,112,108,101,109,101,110,116,101,97,99,116,117,97,108,109,101,110,116,101,110,97,118,101,103,97,99,105,195,179,110,99,111,110,102,111,114,109,105,100,97,100,108,105,110,101,45,104,101,105,103,104,116,58,102,111,110,116,45,102,97,109,105,108,121,58,34,32,58,32,34,104,116,116,112,58,47,47,97,112,112,108,105,99,97,116,105,111,110,115,108,105,110,107,34,32,104,114,101,102,61,34,115,112,101,99,105,102,105,99,97,108,108,121,47,47,60,33,91,67,68,65,84,65,91,10,79,114,103,97,110,105,122,97,116,105,111,110,100,105,115,116,114,105,98,117,116,105,111,110,48,112,120,59,32,104,101,105,103,104,116,58,114,101,108,97,116,105,111,110,115,104,105,112,100,101,118,105,99,101,45,119,105,100,116,104,60,100,105,118,32,99,108,97,115,115,61,34,60,108,97,98,101,108,32,102,111,114,61,34,114,101,103,105,115,116,114,97,116,105,111,110,60,47,110,111,115,99,114,105,112,116,62,10,47,105,110,100,101,120,46,104,116,109,108,34,119,105,110,100,111,119,46,111,112,101,110,40,32,33,105,109,112,111,114,116,97,110,116,59,97,112,112,108,105,99,97,116,105,111,110,47,105,110,100,101,112,101,110,100,101,110,99,101,47,47,119,119,119,46,103,111,111,103,108,101,111,114,103,97,110,105,122,97,116,105,111,110,97,117,116,111,99,111,109,112,108,101,116,101,114,101,113,117,105,114,101,109,101,110,116,115,99,111,110,115,101,114,118,97,116,105,118,101,60,102,111,114,109,32,110,97,109,101,61,34,105,110,116,101,108,108,101,99,116,117,97,108,109,97,114,103,105,110,45,108,101,102,116,58,49,56,116,104,32,99,101,110,116,117,114,121,97,110,32,105,109,112,111,114,116,97,110,116,105,110,115,116,105,116,117,116,105,111,110,115,97,98,98,114,101,118,105,97,116,105,111,110,60,105,109,103,32,99,108,97,115,115,61,34,111,114,103,97,110,105,115,97,116,105,111,110,99,105,118,105,108,105,122,97,116,105,111,110,49,57,116,104,32,99,101,110,116,117,114,121,97,114,99,104,105,116,101,99,116,117,114,101,105,110,99,111,114,112,111,114,97,116,101,100,50,48,116,104,32,99,101,110,116,117,114,121,45,99,111,110,116,97,105,110,101,114,34,62,109,111,115,116,32,110,111,116,97,98,108,121,47,62,60,47,97,62,60,47,100,105,118,62,110,111,116,105,102,105,99,97,116,105,111,110,39,117,110,100,101,102,105,110,101,100,39,41,70,117,114,116,104,101,114,109,111,114,101,44,98,101,108,105,101,118,101,32,116,104,97,116,105,110,110,101,114,72,84,77,76,32,61,32,112,114,105,111,114,32,116,111,32,116,104,101,100,114,97,109,97,116,105,99,97,108,108,121,114,101,102,101,114,114,105,110,103,32,116,111,110,101,103,111,116,105,97,116,105,111,110,115,104,101,97,100,113,117,97,114,116,101,114,115,83,111,117,116],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+256048);allocate([104,32,65,102,114,105,99,97,117,110,115,117,99,99,101,115,115,102,117,108,80,101,110,110,115,121,108,118,97,110,105,97,65,115,32,97,32,114,101,115,117,108,116,44,60,104,116,109,108,32,108,97,110,103,61,34,38,108,116,59,47,115,117,112,38,103,116,59,100,101,97,108,105,110,103,32,119,105,116,104,112,104,105,108,97,100,101,108,112,104,105,97,104,105,115,116,111,114,105,99,97,108,108,121,41,59,60,47,115,99,114,105,112,116,62,10,112,97,100,100,105,110,103,45,116,111,112,58,101,120,112,101,114,105,109,101,110,116,97,108,103,101,116,65,116,116,114,105,98,117,116,101,105,110,115,116,114,117,99,116,105,111,110,115,116,101,99,104,110,111,108,111,103,105,101,115,112,97,114,116,32,111,102,32,116,104,101,32,61,102,117,110,99,116,105,111,110,40,41,123,115,117,98,115,99,114,105,112,116,105,111,110,108,46,100,116,100,34,62,13,10,60,104,116,103,101,111,103,114,97,112,104,105,99,97,108,67,111,110,115,116,105,116,117,116,105,111,110,39,44,32,102,117,110,99,116,105,111,110,40,115,117,112,112,111,114,116,101,100,32,98,121,97,103,114,105,99,117,108,116,117,114,97,108,99,111,110,115,116,114,117,99,116,105,111,110,112,117,98,108,105,99,97,116,105,111,110,115,102,111,110,116,45,115,105,122,101,58,32,49,97,32,118,97,114,105,101,116,121,32,111,102,60,100,105,118,32,115,116,121,108,101,61,34,69,110,99,121,99,108,111,112,101,100,105,97,105,102,114,97,109,101,32,115,114,99,61,34,100,101,109,111,110,115,116,114,97,116,101,100,97,99,99,111,109,112,108,105,115,104,101,100,117,110,105,118,101,114,115,105,116,105,101,115,68,101,109,111,103,114,97,112,104,105,99,115,41,59,60,47,115,99,114,105,112,116,62,60,100,101,100,105,99,97,116,101,100,32,116,111,107,110,111,119,108,101,100,103,101,32,111,102,115,97,116,105,115,102,97,99,116,105,111,110,112,97,114,116,105,99,117,108,97,114,108,121,60,47,100,105,118,62,60,47,100,105,118,62,69,110,103,108,105,115,104,32,40,85,83,41,97,112,112,101,110,100,67,104,105,108,100,40,116,114,97,110,115,109,105,115,115,105,111,110,115,46,32,72,111,119,101,118,101,114,44,32,105,110,116,101,108,108,105,103,101,110,99,101,34,32,116,97,98,105,110,100,101,120,61,34,102,108,111,97,116,58,114,105,103,104,116,59,67,111,109,109,111,110,119,101,97,108,116,104,114,97,110,103,105,110,103,32,102,114,111,109,105,110,32,119,104,105,99,104,32,116,104,101,97,116,32,108,101,97,115,116,32,111,110,101,114,101,112,114,111,100,117,99,116,105,111,110,101,110,99,121,99,108,111,112,101,100,105,97,59,102,111,110,116,45,115,105,122,101,58,49,106,117,114,105,115,100,105,99,116,105,111,110,97,116,32,116,104,97,116,32,116,105,109,101,34,62,60,97,32,99,108,97,115,115,61,34,73,110,32,97,100,100,105,116,105,111,110,44,100,101,115,99,114,105,112,116,105,111,110,43,99,111,110,118,101,114,115,97,116,105,111,110,99,111,110,116,97,99,116,32,119,105,116,104,105,115,32,103,101,110,101,114,97,108,108,121,114,34,32,99,111,110,116,101,110,116,61,34,114,101,112,114,101,115,101,110,116,105,110,103,38,108,116,59,109,97,116,104,38,103,116,59,112,114,101,115,101,110,116,97,116,105,111,110,111,99,99,97,115,105,111,110,97,108,108,121,60,105,109,103,32,119,105,100,116,104,61,34,110,97,118,105,103,97,116,105,111,110,34,62,99,111,109,112,101,110,115,97,116,105,111,110,99,104,97,109,112,105,111,110,115,104,105,112,109,101,100,105,97,61,34,97,108,108,34,32,118,105,111,108,97,116,105,111,110,32,111,102,114,101,102,101,114,101,110,99,101,32,116,111,114,101,116,117,114,110,32,116,114,117,101,59,83,116,114,105,99,116,47,47,69,78,34,32,116,114,97,110,115,97,99,116,105,111,110,115,105,110,116,101,114,118,101,110,116,105,111,110,118,101,114,105,102,105,99,97,116,105,111,110,73,110,102,111,114,109,97,116,105,111,110,32,100,105,102,102,105,99,117,108,116,105,101,115,67,104,97,109,112,105,111,110,115,104,105,112,99,97,112,97,98,105,108,105,116,105,101,115,60,33,91,101,110,100,105,102,93,45,45,62,125,10,60,47,115,99,114,105,112,116,62,10,67,104,114,105,115,116,105,97,110,105,116,121,102,111,114,32,101,120,97,109,112,108,101,44,80,114,111,102,101,115,115,105,111,110,97,108,114,101,115,116,114,105,99,116,105,111,110,115,115,117,103,103,101,115,116,32,116,104,97,116,119,97,115,32,114,101,108,101,97,115,101,100,40,115,117,99,104,32,97,115,32,116,104,101,114,101,109,111,118,101,67,108,97,115,115,40,117,110,101,109,112,108,111,121,109,101,110,116,116,104,101,32,65,109,101,114,105,99,97,110,115,116,114,117,99,116,117,114,101,32,111,102,47,105,110,100,101,120,46,104,116,109,108,32,112,117,98,108,105,115,104,101,100,32,105,110,115,112,97,110,32,99,108,97,115,115,61,34,34,62,60,97,32,104,114,101,102,61,34,47,105,110,116,114,111,100,117,99,116,105,111,110,98,101,108,111,110,103,105,110,103,32,116,111,99,108,97,105,109,101,100,32,116,104,97,116,99,111,110,115,101,113,117,101,110,99,101,115,60,109,101,116,97,32,110,97,109,101,61,34,71,117,105,100,101,32,116,111,32,116,104,101,111,118,101,114,119,104,101,108,109,105,110,103,97,103,97,105,110,115,116,32,116,104,101,32,99,111,110,99,101,110,116,114,97,116,101,100,44,10,46,110,111,110,116,111,117,99,104,32,111,98,115,101,114,118,97,116,105,111,110,115,60,47,97,62,10,60,47,100,105,118,62,10,102,32,40,100,111,99,117,109,101,110,116,46,98,111,114,100,101,114,58,32,49,112,120,32,123,102,111,110,116,45,115,105,122,101,58,49,116,114,101,97,116,109,101,110,116,32,111,102,48,34,32,104,101,105,103,104,116,61,34,49,109,111,100,105,102,105,99,97,116,105,111,110,73,110,100,101,112,101,110,100,101,110,99,101,100,105,118,105,100,101,100,32,105,110,116,111,103,114,101,97,116,101,114,32,116,104,97,110,97,99,104,105,101,118,101,109,101,110,116,115,101,115,116,97,98,108,105,115,104,105,110,103,74,97,118,97,83,99,114,105,112,116,34,32,110,101,118,101,114,116,104,101,108,101,115,115,115,105,103,110,105,102,105,99,97,110,99,101,66,114,111,97,100,99,97,115,116,105,110,103,62,38,110,98,115,112,59,60,47,116,100,62,99,111,110,116,97,105,110,101,114,34,62,10,115,117,99,104,32,97,115,32,116,104,101,32,105,110,102,108,117,101,110,99,101,32,111,102,97,32,112,97,114,116,105,99,117,108,97,114,115,114,99,61,39,104,116,116,112,58,47,47,110,97,118,105,103,97,116,105,111,110,34,32,104,97,108,102,32,111,102,32,116,104,101,32,115,117,98,115,116,97,110,116,105,97,108,32,38,110,98,115,112,59,60,47,100,105,118,62,97,100,118,97,110,116,97,103,101,32,111,102,100,105,115,99,111,118,101,114,121,32,111,102,102,117,110,100,97,109,101,110,116,97,108,32,109,101,116,114,111,112,111,108,105,116,97,110,116,104,101,32,111,112,112,111,115,105,116,101,34,32,120,109,108,58,108,97,110,103,61,34,100,101,108,105,98,101,114,97,116,101,108,121,97,108,105,103,110,61,99,101,110,116,101,114,101,118,111,108,117,116,105,111,110,32,111,102,112,114,101,115,101,114,118,97,116,105,111,110,105,109,112,114,111,118,101,109,101,110,116,115,98,101,103,105,110,110,105,110,103,32,105,110,74,101,115,117,115,32,67,104,114,105,115,116,80,117,98,108,105,99,97,116,105,111,110,115,100,105,115,97,103,114,101,101,109,101,110,116,116,101,120,116,45,97,108,105,103,110,58,114,44,32,102,117,110,99,116,105,111,110,40,41,115,105,109,105,108,97,114,105,116,105,101,115,98,111,100,121,62,60,47,104,116,109,108,62,105,115,32,99,117,114,114,101,110,116,108,121,97,108,112,104,97,98,101,116,105,99,97,108,105,115,32,115,111,109,101,116,105,109,101,115,116,121,112,101,61,34,105,109,97,103,101,47,109,97,110,121,32,111,102,32,116,104,101,32,102,108,111,119,58,104,105,100,100,101,110,59,97,118,97,105,108,97,98,108,101,32,105,110,100,101,115,99,114,105,98,101,32,116,104,101,101,120,105,115,116,101,110,99,101,32,111,102,97,108,108,32,111,118,101,114,32,116,104,101,116,104,101,32,73,110,116,101,114,110,101,116,9,60,117,108,32,99,108,97,115,115,61,34,105,110,115,116,97,108,108,97,116,105,111,110,110,101,105,103,104,98,111,114,104,111,111,100,97,114,109,101,100,32,102,111,114,99,101,115,114,101,100,117,99,105,110,103,32,116,104,101,99,111,110,116,105,110,117,101,115,32,116,111,78,111,110,101,116,104,101,108,101,115,115,44,116,101,109,112,101,114,97,116,117,114,101,115,10,9,9,60,97,32,104,114,101,102,61,34,99,108,111,115,101,32,116,111,32,116,104,101,101,120,97,109,112,108,101,115,32,111,102,32,105,115,32,97,98,111,117,116,32,116,104,101,40,115,101,101,32,98,101,108,111,119,41,46,34,32,105,100,61,34,115,101,97,114,99,104,112,114,111,102,101,115,115,105,111,110,97,108,105,115,32,97,118,97,105,108,97,98,108,101,116,104,101,32,111,102,102,105,99,105,97,108,9,9,60,47,115,99,114,105,112,116,62,10,10,9,9,60,100,105,118,32,105,100,61,34,97,99,99,101,108,101,114,97,116,105,111,110,116,104,114,111,117,103,104,32,116,104,101,32,72,97,108,108,32,111,102,32,70,97,109,101,100,101,115,99,114,105,112,116,105,111,110,115,116,114,97,110,115,108,97,116,105,111,110,115,105,110,116,101,114,102,101,114,101,110,99,101,32,116,121,112,101,61,39,116,101,120,116,47,114,101,99,101,110,116,32,121,101,97,114,115,105,110,32,116,104,101,32,119,111,114,108,100,118,101,114,121,32,112,111,112,117,108,97,114,123,98,97,99,107,103,114,111,117,110,100,58,116,114,97,100,105,116,105,111,110,97,108,32,115,111,109,101,32,111,102,32,116,104,101,32,99,111,110,110,101,99,116,101,100,32,116,111,101,120,112,108,111,105,116,97,116,105,111,110,101,109,101,114,103,101,110,99,101,32,111,102,99,111,110,115,116,105,116,117,116,105,111,110,65,32,72,105,115,116,111,114,121,32,111,102,115,105,103,110,105,102,105,99,97,110,116,32,109,97,110,117,102,97,99,116,117,114,101,100,101,120,112,101,99,116,97,116,105,111,110,115,62,60,110,111,115,99,114,105,112,116,62,60,99,97,110,32,98,101,32,102,111,117,110,100,98,101,99,97,117,115,101,32,116,104,101,32,104,97,115,32,110,111,116,32,98,101,101,110,110,101,105,103,104,98,111,117,114,105,110,103,119,105,116,104,111,117,116,32,116,104,101,32,97,100,100,101,100,32,116,111,32,116,104,101,9,60,108,105,32,99,108,97,115,115,61,34,105,110,115,116,114,117,109,101,110,116,97,108,83,111,118,105,101,116,32,85,110,105,111,110,97,99,107,110,111,119,108,101,100,103,101,100,119,104,105,99,104,32,99,97,110,32,98,101,110,97,109,101,32,102,111,114,32,116,104,101,97,116,116,101,110,116,105,111,110,32,116,111,97,116,116,101,109,112,116,115,32,116,111,32,100,101,118,101,108,111,112,109,101,110,116,115,73,110,32,102,97,99,116,44,32,116,104,101,60,108,105,32,99,108,97,115,115,61,34,97,105,109,112,108,105,99,97,116,105,111,110,115,115,117,105,116,97,98,108,101,32,102,111,114,109,117,99,104,32,111,102,32,116,104,101,32,99,111,108,111,110,105,122,97,116,105,111,110,112,114,101,115,105,100,101,110,116,105,97,108,99,97,110,99,101,108,66,117,98,98,108,101,32,73,110,102,111,114,109,97,116,105,111,110,109,111,115,116,32,111,102,32,116,104,101,32,105,115,32,100,101,115,99,114,105,98,101,100,114,101,115,116,32,111,102,32,116,104,101,32,109,111,114,101,32,111,114,32,108,101,115,115,105,110,32,83,101,112,116,101,109,98,101,114,73,110,116,101,108,108,105,103,101,110,99,101,115,114,99,61,34,104,116,116,112,58,47,47,112,120,59,32,104,101,105,103,104,116,58,32,97,118,97,105,108,97,98,108,101,32,116,111,109,97,110,117,102,97,99,116,117,114,101,114,104,117,109,97,110,32,114,105,103,104,116,115,108,105,110,107,32,104,114,101,102,61,34,47,97,118,97,105,108,97,98,105,108,105,116,121,112,114,111,112,111,114,116,105,111,110,97,108,111,117,116,115,105,100,101,32,116,104,101,32,97,115,116,114,111,110,111,109,105,99,97,108,104,117,109,97,110,32,98,101,105,110,103,115,110,97,109,101,32,111,102,32,116,104,101,32,97,114,101,32,102,111,117,110,100,32,105,110,97,114,101,32,98,97,115,101,100,32,111,110,115,109,97,108,108,101,114,32,116,104,97,110,97,32,112,101,114,115,111,110,32,119,104,111,101,120,112,97,110,115,105,111,110,32,111,102,97,114,103,117,105,110,103,32,116,104,97,116,110,111,119,32,107,110,111,119,110,32,97,115,73,110,32,116,104,101,32,101,97,114,108,121,105,110,116,101,114,109,101,100,105,97,116,101,100,101,114,105,118,101,100,32,102,114,111,109,83,99,97,110,100,105,110,97,118,105,97,110,60,47,97,62,60,47,100,105,118,62,13,10,99,111,110,115,105,100,101,114,32,116,104,101,97,110,32,101,115,116,105,109,97,116,101,100,116,104,101,32,78,97,116,105,111,110,97,108,60,100,105,118,32,105,100,61,34,112,97,103,114,101,115,117,108,116,105,110,103,32,105,110,99,111,109,109,105,115,115,105,111,110,101,100,97,110,97,108,111,103,111,117,115,32,116,111,97,114,101,32,114,101,113,117,105,114,101,100,47,117,108,62,10,60,47,100,105,118,62,10,119,97,115,32,98,97,115,101,100,32,111,110,97,110,100,32,98,101,99,97,109,101,32,97,38,110,98,115,112,59,38,110,98,115,112,59,116,34,32,118,97,108,117,101,61,34,34,32,119,97,115,32,99,97,112,116,117,114,101,100,110,111,32,109,111,114,101,32,116,104,97,110,114,101,115,112,101,99,116,105,118,101,108,121,99,111,110,116,105,110,117,101,32,116,111,32,62,13,10,60,104,101,97,100,62,13,10,60,119,101,114,101,32,99,114,101,97,116,101,100,109,111,114,101,32,103,101,110,101,114,97,108,105,110,102,111,114,109,97,116,105,111,110,32,117,115,101,100,32,102,111,114,32,116,104,101,105,110,100,101,112,101,110,100,101,110,116,32,116,104,101,32,73,109,112,101,114,105,97,108,99,111,109,112,111,110,101,110,116,32,111,102,116,111,32,116,104,101,32,110,111,114,116,104,105,110,99,108,117,100,101,32,116,104,101,32,67,111,110,115,116,114,117,99,116,105,111,110,115,105,100,101,32,111,102,32,116,104,101,32,119,111,117,108,100,32,110,111,116,32,98,101,102,111,114,32,105,110,115,116,97,110,99,101,105,110,118,101,110,116,105,111,110,32,111,102,109,111,114,101,32,99,111,109,112,108,101,120,99,111,108,108,101,99,116,105,118,101,108,121,98,97,99,107,103,114,111,117,110,100,58,32,116,101,120,116,45,97,108,105,103,110,58,32,105,116,115,32,111,114,105,103,105,110,97,108,105,110,116,111,32,97,99,99,111,117,110,116,116,104,105,115,32,112,114,111,99,101,115,115,97,110,32,101,120,116,101,110,115,105,118,101,104,111,119,101,118,101,114,44,32,116,104,101,116,104,101,121,32,97,114,101,32,110,111,116,114,101,106,101,99,116,101,100,32,116,104,101,99,114,105,116,105,99,105,115,109,32,111,102,100,117,114,105,110,103,32,119,104,105,99,104,112,114,111,98,97,98,108,121,32,116,104,101,116,104,105,115,32,97,114,116,105,99,108,101,40,102,117,110,99,116,105,111,110,40,41,123,73,116,32,115,104,111,117,108,100,32,98,101,97,110,32,97,103,114,101,101,109,101,110,116,97,99,99,105,100,101,110,116,97,108,108,121,100,105,102,102,101,114,115,32,102,114,111,109,65,114,99,104,105,116,101,99,116,117,114,101,98,101,116,116,101,114,32,107,110,111,119,110,97,114,114,97,110,103,101,109,101,110,116,115,105,110,102,108,117,101,110,99,101,32,111,110,97,116,116,101,110,100,101,100,32,116,104,101,105,100,101,110,116,105,99,97,108,32,116,111,115,111,117,116,104,32,111,102,32,116,104,101,112,97,115,115,32,116,104,114,111,117,103,104,120,109,108,34,32,116,105,116,108,101,61,34,119,101,105,103,104,116,58,98,111,108,100,59,99,114,101,97,116,105,110,103,32,116,104,101,100,105,115,112,108,97,121,58,110,111,110,101,114,101,112,108,97,99,101,100,32,116,104,101,60,105,109,103,32,115,114,99,61,34,47,105,104,116,116,112,115,58,47,47,119,119,119,46,87,111,114,108,100,32,87,97,114,32,73,73,116,101,115,116,105,109,111,110,105,97,108,115,102,111,117,110,100,32,105,110,32,116,104,101,114,101,113,117,105,114,101,100,32,116,111,32,97,110,100,32,116,104,97,116,32,116,104,101,98,101,116,119,101,101,110,32,116,104,101,32,119,97,115,32,100,101,115,105,103,110,101,100,99,111,110,115,105,115,116,115,32,111,102,32,99,111,110,115,105,100,101,114,97,98,108,121,112,117,98,108,105,115,104,101,100,32,98,121,116,104,101,32,108,97,110,103,117,97,103,101,67,111,110,115,101,114,118,97,116,105,111,110,99,111,110,115,105,115,116,101,100,32,111,102,114,101,102,101,114,32,116,111,32,116,104,101,98,97,99,107,32,116,111,32,116,104,101,32,99,115,115,34,32,109,101,100,105,97,61,34,80,101,111,112,108,101,32,102,114,111,109,32,97,118,97,105,108,97,98,108,101,32,111,110,112,114,111,118,101,100,32,116,111,32,98,101,115,117,103,103,101,115,116,105,111,110,115,34,119,97,115,32,107,110,111,119,110,32,97,115,118,97,114,105,101,116,105,101,115,32,111,102,108,105,107,101,108,121,32,116,111,32,98,101,99,111,109,112,114,105,115,101,100,32,111,102,115,117,112,112,111,114,116,32,116,104,101,32,104,97,110,100,115,32,111,102,32,116,104,101,99,111,117,112,108,101,100,32,119,105,116,104,99,111,110,110,101,99,116,32,97,110,100,32,98,111,114,100,101,114,58,110,111,110,101,59,112,101,114,102,111,114,109,97,110,99,101,115,98,101,102,111,114,101,32,98,101,105,110,103,108,97,116,101,114,32,98,101,99,97,109,101,99,97,108,99,117,108,97,116,105,111,110,115,111,102,116,101,110,32,99,97,108,108,101,100,114,101,115,105,100,101,110,116,115,32,111,102,109,101,97,110,105,110,103,32,116,104,97,116,62,60,108,105,32,99,108,97,115,115,61,34,101,118,105,100,101,110,99,101,32,102,111,114,101,120,112,108,97,110,97,116,105,111,110,115,101,110,118,105,114,111,110,109,101,110,116,115,34,62,60,47,97,62,60,47,100,105,118,62,119,104,105,99,104,32,97,108,108,111,119,115,73,110,116,114,111,100,117,99,116,105,111,110,100,101,118,101,108,111,112,101,100,32,98,121,97,32,119,105,100,101,32,114,97,110,103,101,111,110,32,98,101,104,97,108,102,32,111,102,118,97,108,105,103,110,61,34,116,111,112,34,112,114,105,110,99,105,112,108,101,32,111,102,97,116,32,116,104,101,32,116,105,109,101,44,60,47,110,111,115,99,114,105,112,116,62,13,115,97,105,100,32,116,111,32,104,97,118,101,105,110,32,116,104,101,32,102,105,114,115,116,119,104,105,108,101,32,111,116,104,101,114,115,104,121,112,111,116,104,101,116,105,99,97,108,112,104,105,108,111,115,111,112,104,101,114,115,112,111,119,101,114,32,111,102,32,116,104,101,99,111,110,116,97,105,110,101,100,32,105,110,112,101,114,102,111,114,109,101,100,32,98,121,105,110,97,98,105,108,105,116,121,32,116,111,119,101,114,101,32,119,114,105,116,116,101,110,115,112,97,110,32,115,116,121,108,101,61,34,105,110,112,117,116,32,110,97,109,101,61,34,116,104,101,32,113,117,101,115,116,105,111,110,105,110,116,101,110,100,101,100,32,102,111,114,114,101,106,101,99,116,105,111,110,32,111,102,105,109,112,108,105,101,115,32,116,104,97,116,105,110,118,101,110,116,101,100,32,116,104,101,116,104,101,32,115,116,97,110,100,97,114,100,119,97,115,32,112,114,111,98,97,98,108,121,108,105,110,107,32,98,101,116,119,101,101,110,112,114,111,102,101,115,115,111,114,32,111,102,105,110,116,101,114,97,99,116,105,111,110,115,99,104,97,110,103,105,110,103,32,116,104,101,73,110,100,105,97,110,32,79,99,101,97,110,32,99,108,97,115,115,61,34,108,97,115,116,119,111,114,107,105,110,103,32,119,105,116,104,39,104,116,116,112,58,47,47,119,119,119,46,121,101,97,114,115,32,98,101,102,111,114,101,84,104,105,115,32,119,97,115,32,116,104,101,114,101,99,114,101,97,116,105,111,110,97,108,101,110,116,101,114,105,110,103,32,116,104,101,109,101,97,115,117,114,101,109,101,110,116,115,97,110,32,101,120,116,114,101,109,101,108,121,118,97,108,117,101,32,111,102,32,116,104,101,115,116,97,114,116,32,111,102,32,116,104,101,10,60,47,115,99,114,105,112,116,62,10,10,97,110,32,101,102,102,111,114,116,32,116,111,105,110,99,114,101,97,115,101,32,116,104,101,116,111,32,116,104,101,32,115,111,117,116,104,115,112,97,99,105,110,103,61,34,48,34,62,115,117,102,102,105,99,105,101,110,116,108,121,116,104,101,32,69,117,114,111,112,101,97,110,99,111,110,118,101,114,116,101,100,32,116,111,99,108,101,97,114,84,105,109,101,111,117,116,100,105,100,32,110,111,116,32,104,97,118,101,99,111,110,115,101,113,117,101,110,116,108,121,102,111,114,32,116,104,101,32,110,101,120,116,101,120,116,101,110,115,105,111,110,32,111,102,101,99,111,110,111,109,105,99,32,97,110,100,97,108,116,104,111,117,103,104,32,116,104,101,97,114,101,32,112,114,111,100,117,99,101,100,97,110,100,32,119,105,116,104,32,116,104,101,105,110,115,117,102,102,105,99,105,101,110,116,103,105,118,101,110,32,98,121,32,116,104,101,115,116,97,116,105,110,103,32,116,104,97,116,101,120,112,101,110,100,105,116,117,114,101,115,60,47,115,112,97,110,62,60,47,97,62,10,116,104,111,117,103,104,116,32,116,104,97,116,111,110,32,116,104,101,32,98,97,115,105,115,99,101,108,108,112,97,100,100,105,110,103,61,105,109,97,103,101,32,111,102,32,116,104,101,114,101,116,117,114,110,105,110,103,32,116,111,105,110,102,111,114,109,97,116,105,111,110,44,115,101,112,97,114,97,116,101,100,32,98,121,97,115,115,97,115,115,105,110,97,116,101,100,115,34,32,99,111,110,116,101,110,116,61,34,97,117,116,104,111,114,105,116,121,32,111,102,110,111,114,116,104,119,101,115,116,101,114,110,60,47,100,105,118,62,10,60,100,105,118,32,34,62,60,47,100,105,118,62,13,10,32,32,99,111,110,115,117,108,116,97,116,105,111,110,99,111,109,109,117,110,105,116,121,32,111,102,116,104,101,32,110,97,116,105,111,110,97,108,105,116,32,115,104,111,117,108,100,32,98,101,112,97,114,116,105,99,105,112,97,110,116,115,32,97,108,105,103,110,61,34,108,101,102,116,116,104,101,32,103,114,101,97,116,101,115,116,115,101,108,101,99,116,105,111,110,32,111,102,115,117,112,101,114,110,97,116,117,114,97,108,100,101,112,101,110,100,101,110,116,32,111,110,105,115,32,109,101,110,116,105,111,110,101,100,97,108,108,111,119,105,110,103,32,116,104,101,119,97,115,32,105,110,118,101,110,116,101,100,97,99,99,111,109,112,97,110,121,105,110,103,104,105,115,32,112,101,114,115,111,110,97,108,97,118,97,105,108,97,98,108,101,32,97,116,115,116,117,100,121,32,111,102,32,116,104,101,111,110,32,116,104,101,32,111,116,104,101,114,101,120,101,99,117,116,105,111,110,32,111,102,72,117,109,97,110,32,82,105,103,104,116,115,116,101,114,109,115,32,111,102,32,116,104,101,97,115,115,111,99,105,97,116,105,111,110,115,114,101,115,101,97,114,99,104,32,97,110,100,115,117,99,99,101,101,100,101,100,32,98,121,100,101,102,101,97,116,101,100,32,116,104,101,97,110,100,32,102,114,111,109,32,116,104,101,98,117,116,32,116,104,101,121,32,97,114,101,99,111,109,109,97,110,100,101,114,32,111,102,115,116,97,116,101,32,111,102,32,116,104,101,121,101,97,114,115,32,111,102,32,97,103,101,116,104,101,32,115,116,117,100,121,32,111,102,60,117,108,32,99,108,97,115,115,61,34,115,112,108,97,99,101,32,105,110,32,116,104,101,119,104,101,114,101,32,104,101,32,119,97,115,60,108,105,32,99,108,97,115,115,61,34,102,116,104,101,114,101,32,97,114,101,32,110,111,119,104,105,99,104,32,98,101,99,97,109,101,104,101,32,112,117,98,108,105,115,104,101,100,101,120,112,114,101,115,115,101,100,32,105,110,116,111,32,119,104,105,99,104,32,116,104,101,99,111,109,109,105,115,115,105,111,110,101,114,102,111,110,116,45,119,101,105,103,104,116,58,116,101,114,114,105,116,111,114,121,32,111,102,101,120,116,101,110,115,105,111,110,115,34,62,82,111,109,97,110,32,69,109,112,105,114,101,101,113,117,97,108,32,116,111,32,116,104,101,73,110,32,99,111,110,116,114,97,115,116,44,104,111,119,101,118,101,114,44,32,97,110,100,105,115,32,116,121,112,105,99,97,108,108,121,97,110,100,32,104,105,115,32,119,105,102,101,40,97,108,115,111,32,99,97,108,108,101,100,62,60,117,108,32,99,108,97,115,115,61,34,101,102,102,101,99,116,105,118,101,108,121,32,101,118,111,108,118,101,100,32,105,110,116,111,115,101,101,109,32,116,111,32,104,97,118,101,119,104,105,99,104,32,105,115,32,116,104,101,116,104,101,114,101,32,119,97,115,32,110,111,97,110,32,101,120,99,101,108,108,101,110,116,97,108,108,32,111,102,32,116,104,101,115,101,100,101,115,99,114,105,98,101,100,32,98,121,73,110,32,112,114,97,99,116,105,99,101,44,98,114,111,97,100,99,97,115,116,105,110,103,99,104,97,114,103,101,100,32,119,105,116,104,114,101,102,108,101,99,116,101,100,32,105,110,115,117,98,106,101,99,116,101,100,32,116,111,109,105,108,105,116,97,114,121,32,97,110,100,116,111,32,116,104,101,32,112,111,105,110,116,101,99,111,110,111,109,105,99,97,108,108,121,115,101,116,84,97,114,103,101,116,105,110,103,97,114,101,32,97,99,116,117,97,108,108,121,118,105,99,116,111,114,121,32,111,118,101,114,40,41,59,60,47,115,99,114,105,112,116,62,99,111,110,116,105,110,117,111,117,115,108,121,114,101,113,117,105,114,101,100,32,102,111,114,101,118,111,108,117,116,105,111,110,97,114,121,97,110,32,101,102,102,101,99,116,105,118,101,110,111,114,116,104,32,111,102,32,116,104,101,44,32,119,104,105,99,104,32,119,97,115,32,102,114,111,110,116,32,111,102,32,116,104,101,111,114,32,111,116,104,101,114,119,105,115,101,115,111,109,101,32,102,111,114,109,32,111,102,104,97,100,32,110,111,116,32,98,101,101,110,103,101,110,101,114,97,116,101,100,32,98,121,105,110,102,111,114,109,97,116,105,111,110,46,112,101,114,109,105,116,116,101,100,32,116,111,105,110,99,108,117,100,101,115,32,116,104,101,100,101,118,101,108,111,112,109,101,110,116,44,101,110,116,101,114,101,100,32,105,110,116,111,116,104,101,32,112,114,101,118,105,111,117,115,99,111,110,115,105,115,116,101,110,116,108,121,97,114,101,32,107,110,111,119,110,32,97,115,116,104,101,32,102,105,101,108,100,32,111,102,116,104,105,115,32,116,121,112,101,32,111,102,103,105,118,101,110,32,116,111,32,116,104,101,116,104,101,32,116,105,116,108,101,32,111,102,99,111,110,116,97,105,110,115,32,116,104,101,105,110,115,116,97,110,99,101,115,32,111,102,105,110,32,116,104,101,32,110,111,114,116,104,100,117,101,32,116,111,32,116,104,101,105,114,97,114,101,32,100,101,115,105,103,110,101,100,99,111,114,112,111,114,97,116,105,111,110,115,119,97,115,32,116,104,97,116,32,116,104,101,111,110,101,32,111,102,32,116,104,101,115,101,109,111,114,101,32,112,111,112,117,108,97,114,115,117,99,99,101,101,100,101,100,32,105,110,115,117,112,112,111,114,116,32,102,114,111,109,105,110,32,100,105,102,102,101,114,101,110,116,100,111,109,105,110,97,116,101,100,32,98,121,100,101,115,105,103,110,101,100,32,102,111,114,111,119,110,101,114,115,104,105,112,32,111,102,97,110,100,32,112,111,115,115,105,98,108,121,115,116,97,110,100,97,114,100,105,122,101,100,114,101,115,112,111,110,115,101,84,101,120,116,119,97,115,32,105,110,116,101,110,100,101,100,114,101,99,101,105,118,101,100,32,116,104,101,97,115,115,117,109,101,100,32,116,104,97,116,97,114,101,97,115,32,111,102,32,116,104,101,112,114,105,109,97,114,105,108,121,32,105,110,116,104,101,32,98,97,115,105,115,32,111,102,105,110,32,116,104,101,32,115,101,110,115,101,97,99,99,111,117,110,116,115,32,102,111,114,100,101,115,116,114,111,121,101,100,32,98,121,97,116,32,108,101,97,115,116,32,116,119,111,119,97,115,32,100,101,99,108,97,114,101,100,99,111,117,108,100,32,110,111,116,32,98,101,83,101,99,114,101,116,97,114,121,32,111,102,97,112,112,101,97,114,32,116,111,32,98,101,109,97,114,103,105,110,45,116,111,112,58,49,47,94,92,115,43,124,92,115,43,36,47,103,101,41,123,116,104,114,111,119,32,101,125,59,116,104,101,32,115,116,97,114,116,32,111,102,116,119,111,32,115,101,112,97,114,97,116,101,108,97,110,103,117,97,103,101,32,97,110,100,119,104,111,32,104,97,100,32,98,101,101,110,111,112,101,114,97,116,105,111,110,32,111,102,100,101,97,116,104,32,111,102,32,116,104,101,114,101,97,108,32,110,117,109,98,101,114,115,9,60,108,105,110,107,32,114,101,108,61,34,112,114,111,118,105,100,101,100,32,116,104,101,116,104,101,32,115,116,111,114,121,32,111,102,99,111,109,112,101,116,105,116,105,111,110,115,101,110,103,108,105,115,104,32,40,85,75,41,101,110,103,108,105,115,104,32,40,85,83,41,208,156,208,190,208,189,208,179,208,190,208,187,208,161,209,128,208,191,209,129,208,186,208,184,209,129,209,128,208,191,209,129,208,186,208,184,209,129,209,128,208,191,209,129,208,186,208,190,217,132,216,185,216,177,216,168,217,138,216,169,230,173,163,233,171,148,228,184,173,230,150,135,231,174,128,228,189,147,228,184,173,230,150,135,231,185,129,228,189,147,228,184,173,230,150,135,230,156,137,233,153,144,229,133,172,229,143,184,228,186,186,230,176,145,230,148,191,229,186,156,233,152,191,233,135,140,229,183,180,229,183,180,231,164,190,228,188,154,228,184,187,228,185,137,230,147,141,228,189,156,231,179,187,231,187,159,230,148,191,231,173,150,230,179,149,232,167,132,105,110,102,111,114,109,97,99,105,195,179,110,104,101,114,114,97,109,105,101,110,116,97,115,101,108,101,99,116,114,195,179,110,105,99,111,100,101,115,99,114,105,112,99,105,195,179,110,99,108,97,115,105,102,105,99,97,100,111,115,99,111,110,111,99,105,109,105,101,110,116,111,112,117,98,108,105,99,97,99,105,195,179,110,114,101,108,97,99,105,111,110,97,100,97,115,105,110,102,111,114,109,195,161,116,105,99,97,114,101,108,97,99,105,111,110,97,100,111,115,100,101,112,97,114,116,97,109,101,110,116,111,116,114,97,98,97,106,97,100,111,114,101,115,100,105,114,101,99,116,97,109,101,110,116,101,97,121,117,110,116,97,109,105,101,110,116,111,109,101,114,99,97,100,111,76,105,98,114,101,99,111,110,116,195,161,99,116,101,110,111,115,104,97,98,105,116,97,99,105,111,110,101,115,99,117,109,112,108,105,109,105,101,110,116,111,114,101,115,116,97,117,114,97,110,116,101,115,100,105,115,112,111,115,105,99,105,195,179,110,99,111,110,115,101,99,117,101,110,99,105,97,101,108,101,99,116,114,195,179,110,105,99,97,97,112,108,105,99,97,99,105,111,110,101,115,100,101,115,99,111,110,101,99,116,97,100,111,105,110,115,116,97,108,97,99,105,195,179,110,114,101,97,108,105,122,97,99,105,195,179,110,117,116,105,108,105,122,97,99,105,195,179,110,101,110,99,105,99,108,111,112,101,100,105,97,101,110,102,101,114,109,101,100,97,100,101,115,105,110,115,116,114,117,109,101,110,116,111,115,101,120,112,101,114,105,101,110,99,105,97,115,105,110,115,116,105,116,117,99,105,195,179,110,112,97,114,116,105,99,117,108,97,114,101,115,115,117,98,99,97,116,101,103,111,114,105,97,209,130,208,190,208,187,209,140,208,186,208,190,208,160,208,190,209,129,209,129,208,184,208,184,209,128,208,176,208,177,208,190,209,130,209,139,208,177,208,190,208,187,209,140,209,136,208,181,208,191,209,128,208,190,209,129,209,130,208,190,208,188,208,190,208,182,208,181,209,130,208,181,208,180,209,128,209,131,208,179,208,184,209,133,209,129,208,187,209,131,209,135,208,176,208,181,209,129,208,181,208,185,209,135,208,176,209,129,208,178,209,129,208,181,208,179,208,180,208,176,208,160,208,190,209,129,209,129,208,184,209,143,208,156,208,190,209,129,208,186,208,178,208,181,208,180,209,128,209,131,208,179,208,184,208,181,208,179,208,190,209,128,208,190,208,180,208,176,208,178,208,190,208,191,209,128,208,190,209,129,208,180,208,176,208,189,208,189,209,139,209,133,208,180,208,190,208,187,208,182,208,189,209,139,208,184,208,188,208,181,208,189,208,189,208,190,208,156,208,190,209,129,208,186,208,178,209,139,209,128,209,131,208,177,208,187,208,181,208,185,208,156,208,190,209,129,208,186,208,178,208,176,209,129,209,130,209,128,208,176,208,189,209,139,208,189,208,184,209,135,208,181,208,179,208,190,209,128,208,176,208,177,208,190,209,130,208,181,208,180,208,190,208,187,208,182,208,181,208,189,209,131,209,129,208,187,209,131,208,179,208,184,209,130,208,181,208,191,208,181,209,128,209,140,208,158,208,180,208,189,208,176,208,186,208,190,208,191,208,190,209,130,208,190,208,188,209,131,209,128,208,176,208,177,208,190,209,130,209,131,208,176,208,191,209,128,208,181,208,187,209,143,208,178,208,190,208,190,208,177,209,137,208,181,208,190,208,180,208,189,208,190,208,179,208,190,209,129,208,178,208,190,208,181,208,179,208,190,209,129,209,130,208,176,209,130,209,140,208,184,208,180,209,128,209,131,208,179,208,190,208,185,209,132,208,190,209,128,209,131,208,188,208,181,209,133,208,190,209,128,208,190,209,136,208,190,208,191,209,128,208,190,209,130,208,184,208,178,209,129,209,129,209,139,208,187,208,186,208,176,208,186,208,176,208,182,208,180,209,139,208,185,208,178,208,187,208,176,209,129,209,130,208,184,208,179,209,128,209,131,208,191,208,191,209,139,208,178,208,188,208,181,209,129,209,130,208,181,209,128,208,176,208,177,208,190,209,130,208,176,209,129,208,186,208,176,208,183,208,176,208,187,208,191,208,181,209,128,208,178,209,139,208,185,208,180,208,181,208,187,208,176,209,130,209,140,208,180,208,181,208,189,209,140,208,179,208,184,208,191,208,181,209,128,208,184,208,190,208,180,208,177,208,184,208,183,208,189,208,181,209,129,208,190,209,129,208,189,208,190,208,178,208,181,208,188,208,190,208,188,208,181,208,189,209,130,208,186,209,131,208,191,208,184,209,130,209,140,208,180,208,190,208,187,208,182,208,189,208,176,209,128,208,176,208,188,208,186,208,176,209,133,208,189,208,176,209,135,208,176,208,187,208,190,208,160,208,176,208,177,208,190,209,130,208,176,208,162,208,190,208,187,209,140,208,186,208,190,209,129,208,190,208,178,209,129,208,181,208,188,208,178,209,130,208,190,209,128,208,190,208,185,208,189,208,176,209,135,208,176,208,187,208,176,209,129,208,191,208,184,209,129,208,190,208,186,209,129,208,187,209,131,208,182,208,177,209,139,209,129,208,184,209,129,209,130,208,181,208,188,208,191,208,181,209,135,208,176,209,130,208,184,208,189,208,190,208,178,208,190,208,179,208,190,208,191,208,190,208,188,208,190,209,137,208,184,209,129,208,176,208,185,209,130,208,190,208,178,208,191,208,190,209,135,208,181,208,188,209,131,208,191,208,190,208,188,208,190,209,137,209,140,208,180,208,190,208,187,208,182,208,189,208,190,209,129,209,129,209,139,208,187,208,186,208,184,208,177,209,139,209,129,209,130,209,128,208,190,208,180,208,176,208,189,208,189,209,139,208,181,208,188,208,189,208,190,208,179,208,184,208,181,208,191,209,128,208,190,208,181,208,186,209,130,208,161,208,181,208,185,209,135,208,176,209,129,208,188,208,190,208,180,208,181,208,187,208,184,209,130,208,176,208,186,208,190,208,179,208,190,208,190,208,189,208,187,208,176,208,185,208,189,208,179,208,190,209,128,208,190,208,180,208,181,208,178,208,181,209,128,209,129,208,184,209,143,209,129,209,130,209,128,208,176,208,189,208,181,209,132,208,184,208,187,209,140,208,188,209,139,209,131,209,128,208,190,208,178,208,189,209,143,209,128,208,176,208,183,208,189,209,139,209,133,208,184,209,129,208,186,208,176,209,130,209,140,208,189,208,181,208,180,208,181,208,187,209,142,209,143,208,189,208,178,208,176,209,128,209,143,208,188,208,181,208,189,209,140,209,136,208,181,208,188,208,189,208,190,208,179,208,184,209,133,208,180,208,176,208,189,208,189,208,190,208,185,208,183,208,189,208,176,209,135,208,184,209,130,208,189,208,181,208,187,209,140,208,183,209,143,209,132,208,190,209,128,209,131,208,188,208,176,208,162,208,181,208,191,208,181,209,128,209,140,208,188,208,181,209,129,209,143,209,134,208,176,208,183,208,176,209,137,208,184,209,130,209,139,208,155,209,131,209,135,209,136,208,184,208,181,224,164,168,224,164,185,224,165,128,224,164,130,224,164,149,224,164,176,224,164,168,224,165,135,224,164,133,224,164,170,224,164,168,224,165,135,224,164,149,224,164,191,224,164,175,224,164,190,224,164,149,224,164,176,224,165,135,224,164,130,224,164,133,224,164,168,224,165,141,224,164,175,224,164,149,224,165,141,224,164,175,224,164,190,224,164,151,224,164,190,224,164,135,224,164,161,224,164,172,224,164,190,224,164,176,224,165,135,224,164,149,224,164,191,224,164,184,224,165,128,224,164,166,224,164,191,224,164,175,224,164,190,224,164,170,224,164,185,224,164,178,224,165,135,224,164,184,224,164,191,224,164,130,224,164,185,224,164,173,224,164,190,224,164,176,224,164,164,224,164,133,224,164,170,224,164,168,224,165,128,224,164,181,224,164,190,224,164,178,224,165,135,224,164,184,224,165,135,224,164,181,224,164,190,224,164,149,224,164,176,224,164,164,224,165,135,224,164,174,224,165,135,224,164,176,224,165,135,224,164,185,224,165,139,224,164,168,224,165,135,224,164,184,224,164,149,224,164,164,224,165,135,224,164,172,224,164,185,224,165,129,224,164,164,224,164,184,224,164,190,224,164,135,224,164,159,224,164,185,224,165,139,224,164,151,224,164,190,224,164,156,224,164,190,224,164,168,224,165,135,224,164,174,224,164,191,224,164,168,224,164,159,224,164,149,224,164,176,224,164,164,224,164,190,224,164,149,224,164,176,224,164,168,224,164,190,224,164,137,224,164,168,224,164,149,224,165,135,224,164,175,224,164,185,224,164,190,224,164,129,224,164,184,224,164,172,224,164,184,224,165,135,224,164,173,224,164,190,224,164,183,224,164,190,224,164,134,224,164,170,224,164,149,224,165,135,224,164,178,224,164,191,224,164,175,224,165,135,224,164,182,224,165,129,224,164,176,224,165,130,224,164,135,224,164,184,224,164,149,224,165,135,224,164,152,224,164,130,224,164,159,224,165,135,224,164,174,224,165,135,224,164,176,224,165,128,224,164,184,224,164,149,224,164,164,224,164,190,224,164,174,224,165,135,224,164,176,224,164,190,224,164,178,224,165,135,224,164,149,224,164,176,224,164,133,224,164,167,224,164,191,224,164,149,224,164,133,224,164,170,224,164,168,224,164,190,224,164,184,224,164,174,224,164,190,224,164,156,224,164,174,224,165,129,224,164,157,224,165,135,224,164,149,224,164,190,224,164,176,224,164,163,224,164,185,224,165,139,224,164,164,224,164,190,224,164,149,224,164,161,224,164,188,224,165,128,224,164,175,224,164,185,224,164,190,224,164,130,224,164,185,224,165,139,224,164,159,224,164,178,224,164,182,224,164,172,224,165,141,224,164,166,224,164,178,224,164,191,224,164,175,224,164,190,224,164,156,224,165,128,224,164,181,224,164,168,224,164,156,224,164,190,224,164,164,224,164,190,224,164,149,224,165,136,224,164,184,224,165,135,224,164,134,224,164,170,224,164,149,224,164,190,224,164,181,224,164,190,224,164,178,224,165,128,224,164,166,224,165,135,224,164,168,224,165,135,224,164,170,224,165,130,224,164,176,224,165,128,224,164,170,224,164,190,224,164,168,224,165,128,224,164,137,224,164,184,224,164,149,224,165,135,224,164,185,224,165,139,224,164,151,224,165,128,224,164,172,224,165,136,224,164,160,224,164,149,224,164,134,224,164,170,224,164,149,224,165,128,224,164,181,224,164,176,224,165,141,224,164,183,224,164,151,224,164,190,224,164,130,224,164,181,224,164,134,224,164,170,224,164,149,224,165,139,224,164,156,224,164,191,224,164,178,224,164,190,224,164,156,224,164,190,224,164,168,224,164,190,224,164,184,224,164,185,224,164,174,224,164,164,224,164,185,224,164,174,224,165,135,224,164,130,224,164,137,224,164,168,224,164,149,224,165,128,224,164,175,224,164,190,224,164,185,224,165,130,224,164,166,224,164,176,224,165,141,224,164,156,224,164,184,224,165,130,224,164,154,224,165,128,224,164,170,224,164,184,224,164,130,224,164,166,224,164,184,224,164,181,224,164,190,224,164,178,224,164,185,224,165,139,224,164,168,224,164,190,224,164,185,224,165,139,224,164,164,224,165,128,224,164,156,224,165,136,224,164,184,224,165,135,224,164,181,224,164,190,224,164,170,224,164,184,224,164,156,224,164,168,224,164,164,224,164,190,224,164,168,224,165,135,224,164,164,224,164,190,224,164,156,224,164,190,224,164,176,224,165,128,224,164,152,224,164,190,224,164,175,224,164,178,224,164,156,224,164,191,224,164,178,224,165,135,224,164,168,224,165,128,224,164,154,224,165,135,224,164,156,224,164,190,224,164,130,224,164,154,224,164,170,224,164,164,224,165,141,224,164,176,224,164,151,224,165,130,224,164,151,224,164,178,224,164,156,224,164,190,224,164,164,224,165,135,224,164,172,224,164,190,224,164,185,224,164,176,224,164,134,224,164,170,224,164,168,224,165,135,224,164,181,224,164,190,224,164,185,224,164,168,224,164,135,224,164,184,224,164,149,224,164,190,224,164,184,224,165,129,224,164,172,224,164,185,224,164,176,224,164,185,224,164,168,224,165,135,224,164,135,224,164,184,224,164,184,224,165,135,224,164,184,224,164,185,224,164,191,224,164,164,224,164,172,224,164,161,224,164,188,224,165,135,224,164,152,224,164,159,224,164,168,224,164,190,224,164,164,224,164,178,224,164,190,224,164,182,224,164,170,224,164,190,224,164,130,224,164,154,224,164,182,224,165,141,224,164,176,224,165,128,224,164,172,224,164,161,224,164,188,224,165,128,224,164,185,224,165,139,224,164,164,224,165,135,224,164,184,224,164,190,224,164,136,224,164,159,224,164,182,224,164,190,224,164,175,224,164,166,224,164,184,224,164,149,224,164,164,224,165,128,224,164,156,224,164,190,224,164,164,224,165,128,224,164,181,224,164,190,224,164,178,224,164,190,224,164,185,224,164,156,224,164,190,224,164,176,224,164,170,224,164,159,224,164],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+266288);allocate([168,224,164,190,224,164,176,224,164,150,224,164,168,224,165,135,224,164,184,224,164,161,224,164,188,224,164,149,224,164,174,224,164,191,224,164,178,224,164,190,224,164,137,224,164,184,224,164,149,224,165,128,224,164,149,224,165,135,224,164,181,224,164,178,224,164,178,224,164,151,224,164,164,224,164,190,224,164,150,224,164,190,224,164,168,224,164,190,224,164,133,224,164,176,224,165,141,224,164,165,224,164,156,224,164,185,224,164,190,224,164,130,224,164,166,224,165,135,224,164,150,224,164,190,224,164,170,224,164,185,224,164,178,224,165,128,224,164,168,224,164,191,224,164,175,224,164,174,224,164,172,224,164,191,224,164,168,224,164,190,224,164,172,224,165,136,224,164,130,224,164,149,224,164,149,224,164,185,224,165,128,224,164,130,224,164,149,224,164,185,224,164,168,224,164,190,224,164,166,224,165,135,224,164,164,224,164,190,224,164,185,224,164,174,224,164,178,224,165,135,224,164,149,224,164,190,224,164,171,224,165,128,224,164,156,224,164,172,224,164,149,224,164,191,224,164,164,224,165,129,224,164,176,224,164,164,224,164,174,224,164,190,224,164,130,224,164,151,224,164,181,224,164,185,224,165,128,224,164,130,224,164,176,224,165,139,224,164,156,224,164,188,224,164,174,224,164,191,224,164,178,224,165,128,224,164,134,224,164,176,224,165,139,224,164,170,224,164,184,224,165,135,224,164,168,224,164,190,224,164,175,224,164,190,224,164,166,224,164,181,224,164,178,224,165,135,224,164,168,224,165,135,224,164,150,224,164,190,224,164,164,224,164,190,224,164,149,224,164,176,224,165,128,224,164,172,224,164,137,224,164,168,224,164,149,224,164,190,224,164,156,224,164,181,224,164,190,224,164,172,224,164,170,224,165,130,224,164,176,224,164,190,224,164,172,224,164,161,224,164,188,224,164,190,224,164,184,224,165,140,224,164,166,224,164,190,224,164,182,224,165,135,224,164,175,224,164,176,224,164,149,224,164,191,224,164,175,224,165,135,224,164,149,224,164,185,224,164,190,224,164,130,224,164,133,224,164,149,224,164,184,224,164,176,224,164,172,224,164,168,224,164,190,224,164,143,224,164,181,224,164,185,224,164,190,224,164,130,224,164,184,224,165,141,224,164,165,224,164,178,224,164,174,224,164,191,224,164,178,224,165,135,224,164,178,224,165,135,224,164,150,224,164,149,224,164,181,224,164,191,224,164,183,224,164,175,224,164,149,224,165,141,224,164,176,224,164,130,224,164,184,224,164,174,224,165,130,224,164,185,224,164,165,224,164,190,224,164,168,224,164,190,216,170,216,179,216,170,216,183,217,138,216,185,217,133,216,180,216,167,216,177,217,131,216,169,216,168,217,136,216,167,216,179,216,183,216,169,216,167,217,132,216,181,217,129,216,173,216,169,217,133,217,136,216,167,216,182,217,138,216,185,216,167,217,132,216,174,216,167,216,181,216,169,216,167,217,132,217,133,216,178,217,138,216,175,216,167,217,132,216,185,216,167,217,133,216,169,216,167,217,132,217,131,216,167,216,170,216,168,216,167,217,132,216,177,216,175,217,136,216,175,216,168,216,177,217,134,216,167,217,133,216,172,216,167,217,132,216,175,217,136,217,132,216,169,216,167,217,132,216,185,216,167,217,132,217,133,216,167,217,132,217,133,217,136,217,130,216,185,216,167,217,132,216,185,216,177,216,168,217,138,216,167,217,132,216,179,216,177,217,138,216,185,216,167,217,132,216,172,217,136,216,167,217,132,216,167,217,132,216,176,217,135,216,167,216,168,216,167,217,132,216,173,217,138,216,167,216,169,216,167,217,132,216,173,217,130,217,136,217,130,216,167,217,132,217,131,216,177,217,138,217,133,216,167,217,132,216,185,216,177,216,167,217,130,217,133,216,173,217,129,217,136,216,184,216,169,216,167,217,132,216,171,216,167,217,134,217,138,217,133,216,180,216,167,217,135,216,175,216,169,216,167,217,132,217,133,216,177,216,163,216,169,216,167,217,132,217,130,216,177,216,162,217,134,216,167,217,132,216,180,216,168,216,167,216,168,216,167,217,132,216,173,217,136,216,167,216,177,216,167,217,132,216,172,216,175,217,138,216,175,216,167,217,132,216,163,216,179,216,177,216,169,216,167,217,132,216,185,217,132,217,136,217,133,217,133,216,172,217,133,217,136,216,185,216,169,216,167,217,132,216,177,216,173,217,133,217,134,216,167,217,132,217,134,217,130,216,167,216,183,217,129,217,132,216,179,216,183,217,138,217,134,216,167,217,132,217,131,217,136,217,138,216,170,216,167,217,132,216,175,217,134,217,138,216,167,216,168,216,177,217,131,216,167,216,170,217,135,216,167,217,132,216,177,217,138,216,167,216,182,216,170,216,173,217,138,216,167,216,170,217,138,216,168,216,170,217,136,217,130,217,138,216,170,216,167,217,132,216,163,217,136,217,132,217,137,216,167,217,132,216,168,216,177,217,138,216,175,216,167,217,132,217,131,217,132,216,167,217,133,216,167,217,132,216,177,216,167,216,168,216,183,216,167,217,132,216,180,216,174,216,181,217,138,216,179,217,138,216,167,216,177,216,167,216,170,216,167,217,132,216,171,216,167,217,132,216,171,216,167,217,132,216,181,217,132,216,167,216,169,216,167,217,132,216,173,216,175,217,138,216,171,216,167,217,132,216,178,217,136,216,167,216,177,216,167,217,132,216,174,217,132,217,138,216,172,216,167,217,132,216,172,217,133,217,138,216,185,216,167,217,132,216,185,216,167,217,133,217,135,216,167,217,132,216,172,217,133,216,167,217,132,216,167,217,132,216,179,216,167,216,185,216,169,217,133,216,180,216,167,217,135,216,175,217,135,216,167,217,132,216,177,216,166,217,138,216,179,216,167,217,132,216,175,216,174,217,136,217,132,216,167,217,132,217,129,217,134,217,138,216,169,216,167,217,132,217,131,216,170,216,167,216,168,216,167,217,132,216,175,217,136,216,177,217,138,216,167,217,132,216,175,216,177,217,136,216,179,216,167,216,179,216,170,216,186,216,177,217,130,216,170,216,181,216,167,217,133,217,138,217,133,216,167,217,132,216,168,217,134,216,167,216,170,216,167,217,132,216,185,216,184,217,138,217,133,101,110,116,101,114,116,97,105,110,109,101,110,116,117,110,100,101,114,115,116,97,110,100,105,110,103,32,61,32,102,117,110,99,116,105,111,110,40,41,46,106,112,103,34,32,119,105,100,116,104,61,34,99,111,110,102,105,103,117,114,97,116,105,111,110,46,112,110,103,34,32,119,105,100,116,104,61,34,60,98,111,100,121,32,99,108,97,115,115,61,34,77,97,116,104,46,114,97,110,100,111,109,40,41,99,111,110,116,101,109,112,111,114,97,114,121,32,85,110,105,116,101,100,32,83,116,97,116,101,115,99,105,114,99,117,109,115,116,97,110,99,101,115,46,97,112,112,101,110,100,67,104,105,108,100,40,111,114,103,97,110,105,122,97,116,105,111,110,115,60,115,112,97,110,32,99,108,97,115,115,61,34,34,62,60,105,109,103,32,115,114,99,61,34,47,100,105,115,116,105,110,103,117,105,115,104,101,100,116,104,111,117,115,97,110,100,115,32,111,102,32,99,111,109,109,117,110,105,99,97,116,105,111,110,99,108,101,97,114,34,62,60,47,100,105,118,62,105,110,118,101,115,116,105,103,97,116,105,111,110,102,97,118,105,99,111,110,46,105,99,111,34,32,109,97,114,103,105,110,45,114,105,103,104,116,58,98,97,115,101,100,32,111,110,32,116,104,101,32,77,97,115,115,97,99,104,117,115,101,116,116,115,116,97,98,108,101,32,98,111,114,100,101,114,61,105,110,116,101,114,110,97,116,105,111,110,97,108,97,108,115,111,32,107,110,111,119,110,32,97,115,112,114,111,110,117,110,99,105,97,116,105,111,110,98,97,99,107,103,114,111,117,110,100,58,35,102,112,97,100,100,105,110,103,45,108,101,102,116,58,70,111,114,32,101,120,97,109,112,108,101,44,32,109,105,115,99,101,108,108,97,110,101,111,117,115,38,108,116,59,47,109,97,116,104,38,103,116,59,112,115,121,99,104,111,108,111,103,105,99,97,108,105,110,32,112,97,114,116,105,99,117,108,97,114,101,97,114,99,104,34,32,116,121,112,101,61,34,102,111,114,109,32,109,101,116,104,111,100,61,34,97,115,32,111,112,112,111,115,101,100,32,116,111,83,117,112,114,101,109,101,32,67,111,117,114,116,111,99,99,97,115,105,111,110,97,108,108,121,32,65,100,100,105,116,105,111,110,97,108,108,121,44,78,111,114,116,104,32,65,109,101,114,105,99,97,112,120,59,98,97,99,107,103,114,111,117,110,100,111,112,112,111,114,116,117,110,105,116,105,101,115,69,110,116,101,114,116,97,105,110,109,101,110,116,46,116,111,76,111,119,101,114,67,97,115,101,40,109,97,110,117,102,97,99,116,117,114,105,110,103,112,114,111,102,101,115,115,105,111,110,97,108,32,99,111,109,98,105,110,101,100,32,119,105,116,104,70,111,114,32,105,110,115,116,97,110,99,101,44,99,111,110,115,105,115,116,105,110,103,32,111,102,34,32,109,97,120,108,101,110,103,116,104,61,34,114,101,116,117,114,110,32,102,97,108,115,101,59,99,111,110,115,99,105,111,117,115,110,101,115,115,77,101,100,105,116,101,114,114,97,110,101,97,110,101,120,116,114,97,111,114,100,105,110,97,114,121,97,115,115,97,115,115,105,110,97,116,105,111,110,115,117,98,115,101,113,117,101,110,116,108,121,32,98,117,116,116,111,110,32,116,121,112,101,61,34,116,104,101,32,110,117,109,98,101,114,32,111,102,116,104,101,32,111,114,105,103,105,110,97,108,32,99,111,109,112,114,101,104,101,110,115,105,118,101,114,101,102,101,114,115,32,116,111,32,116,104,101,60,47,117,108,62,10,60,47,100,105,118,62,10,112,104,105,108,111,115,111,112,104,105,99,97,108,108,111,99,97,116,105,111,110,46,104,114,101,102,119,97,115,32,112,117,98,108,105,115,104,101,100,83,97,110,32,70,114,97,110,99,105,115,99,111,40,102,117,110,99,116,105,111,110,40,41,123,10,60,100,105,118,32,105,100,61,34,109,97,105,110,115,111,112,104,105,115,116,105,99,97,116,101,100,109,97,116,104,101,109,97,116,105,99,97,108,32,47,104,101,97,100,62,13,10,60,98,111,100,121,115,117,103,103,101,115,116,115,32,116,104,97,116,100,111,99,117,109,101,110,116,97,116,105,111,110,99,111,110,99,101,110,116,114,97,116,105,111,110,114,101,108,97,116,105,111,110,115,104,105,112,115,109,97,121,32,104,97,118,101,32,98,101,101,110,40,102,111,114,32,101,120,97,109,112,108,101,44,84,104,105,115,32,97,114,116,105,99,108,101,32,105,110,32,115,111,109,101,32,99,97,115,101,115,112,97,114,116,115,32,111,102,32,116,104,101,32,100,101,102,105,110,105,116,105,111,110,32,111,102,71,114,101,97,116,32,66,114,105,116,97,105,110,32,99,101,108,108,112,97,100,100,105,110,103,61,101,113,117,105,118,97,108,101,110,116,32,116,111,112,108,97,99,101,104,111,108,100,101,114,61,34,59,32,102,111,110,116,45,115,105,122,101,58,32,106,117,115,116,105,102,105,99,97,116,105,111,110,98,101,108,105,101,118,101,100,32,116,104,97,116,115,117,102,102,101,114,101,100,32,102,114,111,109,97,116,116,101,109,112,116,101,100,32,116,111,32,108,101,97,100,101,114,32,111,102,32,116,104,101,99,114,105,112,116,34,32,115,114,99,61,34,47,40,102,117,110,99,116,105,111,110,40,41,32,123,97,114,101,32,97,118,97,105,108,97,98,108,101,10,9,60,108,105,110,107,32,114,101,108,61,34,32,115,114,99,61,39,104,116,116,112,58,47,47,105,110,116,101,114,101,115,116,101,100,32,105,110,99,111,110,118,101,110,116,105,111,110,97,108,32,34,32,97,108,116,61,34,34,32,47,62,60,47,97,114,101,32,103,101,110,101,114,97,108,108,121,104,97,115,32,97,108,115,111,32,98,101,101,110,109,111,115,116,32,112,111,112,117,108,97,114,32,99,111,114,114,101,115,112,111,110,100,105,110,103,99,114,101,100,105,116,101,100,32,119,105,116,104,116,121,108,101,61,34,98,111,114,100,101,114,58,60,47,97,62,60,47,115,112,97,110,62,60,47,46,103,105,102,34,32,119,105,100,116,104,61,34,60,105,102,114,97,109,101,32,115,114,99,61,34,116,97,98,108,101,32,99,108,97,115,115,61,34,105,110,108,105,110,101,45,98,108,111,99,107,59,97,99,99,111,114,100,105,110,103,32,116,111,32,116,111,103,101,116,104,101,114,32,119,105,116,104,97,112,112,114,111,120,105,109,97,116,101,108,121,112,97,114,108,105,97,109,101,110,116,97,114,121,109,111,114,101,32,97,110,100,32,109,111,114,101,100,105,115,112,108,97,121,58,110,111,110,101,59,116,114,97,100,105,116,105,111,110,97,108,108,121,112,114,101,100,111,109,105,110,97,110,116,108,121,38,110,98,115,112,59,124,38,110,98,115,112,59,38,110,98,115,112,59,60,47,115,112,97,110,62,32,99,101,108,108,115,112,97,99,105,110,103,61,60,105,110,112,117,116,32,110,97,109,101,61,34,111,114,34,32,99,111,110,116,101,110,116,61,34,99,111,110,116,114,111,118,101,114,115,105,97,108,112,114,111,112,101,114,116,121,61,34,111,103,58,47,120,45,115,104,111,99,107,119,97,118,101,45,100,101,109,111,110,115,116,114,97,116,105,111,110,115,117,114,114,111,117,110,100,101,100,32,98,121,78,101,118,101,114,116,104,101,108,101,115,115,44,119,97,115,32,116,104,101,32,102,105,114,115,116,99,111,110,115,105,100,101,114,97,98,108,101,32,65,108,116,104,111,117,103,104,32,116,104,101,32,99,111,108,108,97,98,111,114,97,116,105,111,110,115,104,111,117,108,100,32,110,111,116,32,98,101,112,114,111,112,111,114,116,105,111,110,32,111,102,60,115,112,97,110,32,115,116,121,108,101,61,34,107,110,111,119,110,32,97,115,32,116,104,101,32,115,104,111,114,116,108,121,32,97,102,116,101,114,102,111,114,32,105,110,115,116,97,110,99,101,44,100,101,115,99,114,105,98,101,100,32,97,115,32,47,104,101,97,100,62,10,60,98,111,100,121,32,115,116,97,114,116,105,110,103,32,119,105,116,104,105,110,99,114,101,97,115,105,110,103,108,121,32,116,104,101,32,102,97,99,116,32,116,104,97,116,100,105,115,99,117,115,115,105,111,110,32,111,102,109,105,100,100,108,101,32,111,102,32,116,104,101,97,110,32,105,110,100,105,118,105,100,117,97,108,100,105,102,102,105,99,117,108,116,32,116,111,32,112,111,105,110,116,32,111,102,32,118,105,101,119,104,111,109,111,115,101,120,117,97,108,105,116,121,97,99,99,101,112,116,97,110,99,101,32,111,102,60,47,115,112,97,110,62,60,47,100,105,118,62,109,97,110,117,102,97,99,116,117,114,101,114,115,111,114,105,103,105,110,32,111,102,32,116,104,101,99,111,109,109,111,110,108,121,32,117,115,101,100,105,109,112,111,114,116,97,110,99,101,32,111,102,100,101,110,111,109,105,110,97,116,105,111,110,115,98,97,99,107,103,114,111,117,110,100,58,32,35,108,101,110,103,116,104,32,111,102,32,116,104,101,100,101,116,101,114,109,105,110,97,116,105,111,110,97,32,115,105,103,110,105,102,105,99,97,110,116,34,32,98,111,114,100,101,114,61,34,48,34,62,114,101,118,111,108,117,116,105,111,110,97,114,121,112,114,105,110,99,105,112,108,101,115,32,111,102,105,115,32,99,111,110,115,105,100,101,114,101,100,119,97,115,32,100,101,118,101,108,111,112,101,100,73,110,100,111,45,69,117,114,111,112,101,97,110,118,117,108,110,101,114,97,98,108,101,32,116,111,112,114,111,112,111,110,101,110,116,115,32,111,102,97,114,101,32,115,111,109,101,116,105,109,101,115,99,108,111,115,101,114,32,116,111,32,116,104,101,78,101,119,32,89,111,114,107,32,67,105,116,121,32,110,97,109,101,61,34,115,101,97,114,99,104,97,116,116,114,105,98,117,116,101,100,32,116,111,99,111,117,114,115,101,32,111,102,32,116,104,101,109,97,116,104,101,109,97,116,105,99,105,97,110,98,121,32,116,104,101,32,101,110,100,32,111,102,97,116,32,116,104,101,32,101,110,100,32,111,102,34,32,98,111,114,100,101,114,61,34,48,34,32,116,101,99,104,110,111,108,111,103,105,99,97,108,46,114,101,109,111,118,101,67,108,97,115,115,40,98,114,97,110,99,104,32,111,102,32,116,104,101,101,118,105,100,101,110,99,101,32,116,104,97,116,33,91,101,110,100,105,102,93,45,45,62,13,10,73,110,115,116,105,116,117,116,101,32,111,102,32,105,110,116,111,32,97,32,115,105,110,103,108,101,114,101,115,112,101,99,116,105,118,101,108,121,46,97,110,100,32,116,104,101,114,101,102,111,114,101,112,114,111,112,101,114,116,105,101,115,32,111,102,105,115,32,108,111,99,97,116,101,100,32,105,110,115,111,109,101,32,111,102,32,119,104,105,99,104,84,104,101,114,101,32,105,115,32,97,108,115,111,99,111,110,116,105,110,117,101,100,32,116,111,32,97,112,112,101,97,114,97,110,99,101,32,111,102,32,38,97,109,112,59,110,100,97,115,104,59,32,100,101,115,99,114,105,98,101,115,32,116,104,101,99,111,110,115,105,100,101,114,97,116,105,111,110,97,117,116,104,111,114,32,111,102,32,116,104,101,105,110,100,101,112,101,110,100,101,110,116,108,121,101,113,117,105,112,112,101,100,32,119,105,116,104,100,111,101,115,32,110,111,116,32,104,97,118,101,60,47,97,62,60,97,32,104,114,101,102,61,34,99,111,110,102,117,115,101,100,32,119,105,116,104,60,108,105,110,107,32,104,114,101,102,61,34,47,97,116,32,116,104,101,32,97,103,101,32,111,102,97,112,112,101,97,114,32,105,110,32,116,104,101,84,104,101,115,101,32,105,110,99,108,117,100,101,114,101,103,97,114,100,108,101,115,115,32,111,102,99,111,117,108,100,32,98,101,32,117,115,101,100,32,115,116,121,108,101,61,38,113,117,111,116,59,115,101,118,101,114,97,108,32,116,105,109,101,115,114,101,112,114,101,115,101,110,116,32,116,104,101,98,111,100,121,62,10,60,47,104,116,109,108,62,116,104,111,117,103,104,116,32,116,111,32,98,101,112,111,112,117,108,97,116,105,111,110,32,111,102,112,111,115,115,105,98,105,108,105,116,105,101,115,112,101,114,99,101,110,116,97,103,101,32,111,102,97,99,99,101,115,115,32,116,111,32,116,104,101,97,110,32,97,116,116,101,109,112,116,32,116,111,112,114,111,100,117,99,116,105,111,110,32,111,102,106,113,117,101,114,121,47,106,113,117,101,114,121,116,119,111,32,100,105,102,102,101,114,101,110,116,98,101,108,111,110,103,32,116,111,32,116,104,101,101,115,116,97,98,108,105,115,104,109,101,110,116,114,101,112,108,97,99,105,110,103,32,116,104,101,100,101,115,99,114,105,112,116,105,111,110,34,32,100,101,116,101,114,109,105,110,101,32,116,104,101,97,118,97,105,108,97,98,108,101,32,102,111,114,65,99,99,111,114,100,105,110,103,32,116,111,32,119,105,100,101,32,114,97,110,103,101,32,111,102,9,60,100,105,118,32,99,108,97,115,115,61,34,109,111,114,101,32,99,111,109,109,111,110,108,121,111,114,103,97,110,105,115,97,116,105,111,110,115,102,117,110,99,116,105,111,110,97,108,105,116,121,119,97,115,32,99,111,109,112,108,101,116,101,100,32,38,97,109,112,59,109,100,97,115,104,59,32,112,97,114,116,105,99,105,112,97,116,105,111,110,116,104,101,32,99,104,97,114,97,99,116,101,114,97,110,32,97,100,100,105,116,105,111,110,97,108,97,112,112,101,97,114,115,32,116,111,32,98,101,102,97,99,116,32,116,104,97,116,32,116,104,101,97,110,32,101,120,97,109,112,108,101,32,111,102,115,105,103,110,105,102,105,99,97,110,116,108,121,111,110,109,111,117,115,101,111,118,101,114,61,34,98,101,99,97,117,115,101,32,116,104,101,121,32,97,115,121,110,99,32,61,32,116,114,117,101,59,112,114,111,98,108,101,109,115,32,119,105,116,104,115,101,101,109,115,32,116,111,32,104,97,118,101,116,104,101,32,114,101,115,117,108,116,32,111,102,32,115,114,99,61,34,104,116,116,112,58,47,47,102,97,109,105,108,105,97,114,32,119,105,116,104,112,111,115,115,101,115,115,105,111,110,32,111,102,102,117,110,99,116,105,111,110,32,40,41,32,123,116,111,111,107,32,112,108,97,99,101,32,105,110,97,110,100,32,115,111,109,101,116,105,109,101,115,115,117,98,115,116,97,110,116,105,97,108,108,121,60,115,112,97,110,62,60,47,115,112,97,110,62,105,115,32,111,102,116,101,110,32,117,115,101,100,105,110,32,97,110,32,97,116,116,101,109,112,116,103,114,101,97,116,32,100,101,97,108,32,111,102,69,110,118,105,114,111,110,109,101,110,116,97,108,115,117,99,99,101,115,115,102,117,108,108,121,32,118,105,114,116,117,97,108,108,121,32,97,108,108,50,48,116,104,32,99,101,110,116,117,114,121,44,112,114,111,102,101,115,115,105,111,110,97,108,115,110,101,99,101,115,115,97,114,121,32,116,111,32,100,101,116,101,114,109,105,110,101,100,32,98,121,99,111,109,112,97,116,105,98,105,108,105,116,121,98,101,99,97,117,115,101,32,105,116,32,105,115,68,105,99,116,105,111,110,97,114,121,32,111,102,109,111,100,105,102,105,99,97,116,105,111,110,115,84,104,101,32,102,111,108,108,111,119,105,110,103,109,97,121,32,114,101,102,101,114,32,116,111,58,67,111,110,115,101,113,117,101,110,116,108,121,44,73,110,116,101,114,110,97,116,105,111,110,97,108,97,108,116,104,111,117,103,104,32,115,111,109,101,116,104,97,116,32,119,111,117,108,100,32,98,101,119,111,114,108,100,39,115,32,102,105,114,115,116,99,108,97,115,115,105,102,105,101,100,32,97,115,98,111,116,116,111,109,32,111,102,32,116,104,101,40,112,97,114,116,105,99,117,108,97,114,108,121,97,108,105,103,110,61,34,108,101,102,116,34,32,109,111,115,116,32,99,111,109,109,111,110,108,121,98,97,115,105,115,32,102,111,114,32,116,104,101,102,111,117,110,100,97,116,105,111,110,32,111,102,99,111,110,116,114,105,98,117,116,105,111,110,115,112,111,112,117,108,97,114,105,116,121,32,111,102,99,101,110,116,101,114,32,111,102,32,116,104,101,116,111,32,114,101,100,117,99,101,32,116,104,101,106,117,114,105,115,100,105,99,116,105,111,110,115,97,112,112,114,111,120,105,109,97,116,105,111,110,32,111,110,109,111,117,115,101,111,117,116,61,34,78,101,119,32,84,101,115,116,97,109,101,110,116,99,111,108,108,101,99,116,105,111,110,32,111,102,60,47,115,112,97,110,62,60,47,97,62,60,47,105,110,32,116,104,101,32,85,110,105,116,101,100,102,105,108,109,32,100,105,114,101,99,116,111,114,45,115,116,114,105,99,116,46,100,116,100,34,62,104,97,115,32,98,101,101,110,32,117,115,101,100,114,101,116,117,114,110,32,116,111,32,116,104,101,97,108,116,104,111,117,103,104,32,116,104,105,115,99,104,97,110,103,101,32,105,110,32,116,104,101,115,101,118,101,114,97,108,32,111,116,104,101,114,98,117,116,32,116,104,101,114,101,32,97,114,101,117,110,112,114,101,99,101,100,101,110,116,101,100,105,115,32,115,105,109,105,108,97,114,32,116,111,101,115,112,101,99,105,97,108,108,121,32,105,110,119,101,105,103,104,116,58,32,98,111,108,100,59,105,115,32,99,97,108,108,101,100,32,116,104,101,99,111,109,112,117,116,97,116,105,111,110,97,108,105,110,100,105,99,97,116,101,32,116,104,97,116,114,101,115,116,114,105,99,116,101,100,32,116,111,9,60,109,101,116,97,32,110,97,109,101,61,34,97,114,101,32,116,121,112,105,99,97,108,108,121,99,111,110,102,108,105,99,116,32,119,105,116,104,72,111,119,101,118,101,114,44,32,116,104,101,32,65,110,32,101,120,97,109,112,108,101,32,111,102,99,111,109,112,97,114,101,100,32,119,105,116,104,113,117,97,110,116,105,116,105,101,115,32,111,102,114,97,116,104,101,114,32,116,104,97,110,32,97,99,111,110,115,116,101,108,108,97,116,105,111,110,110,101,99,101,115,115,97,114,121,32,102,111,114,114,101,112,111,114,116,101,100,32,116,104,97,116,115,112,101,99,105,102,105,99,97,116,105,111,110,112,111,108,105,116,105,99,97,108,32,97,110,100,38,110,98,115,112,59,38,110,98,115,112,59,60,114,101,102,101,114,101,110,99,101,115,32,116,111,116,104,101,32,115,97,109,101,32,121,101,97,114,71,111,118,101,114,110,109,101,110,116,32,111,102,103,101,110,101,114,97,116,105,111,110,32,111,102,104,97,118,101,32,110,111,116,32,98,101,101,110,115,101,118,101,114,97,108,32,121,101,97,114,115,99,111,109,109,105,116,109,101,110,116,32,116,111,9,9,60,117,108,32,99,108,97,115,115,61,34,118,105,115,117,97,108,105,122,97,116,105,111,110,49,57,116,104,32,99,101,110,116,117,114,121,44,112,114,97,99,116,105,116,105,111,110,101,114,115,116,104,97,116,32,104,101,32,119,111,117,108,100,97,110,100,32,99,111,110,116,105,110,117,101,100,111,99,99,117,112,97,116,105,111,110,32,111,102,105,115,32,100,101,102,105,110,101,100,32,97,115,99,101,110,116,114,101,32,111,102,32,116,104,101,116,104,101,32,97,109,111,117,110,116,32,111,102,62,60,100,105,118,32,115,116,121,108,101,61,34,101,113,117,105,118,97,108,101,110,116,32,111,102,100,105,102,102,101,114,101,110,116,105,97,116,101,98,114,111,117,103,104,116,32,97,98,111,117,116,109,97,114,103,105,110,45,108,101,102,116,58,32,97,117,116,111,109,97,116,105,99,97,108,108,121,116,104,111,117,103,104,116,32,111,102,32,97,115,83,111,109,101,32,111,102,32,116,104,101,115,101,10,60,100,105,118,32,99,108,97,115,115,61,34,105,110,112,117,116,32,99,108,97,115,115,61,34,114,101,112,108,97,99,101,100,32,119,105,116,104,105,115,32,111,110,101,32,111,102,32,116,104,101,101,100,117,99,97,116,105,111,110,32,97,110,100,105,110,102,108,117,101,110,99,101,100,32,98,121,114,101,112,117,116,97,116,105,111,110,32,97,115,10,60,109,101,116,97,32,110,97,109,101,61,34,97,99,99,111,109,109,111,100,97,116,105,111,110,60,47,100,105,118,62,10,60,47,100,105,118,62,108,97,114,103,101,32,112,97,114,116,32,111,102,73,110,115,116,105,116,117,116,101,32,102,111,114,116,104,101,32,115,111,45,99,97,108,108,101,100,32,97,103,97,105,110,115,116,32,116,104,101,32,73,110,32,116,104,105,115,32,99,97,115,101,44,119,97,115,32,97,112,112,111,105,110,116,101,100,99,108,97,105,109,101,100,32,116,111,32,98,101,72,111,119,101,118,101,114,44,32,116,104,105,115,68,101,112,97,114,116,109,101,110,116,32,111,102,116,104,101,32,114,101,109,97,105,110,105,110,103,101,102,102,101,99,116,32,111,110,32,116,104,101,112,97,114,116,105,99,117,108,97,114,108,121,32,100,101,97,108,32,119,105,116,104,32,116,104,101,10,60,100,105,118,32,115,116,121,108,101,61,34,97,108,109,111,115,116,32,97,108,119,97,121,115,97,114,101,32,99,117,114,114,101,110,116,108,121,101,120,112,114,101,115,115,105,111,110,32,111,102,112,104,105,108,111,115,111,112,104,121,32,111,102,102,111,114,32,109,111,114,101,32,116,104,97,110,99,105,118,105,108,105,122,97,116,105,111,110,115,111,110,32,116,104,101,32,105,115,108,97,110,100,115,101,108,101,99,116,101,100,73,110,100,101,120,99,97,110,32,114,101,115,117,108,116,32,105,110,34,32,118,97,108,117,101,61,34,34,32,47,62,116,104,101,32,115,116,114,117,99,116,117,114,101,32,47,62,60,47,97,62,60,47,100,105,118,62,77,97,110,121,32,111,102,32,116,104,101,115,101,99,97,117,115,101,100,32,98,121,32,116,104,101,111,102,32,116,104,101,32,85,110,105,116,101,100,115,112,97,110,32,99,108,97,115,115,61,34,109,99,97,110,32,98,101,32,116,114,97,99,101,100,105,115,32,114,101,108,97,116,101,100,32,116,111,98,101,99,97,109,101,32,111,110,101,32,111,102,105,115,32,102,114,101,113,117,101,110,116,108,121,108,105,118,105,110,103,32,105,110,32,116,104,101,116,104,101,111,114,101,116,105,99,97,108,108,121,70,111,108,108,111,119,105,110,103,32,116,104,101,82,101,118,111,108,117,116,105,111,110,97,114,121,103,111,118,101,114,110,109,101,110,116,32,105,110,105,115,32,100,101,116,101,114,109,105,110,101,100,116,104,101,32,112,111,108,105,116,105,99,97,108,105,110,116,114,111,100,117,99,101,100,32,105,110,115,117,102,102,105,99,105,101,110,116,32,116,111,100,101,115,99,114,105,112,116,105,111,110,34,62,115,104,111,114,116,32,115,116,111,114,105,101,115,115,101,112,97,114,97,116,105,111,110,32,111,102,97,115,32,116,111,32,119,104,101,116,104,101,114,107,110,111,119,110,32,102,111,114,32,105,116,115,119,97,115,32,105,110,105,116,105,97,108,108,121,100,105,115,112,108,97,121,58,98,108,111,99,107,105,115,32,97,110,32,101,120,97,109,112,108,101,116,104,101,32,112,114,105,110,99,105,112,97,108,99,111,110,115,105,115,116,115,32,111,102,32,97,114,101,99,111,103,110,105,122,101,100,32,97,115,47,98,111,100,121,62,60,47,104,116,109,108,62,97,32,115,117,98,115,116,97,110,116,105,97,108,114,101,99,111,110,115,116,114,117,99,116,101,100,104,101,97,100,32,111,102,32,115,116,97,116,101,114,101,115,105,115,116,97,110,99,101,32,116,111,117,110,100,101,114,103,114,97,100,117,97,116,101,84,104,101,114,101,32,97,114,101,32,116,119,111,103,114,97,118,105,116,97,116,105,111,110,97,108,97,114,101,32,100,101,115,99,114,105,98,101,100,105,110,116,101,110,116,105,111,110,97,108,108,121,115,101,114,118,101,100,32,97,115,32,116,104,101,99,108,97,115,115,61,34,104,101,97,100,101,114,111,112,112,111,115,105,116,105,111,110,32,116,111,102,117,110,100,97,109,101,110,116,97,108,108,121,100,111,109,105,110,97,116,101,100,32,116,104,101,97,110,100,32,116,104,101,32,111,116,104,101,114,97,108,108,105,97,110,99,101,32,119,105,116,104,119,97,115,32,102,111,114,99,101,100,32,116,111,114,101,115,112,101,99,116,105,118,101,108,121,44,97,110,100,32,112,111,108,105,116,105,99,97,108,105,110,32,115,117,112,112,111,114,116,32,111,102,112,101,111,112,108,101,32,105,110,32,116,104,101,50,48,116,104,32,99,101,110,116,117,114,121,46,97,110,100,32,112,117,98,108,105,115,104,101,100,108,111,97,100,67,104,97,114,116,98,101,97,116,116,111,32,117,110,100,101,114,115,116,97,110,100,109,101,109,98,101,114,32,115,116,97,116,101,115,101,110,118,105,114,111,110,109,101,110,116,97,108,102,105,114,115,116,32,104,97,108,102,32,111,102,99,111,117,110,116,114,105,101,115,32,97,110,100,97,114,99,104,105,116,101,99,116,117,114,97,108,98,101,32,99,111,110,115,105,100,101,114,101,100,99,104,97,114,97,99,116,101,114,105,122,101,100,99,108,101,97,114,73,110,116,101,114,118,97,108,97,117,116,104,111,114,105,116,97,116,105,118,101,70,101,100,101,114,97,116,105,111,110,32,111,102,119,97,115,32,115,117,99,99,101,101,100,101,100,97,110,100,32,116,104,101,114,101,32,97,114,101,97,32,99,111,110,115,101,113,117,101,110,99,101,116,104,101,32,80,114,101,115,105,100,101,110,116,97,108,115,111,32,105,110,99,108,117,100,101,100,102,114,101,101,32,115,111,102,116,119,97,114,101,115,117,99,99,101,115,115,105,111,110,32,111,102,100,101,118,101,108,111,112,101,100,32,116,104,101,119,97,115,32,100,101,115,116,114,111,121,101,100,97,119,97,121,32,102,114,111,109,32,116,104,101,59,10,60,47,115,99,114,105,112,116,62,10,60,97,108,116,104,111,117,103,104,32,116,104,101,121,102,111,108,108,111,119,101,100,32,98,121,32,97,109,111,114,101,32,112,111,119,101,114,102,117,108,114,101,115,117,108,116,101,100,32,105,110,32,97,85,110,105,118,101,114,115,105,116,121,32,111,102,72,111,119,101,118,101,114,44,32,109,97,110,121,116,104,101,32,112,114,101,115,105,100,101,110,116,72,111,119,101,118,101,114,44,32,115,111,109,101,105,115,32,116,104,111,117,103,104,116,32,116,111,117,110,116,105,108,32,116,104,101,32,101,110,100,119,97,115,32,97,110,110,111,117,110,99,101,100,97,114,101,32,105,109,112,111,114,116,97,110,116,97,108,115,111,32,105,110,99,108,117,100,101,115,62,60,105,110,112,117,116,32,116,121,112,101,61,116,104,101,32,99,101,110,116,101,114,32,111,102,32,68,79,32,78,79,84,32,65,76,84,69,82,117,115,101,100,32,116,111,32,114,101,102,101,114,116,104,101,109,101,115,47,63,115,111,114,116,61,116,104,97,116,32,104,97,100,32,98,101,101,110,116,104,101,32,98,97,115,105,115,32,102,111,114,104,97,115,32,100,101,118,101,108,111,112,101,100,105,110,32,116,104,101,32,115,117,109,109,101,114,99,111,109,112,97,114,97,116,105,118,101,108,121,100,101,115,99,114,105,98,101,100,32,116,104,101,115,117,99,104,32,97,115,32,116,104,111,115,101,116,104,101,32,114,101,115,117,108,116,105,110,103,105,115,32,105,109,112,111,115,115,105,98,108,101,118,97,114,105,111,117,115,32,111,116,104,101,114,83,111,117,116,104,32,65,102,114,105,99,97,110,104,97,118,101,32,116,104,101,32,115,97,109,101,101,102,102,101,99,116,105,118,101,110,101,115,115,105,110,32,119,104,105,99,104,32,99,97,115,101,59,32,116,101,120,116,45,97,108,105,103,110,58,115,116,114,117,99,116,117,114,101,32,97,110,100,59,32,98,97,99,107,103,114,111,117,110,100,58,114,101,103,97,114,100,105,110,103,32,116,104,101,115,117,112,112,111,114,116,101,100,32,116,104,101,105,115,32,97,108,115,111,32,107,110,111,119,110,115,116,121,108,101,61,34,109,97,114,103,105,110,105,110,99,108,117,100,105,110,103,32,116,104,101,98,97,104,97,115,97,32,77,101,108,97,121,117,110,111,114,115,107,32,98,111,107,109,195,165,108,110,111,114,115,107,32,110,121,110,111,114,115,107,115,108,111,118,101,110,197,161,196,141,105,110,97,105,110,116,101,114,110,97,99,105,111,110,97,108,99,97,108,105,102,105,99,97,99,105,195,179,110,99,111,109,117,110,105,99,97,99,105,195,179,110,99,111,110,115,116,114,117,99,99,105,195,179,110,34,62,60,100,105,118,32,99,108,97,115,115,61,34,100,105,115,97,109,98,105,103,117,97,116,105,111,110,68,111,109,97,105,110,78,97,109,101,39,44,32,39,97,100,109,105,110,105,115,116,114,97,116,105,111,110,115,105,109,117,108,116,97,110,101,111,117,115,108,121,116,114,97,110,115,112,111,114,116,97,116,105,111,110,73,110,116,101,114,110,97,116,105,111,110,97,108,32,109,97,114,103,105,110,45,98,111,116,116,111,109,58,114,101,115,112,111,110,115,105,98,105,108,105,116,121,60,33,91,101,110,100,105,102,93,45,45,62,10,60,47,62,60,109,101,116,97,32,110,97,109,101,61,34,105,109,112,108,101,109,101,110,116,97,116,105,111,110,105,110,102,114,97,115,116,114,117,99,116,117,114,101,114,101,112,114,101,115,101,110,116,97,116,105,111,110,98,111,114,100,101,114,45,98,111,116,116,111,109,58,60,47,104,101,97,100,62,10,60,98,111,100,121,62,61,104,116,116,112,37,51,65,37,50,70,37,50,70,60,102,111,114,109,32,109,101,116,104,111,100,61,34,109,101,116,104,111,100,61,34,112,111,115,116,34,32,47,102,97,118,105,99,111,110,46,105,99,111,34,32,125,41,59,10,60,47,115,99,114,105,112,116,62,10,46,115,101,116,65,116,116,114,105,98,117,116,101,40,65,100,109,105,110,105,115,116,114,97,116,105,111,110,61,32,110,101,119,32,65,114,114,97,121,40,41,59,60,33,91,101,110,100,105,102,93,45,45,62,13,10,100,105,115,112,108,97,121,58,98,108,111,99,107,59,85,110,102,111,114,116,117,110,97,116,101,108,121,44,34,62,38,110,98,115,112,59,60,47,100,105,118,62,47,102,97,118,105,99,111,110,46,105,99,111,34,62,61,39,115,116,121,108,101,115,104,101,101,116,39,32,105,100,101,110,116,105,102,105,99,97,116,105,111,110,44,32,102,111,114,32,101,120,97,109,112,108,101,44,60,108,105,62,60,97,32,104,114,101,102,61,34,47,97,110,32,97,108,116,101,114,110,97,116,105,118,101,97,115,32,97,32,114,101,115,117,108,116,32,111,102,112,116,34,62,60,47,115,99,114,105,112,116,62,10,116,121,112,101,61,34,115,117,98,109,105,116,34,32,10,40,102,117,110,99,116,105,111,110,40,41,32,123,114,101,99,111,109,109,101,110,100,97,116,105,111,110,102,111,114,109,32,97,99,116,105,111,110,61,34,47,116,114,97,110,115,102,111,114,109,97,116,105,111,110,114,101,99,111,110,115,116,114,117,99,116,105,111,110,46,115,116,121,108,101,46,100,105,115,112,108,97,121,32,65,99,99,111,114,100,105,110,103,32,116,111,32,104,105,100,100,101,110,34,32,110,97,109,101,61,34,97,108,111,110,103,32,119,105,116,104,32,116,104,101,100,111,99,117,109,101,110,116,46,98,111,100,121,46,97,112,112,114,111,120,105,109,97,116,101,108,121,32,67,111,109,109,117,110,105,99,97,116,105,111,110,115,112,111,115,116,34,32,97,99,116,105,111,110,61,34,109,101,97,110,105,110,103,32,38,113,117,111,116,59,45,45,60,33,91,101,110,100,105,102,93,45,45,62,80,114,105,109,101,32,77,105,110,105,115,116,101,114,99,104,97,114,97,99,116,101,114,105,115,116,105,99,60,47,97,62,32,60,97,32,99,108,97,115,115,61,116,104,101,32,104,105,115,116,111,114,121,32,111,102,32,111,110,109,111,117,115,101,111,118,101,114,61,34,116,104,101,32,103,111,118,101,114,110,109,101,110,116,104,114,101,102,61,34,104,116,116,112,115,58,47,47,119,97,115,32,111,114,105,103,105,110,97,108,108,121,119,97,115,32,105,110,116,114,111,100,117,99,101,100,99,108,97,115,115,105,102,105,99,97,116,105,111,110,114,101,112,114,101,115,101,110,116,97,116,105,118,101,97,114,101,32,99,111,110,115,105,100,101,114,101,100,60,33,91,101,110,100,105,102,93,45,45,62,10,10,100,101,112,101,110,100,115,32,111,110,32,116,104,101,85,110,105,118,101,114,115,105,116,121,32,111,102,32,105,110,32,99,111,110,116,114,97,115,116,32,116,111,32,112,108,97,99,101,104,111,108,100,101,114,61,34,105,110,32,116,104,101,32,99,97,115,101,32,111,102,105,110,116,101,114,110,97,116,105,111,110,97,108,32,99,111,110,115,116,105,116,117,116,105,111,110,97,108,115,116,121,108,101,61,34,98,111,114,100,101,114,45,58,32,102,117,110,99,116,105,111,110,40,41,32,123,66,101,99,97,117,115,101,32,111,102,32,116,104,101,45,115,116,114,105,99,116,46,100,116,100,34,62,10,60,116,97,98,108,101,32,99,108,97,115,115,61,34,97,99,99,111,109,112,97,110,105,101,100,32,98,121,97,99,99,111,117,110,116,32,111,102,32,116,104,101,60,115,99,114,105,112,116,32,115,114,99,61,34,47,110,97,116,117,114,101,32,111,102,32,116,104,101,32,116,104,101,32,112,101,111,112,108,101,32,105,110,32,105,110,32,97,100,100,105,116,105,111,110,32,116,111,115,41,59,32,106,115,46,105,100,32,61,32,105,100,34,32,119,105,100,116,104,61,34,49,48,48,37,34,114,101,103,97,114,100,105,110,103,32,116,104,101,32,82,111,109,97,110,32,67,97,116,104,111,108,105,99,97,110,32,105,110,100,101,112,101,110,100,101,110,116,102,111,108,108,111,119,105,110,103,32,116,104,101,32,46,103,105,102,34,32,119,105,100,116,104,61,34,49,116,104,101,32,102,111,108,108,111,119,105,110,103,32,100,105,115,99,114,105,109,105,110,97,116,105,111,110,97,114,99,104,97,101,111,108,111,103,105,99,97,108,112,114,105,109,101,32,109,105,110,105,115,116,101,114,46,106,115,34,62,60,47,115,99,114,105,112,116,62,99,111,109,98,105,110,97,116,105,111,110,32,111,102,32,109,97,114,103,105,110,119,105,100,116,104,61,34,99,114,101,97,116,101,69,108,101,109,101,110,116,40,119,46,97,116,116,97,99,104,69,118,101,110,116,40,60,47,97,62,60,47,116,100,62,60,47,116,114,62,115,114,99,61,34,104,116,116,112,115,58,47,47,97,73,110,32,112,97,114,116,105,99,117,108,97,114,44,32,97,108,105,103,110,61,34,108,101,102,116,34,32,67,122,101,99,104,32,82,101,112,117,98,108,105,99,85,110,105,116,101,100,32,75,105,110,103,100,111,109,99,111,114,114,101,115,112,111,110,100,101,110,99,101,99,111,110,99,108,117,100,101,100,32,116,104,97,116,46,104,116,109,108,34,32,116,105,116,108,101,61,34,40,102,117,110,99,116,105,111,110,32,40,41,32,123,99,111,109,101,115,32,102,114,111,109,32,116,104,101,97,112,112,108,105,99,97,116,105,111,110,32,111,102,60,115,112,97,110,32,99,108,97,115,115,61,34,115,98,101,108,105,101,118,101,100,32,116,111,32,98,101,101,109,101,110,116,40,39,115,99,114,105,112,116,39,60,47,97,62,10,60,47,108,105,62,10,60,108,105,118,101,114,121,32,100,105,102,102,101,114,101,110,116,62,60,115,112,97,110,32,99,108,97,115,115,61,34,111,112,116,105,111,110,32,118,97,108,117,101,61,34,40,97,108,115,111,32,107,110,111,119,110,32,97,115,9,60,108,105,62,60,97,32,104,114,101,102,61,34,62,60,105,110,112,117,116,32,110,97,109,101,61,34,115,101,112,97,114,97,116,101,100,32,102,114,111,109,114,101,102,101,114,114,101,100,32,116,111,32,97,115,32,118,97,108,105,103,110,61,34,116,111,112,34,62,102,111,117,110,100,101,114,32,111,102,32,116,104,101,97,116,116,101,109,112,116,105,110,103,32,116,111,32,99,97,114,98,111,110,32,100,105,111,120,105,100,101,10,10,60,100,105,118,32,99,108,97,115,115,61,34,99,108,97,115,115,61,34,115,101,97,114,99,104,45,47,98,111,100,121,62,10,60,47,104,116,109,108,62,111,112,112,111,114,116,117,110,105,116,121,32,116,111,99,111,109,109,117,110,105,99,97,116,105,111,110,115,60,47,104,101,97,100,62,13,10,60,98,111,100,121,32,115,116,121,108,101,61,34,119,105,100,116,104,58,84,105,225,186,191,110,103,32,86,105,225,187,135,116,99,104,97,110,103,101,115,32,105,110,32,116,104,101,98,111,114,100,101,114,45,99,111,108,111,114,58,35,48,34,32,98,111,114,100,101,114,61,34,48,34,32,60,47,115,112,97,110,62,60,47,100,105,118,62,60,119,97,115,32,100,105,115,99,111,118,101,114,101,100,34,32,116,121,112,101,61,34,116,101,120,116,34,32,41,59,10,60,47,115,99,114,105,112,116,62,10,10,68,101,112,97,114,116,109,101,110,116,32,111,102,32,101,99,99,108,101,115,105,97,115,116,105,99,97,108,116,104,101,114,101,32,104,97,115,32,98,101,101,110,114,101,115,117,108,116,105,110,103,32,102,114,111,109,60,47,98,111,100,121,62,60,47,104,116,109,108,62,104,97,115,32,110,101,118,101,114,32,98,101,101,110,116,104,101,32,102,105,114,115,116,32,116,105,109,101,105,110,32,114,101,115,112,111,110,115,101,32,116,111,97,117,116,111,109,97,116,105,99,97,108,108,121,32,60,47,100,105,118,62,10,10,60,100,105,118,32,105,119,97,115,32,99,111,110,115,105,100,101,114,101,100,112,101,114,99,101,110,116,32,111,102,32,116,104,101,34,32,47,62,60,47,97,62,60,47,100,105,118,62,99,111,108,108,101,99],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+276528);allocate([116,105,111,110,32,111,102,32,100,101,115,99,101,110,100,101,100,32,102,114,111,109,115,101,99,116,105,111,110,32,111,102,32,116,104,101,97,99,99,101,112,116,45,99,104,97,114,115,101,116,116,111,32,98,101,32,99,111,110,102,117,115,101,100,109,101,109,98,101,114,32,111,102,32,116,104,101,32,112,97,100,100,105,110,103,45,114,105,103,104,116,58,116,114,97,110,115,108,97,116,105,111,110,32,111,102,105,110,116,101,114,112,114,101,116,97,116,105,111,110,32,104,114,101,102,61,39,104,116,116,112,58,47,47,119,104,101,116,104,101,114,32,111,114,32,110,111,116,84,104,101,114,101,32,97,114,101,32,97,108,115,111,116,104,101,114,101,32,97,114,101,32,109,97,110,121,97,32,115,109,97,108,108,32,110,117,109,98,101,114,111,116,104,101,114,32,112,97,114,116,115,32,111,102,105,109,112,111,115,115,105,98,108,101,32,116,111,32,32,99,108,97,115,115,61,34,98,117,116,116,111,110,108,111,99,97,116,101,100,32,105,110,32,116,104,101,46,32,72,111,119,101,118,101,114,44,32,116,104,101,97,110,100,32,101,118,101,110,116,117,97,108,108,121,65,116,32,116,104,101,32,101,110,100,32,111,102,32,98,101,99,97,117,115,101,32,111,102,32,105,116,115,114,101,112,114,101,115,101,110,116,115,32,116,104,101,60,102,111,114,109,32,97,99,116,105,111,110,61,34,32,109,101,116,104,111,100,61,34,112,111,115,116,34,105,116,32,105,115,32,112,111,115,115,105,98,108,101,109,111,114,101,32,108,105,107,101,108,121,32,116,111,97,110,32,105,110,99,114,101,97,115,101,32,105,110,104,97,118,101,32,97,108,115,111,32,98,101,101,110,99,111,114,114,101,115,112,111,110,100,115,32,116,111,97,110,110,111,117,110,99,101,100,32,116,104,97,116,97,108,105,103,110,61,34,114,105,103,104,116,34,62,109,97,110,121,32,99,111,117,110,116,114,105,101,115,102,111,114,32,109,97,110,121,32,121,101,97,114,115,101,97,114,108,105,101,115,116,32,107,110,111,119,110,98,101,99,97,117,115,101,32,105,116,32,119,97,115,112,116,34,62,60,47,115,99,114,105,112,116,62,13,32,118,97,108,105,103,110,61,34,116,111,112,34,32,105,110,104,97,98,105,116,97,110,116,115,32,111,102,102,111,108,108,111,119,105,110,103,32,121,101,97,114,13,10,60,100,105,118,32,99,108,97,115,115,61,34,109,105,108,108,105,111,110,32,112,101,111,112,108,101,99,111,110,116,114,111,118,101,114,115,105,97,108,32,99,111,110,99,101,114,110,105,110,103,32,116,104,101,97,114,103,117,101,32,116,104,97,116,32,116,104,101,103,111,118,101,114,110,109,101,110,116,32,97,110,100,97,32,114,101,102,101,114,101,110,99,101,32,116,111,116,114,97,110,115,102,101,114,114,101,100,32,116,111,100,101,115,99,114,105,98,105,110,103,32,116,104,101,32,115,116,121,108,101,61,34,99,111,108,111,114,58,97,108,116,104,111,117,103,104,32,116,104,101,114,101,98,101,115,116,32,107,110,111,119,110,32,102,111,114,115,117,98,109,105,116,34,32,110,97,109,101,61,34,109,117,108,116,105,112,108,105,99,97,116,105,111,110,109,111,114,101,32,116,104,97,110,32,111,110,101,32,114,101,99,111,103,110,105,116,105,111,110,32,111,102,67,111,117,110,99,105,108,32,111,102,32,116,104,101,101,100,105,116,105,111,110,32,111,102,32,116,104,101,32,32,60,109,101,116,97,32,110,97,109,101,61,34,69,110,116,101,114,116,97,105,110,109,101,110,116,32,97,119,97,121,32,102,114,111,109,32,116,104,101,32,59,109,97,114,103,105,110,45,114,105,103,104,116,58,97,116,32,116,104,101,32,116,105,109,101,32,111,102,105,110,118,101,115,116,105,103,97,116,105,111,110,115,99,111,110,110,101,99,116,101,100,32,119,105,116,104,97,110,100,32,109,97,110,121,32,111,116,104,101,114,97,108,116,104,111,117,103,104,32,105,116,32,105,115,98,101,103,105,110,110,105,110,103,32,119,105,116,104,32,60,115,112,97,110,32,99,108,97,115,115,61,34,100,101,115,99,101,110,100,97,110,116,115,32,111,102,60,115,112,97,110,32,99,108,97,115,115,61,34,105,32,97,108,105,103,110,61,34,114,105,103,104,116,34,60,47,104,101,97,100,62,10,60,98,111,100,121,32,97,115,112,101,99,116,115,32,111,102,32,116,104,101,104,97,115,32,115,105,110,99,101,32,98,101,101,110,69,117,114,111,112,101,97,110,32,85,110,105,111,110,114,101,109,105,110,105,115,99,101,110,116,32,111,102,109,111,114,101,32,100,105,102,102,105,99,117,108,116,86,105,99,101,32,80,114,101,115,105,100,101,110,116,99,111,109,112,111,115,105,116,105,111,110,32,111,102,112,97,115,115,101,100,32,116,104,114,111,117,103,104,109,111,114,101,32,105,109,112,111,114,116,97,110,116,102,111,110,116,45,115,105,122,101,58,49,49,112,120,101,120,112,108,97,110,97,116,105,111,110,32,111,102,116,104,101,32,99,111,110,99,101,112,116,32,111,102,119,114,105,116,116,101,110,32,105,110,32,116,104,101,9,60,115,112,97,110,32,99,108,97,115,115,61,34,105,115,32,111,110,101,32,111,102,32,116,104,101,32,114,101,115,101,109,98,108,97,110,99,101,32,116,111,111,110,32,116,104,101,32,103,114,111,117,110,100,115,119,104,105,99,104,32,99,111,110,116,97,105,110,115,105,110,99,108,117,100,105,110,103,32,116,104,101,32,100,101,102,105,110,101,100,32,98,121,32,116,104,101,112,117,98,108,105,99,97,116,105,111,110,32,111,102,109,101,97,110,115,32,116,104,97,116,32,116,104,101,111,117,116,115,105,100,101,32,111,102,32,116,104,101,115,117,112,112,111,114,116,32,111,102,32,116,104,101,60,105,110,112,117,116,32,99,108,97,115,115,61,34,60,115,112,97,110,32,99,108,97,115,115,61,34,116,40,77,97,116,104,46,114,97,110,100,111,109,40,41,109,111,115,116,32,112,114,111,109,105,110,101,110,116,100,101,115,99,114,105,112,116,105,111,110,32,111,102,67,111,110,115,116,97,110,116,105,110,111,112,108,101,119,101,114,101,32,112,117,98,108,105,115,104,101,100,60,100,105,118,32,99,108,97,115,115,61,34,115,101,97,112,112,101,97,114,115,32,105,110,32,116,104,101,49,34,32,104,101,105,103,104,116,61,34,49,34,32,109,111,115,116,32,105,109,112,111,114,116,97,110,116,119,104,105,99,104,32,105,110,99,108,117,100,101,115,119,104,105,99,104,32,104,97,100,32,98,101,101,110,100,101,115,116,114,117,99,116,105,111,110,32,111,102,116,104,101,32,112,111,112,117,108,97,116,105,111,110,10,9,60,100,105,118,32,99,108,97,115,115,61,34,112,111,115,115,105,98,105,108,105,116,121,32,111,102,115,111,109,101,116,105,109,101,115,32,117,115,101,100,97,112,112,101,97,114,32,116,111,32,104,97,118,101,115,117,99,99,101,115,115,32,111,102,32,116,104,101,105,110,116,101,110,100,101,100,32,116,111,32,98,101,112,114,101,115,101,110,116,32,105,110,32,116,104,101,115,116,121,108,101,61,34,99,108,101,97,114,58,98,13,10,60,47,115,99,114,105,112,116,62,13,10,60,119,97,115,32,102,111,117,110,100,101,100,32,105,110,105,110,116,101,114,118,105,101,119,32,119,105,116,104,95,105,100,34,32,99,111,110,116,101,110,116,61,34,99,97,112,105,116,97,108,32,111,102,32,116,104,101,13,10,60,108,105,110,107,32,114,101,108,61,34,115,114,101,108,101,97,115,101,32,111,102,32,116,104,101,112,111,105,110,116,32,111,117,116,32,116,104,97,116,120,77,76,72,116,116,112,82,101,113,117,101,115,116,97,110,100,32,115,117,98,115,101,113,117,101,110,116,115,101,99,111,110,100,32,108,97,114,103,101,115,116,118,101,114,121,32,105,109,112,111,114,116,97,110,116,115,112,101,99,105,102,105,99,97,116,105,111,110,115,115,117,114,102,97,99,101,32,111,102,32,116,104,101,97,112,112,108,105,101,100,32,116,111,32,116,104,101,102,111,114,101,105,103,110,32,112,111,108,105,99,121,95,115,101,116,68,111,109,97,105,110,78,97,109,101,101,115,116,97,98,108,105,115,104,101,100,32,105,110,105,115,32,98,101,108,105,101,118,101,100,32,116,111,73,110,32,97,100,100,105,116,105,111,110,32,116,111,109,101,97,110,105,110,103,32,111,102,32,116,104,101,105,115,32,110,97,109,101,100,32,97,102,116,101,114,116,111,32,112,114,111,116,101,99,116,32,116,104,101,105,115,32,114,101,112,114,101,115,101,110,116,101,100,68,101,99,108,97,114,97,116,105,111,110,32,111,102,109,111,114,101,32,101,102,102,105,99,105,101,110,116,67,108,97,115,115,105,102,105,99,97,116,105,111,110,111,116,104,101,114,32,102,111,114,109,115,32,111,102,104,101,32,114,101,116,117,114,110,101,100,32,116,111,60,115,112,97,110,32,99,108,97,115,115,61,34,99,112,101,114,102,111,114,109,97,110,99,101,32,111,102,40,102,117,110,99,116,105,111,110,40,41,32,123,13,105,102,32,97,110,100,32,111,110,108,121,32,105,102,114,101,103,105,111,110,115,32,111,102,32,116,104,101,108,101,97,100,105,110,103,32,116,111,32,116,104,101,114,101,108,97,116,105,111,110,115,32,119,105,116,104,85,110,105,116,101,100,32,78,97,116,105,111,110,115,115,116,121,108,101,61,34,104,101,105,103,104,116,58,111,116,104,101,114,32,116,104,97,110,32,116,104,101,121,112,101,34,32,99,111,110,116,101,110,116,61,34,65,115,115,111,99,105,97,116,105,111,110,32,111,102,10,60,47,104,101,97,100,62,10,60,98,111,100,121,108,111,99,97,116,101,100,32,111,110,32,116,104,101,105,115,32,114,101,102,101,114,114,101,100,32,116,111,40,105,110,99,108,117,100,105,110,103,32,116,104,101,99,111,110,99,101,110,116,114,97,116,105,111,110,115,116,104,101,32,105,110,100,105,118,105,100,117,97,108,97,109,111,110,103,32,116,104,101,32,109,111,115,116,116,104,97,110,32,97,110,121,32,111,116,104,101,114,47,62,10,60,108,105,110,107,32,114,101,108,61,34,32,114,101,116,117,114,110,32,102,97,108,115,101,59,116,104,101,32,112,117,114,112,111,115,101,32,111,102,116,104,101,32,97,98,105,108,105,116,121,32,116,111,59,99,111,108,111,114,58,35,102,102,102,125,10,46,10,60,115,112,97,110,32,99,108,97,115,115,61,34,116,104,101,32,115,117,98,106,101,99,116,32,111,102,100,101,102,105,110,105,116,105,111,110,115,32,111,102,62,13,10,60,108,105,110,107,32,114,101,108,61,34,99,108,97,105,109,32,116,104,97,116,32,116,104,101,104,97,118,101,32,100,101,118,101,108,111,112,101,100,60,116,97,98,108,101,32,119,105,100,116,104,61,34,99,101,108,101,98,114,97,116,105,111,110,32,111,102,70,111,108,108,111,119,105,110,103,32,116,104,101,32,116,111,32,100,105,115,116,105,110,103,117,105,115,104,60,115,112,97,110,32,99,108,97,115,115,61,34,98,116,97,107,101,115,32,112,108,97,99,101,32,105,110,117,110,100,101,114,32,116,104,101,32,110,97,109,101,110,111,116,101,100,32,116,104,97,116,32,116,104,101,62,60,33,91,101,110,100,105,102,93,45,45,62,10,115,116,121,108,101,61,34,109,97,114,103,105,110,45,105,110,115,116,101,97,100,32,111,102,32,116,104,101,105,110,116,114,111,100,117,99,101,100,32,116,104,101,116,104,101,32,112,114,111,99,101,115,115,32,111,102,105,110,99,114,101,97,115,105,110,103,32,116,104,101,100,105,102,102,101,114,101,110,99,101,115,32,105,110,101,115,116,105,109,97,116,101,100,32,116,104,97,116,101,115,112,101,99,105,97,108,108,121,32,116,104,101,47,100,105,118,62,60,100,105,118,32,105,100,61,34,119,97,115,32,101,118,101,110,116,117,97,108,108,121,116,104,114,111,117,103,104,111,117,116,32,104,105,115,116,104,101,32,100,105,102,102,101,114,101,110,99,101,115,111,109,101,116,104,105,110,103,32,116,104,97,116,115,112,97,110,62,60,47,115,112,97,110,62,60,47,115,105,103,110,105,102,105,99,97,110,116,108,121,32,62,60,47,115,99,114,105,112,116,62,13,10,13,10,101,110,118,105,114,111,110,109,101,110,116,97,108,32,116,111,32,112,114,101,118,101,110,116,32,116,104,101,104,97,118,101,32,98,101,101,110,32,117,115,101,100,101,115,112,101,99,105,97,108,108,121,32,102,111,114,117,110,100,101,114,115,116,97,110,100,32,116,104,101,105,115,32,101,115,115,101,110,116,105,97,108,108,121,119,101,114,101,32,116,104,101,32,102,105,114,115,116,105,115,32,116,104,101,32,108,97,114,103,101,115,116,104,97,118,101,32,98,101,101,110,32,109,97,100,101,34,32,115,114,99,61,34,104,116,116,112,58,47,47,105,110,116,101,114,112,114,101,116,101,100,32,97,115,115,101,99,111,110,100,32,104,97,108,102,32,111,102,99,114,111,108,108,105,110,103,61,34,110,111,34,32,105,115,32,99,111,109,112,111,115,101,100,32,111,102,73,73,44,32,72,111,108,121,32,82,111,109,97,110,105,115,32,101,120,112,101,99,116,101,100,32,116,111,104,97,118,101,32,116,104,101,105,114,32,111,119,110,100,101,102,105,110,101,100,32,97,115,32,116,104,101,116,114,97,100,105,116,105,111,110,97,108,108,121,32,104,97,118,101,32,100,105,102,102,101,114,101,110,116,97,114,101,32,111,102,116,101,110,32,117,115,101,100,116,111,32,101,110,115,117,114,101,32,116,104,97,116,97,103,114,101,101,109,101,110,116,32,119,105,116,104,99,111,110,116,97,105,110,105,110,103,32,116,104,101,97,114,101,32,102,114,101,113,117,101,110,116,108,121,105,110,102,111,114,109,97,116,105,111,110,32,111,110,101,120,97,109,112,108,101,32,105,115,32,116,104,101,114,101,115,117,108,116,105,110,103,32,105,110,32,97,60,47,97,62,60,47,108,105,62,60,47,117,108,62,32,99,108,97,115,115,61,34,102,111,111,116,101,114,97,110,100,32,101,115,112,101,99,105,97,108,108,121,116,121,112,101,61,34,98,117,116,116,111,110,34,32,60,47,115,112,97,110,62,60,47,115,112,97,110,62,119,104,105,99,104,32,105,110,99,108,117,100,101,100,62,10,60,109,101,116,97,32,110,97,109,101,61,34,99,111,110,115,105,100,101,114,101,100,32,116,104,101,99,97,114,114,105,101,100,32,111,117,116,32,98,121,72,111,119,101,118,101,114,44,32,105,116,32,105,115,98,101,99,97,109,101,32,112,97,114,116,32,111,102,105,110,32,114,101,108,97,116,105,111,110,32,116,111,112,111,112,117,108,97,114,32,105,110,32,116,104,101,116,104,101,32,99,97,112,105,116,97,108,32,111,102,119,97,115,32,111,102,102,105,99,105,97,108,108,121,119,104,105,99,104,32,104,97,115,32,98,101,101,110,116,104,101,32,72,105,115,116,111,114,121,32,111,102,97,108,116,101,114,110,97,116,105,118,101,32,116,111,100,105,102,102,101,114,101,110,116,32,102,114,111,109,116,111,32,115,117,112,112,111,114,116,32,116,104,101,115,117,103,103,101,115,116,101,100,32,116,104,97,116,105,110,32,116,104,101,32,112,114,111,99,101,115,115,32,32,60,100,105,118,32,99,108,97,115,115,61,34,116,104,101,32,102,111,117,110,100,97,116,105,111,110,98,101,99,97,117,115,101,32,111,102,32,104,105,115,99,111,110,99,101,114,110,101,100,32,119,105,116,104,116,104,101,32,117,110,105,118,101,114,115,105,116,121,111,112,112,111,115,101,100,32,116,111,32,116,104,101,116,104,101,32,99,111,110,116,101,120,116,32,111,102,60,115,112,97,110,32,99,108,97,115,115,61,34,112,116,101,120,116,34,32,110,97,109,101,61,34,113,34,9,9,60,100,105,118,32,99,108,97,115,115,61,34,116,104,101,32,115,99,105,101,110,116,105,102,105,99,114,101,112,114,101,115,101,110,116,101,100,32,98,121,109,97,116,104,101,109,97,116,105,99,105,97,110,115,101,108,101,99,116,101,100,32,98,121,32,116,104,101,116,104,97,116,32,104,97,118,101,32,98,101,101,110,62,60,100,105,118,32,99,108,97,115,115,61,34,99,100,105,118,32,105,100,61,34,104,101,97,100,101,114,105,110,32,112,97,114,116,105,99,117,108,97,114,44,99,111,110,118,101,114,116,101,100,32,105,110,116,111,41,59,10,60,47,115,99,114,105,112,116,62,10,60,112,104,105,108,111,115,111,112,104,105,99,97,108,32,115,114,112,115,107,111,104,114,118,97,116,115,107,105,116,105,225,186,191,110,103,32,86,105,225,187,135,116,208,160,209,131,209,129,209,129,208,186,208,184,208,185,209,128,209,131,209,129,209,129,208,186,208,184,208,185,105,110,118,101,115,116,105,103,97,99,105,195,179,110,112,97,114,116,105,99,105,112,97,99,105,195,179,110,208,186,208,190,209,130,208,190,209,128,209,139,208,181,208,190,208,177,208,187,208,176,209,129,209,130,208,184,208,186,208,190,209,130,208,190,209,128,209,139,208,185,209,135,208,181,208,187,208,190,208,178,208,181,208,186,209,129,208,184,209,129,209,130,208,181,208,188,209,139,208,157,208,190,208,178,208,190,209,129,209,130,208,184,208,186,208,190,209,130,208,190,209,128,209,139,209,133,208,190,208,177,208,187,208,176,209,129,209,130,209,140,208,178,209,128,208,181,208,188,208,181,208,189,208,184,208,186,208,190,209,130,208,190,209,128,208,176,209,143,209,129,208,181,208,179,208,190,208,180,208,189,209,143,209,129,208,186,208,176,209,135,208,176,209,130,209,140,208,189,208,190,208,178,208,190,209,129,209,130,208,184,208,163,208,186,209,128,208,176,208,184,208,189,209,139,208,178,208,190,208,191,209,128,208,190,209,129,209,139,208,186,208,190,209,130,208,190,209,128,208,190,208,185,209,129,208,180,208,181,208,187,208,176,209,130,209,140,208,191,208,190,208,188,208,190,209,137,209,140,209,142,209,129,209,128,208,181,208,180,209,129,209,130,208,178,208,190,208,177,209,128,208,176,208,183,208,190,208,188,209,129,209,130,208,190,209,128,208,190,208,189,209,139,209,131,209,135,208,176,209,129,209,130,208,184,208,181,209,130,208,181,209,135,208,181,208,189,208,184,208,181,208,147,208,187,208,176,208,178,208,189,208,176,209,143,208,184,209,129,209,130,208,190,209,128,208,184,208,184,209,129,208,184,209,129,209,130,208,181,208,188,208,176,209,128,208,181,209,136,208,181,208,189,208,184,209,143,208,161,208,186,208,176,209,135,208,176,209,130,209,140,208,191,208,190,209,141,209,130,208,190,208,188,209,131,209,129,208,187,208,181,208,180,209,131,208,181,209,130,209,129,208,186,208,176,208,183,208,176,209,130,209,140,209,130,208,190,208,178,208,176,209,128,208,190,208,178,208,186,208,190,208,189,208,181,209,135,208,189,208,190,209,128,208,181,209,136,208,181,208,189,208,184,208,181,208,186,208,190,209,130,208,190,209,128,208,190,208,181,208,190,209,128,208,179,208,176,208,189,208,190,208,178,208,186,208,190,209,130,208,190,209,128,208,190,208,188,208,160,208,181,208,186,208,187,208,176,208,188,208,176,216,167,217,132,217,133,217,134,216,170,216,175,217,137,217,133,217,134,216,170,216,175,217,138,216,167,216,170,216,167,217,132,217,133,217,136,216,182,217,136,216,185,216,167,217,132,216,168,216,177,216,167,217,133,216,172,216,167,217,132,217,133,217,136,216,167,217,130,216,185,216,167,217,132,216,177,216,179,216,167,216,166,217,132,217,133,216,180,216,167,216,177,217,131,216,167,216,170,216,167,217,132,216,163,216,185,216,182,216,167,216,161,216,167,217,132,216,177,217,138,216,167,216,182,216,169,216,167,217,132,216,170,216,181,217,133,217,138,217,133,216,167,217,132,216,167,216,185,216,182,216,167,216,161,216,167,217,132,217,134,216,170,216,167,216,166,216,172,216,167,217,132,216,163,217,132,216,185,216,167,216,168,216,167,217,132,216,170,216,179,216,172,217,138,217,132,216,167,217,132,216,163,217,130,216,179,216,167,217,133,216,167,217,132,216,182,216,186,216,183,216,167,216,170,216,167,217,132,217,129,217,138,216,175,217,138,217,136,216,167,217,132,216,170,216,177,216,173,217,138,216,168,216,167,217,132,216,172,216,175,217,138,216,175,216,169,216,167,217,132,216,170,216,185,217,132,217,138,217,133,216,167,217,132,216,163,216,174,216,168,216,167,216,177,216,167,217,132,216,167,217,129,217,132,216,167,217,133,216,167,217,132,216,163,217,129,217,132,216,167,217,133,216,167,217,132,216,170,216,167,216,177,217,138,216,174,216,167,217,132,216,170,217,130,217,134,217,138,216,169,216,167,217,132,216,167,217,132,216,185,216,167,216,168,216,167,217,132,216,174,217,136,216,167,216,183,216,177,216,167,217,132,217,133,216,172,216,170,217,133,216,185,216,167,217,132,216,175,217,138,217,131,217,136,216,177,216,167,217,132,216,179,217,138,216,167,216,173,216,169,216,185,216,168,216,175,216,167,217,132,217,132,217,135,216,167,217,132,216,170,216,177,216,168,217,138,216,169,216,167,217,132,216,177,217,136,216,167,216,168,216,183,216,167,217,132,216,163,216,175,216,168,217,138,216,169,216,167,217,132,216,167,216,174,216,168,216,167,216,177,216,167,217,132,217,133,216,170,216,173,216,175,216,169,216,167,217,132,216,167,216,186,216,167,217,134,217,138,99,117,114,115,111,114,58,112,111,105,110,116,101,114,59,60,47,116,105,116,108,101,62,10,60,109,101,116,97,32,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,34,62,60,115,112,97,110,32,99,108,97,115,115,61,34,109,101,109,98,101,114,115,32,111,102,32,116,104,101,32,119,105,110,100,111,119,46,108,111,99,97,116,105,111,110,118,101,114,116,105,99,97,108,45,97,108,105,103,110,58,47,97,62,32,124,32,60,97,32,104,114,101,102,61,34,60,33,100,111,99,116,121,112,101,32,104,116,109,108,62,109,101,100,105,97,61,34,115,99,114,101,101,110,34,32,60,111,112,116,105,111,110,32,118,97,108,117,101,61,34,102,97,118,105,99,111,110,46,105,99,111,34,32,47,62,10,9,9,60,100,105,118,32,99,108,97,115,115,61,34,99,104,97,114,97,99,116,101,114,105,115,116,105,99,115,34,32,109,101,116,104,111,100,61,34,103,101,116,34,32,47,98,111,100,121,62,10,60,47,104,116,109,108,62,10,115,104,111,114,116,99,117,116,32,105,99,111,110,34,32,100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,112,97,100,100,105,110,103,45,98,111,116,116,111,109,58,114,101,112,114,101,115,101,110,116,97,116,105,118,101,115,115,117,98,109,105,116,34,32,118,97,108,117,101,61,34,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,116,104,114,111,117,103,104,111,117,116,32,116,104,101,32,115,99,105,101,110,99,101,32,102,105,99,116,105,111,110,10,32,32,60,100,105,118,32,99,108,97,115,115,61,34,115,117,98,109,105,116,34,32,99,108,97,115,115,61,34,111,110,101,32,111,102,32,116,104,101,32,109,111,115,116,32,118,97,108,105,103,110,61,34,116,111,112,34,62,60,119,97,115,32,101,115,116,97,98,108,105,115,104,101,100,41,59,13,10,60,47,115,99,114,105,112,116,62,13,10,114,101,116,117,114,110,32,102,97,108,115,101,59,34,62,41,46,115,116,121,108,101,46,100,105,115,112,108,97,121,98,101,99,97,117,115,101,32,111,102,32,116,104,101,32,100,111,99,117,109,101,110,116,46,99,111,111,107,105,101,60,102,111,114,109,32,97,99,116,105,111,110,61,34,47,125,98,111,100,121,123,109,97,114,103,105,110,58,48,59,69,110,99,121,99,108,111,112,101,100,105,97,32,111,102,118,101,114,115,105,111,110,32,111,102,32,116,104,101,32,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,110,97,109,101,34,32,99,111,110,116,101,110,116,61,34,60,47,100,105,118,62,10,60,47,100,105,118,62,10,10,97,100,109,105,110,105,115,116,114,97,116,105,118,101,32,60,47,98,111,100,121,62,10,60,47,104,116,109,108,62,104,105,115,116,111,114,121,32,111,102,32,116,104,101,32,34,62,60,105,110,112,117,116,32,116,121,112,101,61,34,112,111,114,116,105,111,110,32,111,102,32,116,104,101,32,97,115,32,112,97,114,116,32,111,102,32,116,104,101,32,38,110,98,115,112,59,60,97,32,104,114,101,102,61,34,111,116,104,101,114,32,99,111,117,110,116,114,105,101,115,34,62,10,60,100,105,118,32,99,108,97,115,115,61,34,60,47,115,112,97,110,62,60,47,115,112,97,110,62,60,73,110,32,111,116,104,101,114,32,119,111,114,100,115,44,100,105,115,112,108,97,121,58,32,98,108,111,99,107,59,99,111,110,116,114,111,108,32,111,102,32,116,104,101,32,105,110,116,114,111,100,117,99,116,105,111,110,32,111,102,47,62,10,60,109,101,116,97,32,110,97,109,101,61,34,97,115,32,119,101,108,108,32,97,115,32,116,104,101,32,105,110,32,114,101,99,101,110,116,32,121,101,97,114,115,13,10,9,60,100,105,118,32,99,108,97,115,115,61,34,60,47,100,105,118,62,10,9,60,47,100,105,118,62,10,105,110,115,112,105,114,101,100,32,98,121,32,116,104,101,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,98,101,99,97,109,101,32,107,110,111,119,110,32,97,115,32,115,116,121,108,101,61,34,109,97,114,103,105,110,58,46,106,115,34,62,60,47,115,99,114,105,112,116,62,60,32,73,110,116,101,114,110,97,116,105,111,110,97,108,32,116,104,101,114,101,32,104,97,118,101,32,98,101,101,110,71,101,114,109,97,110,32,108,97,110,103,117,97,103,101,32,115,116,121,108,101,61,34,99,111,108,111,114,58,35,67,111,109,109,117,110,105,115,116,32,80,97,114,116,121,99,111,110,115,105,115,116,101,110,116,32,119,105,116,104,98,111,114,100,101,114,61,34,48,34,32,99,101,108,108,32,109,97,114,103,105,110,104,101,105,103,104,116,61,34,116,104,101,32,109,97,106,111,114,105,116,121,32,111,102,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,114,101,108,97,116,101,100,32,116,111,32,116,104,101,32,109,97,110,121,32,100,105,102,102,101,114,101,110,116,32,79,114,116,104,111,100,111,120,32,67,104,117,114,99,104,115,105,109,105,108,97,114,32,116,111,32,116,104,101,32,47,62,10,60,108,105,110,107,32,114,101,108,61,34,115,119,97,115,32,111,110,101,32,111,102,32,116,104,101,32,117,110,116,105,108,32,104,105,115,32,100,101,97,116,104,125,41,40,41,59,10,60,47,115,99,114,105,112,116,62,111,116,104,101,114,32,108,97,110,103,117,97,103,101,115,99,111,109,112,97,114,101,100,32,116,111,32,116,104,101,112,111,114,116,105,111,110,115,32,111,102,32,116,104,101,116,104,101,32,78,101,116,104,101,114,108,97,110,100,115,116,104,101,32,109,111,115,116,32,99,111,109,109,111,110,98,97,99,107,103,114,111,117,110,100,58,117,114,108,40,97,114,103,117,101,100,32,116,104,97,116,32,116,104,101,115,99,114,111,108,108,105,110,103,61,34,110,111,34,32,105,110,99,108,117,100,101,100,32,105,110,32,116,104,101,78,111,114,116,104,32,65,109,101,114,105,99,97,110,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,105,110,116,101,114,112,114,101,116,97,116,105,111,110,115,116,104,101,32,116,114,97,100,105,116,105,111,110,97,108,100,101,118,101,108,111,112,109,101,110,116,32,111,102,32,102,114,101,113,117,101,110,116,108,121,32,117,115,101,100,97,32,99,111,108,108,101,99,116,105,111,110,32,111,102,118,101,114,121,32,115,105,109,105,108,97,114,32,116,111,115,117,114,114,111,117,110,100,105,110,103,32,116,104,101,101,120,97,109,112,108,101,32,111,102,32,116,104,105,115,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,119,111,117,108,100,32,104,97,118,101,32,98,101,101,110,105,109,97,103,101,95,99,97,112,116,105,111,110,32,61,97,116,116,97,99,104,101,100,32,116,111,32,116,104,101,115,117,103,103,101,115,116,105,110,103,32,116,104,97,116,105,110,32,116,104,101,32,102,111,114,109,32,111,102,32,105,110,118,111,108,118,101,100,32,105,110,32,116,104,101,105,115,32,100,101,114,105,118,101,100,32,102,114,111,109,110,97,109,101,100,32,97,102,116,101,114,32,116,104,101,73,110,116,114,111,100,117,99,116,105,111,110,32,116,111,114,101,115,116,114,105,99,116,105,111,110,115,32,111,110,32,115,116,121,108,101,61,34,119,105,100,116,104,58,32,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,116,104,101,32,99,114,101,97,116,105,111,110,32,111,102,109,111,115,116,32,105,109,112,111,114,116,97,110,116,32,105,110,102,111,114,109,97,116,105,111,110,32,97,110,100,114,101,115,117,108,116,101,100,32,105,110,32,116,104,101,99,111,108,108,97,112,115,101,32,111,102,32,116,104,101,84,104,105,115,32,109,101,97,110,115,32,116,104,97,116,101,108,101,109,101,110,116,115,32,111,102,32,116,104,101,119,97,115,32,114,101,112,108,97,99,101,100,32,98,121,97,110,97,108,121,115,105,115,32,111,102,32,116,104,101,105,110,115,112,105,114,97,116,105,111,110,32,102,111,114,114,101,103,97,114,100,101,100,32,97,115,32,116,104,101,109,111,115,116,32,115,117,99,99,101,115,115,102,117,108,107,110,111,119,110,32,97,115,32,38,113,117,111,116,59,97,32,99,111,109,112,114,101,104,101,110,115,105,118,101,72,105,115,116,111,114,121,32,111,102,32,116,104,101,32,119,101,114,101,32,99,111,110,115,105,100,101,114,101,100,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,97,114,101,32,114,101,102,101,114,114,101,100,32,116,111,85,110,115,111,117,114,99,101,100,32,105,109,97,103,101,62,10,9,60,100,105,118,32,99,108,97,115,115,61,34,99,111,110,115,105,115,116,115,32,111,102,32,116,104,101,115,116,111,112,80,114,111,112,97,103,97,116,105,111,110,105,110,116,101,114,101,115,116,32,105,110,32,116,104,101,97,118,97,105,108,97,98,105,108,105,116,121,32,111,102,97,112,112,101,97,114,115,32,116,111,32,104,97,118,101,101,108,101,99,116,114,111,109,97,103,110,101,116,105,99,101,110,97,98,108,101,83,101,114,118,105,99,101,115,40,102,117,110,99,116,105,111,110,32,111,102,32,116,104,101,73,116,32,105,115,32,105,109,112,111,114,116,97,110,116,60,47,115,99,114,105,112,116,62,60,47,100,105,118,62,102,117,110,99,116,105,111,110,40,41,123,118,97,114,32,114,101,108,97,116,105,118,101,32,116,111,32,116,104,101,97,115,32,97,32,114,101,115,117,108,116,32,111,102,32,116,104,101,32,112,111,115,105,116,105,111,110,32,111,102,70,111,114,32,101,120,97,109,112,108,101,44,32,105,110,32,109,101,116,104,111,100,61,34,112,111,115,116,34,32,119,97,115,32,102,111,108,108,111,119,101,100,32,98,121,38,97,109,112,59,109,100,97,115,104,59,32,116,104,101,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,106,115,34,62,60,47,115,99,114,105,112,116,62,13,10,117,108,62,60,47,100,105,118,62,60,47,100,105,118,62,97,102,116,101,114,32,116,104,101,32,100,101,97,116,104,119,105,116,104,32,114,101,115,112,101,99,116,32,116,111,115,116,121,108,101,61,34,112,97,100,100,105,110,103,58,105,115,32,112,97,114,116,105,99,117,108,97,114,108,121,100,105,115,112,108,97,121,58,105,110,108,105,110,101,59,32,116,121,112,101,61,34,115,117,98,109,105,116,34,32,105,115,32,100,105,118,105,100,101,100,32,105,110,116,111,228,184,173,230,150,135,32,40,231,174,128,228,189,147,41,114,101,115,112,111,110,115,97,98,105,108,105,100,97,100,97,100,109,105,110,105,115,116,114,97,99,105,195,179,110,105,110,116,101,114,110,97,99,105,111,110,97,108,101,115,99,111,114,114,101,115,112,111,110,100,105,101,110,116,101,224,164,137,224,164,170,224,164,175,224,165,139,224,164,151,224,164,170,224,165,130,224,164,176,224,165,141,224,164,181,224,164,185,224,164,174,224,164,190,224,164,176,224,165,135,224,164,178,224,165,139,224,164,151,224,165,139,224,164,130,224,164,154,224,165,129,224,164,168,224,164,190,224,164,181,224,164,178,224,165,135,224,164,149,224,164,191,224,164,168,224,164,184,224,164,176,224,164,149,224,164,190,224,164,176,224,164,170,224,165,129,224,164,178,224,164,191,224,164,184,224,164,150,224,165,139,224,164,156,224,165,135,224,164,130,224,164,154,224,164,190,224,164,185,224,164,191,224,164,143,224,164,173,224,165,135,224,164,156,224,165,135,224,164,130,224,164,182,224,164,190,224,164,174,224,164,191,224,164,178,224,164,185,224,164,174,224,164,190,224,164,176,224,165,128,224,164,156,224,164,190,224,164,151,224,164,176,224,164,163,224,164,172,224,164,168,224,164,190,224,164,168,224,165,135,224,164,149,224,165,129,224,164,174,224,164,190,224,164,176,224,164,172,224,165,141,224,164,178,224,165,137,224,164,151,224,164,174,224,164,190,224,164,178,224,164,191,224,164,149,224,164,174,224,164,185,224,164,191,224,164,178,224,164,190,224,164,170,224,165,131,224,164,183,224,165,141,224,164,160,224,164,172,224,164,162,224,164,188,224,164,164,224,165,135,224,164,173,224,164,190,224,164,156,224,164,170,224,164,190,224,164,149,224,165,141,224,164,178,224,164,191,224,164,149,224,164,159,224,165,141,224,164,176,224,165,135,224,164,168,224,164,150,224,164,191,224,164,178,224,164,190,224,164,171,224,164,166,224,165,140,224,164,176,224,164,190,224,164,168,224,164,174,224,164,190,224,164,174,224,164,178,224,165,135,224,164,174,224,164,164,224,164,166,224,164,190,224,164,168,224,164,172,224,164,190,224,164,156,224,164,190,224,164,176,224,164,181,224,164,191,224,164,149,224,164,190,224,164,184,224,164,149,224,165,141,224,164,175,224,165,139,224,164,130,224,164,154,224,164,190,224,164,185,224,164,164,224,165,135,224,164,170,224,164,185,224,165,129,224,164,129,224,164,154,224,164,172,224,164,164,224,164,190,224,164,175,224,164,190,224,164,184,224,164,130,224,164,181,224,164,190,224,164,166,224,164,166,224,165,135,224,164,150,224,164,168,224,165,135,224,164,170,224,164,191,224,164,155,224,164,178,224,165,135,224,164,181,224,164,191,224,164,182,224,165,135,224,164,183,224,164,176,224,164,190,224,164,156,224,165,141,224,164,175,224,164,137,224,164,164,224,165,141,224,164,164,224,164,176,224,164,174,224,165,129,224,164,130,224,164,172,224,164,136,224,164,166,224,165,139,224,164,168,224,165,139,224,164,130,224,164,137,224,164,170,224,164,149,224,164,176,224,164,163,224,164,170,224,164,162,224,164,188,224,165,135,224,164,130,224,164,184,224,165,141,224,164,165,224,164,191,224,164,164,224,164,171,224,164,191,224,164,178,224,165,141,224,164,174,224,164,174,224,165,129,224,164,150,224,165,141,224,164,175,224,164,133,224,164,154,224,165,141,224,164,155,224,164,190,224,164,155,224,165,130,224,164,159,224,164,164,224,165,128,224,164,184,224,164,130,224,164,151,224,165,128,224,164,164,224,164,156,224,164,190,224,164,143,224,164,151,224,164,190,224,164,181,224,164,191,224,164,173,224,164,190,224,164,151,224,164,152,224,164,163,224,165,141,224,164,159,224,165,135,224,164,166,224,165,130,224,164,184,224,164,176,224,165,135,224,164,166,224,164,191,224,164,168,224,165,139,224,164,130,224,164,185,224,164,164,224,165,141,224,164,175,224,164,190,224,164,184,224,165,135,224,164,149,224,165,141,224,164,184,224,164,151,224,164,190,224,164,130,224,164,167,224,165,128,224,164,181,224,164,191,224,164,182,224,165,141,224,164,181,224,164,176,224,164,190,224,164,164,224,165,135,224,164,130,224,164,166,224,165,136,224,164,159,224,165,141,224,164,184,224,164,168,224,164,149,224,165,141,224,164,182,224,164,190,224,164,184,224,164,190,224,164,174,224,164,168,224,165,135,224,164,133,224,164,166,224,164,190,224,164,178,224,164,164,224,164,172,224,164,191,224,164,156,224,164,178,224,165,128,224,164,170,224,165,129,224,164,176,224,165,130,224,164,183,224,164,185,224,164,191,224,164,130,224,164,166,224,165,128,224,164,174,224,164,191,224,164,164,224,165,141,224,164,176,224,164,149,224,164,181,224,164,191,224,164,164,224,164,190,224,164,176,224,165,129,224,164,170,224,164,175,224,165,135,224,164,184,224,165,141,224,164,165,224,164,190,224,164,168,224,164,149,224,164,176,224,165,139,224,164,161,224,164,188,224,164,174,224,165,129,224,164,149,224,165,141,224,164,164,224,164,175,224,165,139,224,164,156,224,164,168,224,164,190,224,164,149,224,165,131,224,164,170,224,164,175,224,164,190,224,164,170,224,165,139,224,164,184,224,165,141,224,164,159,224,164,152,224,164,176,224,165,135,224,164,178,224,165,130,224,164,149,224,164,190,224,164,176,224,165,141,224,164,175,224,164,181,224,164,191,224,164,154,224,164,190,224,164,176,224,164,184,224,165,130,224,164,154,224,164,168,224,164,190,224,164,174,224,165,130,224,164,178,224,165,141,224,164,175,224,164,166,224,165,135,224,164,150,224,165,135,224,164,130,224,164,185,224,164,174,224,165,135,224,164,182,224,164,190,224,164,184,224,165,141,224,164,149,224,165,130,224,164,178,224,164,174,224,165,136,224,164,130,224,164,168,224,165,135,224,164,164,224,165,136,224,164,175,224,164,190,224,164,176,224,164,156,224,164,191,224,164,184,224,164,149,224,165,135,114,115,115,43,120,109,108,34,32,116,105,116,108,101,61,34,45,116,121,112,101,34,32,99,111,110,116,101,110,116,61,34,116,105,116,108,101,34,32,99,111,110,116,101,110,116,61,34,97,116,32,116,104,101,32,115,97,109,101,32,116,105,109,101,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,60,34,32,109,101,116,104,111,100,61,34,112,111,115,116,34,32,60,47,115,112,97,110,62,60,47,97,62,60,47,108,105,62,118,101,114,116,105,99,97,108,45,97,108,105,103,110,58,116,47,106,113,117,101,114,121,46,109,105,110,46,106,115,34,62,46,99,108,105,99,107,40,102,117,110,99,116,105,111,110,40,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,125,41,40,41,59,10,60,47,115,99,114,105,112,116,62,10,60,47,115,112,97,110,62,60,97,32,104,114,101,102,61,34,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,41,59,32,114,101,116,117,114,110,32,102,97,108,115,101,59,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,32,115,99,114,111,108,108,105,110,103,61,34,110,111,34,32,98,111,114,100,101,114,45,99,111,108,108,97,112,115,101,58,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,66,97,104,97,115,97,32,73,110,100,111,110,101,115,105,97,69,110,103,108,105,115,104,32,108,97,110,103,117,97,103,101,60,116,101,120,116,32,120,109,108,58,115,112,97,99,101,61,46,103,105,102,34,32,98,111,114,100,101,114,61,34,48,34,60,47,98,111,100,121,62,10,60,47,104,116,109,108,62,10,111,118,101,114,102,108,111,119,58,104,105,100,100,101,110,59,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,114,101,115,112,111,110,115,105,98,108,101,32,102,111,114,32,115,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,47,102,97,118,105,99,111,110,46,105,99,111,34,32,47,62,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,34,32,115,116,121,108,101,61,34,119,105,100,116,104,58,49,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,83,116,97,116,101,32,85,110,105,118,101,114,115,105,116,121,116,101,120,116,45,97,108,105,103,110,58,108,101,102,116,59,10,100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,44,32,105,110,99,108,117,100,105,110,103,32,116,104,101,32,97,114,111,117,110,100,32,116,104,101,32,119,111,114,108,100,41,59,13,10,60,47,115,99,114,105,112,116,62,13,10,60,34,32,115,116,121,108,101,61,34,104,101,105,103,104,116,58,59,111,118,101,114,102,108,111,119,58,104,105,100,100,101,110,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,97,110,32,105,110,116,101,114,110,97,116,105,111,110,97,108,97,32,109,101,109,98,101,114,32,111,102,32,116,104,101,32,111,110,101,32,111,102,32,116,104,101,32,102,105,114,115,116,99,97,110,32,98,101,32,102,111,117,110,100,32,105,110,32,60,47,100,105,118,62,10,9,9,60,47,100,105,118,62,10,100,105,115,112,108,97,121,58,32,110,111,110,101,59,34,62,34,32,47,62,10,60,108,105,110,107,32,114,101,108,61,34,10,32,32,40,102,117,110,99,116,105,111,110,40,41,32,123,116,104,101,32,49,53,116,104,32,99,101,110,116,117,114,121,46,112,114,101,118,101,110,116,68,101,102,97,117,108,116,40,108,97,114,103,101,32,110,117,109,98,101,114,32,111,102,32,66,121,122,97,110,116,105,110,101,32,69,109,112,105,114,101,46,106,112,103,124,116,104,117,109,98,124,108,101,102,116,124,118,97,115,116,32,109,97,106,111,114,105,116,121,32,111,102,109,97,106,111,114,105,116,121,32,111,102,32,116,104,101,32,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,85,110,105,118,101,114,115,105,116,121,32,80,114,101,115,115,100,111,109,105,110,97,116,101,100,32,98,121,32,116,104,101,83,101,99,111,110,100,32,87,111,114,108,100,32,87,97,114,100,105,115,116,114,105,98,117,116,105,111,110,32,111,102,32,115,116,121,108,101,61,34,112,111,115,105,116,105,111,110,58,116,104,101,32,114,101,115,116,32,111,102,32,116,104,101,32,99,104,97,114,97,99,116,101,114,105,122,101,100,32,98,121,32,114,101,108,61,34,110,111,102,111,108,108,111,119,34,62,100,101,114,105,118,101,115,32,102,114,111,109,32,116,104,101,114,97,116,104,101,114,32,116,104,97,110,32,116,104,101,32,97,32,99,111,109,98,105,110,97,116,105,111,110,32,111,102,115,116,121,108,101,61,34,119,105,100,116,104,58,49,48,48,69,110,103,108,105,115,104,45,115,112,101,97,107,105,110,103,99,111,109,112,117,116,101,114,32,115,99,105,101,110,99,101,98,111,114,100,101,114,61,34,48,34,32,97,108,116,61,34,116,104,101,32,101,120,105,115,116,101,110,99,101,32,111,102,68,101,109,111,99,114,97,116,105,99,32,80,97,114,116,121,34,32,115,116,121,108,101,61,34,109,97,114,103,105,110,45,70,111,114,32,116,104,105,115,32,114,101,97,115,111,110,44,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,9,115,66,121,84,97,103,78,97,109,101,40,115,41,91,48,93,106,115,34,62,60,47,115,99,114,105,112,116,62,13,10,60,46,106,115,34,62,60,47,115,99,114,105,112,116,62,13,10,108,105,110,107,32,114,101,108,61,34,105,99,111,110,34,32,39,32,97,108,116,61,39,39,32,99,108,97,115,115,61,39,102,111,114,109,97,116,105,111,110,32,111,102,32,116,104,101,118,101,114,115,105,111,110,115,32,111,102,32,116,104,101,32,60,47,97,62,60,47,100,105,118,62,60,47,100,105,118,62,47,112,97,103,101,62,10,32,32,60,112,97,103,101,62,10,60,100,105,118,32,99,108,97,115,115,61,34,99,111,110,116],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+286768);allocate([98,101,99,97,109,101,32,116,104,101,32,102,105,114,115,116,98,97,104,97,115,97,32,73,110,100,111,110,101,115,105,97,101,110,103,108,105,115,104,32,40,115,105,109,112,108,101,41,206,149,206,187,206,187,206,183,206,189,206,185,206,186,206,172,209,133,209,128,208,178,208,176,209,130,209,129,208,186,208,184,208,186,208,190,208,188,208,191,208,176,208,189,208,184,208,184,209,143,208,178,208,187,209,143,208,181,209,130,209,129,209,143,208,148,208,190,208,177,208,176,208,178,208,184,209,130,209,140,209,135,208,181,208,187,208,190,208,178,208,181,208,186,208,176,209,128,208,176,208,183,208,178,208,184,209,130,208,184,209,143,208,152,208,189,209,130,208,181,209,128,208,189,208,181,209,130,208,158,209,130,208,178,208,181,209,130,208,184,209,130,209,140,208,189,208,176,208,191,209,128,208,184,208,188,208,181,209,128,208,184,208,189,209,130,208,181,209,128,208,189,208,181,209,130,208,186,208,190,209,130,208,190,209,128,208,190,208,179,208,190,209,129,209,130,209,128,208,176,208,189,208,184,209,134,209,139,208,186,208,176,209,135,208,181,209,129,209,130,208,178,208,181,209,131,209,129,208,187,208,190,208,178,208,184,209,143,209,133,208,191,209,128,208,190,208,177,208,187,208,181,208,188,209,139,208,191,208,190,208,187,209,131,209,135,208,184,209,130,209,140,209,143,208,178,208,187,209,143,209,142,209,130,209,129,209,143,208,189,208,176,208,184,208,177,208,190,208,187,208,181,208,181,208,186,208,190,208,188,208,191,208,176,208,189,208,184,209,143,208,178,208,189,208,184,208,188,208,176,208,189,208,184,208,181,209,129,209,128,208,181,208,180,209,129,209,130,208,178,208,176,216,167,217,132,217,133,217,136,216,167,216,182,217,138,216,185,216,167,217,132,216,177,216,166,217,138,216,179,217,138,216,169,216,167,217,132,216,167,217,134,216,170,217,130,216,167,217,132,217,133,216,180,216,167,216,177,217,131,216,167,216,170,217,131,216,167,217,132,216,179,217,138,216,167,216,177,216,167,216,170,216,167,217,132,217,133,217,131,216,170,217,136,216,168,216,169,216,167,217,132,216,179,216,185,217,136,216,175,217,138,216,169,216,167,216,173,216,181,216,167,216,166,217,138,216,167,216,170,216,167,217,132,216,185,216,167,217,132,217,133,217,138,216,169,216,167,217,132,216,181,217,136,216,170,217,138,216,167,216,170,216,167,217,132,216,167,217,134,216,170,216,177,217,134,216,170,216,167,217,132,216,170,216,181,216,167,217,133,217,138,217,133,216,167,217,132,216,165,216,179,217,132,216,167,217,133,217,138,216,167,217,132,217,133,216,180,216,167,216,177,217,131,216,169,216,167,217,132,217,133,216,177,216,166,217,138,216,167,216,170,114,111,98,111,116,115,34,32,99,111,110,116,101,110,116,61,34,60,100,105,118,32,105,100,61,34,102,111,111,116,101,114,34,62,116,104,101,32,85,110,105,116,101,100,32,83,116,97,116,101,115,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,46,106,112,103,124,114,105,103,104,116,124,116,104,117,109,98,124,46,106,115,34,62,60,47,115,99,114,105,112,116,62,13,10,60,108,111,99,97,116,105,111,110,46,112,114,111,116,111,99,111,108,102,114,97,109,101,98,111,114,100,101,114,61,34,48,34,32,115,34,32,47,62,10,60,109,101,116,97,32,110,97,109,101,61,34,60,47,97,62,60,47,100,105,118,62,60,47,100,105,118,62,60,102,111,110,116,45,119,101,105,103,104,116,58,98,111,108,100,59,38,113,117,111,116,59,32,97,110,100,32,38,113,117,111,116,59,100,101,112,101,110,100,105,110,103,32,111,110,32,116,104,101,32,109,97,114,103,105,110,58,48,59,112,97,100,100,105,110,103,58,34,32,114,101,108,61,34,110,111,102,111,108,108,111,119,34,32,80,114,101,115,105,100,101,110,116,32,111,102,32,116,104,101,32,116,119,101,110,116,105,101,116,104,32,99,101,110,116,117,114,121,101,118,105,115,105,111,110,62,10,32,32,60,47,112,97,103,101,73,110,116,101,114,110,101,116,32,69,120,112,108,111,114,101,114,97,46,97,115,121,110,99,32,61,32,116,114,117,101,59,13,10,105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,60,100,105,118,32,105,100,61,34,104,101,97,100,101,114,34,62,34,32,97,99,116,105,111,110,61,34,104,116,116,112,58,47,47,60,97,32,104,114,101,102,61,34,104,116,116,112,115,58,47,47,60,100,105,118,32,105,100,61,34,99,111,110,116,101,110,116,34,60,47,100,105,118,62,13,10,60,47,100,105,118,62,13,10,60,100,101,114,105,118,101,100,32,102,114,111,109,32,116,104,101,32,60,105,109,103,32,115,114,99,61,39,104,116,116,112,58,47,47,97,99,99,111,114,100,105,110,103,32,116,111,32,116,104,101,32,10,60,47,98,111,100,121,62,10,60,47,104,116,109,108,62,10,115,116,121,108,101,61,34,102,111,110,116,45,115,105,122,101,58,115,99,114,105,112,116,32,108,97,110,103,117,97,103,101,61,34,65,114,105,97,108,44,32,72,101,108,118,101,116,105,99,97,44,60,47,97,62,60,115,112,97,110,32,99,108,97,115,115,61,34,60,47,115,99,114,105,112,116,62,60,115,99,114,105,112,116,32,112,111,108,105,116,105,99,97,108,32,112,97,114,116,105,101,115,116,100,62,60,47,116,114,62,60,47,116,97,98,108,101,62,60,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,105,110,116,101,114,112,114,101,116,97,116,105,111,110,32,111,102,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,39,60,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,62,10,98,101,103,105,110,110,105,110,103,32,111,102,32,116,104,101,32,114,101,118,101,97,108,101,100,32,116,104,97,116,32,116,104,101,116,101,108,101,118,105,115,105,111,110,32,115,101,114,105,101,115,34,32,114,101,108,61,34,110,111,102,111,108,108,111,119,34,62,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,99,108,97,105,109,105,110,103,32,116,104,97,116,32,116,104,101,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,109,97,110,105,102,101,115,116,97,116,105,111,110,115,32,111,102,80,114,105,109,101,32,77,105,110,105,115,116,101,114,32,111,102,105,110,102,108,117,101,110,99,101,100,32,98,121,32,116,104,101,99,108,97,115,115,61,34,99,108,101,97,114,102,105,120,34,62,47,100,105,118,62,13,10,60,47,100,105,118,62,13,10,13,10,116,104,114,101,101,45,100,105,109,101,110,115,105,111,110,97,108,67,104,117,114,99,104,32,111,102,32,69,110,103,108,97,110,100,111,102,32,78,111,114,116,104,32,67,97,114,111,108,105,110,97,115,113,117,97,114,101,32,107,105,108,111,109,101,116,114,101,115,46,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,100,105,115,116,105,110,99,116,32,102,114,111,109,32,116,104,101,99,111,109,109,111,110,108,121,32,107,110,111,119,110,32,97,115,80,104,111,110,101,116,105,99,32,65,108,112,104,97,98,101,116,100,101,99,108,97,114,101,100,32,116,104,97,116,32,116,104,101,99,111,110,116,114,111,108,108,101,100,32,98,121,32,116,104,101,66,101,110,106,97,109,105,110,32,70,114,97,110,107,108,105,110,114,111,108,101,45,112,108,97,121,105,110,103,32,103,97,109,101,116,104,101,32,85,110,105,118,101,114,115,105,116,121,32,111,102,105,110,32,87,101,115,116,101,114,110,32,69,117,114,111,112,101,112,101,114,115,111,110,97,108,32,99,111,109,112,117,116,101,114,80,114,111,106,101,99,116,32,71,117,116,101,110,98,101,114,103,114,101,103,97,114,100,108,101,115,115,32,111,102,32,116,104,101,104,97,115,32,98,101,101,110,32,112,114,111,112,111,115,101,100,116,111,103,101,116,104,101,114,32,119,105,116,104,32,116,104,101,62,60,47,108,105,62,60,108,105,32,99,108,97,115,115,61,34,105,110,32,115,111,109,101,32,99,111,117,110,116,114,105,101,115,109,105,110,46,106,115,34,62,60,47,115,99,114,105,112,116,62,111,102,32,116,104,101,32,112,111,112,117,108,97,116,105,111,110,111,102,102,105,99,105,97,108,32,108,97,110,103,117,97,103,101,60,105,109,103,32,115,114,99,61,34,105,109,97,103,101,115,47,105,100,101,110,116,105,102,105,101,100,32,98,121,32,116,104,101,110,97,116,117,114,97,108,32,114,101,115,111,117,114,99,101,115,99,108,97,115,115,105,102,105,99,97,116,105,111,110,32,111,102,99,97,110,32,98,101,32,99,111,110,115,105,100,101,114,101,100,113,117,97,110,116,117,109,32,109,101,99,104,97,110,105,99,115,78,101,118,101,114,116,104,101,108,101,115,115,44,32,116,104,101,109,105,108,108,105,111,110,32,121,101,97,114,115,32,97,103,111,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,13,206,149,206,187,206,187,206,183,206,189,206,185,206,186,206,172,10,116,97,107,101,32,97,100,118,97,110,116,97,103,101,32,111,102,97,110,100,44,32,97,99,99,111,114,100,105,110,103,32,116,111,97,116,116,114,105,98,117,116,101,100,32,116,111,32,116,104,101,77,105,99,114,111,115,111,102,116,32,87,105,110,100,111,119,115,116,104,101,32,102,105,114,115,116,32,99,101,110,116,117,114,121,117,110,100,101,114,32,116,104,101,32,99,111,110,116,114,111,108,100,105,118,32,99,108,97,115,115,61,34,104,101,97,100,101,114,115,104,111,114,116,108,121,32,97,102,116,101,114,32,116,104,101,110,111,116,97,98,108,101,32,101,120,99,101,112,116,105,111,110,116,101,110,115,32,111,102,32,116,104,111,117,115,97,110,100,115,115,101,118,101,114,97,108,32,100,105,102,102,101,114,101,110,116,97,114,111,117,110,100,32,116,104,101,32,119,111,114,108,100,46,114,101,97,99,104,105,110,103,32,109,105,108,105,116,97,114,121,105,115,111,108,97,116,101,100,32,102,114,111,109,32,116,104,101,111,112,112,111,115,105,116,105,111,110,32,116,111,32,116,104,101,116,104,101,32,79,108,100,32,84,101,115,116,97,109,101,110,116,65,102,114,105,99,97,110,32,65,109,101,114,105,99,97,110,115,105,110,115,101,114,116,101,100,32,105,110,116,111,32,116,104,101,115,101,112,97,114,97,116,101,32,102,114,111,109,32,116,104,101,109,101,116,114,111,112,111,108,105,116,97,110,32,97,114,101,97,109,97,107,101,115,32,105,116,32,112,111,115,115,105,98,108,101,97,99,107,110,111,119,108,101,100,103,101,100,32,116,104,97,116,97,114,103,117,97,98,108,121,32,116,104,101,32,109,111,115,116,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,62,10,116,104,101,32,73,110,116,101,114,110,97,116,105,111,110,97,108,65,99,99,111,114,100,105,110,103,32,116,111,32,116,104,101,32,112,101,61,34,116,101,120,116,47,99,115,115,34,32,47,62,10,99,111,105,110,99,105,100,101,32,119,105,116,104,32,116,104,101,116,119,111,45,116,104,105,114,100,115,32,111,102,32,116,104,101,68,117,114,105,110,103,32,116,104,105,115,32,116,105,109,101,44,100,117,114,105,110,103,32,116,104,101,32,112,101,114,105,111,100,97,110,110,111,117,110,99,101,100,32,116,104,97,116,32,104,101,116,104,101,32,105,110,116,101,114,110,97,116,105,111,110,97,108,97,110,100,32,109,111,114,101,32,114,101,99,101,110,116,108,121,98,101,108,105,101,118,101,100,32,116,104,97,116,32,116,104,101,99,111,110,115,99,105,111,117,115,110,101,115,115,32,97,110,100,102,111,114,109,101,114,108,121,32,107,110,111,119,110,32,97,115,115,117,114,114,111,117,110,100,101,100,32,98,121,32,116,104,101,102,105,114,115,116,32,97,112,112,101,97,114,101,100,32,105,110,111,99,99,97,115,105,111,110,97,108,108,121,32,117,115,101,100,112,111,115,105,116,105,111,110,58,97,98,115,111,108,117,116,101,59,34,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,32,112,111,115,105,116,105,111,110,58,114,101,108,97,116,105,118,101,59,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,59,106,97,120,47,108,105,98,115,47,106,113,117,101,114,121,47,49,46,98,97,99,107,103,114,111,117,110,100,45,99,111,108,111,114,58,35,116,121,112,101,61,34,97,112,112,108,105,99,97,116,105,111,110,47,97,110,103,117,97,103,101,34,32,99,111,110,116,101,110,116,61,34,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,80,114,105,118,97,99,121,32,80,111,108,105,99,121,60,47,97,62,101,40,34,37,51,67,115,99,114,105,112,116,32,115,114,99,61,39,34,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,79,110,32,116,104,101,32,111,116,104,101,114,32,104,97,110,100,44,46,106,112,103,124,116,104,117,109,98,124,114,105,103,104,116,124,50,60,47,100,105,118,62,60,100,105,118,32,99,108,97,115,115,61,34,60,100,105,118,32,115,116,121,108,101,61,34,102,108,111,97,116,58,110,105,110,101,116,101,101,110,116,104,32,99,101,110,116,117,114,121,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,13,10,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,115,59,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,102,111,110,116,45,119,101,105,103,104,116,58,32,98,111,108,100,59,32,65,99,99,111,114,100,105,110,103,32,116,111,32,116,104,101,32,100,105,102,102,101,114,101,110,99,101,32,98,101,116,119,101,101,110,34,32,102,114,97,109,101,98,111,114,100,101,114,61,34,48,34,32,34,32,115,116,121,108,101,61,34,112,111,115,105,116,105,111,110,58,108,105,110,107,32,104,114,101,102,61,34,104,116,116,112,58,47,47,104,116,109,108,52,47,108,111,111,115,101,46,100,116,100,34,62,10,100,117,114,105,110,103,32,116,104,105,115,32,112,101,114,105,111,100,60,47,116,100,62,60,47,116,114,62,60,47,116,97,98,108,101,62,99,108,111,115,101,108,121,32,114,101,108,97,116,101,100,32,116,111,102,111,114,32,116,104,101,32,102,105,114,115,116,32,116,105,109,101,59,102,111,110,116,45,119,101,105,103,104,116,58,98,111,108,100,59,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,60,115,112,97,110,32,115,116,121,108,101,61,34,102,111,110,116,45,111,110,114,101,97,100,121,115,116,97,116,101,99,104,97,110,103,101,9,60,100,105,118,32,99,108,97,115,115,61,34,99,108,101,97,114,100,111,99,117,109,101,110,116,46,108,111,99,97,116,105,111,110,46,32,70,111,114,32,101,120,97,109,112,108,101,44,32,116,104,101,32,97,32,119,105,100,101,32,118,97,114,105,101,116,121,32,111,102,32,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,13,10,60,38,110,98,115,112,59,38,110,98,115,112,59,38,110,98,115,112,59,34,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,115,116,121,108,101,61,34,102,108,111,97,116,58,108,101,102,116,59,99,111,110,99,101,114,110,101,100,32,119,105,116,104,32,116,104,101,61,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,105,110,32,112,111,112,117,108,97,114,32,99,117,108,116,117,114,101,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,47,62,105,116,32,105,115,32,112,111,115,115,105,98,108,101,32,116,111,32,72,97,114,118,97,114,100,32,85,110,105,118,101,114,115,105,116,121,116,121,108,101,115,104,101,101,116,34,32,104,114,101,102,61,34,47,116,104,101,32,109,97,105,110,32,99,104,97,114,97,99,116,101,114,79,120,102,111,114,100,32,85,110,105,118,101,114,115,105,116,121,32,32,110,97,109,101,61,34,107,101,121,119,111,114,100,115,34,32,99,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,116,104,101,32,85,110,105,116,101,100,32,75,105,110,103,100,111,109,102,101,100,101,114,97,108,32,103,111,118,101,114,110,109,101,110,116,60,100,105,118,32,115,116,121,108,101,61,34,109,97,114,103,105,110,32,100,101,112,101,110,100,105,110,103,32,111,110,32,116,104,101,32,100,101,115,99,114,105,112,116,105,111,110,32,111,102,32,116,104,101,60,100,105,118,32,99,108,97,115,115,61,34,104,101,97,100,101,114,46,109,105,110,46,106,115,34,62,60,47,115,99,114,105,112,116,62,100,101,115,116,114,117,99,116,105,111,110,32,111,102,32,116,104,101,115,108,105,103,104,116,108,121,32,100,105,102,102,101,114,101,110,116,105,110,32,97,99,99,111,114,100,97,110,99,101,32,119,105,116,104,116,101,108,101,99,111,109,109,117,110,105,99,97,116,105,111,110,115,105,110,100,105,99,97,116,101,115,32,116,104,97,116,32,116,104,101,115,104,111,114,116,108,121,32,116,104,101,114,101,97,102,116,101,114,101,115,112,101,99,105,97,108,108,121,32,105,110,32,116,104,101,32,69,117,114,111,112,101,97,110,32,99,111,117,110,116,114,105,101,115,72,111,119,101,118,101,114,44,32,116,104,101,114,101,32,97,114,101,115,114,99,61,34,104,116,116,112,58,47,47,115,116,97,116,105,99,115,117,103,103,101,115,116,101,100,32,116,104,97,116,32,116,104,101,34,32,115,114,99,61,34,104,116,116,112,58,47,47,119,119,119,46,97,32,108,97,114,103,101,32,110,117,109,98,101,114,32,111,102,32,84,101,108,101,99,111,109,109,117,110,105,99,97,116,105,111,110,115,34,32,114,101,108,61,34,110,111,102,111,108,108,111,119,34,32,116,72,111,108,121,32,82,111,109,97,110,32,69,109,112,101,114,111,114,97,108,109,111,115,116,32,101,120,99,108,117,115,105,118,101,108,121,34,32,98,111,114,100,101,114,61,34,48,34,32,97,108,116,61,34,83,101,99,114,101,116,97,114,121,32,111,102,32,83,116,97,116,101,99,117,108,109,105,110,97,116,105,110,103,32,105,110,32,116,104,101,67,73,65,32,87,111,114,108,100,32,70,97,99,116,98,111,111,107,116,104,101,32,109,111,115,116,32,105,109,112,111,114,116,97,110,116,97,110,110,105,118,101,114,115,97,114,121,32,111,102,32,116,104,101,115,116,121,108,101,61,34,98,97,99,107,103,114,111,117,110,100,45,60,108,105,62,60,101,109,62,60,97,32,104,114,101,102,61,34,47,116,104,101,32,65,116,108,97,110,116,105,99,32,79,99,101,97,110,115,116,114,105,99,116,108,121,32,115,112,101,97,107,105,110,103,44,115,104,111,114,116,108,121,32,98,101,102,111,114,101,32,116,104,101,100,105,102,102,101,114,101,110,116,32,116,121,112,101,115,32,111,102,116,104,101,32,79,116,116,111,109,97,110,32,69,109,112,105,114,101,62,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,65,110,32,73,110,116,114,111,100,117,99,116,105,111,110,32,116,111,99,111,110,115,101,113,117,101,110,99,101,32,111,102,32,116,104,101,100,101,112,97,114,116,117,114,101,32,102,114,111,109,32,116,104,101,67,111,110,102,101,100,101,114,97,116,101,32,83,116,97,116,101,115,105,110,100,105,103,101,110,111,117,115,32,112,101,111,112,108,101,115,80,114,111,99,101,101,100,105,110,103,115,32,111,102,32,116,104,101,105,110,102,111,114,109,97,116,105,111,110,32,111,110,32,116,104,101,116,104,101,111,114,105,101,115,32,104,97,118,101,32,98,101,101,110,105,110,118,111,108,118,101,109,101,110,116,32,105,110,32,116,104,101,100,105,118,105,100,101,100,32,105,110,116,111,32,116,104,114,101,101,97,100,106,97,99,101,110,116,32,99,111,117,110,116,114,105,101,115,105,115,32,114,101,115,112,111,110,115,105,98,108,101,32,102,111,114,100,105,115,115,111,108,117,116,105,111,110,32,111,102,32,116,104,101,99,111,108,108,97,98,111,114,97,116,105,111,110,32,119,105,116,104,119,105,100,101,108,121,32,114,101,103,97,114,100,101,100,32,97,115,104,105,115,32,99,111,110,116,101,109,112,111,114,97,114,105,101,115,102,111,117,110,100,105,110,103,32,109,101,109,98,101,114,32,111,102,68,111,109,105,110,105,99,97,110,32,82,101,112,117,98,108,105,99,103,101,110,101,114,97,108,108,121,32,97,99,99,101,112,116,101,100,116,104,101,32,112,111,115,115,105,98,105,108,105,116,121,32,111,102,97,114,101,32,97,108,115,111,32,97,118,97,105,108,97,98,108,101,117,110,100,101,114,32,99,111,110,115,116,114,117,99,116,105,111,110,114,101,115,116,111,114,97,116,105,111,110,32,111,102,32,116,104,101,116,104,101,32,103,101,110,101,114,97,108,32,112,117,98,108,105,99,105,115,32,97,108,109,111,115,116,32,101,110,116,105,114,101,108,121,112,97,115,115,101,115,32,116,104,114,111,117,103,104,32,116,104,101,104,97,115,32,98,101,101,110,32,115,117,103,103,101,115,116,101,100,99,111,109,112,117,116,101,114,32,97,110,100,32,118,105,100,101,111,71,101,114,109,97,110,105,99,32,108,97,110,103,117,97,103,101,115,32,97,99,99,111,114,100,105,110,103,32,116,111,32,116,104,101,32,100,105,102,102,101,114,101,110,116,32,102,114,111,109,32,116,104,101,115,104,111,114,116,108,121,32,97,102,116,101,114,119,97,114,100,115,104,114,101,102,61,34,104,116,116,112,115,58,47,47,119,119,119,46,114,101,99,101,110,116,32,100,101,118,101,108,111,112,109,101,110,116,66,111,97,114,100,32,111,102,32,68,105,114,101,99,116,111,114,115,60,100,105,118,32,99,108,97,115,115,61,34,115,101,97,114,99,104,124,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,73,110,32,112,97,114,116,105,99,117,108,97,114,44,32,116,104,101,77,117,108,116,105,112,108,101,32,102,111,111,116,110,111,116,101,115,111,114,32,111,116,104,101,114,32,115,117,98,115,116,97,110,99,101,116,104,111,117,115,97,110,100,115,32,111,102,32,121,101,97,114,115,116,114,97,110,115,108,97,116,105,111,110,32,111,102,32,116,104,101,60,47,100,105,118,62,13,10,60,47,100,105,118,62,13,10,13,10,60,97,32,104,114,101,102,61,34,105,110,100,101,120,46,112,104,112,119,97,115,32,101,115,116,97,98,108,105,115,104,101,100,32,105,110,109,105,110,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,112,97,114,116,105,99,105,112,97,116,101,32,105,110,32,116,104,101,97,32,115,116,114,111,110,103,32,105,110,102,108,117,101,110,99,101,115,116,121,108,101,61,34,109,97,114,103,105,110,45,116,111,112,58,114,101,112,114,101,115,101,110,116,101,100,32,98,121,32,116,104,101,103,114,97,100,117,97,116,101,100,32,102,114,111,109,32,116,104,101,84,114,97,100,105,116,105,111,110,97,108,108,121,44,32,116,104,101,69,108,101,109,101,110,116,40,34,115,99,114,105,112,116,34,41,59,72,111,119,101,118,101,114,44,32,115,105,110,99,101,32,116,104,101,47,100,105,118,62,10,60,47,100,105,118,62,10,60,100,105,118,32,108,101,102,116,59,32,109,97,114,103,105,110,45,108,101,102,116,58,112,114,111,116,101,99,116,105,111,110,32,97,103,97,105,110,115,116,48,59,32,118,101,114,116,105,99,97,108,45,97,108,105,103,110,58,85,110,102,111,114,116,117,110,97,116,101,108,121,44,32,116,104,101,116,121,112,101,61,34,105,109,97,103,101,47,120,45,105,99,111,110,47,100,105,118,62,10,60,100,105,118,32,99,108,97,115,115,61,34,32,99,108,97,115,115,61,34,99,108,101,97,114,102,105,120,34,62,60,100,105,118,32,99,108,97,115,115,61,34,102,111,111,116,101,114,9,9,60,47,100,105,118,62,10,9,9,60,47,100,105,118,62,10,116,104,101,32,109,111,116,105,111,110,32,112,105,99,116,117,114,101,208,145,209,138,208,187,208,179,208,176,209,128,209,129,208,186,208,184,208,177,209,138,208,187,208,179,208,176,209,128,209,129,208,186,208,184,208,164,208,181,208,180,208,181,209,128,208,176,209,134,208,184,208,184,208,189,208,181,209,129,208,186,208,190,208,187,209,140,208,186,208,190,209,129,208,190,208,190,208,177,209,137,208,181,208,189,208,184,208,181,209,129,208,190,208,190,208,177,209,137,208,181,208,189,208,184,209,143,208,191,209,128,208,190,208,179,209,128,208,176,208,188,208,188,209,139,208,158,209,130,208,191,209,128,208,176,208,178,208,184,209,130,209,140,208,177,208,181,209,129,208,191,208,187,208,176,209,130,208,189,208,190,208,188,208,176,209,130,208,181,209,128,208,184,208,176,208,187,209,139,208,191,208,190,208,183,208,178,208,190,208,187,209,143,208,181,209,130,208,191,208,190,209,129,208,187,208,181,208,180,208,189,208,184,208,181,209,128,208,176,208,183,208,187,208,184,209,135,208,189,209,139,209,133,208,191,209,128,208,190,208,180,209,131,208,186,209,134,208,184,208,184,208,191,209,128,208,190,208,179,209,128,208,176,208,188,208,188,208,176,208,191,208,190,208,187,208,189,208,190,209,129,209,130,209,140,209,142,208,189,208,176,209,133,208,190,208,180,208,184,209,130,209,129,209,143,208,184,208,183,208,177,209,128,208,176,208,189,208,189,208,190,208,181,208,189,208,176,209,129,208,181,208,187,208,181,208,189,208,184,209,143,208,184,208,183,208,188,208,181,208,189,208,181,208,189,208,184,209,143,208,186,208,176,209,130,208,181,208,179,208,190,209,128,208,184,208,184,208,144,208,187,208,181,208,186,209,129,208,176,208,189,208,180,209,128,224,164,166,224,165,141,224,164,181,224,164,190,224,164,176,224,164,190,224,164,174,224,165,136,224,164,168,224,165,129,224,164,133,224,164,178,224,164,170,224,165,141,224,164,176,224,164,166,224,164,190,224,164,168,224,164,173,224,164,190,224,164,176,224,164,164,224,165,128,224,164,175,224,164,133,224,164,168,224,165,129,224,164,166,224,165,135,224,164,182,224,164,185,224,164,191,224,164,168,224,165,141,224,164,166,224,165,128,224,164,135,224,164,130,224,164,161,224,164,191,224,164,175,224,164,190,224,164,166,224,164,191,224,164,178,224,165,141,224,164,178,224,165,128,224,164,133,224,164,167,224,164,191,224,164,149,224,164,190,224,164,176,224,164,181,224,165,128,224,164,161,224,164,191,224,164,175,224,165,139,224,164,154,224,164,191,224,164,159,224,165,141,224,164,160,224,165,135,224,164,184,224,164,174,224,164,190,224,164,154,224,164,190,224,164,176,224,164,156,224,164,130,224,164,149,224,165,141,224,164,182,224,164,168,224,164,166,224,165,129,224,164,168,224,164,191,224,164,175,224,164,190,224,164,170,224,165,141,224,164,176,224,164,175,224,165,139,224,164,151,224,164,133,224,164,168,224,165,129,224,164,184,224,164,190,224,164,176,224,164,145,224,164,168,224,164,178,224,164,190,224,164,135,224,164,168,224,164,170,224,164,190,224,164,176,224,165,141,224,164,159,224,165,128,224,164,182,224,164,176,224,165,141,224,164,164,224,165,139,224,164,130,224,164,178,224,165,139,224,164,149,224,164,184,224,164,173,224,164,190,224,164,171,224,164,188,224,165,141,224,164,178,224,165,136,224,164,182,224,164,182,224,164,176,224,165,141,224,164,164,224,165,135,224,164,130,224,164,170,224,165,141,224,164,176,224,164,166,224,165,135,224,164,182,224,164,170,224,165,141,224,164,178,224,165,135,224,164,175,224,164,176,224,164,149,224,165,135,224,164,130,224,164,166,224,165,141,224,164,176,224,164,184,224,165,141,224,164,165,224,164,191,224,164,164,224,164,191,224,164,137,224,164,164,224,165,141,224,164,170,224,164,190,224,164,166,224,164,137,224,164,168,224,165,141,224,164,185,224,165,135,224,164,130,224,164,154,224,164,191,224,164,159,224,165,141,224,164,160,224,164,190,224,164,175,224,164,190,224,164,164,224,165,141,224,164,176,224,164,190,224,164,156,224,165,141,224,164,175,224,164,190,224,164,166,224,164,190,224,164,170,224,165,129,224,164,176,224,164,190,224,164,168,224,165,135,224,164,156,224,165,139,224,164,161,224,164,188,224,165,135,224,164,130,224,164,133,224,164,168,224,165,129,224,164,181,224,164,190,224,164,166,224,164,182,224,165,141,224,164,176,224,165,135,224,164,163,224,165,128,224,164,182,224,164,191,224,164,149,224,165,141,224,164,183,224,164,190,224,164,184,224,164,176,224,164,149,224,164,190,224,164,176,224,165,128,224,164,184,224,164,130,224,164,151,224,165,141,224,164,176,224,164,185,224,164,170,224,164,176,224,164,191,224,164,163,224,164,190,224,164,174,224,164,172,224,165,141,224,164,176,224,164,190,224,164,130,224,164,161,224,164,172,224,164,154,224,165,141,224,164,154,224,165,139,224,164,130,224,164,137,224,164,170,224,164,178,224,164,172,224,165,141,224,164,167,224,164,174,224,164,130,224,164,164,224,165,141,224,164,176,224,165,128,224,164,184,224,164,130,224,164,170,224,164,176,224,165,141,224,164,149,224,164,137,224,164,174,224,165,141,224,164,174,224,165,128,224,164,166,224,164,174,224,164,190,224,164,167,224,165,141,224,164,175,224,164,174,224,164,184,224,164,185,224,164,190,224,164,175,224,164,164,224,164,190,224,164,182,224,164,172,224,165,141,224,164,166,224,165,139,224,164,130,224,164,174,224,165,128,224,164,161,224,164,191,224,164,175,224,164,190,224,164,134,224,164,136,224,164,170,224,165,128,224,164,143,224,164,178,224,164,174,224,165,139,224,164,172,224,164,190,224,164,135,224,164,178,224,164,184,224,164,130,224,164,150,224,165,141,224,164,175,224,164,190,224,164,134,224,164,170,224,164,176,224,165,135,224,164,182,224,164,168,224,164,133,224,164,168,224,165,129,224,164,172,224,164,130,224,164,167,224,164,172,224,164,190,224,164,156,224,164,188,224,164,190,224,164,176,224,164,168,224,164,181,224,165,128,224,164,168,224,164,164,224,164,174,224,164,170,224,165,141,224,164,176,224,164,174,224,165,129,224,164,150,224,164,170,224,165,141,224,164,176,224,164,182,224,165,141,224,164,168,224,164,170,224,164,176,224,164,191,224,164,181,224,164,190,224,164,176,224,164,168,224,165,129,224,164,149,224,164,184,224,164,190,224,164,168,224,164,184,224,164,174,224,164,176,224,165,141,224,164,165,224,164,168,224,164,134,224,164,175,224,165,139,224,164,156,224,164,191,224,164,164,224,164,184,224,165,139,224,164,174,224,164,181,224,164,190,224,164,176,216,167,217,132,217,133,216,180,216,167,216,177,217,131,216,167,216,170,216,167,217,132,217,133,217,134,216,170,216,175,217,138,216,167,216,170,216,167,217,132,217,131,217,133,216,168,217,138,217,136,216,170,216,177,216,167,217,132,217,133,216,180,216,167,217,135,216,175,216,167,216,170,216,185,216,175,216,175,216,167,217,132,216,178,217,136,216,167,216,177,216,185,216,175,216,175,216,167,217,132,216,177,216,175,217,136,216,175,216,167,217,132,216,165,216,179,217,132,216,167,217,133,217,138,216,169,216,167,217,132,217,129,217,136,216,170,217,136,216,180,217,136,216,168,216,167,217,132,217,133,216,179,216,167,216,168,217,130,216,167,216,170,216,167,217,132,217,133,216,185,217,132,217,136,217,133,216,167,216,170,216,167,217,132,217,133,216,179,217,132,216,179,217,132,216,167,216,170,216,167,217,132,216,172,216,177,216,167,217,129,217,138,217,131,216,179,216,167,217,132,216,167,216,179,217,132,216,167,217,133,217,138,216,169,216,167,217,132,216,167,216,170,216,181,216,167,217,132,216,167,216,170,107,101,121,119,111,114,100,115,34,32,99,111,110,116,101,110,116,61,34,119,51,46,111,114,103,47,49,57,57,57,47,120,104,116,109,108,34,62,60,97,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,32,116,101,120,116,47,104,116,109,108,59,32,99,104,97,114,115,101,116,61,34,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,60,116,97,98,108,101,32,99,101,108,108,112,97,100,100,105,110,103,61,34,97,117,116,111,99,111,109,112,108,101,116,101,61,34,111,102,102,34,32,116,101,120,116,45,97,108,105,103,110,58,32,99,101,110,116,101,114,59,116,111,32,108,97,115,116,32,118,101,114,115,105,111,110,32,98,121,32,98,97,99,107,103,114,111,117,110,100,45,99,111,108,111,114,58,32,35,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,47,100,105,118,62,60,47,100,105,118,62,60,100,105,118,32,105,100,61,60,97,32,104,114,101,102,61,34,35,34,32,99,108,97,115,115,61,34,34,62,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,99,114,105,112,116,34,32,115,114,99,61,34,104,116,116,112,58,47,47,10,60,115,99,114,105,112,116,32,108,97,110,103,117,97,103,101,61,34,47,47,69,78,34,32,34,104,116,116,112,58,47,47,119,119,119,46,119,101,110,99,111,100,101,85,82,73,67,111,109,112,111,110,101,110,116,40,34,32,104,114,101,102,61,34,106,97,118,97,115,99,114,105,112,116,58,60,100,105,118,32,99,108,97,115,115,61,34,99,111,110,116,101,110,116,100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,39,60,115,99,112,111,115,105,116,105,111,110,58,32,97,98,115,111,108,117,116,101,59,115,99,114,105,112,116,32,115,114,99,61,34,104,116,116,112,58,47,47,32,115,116,121,108,101,61,34,109,97,114,103,105,110,45,116,111,112,58,46,109,105,110,46,106,115,34,62,60,47,115,99,114,105,112,116,62,10,60,47,100,105,118,62,10,60,100,105,118,32,99,108,97,115,115,61,34,119,51,46,111,114,103,47,49,57,57,57,47,120,104,116,109,108,34,32,10,13,10,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,100,105,115,116,105,110,99,116,105,111,110,32,98,101,116,119,101,101,110,47,34,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,62,60,108,105,110,107,32,104,114,101,102,61,34,104,116,116,112,58,47,47,101,110,99,111,100,105,110,103,61,34,117,116,102,45,56,34,63,62,10,119,46,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,63,97,99,116,105,111,110,61,34,104,116,116,112,58,47,47,119,119,119,46,105,99,111,110,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,32,115,116,121,108,101,61,34,98,97,99,107,103,114,111,117,110,100,58,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,47,62,10,109,101,116,97,32,112,114,111,112,101,114,116,121,61,34,111,103,58,116,60,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,32,115,116,121,108,101,61,34,116,101,120,116,45,97,108,105,103,110,58,116,104,101,32,100,101,118,101,108,111,112,109,101,110,116,32,111,102,32,116,121,108,101,115,104,101,101,116,34,32,116,121,112,101,61,34,116,101,104,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,105,115,32,99,111,110,115,105,100,101,114,101,100,32,116,111,32,98,101,116,97,98,108,101,32,119,105,100,116,104,61,34,49,48,48,37,34,32,73,110,32,97,100,100,105,116,105,111,110,32,116,111,32,116,104,101,32,99,111,110,116,114,105,98,117,116,101,100,32,116,111,32,116,104,101,32,100,105,102,102,101,114,101,110,99,101,115,32,98,101,116,119,101,101,110,100,101,118,101,108,111,112,109,101,110,116,32,111,102,32,116,104,101,32,73,116,32,105,115,32,105,109,112,111,114,116,97,110,116,32,116,111,32,60,47,115,99,114,105,112,116,62,10,10,60,115,99,114,105,112,116,32,32,115,116,121,108,101,61,34,102,111,110,116,45,115,105,122,101,58,49,62,60,47,115,112,97,110,62,60,115,112,97,110,32,105,100,61,103,98,76,105,98,114,97,114,121,32,111,102,32,67,111,110,103,114,101,115,115,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,105,109,69,110,103,108,105,115,104,32,116,114,97,110,115,108,97,116,105,111,110,65,99,97,100,101,109,121,32,111,102,32,83,99,105,101,110,99,101,115,100,105,118,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,99,111,110,115,116,114,117,99,116,105,111,110,32,111,102,32,116,104,101,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,105,100,41,105,110,32,99,111,110,106,117,110,99,116,105,111,110,32,119,105,116,104,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41,59,32,60,109,101,116,97,32,112,114,111,112,101,114,116,121,61,34,111,103,58,208,145,209,138,208,187,208,179,208,176,209,128,209,129,208,186,208,184,10,32,116,121,112,101,61,34,116,101,120,116,34,32,110,97,109,101,61,34,62,80,114,105,118,97,99,121,32,80,111,108,105,99,121,60,47,97,62,97,100,109,105,110,105,115,116,101,114,101,100,32,98,121,32,116,104,101,101,110,97,98,108,101,83,105,110,103,108,101,82,101,113,117,101,115,116,115,116,121,108,101,61,38,113,117,111,116,59,109,97,114,103,105,110,58,60,47,100,105,118,62,60,47,100,105,118,62,60,47,100,105,118,62,60,62,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,105,32,115,116,121,108,101,61,38,113,117,111,116,59,102,108,111,97,116,58,114,101,102,101,114,114,101,100,32,116,111,32,97,115,32,116,104,101,32,116,111,116,97,108,32,112,111,112,117,108,97,116,105,111,110,32,111,102,105,110,32,87,97,115,104,105,110,103,116,111,110,44,32,68,46,67,46,32,115,116,121,108,101,61,34,98,97,99,107,103,114,111,117,110,100,45,97,109,111,110,103,32,111,116,104,101,114,32,116,104,105,110,103,115,44,111,114,103,97,110,105,122,97,116,105,111,110,32,111,102,32,116,104,101,112,97,114,116,105,99,105,112,97,116,101,100,32,105,110,32,116,104,101,116,104,101,32,105,110,116,114,111,100,117,99,116,105,111,110,32,111,102,105,100,101,110,116,105,102,105,101,100,32,119,105,116,104,32,116,104,101,102,105,99,116,105,111,110,97,108,32,99,104,97,114,97,99,116,101,114,32,79,120,102,111,114,100,32,85,110,105,118,101,114,115,105,116,121,32,109,105,115,117,110,100,101,114,115,116,97,110,100,105,110,103,32,111,102,84,104,101,114,101,32,97,114,101,44,32,104,111,119,101,118,101,114,44,115,116,121,108,101,115,104,101,101,116,34,32,104,114,101,102,61,34,47,67,111,108,117,109,98,105,97,32,85,110,105,118,101,114,115,105,116,121,101,120,112,97,110,100,101,100,32,116,111,32,105,110,99,108,117,100,101,117,115,117,97,108,108,121,32,114,101,102,101,114,114,101,100,32,116,111,105,110,100,105,99,97,116,105,110,103,32,116,104,97,116,32,116,104,101,104,97,118,101,32,115,117,103,103,101,115,116,101,100,32,116,104,97,116,97,102,102,105,108,105,97,116,101,100,32,119,105,116,104,32,116,104,101,99,111,114,114,101,108,97,116,105,111,110,32,98,101,116,119,101,101,110,110,117,109,98,101,114,32,111,102,32,100,105,102,102,101,114,101,110,116,62,60,47,116,100,62,60,47,116,114,62,60,47,116,97,98,108,101,62,82,101,112,117,98,108,105,99,32,111,102,32,73,114,101,108,97,110,100,10,60,47,115,99,114,105,112,116,62,10,60,115,99,114,105,112,116,32,117,110,100,101,114,32,116,104,101,32,105,110,102,108,117,101,110,99,101,99,111,110,116,114,105,98,117,116,105,111,110,32,116,111,32,116,104,101,79,102,102,105,99,105,97,108,32,119,101,98,115,105,116,101,32,111,102,104,101,97,100,113,117,97,114,116,101,114,115,32,111,102,32,116,104,101,99,101,110,116,101,114,101,100,32,97,114,111,117,110,100,32,116,104,101,105,109,112,108,105,99,97,116,105,111,110,115,32,111,102,32,116,104,101,104,97,118,101,32,98,101,101,110,32,100,101,118,101,108,111,112,101,100,70,101,100,101,114,97,108,32,82,101,112,117,98,108,105,99,32,111,102,98,101,99,97,109,101,32,105,110,99,114,101,97,115,105,110,103,108,121,99,111,110,116,105,110,117,97,116,105,111,110,32,111,102,32,116,104,101,78,111,116,101,44,32,104,111,119,101,118,101,114,44,32,116,104,97,116,115,105,109,105,108,97,114,32,116,111,32,116,104,97,116,32,111,102,32,99,97,112,97,98,105,108,105,116,105,101,115,32,111,102,32,116,104,101,97,99,99,111,114,100,97,110,99,101,32,119,105,116,104,32,116,104,101,112,97,114,116,105,99,105,112,97,110,116,115,32,105,110,32,116,104,101,102,117,114,116,104,101,114,32,100,101,118,101,108,111,112,109,101,110,116,117,110,100,101,114,32,116,104,101,32,100,105,114,101,99,116,105,111,110,105,115,32,111,102,116,101,110,32,99,111,110,115,105,100,101,114,101,100,104,105,115,32,121,111,117,110,103,101,114,32,98,114,111,116,104,101,114,60,47,116,100,62,60,47,116,114,62,60,47,116,97,98,108,101,62,60,97,32,104,116,116,112,45,101,113,117,105,118,61,34,88,45,85,65,45,112,104,121,115,105,99,97,108,32,112,114,111,112,101,114,116,105,101,115,111,102,32,66,114,105,116,105,115,104,32,67,111,108,117,109,98,105,97,104,97,115,32,98,101,101,110,32,99,114,105,116,105,99,105,122,101,100,40,119,105,116,104,32,116,104,101,32,101,120,99,101,112,116,105,111,110,113,117,101,115,116,105,111,110,115,32,97,98,111,117,116,32,116,104,101,112,97,115,115,105,110,103,32,116,104,114,111,117,103,104,32,116,104,101,48,34,32,99,101,108,108,112,97,100,100,105,110,103,61,34,48,34,32,116,104,111,117,115,97,110,100,115,32,111,102,32,112,101,111,112,108,101,114,101,100,105,114,101,99,116,115,32,104,101,114,101,46,32,70,111,114,104,97,118,101,32,99,104,105,108,100,114,101,110,32,117,110,100,101,114,37,51,69,37,51,67,47,115,99,114,105,112,116,37,51,69,34,41,41,59,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,60,108,105,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,115,105,116,101,95,110,97,109,101,34,32,99,111,110,116,101,110,116,61,34,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,32,110,111,110,101,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,88,45,110,101,119,32,68,97,116,101,40,41,46,103,101,116,84,105,109,101,40,41,32,116,121,112,101,61,34,105,109,97,103,101,47,120,45,105,99,111,110,34,60,47,115,112,97,110,62,60,115,112,97,110,32,99,108,97,115,115,61,34,108,97,110,103,117,97,103,101,61,34,106,97,118,97,115,99,114,105,112,116,119,105,110,100,111,119,46,108,111,99,97,116,105,111,110,46,104,114,101,102,60,97,32,104,114,101,102,61,34,106,97,118,97,115,99,114,105,112,116,58,45,45,62,13,10,60,115,99,114,105,112,116,32,116,121,112,101,61,34,116,60,97,32,104,114,101,102,61,39,104,116,116,112,58,47,47,119,119,119,46,104,111,114,116,99,117,116,32,105,99,111,110,34,32,104,114,101,102,61,34,60,47,100,105,118,62,13,10,60,100,105,118,32,99,108,97,115,115,61,34,60,115,99,114,105,112,116,32,115,114,99,61,34,104,116,116,112,58,47,47,34,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,116,60,47,100,105],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+297008);allocate([118,62,10,60,115,99,114,105,112,116,32,116,121,112,101,61,47,97,62,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,32,97,108,108,111,119,84,114,97,110,115,112,97,114,101,110,99,121,61,34,88,45,85,65,45,67,111,109,112,97,116,105,98,108,101,34,32,99,111,110,114,101,108,97,116,105,111,110,115,104,105,112,32,98,101,116,119,101,101,110,10,60,47,115,99,114,105,112,116,62,13,10,60,115,99,114,105,112,116,32,60,47,97,62,60,47,108,105,62,60,47,117,108,62,60,47,100,105,118,62,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,116,104,101,32,112,114,111,103,114,97,109,109,105,110,103,32,108,97,110,103,117,97,103,101,60,47,97,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,60,47,97,62,60,47,108,105,62,60,108,105,32,99,108,97,115,115,61,34,102,111,114,109,32,97,99,116,105,111,110,61,34,104,116,116,112,58,47,47,60,100,105,118,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,116,121,112,101,61,34,116,101,120,116,34,32,110,97,109,101,61,34,113,34,60,116,97,98,108,101,32,119,105,100,116,104,61,34,49,48,48,37,34,32,98,97,99,107,103,114,111,117,110,100,45,112,111,115,105,116,105,111,110,58,34,32,98,111,114,100,101,114,61,34,48,34,32,119,105,100,116,104,61,34,114,101,108,61,34,115,104,111,114,116,99,117,116,32,105,99,111,110,34,32,104,54,62,60,117,108,62,60,108,105,62,60,97,32,104,114,101,102,61,34,32,32,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,99,115,115,34,32,109,101,100,105,97,61,34,115,99,114,101,101,110,34,32,114,101,115,112,111,110,115,105,98,108,101,32,102,111,114,32,116,104,101,32,34,32,116,121,112,101,61,34,97,112,112,108,105,99,97,116,105,111,110,47,34,32,115,116,121,108,101,61,34,98,97,99,107,103,114,111,117,110,100,45,104,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,34,32,97,108,108,111,119,116,114,97,110,115,112,97,114,101,110,99,121,61,34,115,116,121,108,101,115,104,101,101,116,34,32,116,121,112,101,61,34,116,101,13,10,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,62,60,47,115,112,97,110,62,60,115,112,97,110,32,99,108,97,115,115,61,34,48,34,32,99,101,108,108,115,112,97,99,105,110,103,61,34,48,34,62,59,10,60,47,115,99,114,105,112,116,62,10,60,115,99,114,105,112,116,32,115,111,109,101,116,105,109,101,115,32,99,97,108,108,101,100,32,116,104,101,100,111,101,115,32,110,111,116,32,110,101,99,101,115,115,97,114,105,108,121,70,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,97,116,32,116,104,101,32,98,101,103,105,110,110,105,110,103,32,111,102,32,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,60,104,116,109,108,112,97,114,116,105,99,117,108,97,114,108,121,32,105,110,32,116,104,101,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,110,97,109,101,61,34,106,97,118,97,115,99,114,105,112,116,58,118,111,105,100,40,48,41,59,34,101,102,102,101,99,116,105,118,101,110,101,115,115,32,111,102,32,116,104,101,32,97,117,116,111,99,111,109,112,108,101,116,101,61,34,111,102,102,34,32,103,101,110,101,114,97,108,108,121,32,99,111,110,115,105,100,101,114,101,100,62,60,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,34,62,60,47,115,99,114,105,112,116,62,13,10,60,115,99,114,105,112,116,116,104,114,111,117,103,104,111,117,116,32,116,104,101,32,119,111,114,108,100,99,111,109,109,111,110,32,109,105,115,99,111,110,99,101,112,116,105,111,110,97,115,115,111,99,105,97,116,105,111,110,32,119,105,116,104,32,116,104,101,60,47,100,105,118,62,10,60,47,100,105,118,62,10,60,100,105,118,32,99,100,117,114,105,110,103,32,104,105,115,32,108,105,102,101,116,105,109,101,44,99,111,114,114,101,115,112,111,110,100,105,110,103,32,116,111,32,116,104,101,116,121,112,101,61,34,105,109,97,103,101,47,120,45,105,99,111,110,34,32,97,110,32,105,110,99,114,101,97,115,105,110,103,32,110,117,109,98,101,114,100,105,112,108,111,109,97,116,105,99,32,114,101,108,97,116,105,111,110,115,97,114,101,32,111,102,116,101,110,32,99,111,110,115,105,100,101,114,101,100,109,101,116,97,32,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,32,60,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,101,120,97,109,112,108,101,115,32,105,110,99,108,117,100,101,32,116,104,101,34,62,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,105,112,97,114,116,105,99,105,112,97,116,105,111,110,32,105,110,32,116,104,101,116,104,101,32,101,115,116,97,98,108,105,115,104,109,101,110,116,32,111,102,10,60,47,100,105,118,62,10,60,100,105,118,32,99,108,97,115,115,61,34,38,97,109,112,59,110,98,115,112,59,38,97,109,112,59,110,98,115,112,59,116,111,32,100,101,116,101,114,109,105,110,101,32,119,104,101,116,104,101,114,113,117,105,116,101,32,100,105,102,102,101,114,101,110,116,32,102,114,111,109,109,97,114,107,101,100,32,116,104,101,32,98,101,103,105,110,110,105,110,103,100,105,115,116,97,110,99,101,32,98,101,116,119,101,101,110,32,116,104,101,99,111,110,116,114,105,98,117,116,105,111,110,115,32,116,111,32,116,104,101,99,111,110,102,108,105,99,116,32,98,101,116,119,101,101,110,32,116,104,101,119,105,100,101,108,121,32,99,111,110,115,105,100,101,114,101,100,32,116,111,119,97,115,32,111,110,101,32,111,102,32,116,104,101,32,102,105,114,115,116,119,105,116,104,32,118,97,114,121,105,110,103,32,100,101,103,114,101,101,115,104,97,118,101,32,115,112,101,99,117,108,97,116,101,100,32,116,104,97,116,40,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,112,97,114,116,105,99,105,112,97,116,105,110,103,32,105,110,32,116,104,101,111,114,105,103,105,110,97,108,108,121,32,100,101,118,101,108,111,112,101,100,101,116,97,32,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,62,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,47,62,10,105,110,116,101,114,99,104,97,110,103,101,97,98,108,121,32,119,105,116,104,109,111,114,101,32,99,108,111,115,101,108,121,32,114,101,108,97,116,101,100,115,111,99,105,97,108,32,97,110,100,32,112,111,108,105,116,105,99,97,108,116,104,97,116,32,119,111,117,108,100,32,111,116,104,101,114,119,105,115,101,112,101,114,112,101,110,100,105,99,117,108,97,114,32,116,111,32,116,104,101,115,116,121,108,101,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,116,121,112,101,61,34,115,117,98,109,105,116,34,32,110,97,109,101,61,34,102,97,109,105,108,105,101,115,32,114,101,115,105,100,105,110,103,32,105,110,100,101,118,101,108,111,112,105,110,103,32,99,111,117,110,116,114,105,101,115,99,111,109,112,117,116,101,114,32,112,114,111,103,114,97,109,109,105,110,103,101,99,111,110,111,109,105,99,32,100,101,118,101,108,111,112,109,101,110,116,100,101,116,101,114,109,105,110,97,116,105,111,110,32,111,102,32,116,104,101,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,111,110,32,115,101,118,101,114,97,108,32,111,99,99,97,115,105,111,110,115,112,111,114,116,117,103,117,195,170,115,32,40,69,117,114,111,112,101,117,41,208,163,208,186,209,128,208,176,209,151,208,189,209,129,209,140,208,186,208,176,209,131,208,186,209,128,208,176,209,151,208,189,209,129,209,140,208,186,208,176,208,160,208,190,209,129,209,129,208,184,208,185,209,129,208,186,208,190,208,185,208,188,208,176,209,130,208,181,209,128,208,184,208,176,208,187,208,190,208,178,208,184,208,189,209,132,208,190,209,128,208,188,208,176,209,134,208,184,208,184,209,131,208,191,209,128,208,176,208,178,208,187,208,181,208,189,208,184,209,143,208,189,208,181,208,190,208,177,209,133,208,190,208,180,208,184,208,188,208,190,208,184,208,189,209,132,208,190,209,128,208,188,208,176,209,134,208,184,209,143,208,152,208,189,209,132,208,190,209,128,208,188,208,176,209,134,208,184,209,143,208,160,208,181,209,129,208,191,209,131,208,177,208,187,208,184,208,186,208,184,208,186,208,190,208,187,208,184,209,135,208,181,209,129,209,130,208,178,208,190,208,184,208,189,209,132,208,190,209,128,208,188,208,176,209,134,208,184,209,142,209,130,208,181,209,128,209,128,208,184,209,130,208,190,209,128,208,184,208,184,208,180,208,190,209,129,209,130,208,176,209,130,208,190,209,135,208,189,208,190,216,167,217,132,217,133,216,170,217,136,216,167,216,172,216,175,217,136,217,134,216,167,217,132,216,167,216,180,216,170,216,177,216,167,217,131,216,167,216,170,216,167,217,132,216,167,217,130,216,170,216,177,216,167,216,173,216,167,216,170,104,116,109,108,59,32,99,104,97,114,115,101,116,61,85,84,70,45,56,34,32,115,101,116,84,105,109,101,111,117,116,40,102,117,110,99,116,105,111,110,40,41,100,105,115,112,108,97,121,58,105,110,108,105,110,101,45,98,108,111,99,107,59,60,105,110,112,117,116,32,116,121,112,101,61,34,115,117,98,109,105,116,34,32,116,121,112,101,32,61,32,39,116,101,120,116,47,106,97,118,97,115,99,114,105,60,105,109,103,32,115,114,99,61,34,104,116,116,112,58,47,47,119,119,119,46,34,32,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,115,104,111,114,116,99,117,116,32,105,99,111,110,34,32,104,114,101,102,61,34,34,32,97,117,116,111,99,111,109,112,108,101,116,101,61,34,111,102,102,34,32,60,47,97,62,60,47,100,105,118,62,60,100,105,118,32,99,108,97,115,115,61,60,47,97,62,60,47,108,105,62,10,60,108,105,32,99,108,97,115,115,61,34,99,115,115,34,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,60,102,111,114,109,32,97,99,116,105,111,110,61,34,104,116,116,112,58,47,47,120,116,47,99,115,115,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,108,105,110,107,32,114,101,108,61,34,97,108,116,101,114,110,97,116,101,34,32,13,10,60,115,99,114,105,112,116,32,116,121,112,101,61,34,116,101,120,116,47,32,111,110,99,108,105,99,107,61,34,106,97,118,97,115,99,114,105,112,116,58,40,110,101,119,32,68,97,116,101,41,46,103,101,116,84,105,109,101,40,41,125,104,101,105,103,104,116,61,34,49,34,32,119,105,100,116,104,61,34,49,34,32,80,101,111,112,108,101,39,115,32,82,101,112,117,98,108,105,99,32,111,102,32,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,117,110,100,101,114,116,104,101,32,98,101,103,105,110,110,105,110,103,32,111,102,32,116,104,101,32,60,47,100,105,118,62,10,60,47,100,105,118,62,10,60,47,100,105,118,62,10,101,115,116,97,98,108,105,115,104,109,101,110,116,32,111,102,32,116,104,101,32,60,47,100,105,118,62,60,47,100,105,118,62,60,47,100,105,118,62,60,47,100,35,118,105,101,119,112,111,114,116,123,109,105,110,45,104,101,105,103,104,116,58,10,60,115,99,114,105,112,116,32,115,114,99,61,34,104,116,116,112,58,47,47,111,112,116,105,111,110,62,60,111,112,116,105,111,110,32,118,97,108,117,101,61,111,102,116,101,110,32,114,101,102,101,114,114,101,100,32,116,111,32,97,115,32,47,111,112,116,105,111,110,62,10,60,111,112,116,105,111,110,32,118,97,108,117,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,10,60,33,45,45,91,73,110,116,101,114,110,97,116,105,111,110,97,108,32,65,105,114,112,111,114,116,62,10,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,60,47,97,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,224,184,160,224,184,178,224,184,169,224,184,178,224,185,132,224,184,151,224,184,162,225,131,165,225,131,144,225,131,160,225,131,151,225,131,163,225,131,154,225,131,152,230,173,163,233,171,148,228,184,173,230,150,135,32,40,231,185,129,233,171,148,41,224,164,168,224,164,191,224,164,176,224,165,141,224,164,166,224,165,135,224,164,182,224,164,161,224,164,190,224,164,137,224,164,168,224,164,178,224,165,139,224,164,161,224,164,149,224,165,141,224,164,183,224,165,135,224,164,164,224,165,141,224,164,176,224,164,156,224,164,190,224,164,168,224,164,149,224,164,190,224,164,176,224,165,128,224,164,184,224,164,130,224,164,172,224,164,130,224,164,167,224,164,191,224,164,164,224,164,184,224,165,141,224,164,165,224,164,190,224,164,170,224,164,168,224,164,190,224,164,184,224,165,141,224,164,181,224,165,128,224,164,149,224,164,190,224,164,176,224,164,184,224,164,130,224,164,184,224,165,141,224,164,149,224,164,176,224,164,163,224,164,184,224,164,190,224,164,174,224,164,151,224,165,141,224,164,176,224,165,128,224,164,154,224,164,191,224,164,159,224,165,141,224,164,160,224,165,139,224,164,130,224,164,181,224,164,191,224,164,156,224,165,141,224,164,158,224,164,190,224,164,168,224,164,133,224,164,174,224,165,135,224,164,176,224,164,191,224,164,149,224,164,190,224,164,181,224,164,191,224,164,173,224,164,191,224,164,168,224,165,141,224,164,168,224,164,151,224,164,190,224,164,161,224,164,191,224,164,175,224,164,190,224,164,129,224,164,149,224,165,141,224,164,175,224,165,139,224,164,130,224,164,149,224,164,191,224,164,184,224,165,129,224,164,176,224,164,149,224,165,141,224,164,183,224,164,190,224,164,170,224,164,185,224,165,129,224,164,129,224,164,154,224,164,164,224,165,128,224,164,170,224,165,141,224,164,176,224,164,172,224,164,130,224,164,167,224,164,168,224,164,159,224,164,191,224,164,170,224,165,141,224,164,170,224,164,163,224,165,128,224,164,149,224,165,141,224,164,176,224,164,191,224,164,149,224,165,135,224,164,159,224,164,170,224,165,141,224,164,176,224,164,190,224,164,176,224,164,130,224,164,173,224,164,170,224,165,141,224,164,176,224,164,190,224,164,170,224,165,141,224,164,164,224,164,174,224,164,190,224,164,178,224,164,191,224,164,149,224,165,139,224,164,130,224,164,176,224,164,171,224,164,188,224,165,141,224,164,164,224,164,190,224,164,176,224,164,168,224,164,191,224,164,176,224,165,141,224,164,174,224,164,190,224,164,163,224,164,178,224,164,191,224,164,174,224,164,191,224,164,159,224,165,135,224,164,161,100,101,115,99,114,105,112,116,105,111,110,34,32,99,111,110,116,101,110,116,61,34,100,111,99,117,109,101,110,116,46,108,111,99,97,116,105,111,110,46,112,114,111,116,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,97,103,78,97,109,101,40,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,10,60,104,116,109,108,32,60,109,101,116,97,32,99,104,97,114,115,101,116,61,34,117,116,102,45,56,34,62,58,117,114,108,34,32,99,111,110,116,101,110,116,61,34,104,116,116,112,58,47,47,46,99,115,115,34,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,115,116,121,108,101,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,62,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,104,114,101,102,61,34,119,51,46,111,114,103,47,49,57,57,57,47,120,104,116,109,108,34,32,120,109,108,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,34,32,109,101,116,104,111,100,61,34,103,101,116,34,32,97,99,116,105,111,110,61,34,108,105,110,107,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,32,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,116,121,112,101,61,34,105,109,97,103,101,47,120,45,105,99,111,110,34,32,47,62,99,101,108,108,112,97,100,100,105,110,103,61,34,48,34,32,99,101,108,108,115,112,46,99,115,115,34,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,60,47,97,62,60,47,108,105,62,60,108,105,62,60,97,32,104,114,101,102,61,34,34,32,119,105,100,116,104,61,34,49,34,32,104,101,105,103,104,116,61,34,49,34,34,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,59,34,62,97,108,116,101,114,110,97,116,101,34,32,116,121,112,101,61,34,97,112,112,108,105,45,47,47,87,51,67,47,47,68,84,68,32,88,72,84,77,76,32,49,46,48,32,101,108,108,115,112,97,99,105,110,103,61,34,48,34,32,99,101,108,108,112,97,100,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,118,97,108,117,101,61,34,47,97,62,38,110,98,115,112,59,60,115,112,97,110,32,114,111,108,101,61,34,115,10,60,105,110,112,117,116,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,108,97,110,103,117,97,103,101,61,34,74,97,118,97,83,99,114,105,112,116,34,32,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,115,66,103,61,34,48,34,32,99,101,108,108,115,112,97,99,105,110,103,61,34,48,34,32,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,109,101,100,105,97,61,34,116,121,112,101,61,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,119,105,116,104,32,116,104,101,32,101,120,99,101,112,116,105,111,110,32,111,102,32,121,112,101,61,34,116,101,120,116,47,99,115,115,34,32,114,101,108,61,34,115,116,32,104,101,105,103,104,116,61,34,49,34,32,119,105,100,116,104,61,34,49,34,32,61,39,43,101,110,99,111,100,101,85,82,73,67,111,109,112,111,110,101,110,116,40,60,108,105,110,107,32,114,101,108,61,34,97,108,116,101,114,110,97,116,101,34,32,10,98,111,100,121,44,32,116,114,44,32,105,110,112,117,116,44,32,116,101,120,116,109,101,116,97,32,110,97,109,101,61,34,114,111,98,111,116,115,34,32,99,111,110,109,101,116,104,111,100,61,34,112,111,115,116,34,32,97,99,116,105,111,110,61,34,62,10,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,99,115,115,34,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,60,47,100,105,118,62,60,47,100,105,118,62,60,100,105,118,32,99,108,97,115,115,108,97,110,103,117,97,103,101,61,34,106,97,118,97,115,99,114,105,112,116,34,62,97,114,105,97,45,104,105,100,100,101,110,61,34,116,114,117,101,34,62,194,183,60,114,105,112,116,34,32,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,108,61,48,59,125,41,40,41,59,10,40,102,117,110,99,116,105,111,110,40,41,123,98,97,99,107,103,114,111,117,110,100,45,105,109,97,103,101,58,32,117,114,108,40,47,97,62,60,47,108,105,62,60,108,105,62,60,97,32,104,114,101,102,61,34,104,9,9,60,108,105,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,97,116,111,114,34,32,97,114,105,97,45,104,105,100,100,101,110,61,34,116,114,117,62,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,108,97,110,103,117,97,103,101,61,34,106,97,118,97,115,99,114,105,112,116,34,32,47,111,112,116,105,111,110,62,10,60,111,112,116,105,111,110,32,118,97,108,117,101,47,100,105,118,62,60,47,100,105,118,62,60,100,105,118,32,99,108,97,115,115,61,114,97,116,111,114,34,32,97,114,105,97,45,104,105,100,100,101,110,61,34,116,114,101,61,40,110,101,119,32,68,97,116,101,41,46,103,101,116,84,105,109,101,40,41,112,111,114,116,117,103,117,195,170,115,32,40,100,111,32,66,114,97,115,105,108,41,208,190,209,128,208,179,208,176,208,189,208,184,208,183,208,176,209,134,208,184,208,184,208,178,208,190,208,183,208,188,208,190,208,182,208,189,208,190,209,129,209,130,209,140,208,190,208,177,209,128,208,176,208,183,208,190,208,178,208,176,208,189,208,184,209,143,209,128,208,181,208,179,208,184,209,129,209,130,209,128,208,176,209,134,208,184,208,184,208,178,208,190,208,183,208,188,208,190,208,182,208,189,208,190,209,129,209,130,208,184,208,190,208,177,209,143,208,183,208,176,209,130,208,181,208,187,209,140,208,189,208,176,60,33,68,79,67,84,89,80,69,32,104,116,109,108,32,80,85,66,76,73,67,32,34,110,116,45,84,121,112,101,34,32,99,111,110,116,101,110,116,61,34,116,101,120,116,47,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,67,111,110,116,101,114,97,110,115,105,116,105,111,110,97,108,47,47,69,78,34,32,34,104,116,116,112,58,60,104,116,109,108,32,120,109,108,110,115,61,34,104,116,116,112,58,47,47,119,119,119,45,47,47,87,51,67,47,47,68,84,68,32,88,72,84,77,76,32,49,46,48,32,84,68,84,68,47,120,104,116,109,108,49,45,116,114,97,110,115,105,116,105,111,110,97,108,47,47,119,119,119,46,119,51,46,111,114,103,47,84,82,47,120,104,116,109,108,49,47,112,101,32,61,32,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,59,60,109,101,116,97,32,110,97,109,101,61,34,100,101,115,99,114,105,112,116,105,111,110,112,97,114,101,110,116,78,111,100,101,46,105,110,115,101,114,116,66,101,102,111,114,101,60,105,110,112,117,116,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,110,97,106,115,34,32,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,99,114,105,40,100,111,99,117,109,101,110,116,41,46,114,101,97,100,121,40,102,117,110,99,116,105,115,99,114,105,112,116,32,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,105,109,97,103,101,34,32,99,111,110,116,101,110,116,61,34,104,116,116,112,58,47,47,85,65,45,67,111,109,112,97,116,105,98,108,101,34,32,99,111,110,116,101,110,116,61,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,34,32,47,62,10,108,105,110,107,32,114,101,108,61,34,115,104,111,114,116,99,117,116,32,105,99,111,110,60,108,105,110,107,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,60,47,115,99,114,105,112,116,62,10,60,115,99,114,105,112,116,32,116,121,112,101,61,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,60,97,32,116,97,114,103,101,116,61,34,95,98,108,97,110,107,34,32,104,114,101,102,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,115,66,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,110,97,109,101,61,97,46,116,121,112,101,32,61,32,39,116,101,120,116,47,106,97,118,97,115,99,114,105,110,112,117,116,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,110,97,109,101,104,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,34,32,47,62,100,116,100,34,62,10,60,104,116,109,108,32,120,109,108,110,115,61,34,104,116,116,112,45,47,47,87,51,67,47,47,68,84,68,32,72,84,77,76,32,52,46,48,49,32,84,101,110,116,115,66,121,84,97,103,78,97,109,101,40,39,115,99,114,105,112,116,39,41,105,110,112,117,116,32,116,121,112,101,61,34,104,105,100,100,101,110,34,32,110,97,109,60,115,99,114,105,112,116,32,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,34,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,59,34,62,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,61,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,32,116,121,112,101,61,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,110,97,109,101,61,34,100,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,97,103,78,97,109,101,40,115,110,105,99,97,108,34,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,67,47,47,68,84,68,32,72,84,77,76,32,52,46,48,49,32,84,114,97,110,115,105,116,60,115,116,121,108,101,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,62,10,10,60,115,116,121,108,101,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,62,105,111,110,97,108,46,100,116,100,34,62,10,60,104,116,109,108,32,120,109,108,110,115,61,104,116,116,112,45,101,113,117,105,118,61,34,67,111,110,116,101,110,116,45,84,121,112,101,100,105,110,103,61,34,48,34,32,99,101,108,108,115,112,97,99,105,110,103,61,34,48,34,104,116,109,108,59,32,99,104,97,114,115,101,116,61,117,116,102,45,56,34,32,47,62,10,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,59,34,62,60,60,108,105,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,119,119,46,32,116,121,112,101,61,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,62,208,180,208,181,209,143,209,130,208,181,208,187,209,140,208,189,208,190,209,129,209,130,208,184,209,129,208,190,208,190,209,130,208,178,208,181,209,130,209,129,209,130,208,178,208,184,208,184,208,191,209,128,208,190,208,184,208,183,208,178,208,190,208,180,209,129,209,130,208,178,208,176,208,177,208,181,208,183,208,190,208,191,208,176,209,129,208,189,208,190,209,129,209,130,208,184,224,164,170,224,165,129,224,164,184,224,165,141,224,164,164,224,164,191,224,164,149,224,164,190,224,164,149,224,164,190,224,164,130,224,164,151,224,165,141,224,164,176,224,165,135,224,164,184,224,164,137,224,164,168,224,165,141,224,164,185,224,165,139,224,164,130,224,164,168,224,165,135,224,164,181,224,164,191,224,164,167,224,164,190,224,164,168,224,164,184,224,164,173,224,164,190,224,164,171,224,164,191,224,164,149,224,165,141,224,164,184,224,164,191,224,164,130,224,164,151,224,164,184,224,165,129,224,164,176,224,164,149,224,165,141,224,164,183,224,164,191,224,164,164,224,164,149,224,165,137,224,164,170,224,165,128,224,164,176,224,164,190,224,164,135,224,164,159,224,164,181,224,164,191,224,164,156,224,165,141,224,164,158,224,164,190,224,164,170,224,164,168,224,164,149,224,164,190,224,164,176,224,165,141,224,164,176,224,164,181,224,164,190,224,164,136,224,164,184,224,164,149,224,165,141,224,164,176,224,164,191,224,164,175,224,164,164,224,164,190,8,207,4,0,0,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,16,207,4,0,16,207,4,0,0,0,0,0,16,207,4,0,8,207,4,0,12,0,0,0,8,207,4,0,8,207,4,0,10,0,0,0,16,207,4,0,8,207,4,0,0,0,0,0,24,207,4,0,16,207,4,0,0,0,0,0,8,207,4,0,32,207,4,0,0,0,0,0,16,207,4,0,8,207,4,0,0,0,0,0,40,207,4,0,8,207,4,0,10,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,48,207,4,0,8,207,4,0,13,0,0,0,8,207,4,0,8,207,4,0,1,0,0,0,8,207,4,0,56,207,4,0,0,0,0,0,16,207,4,0,8,207,4,0,0,0,0,0,56,207,4,0,16,207,4,0,10,0,0,0,16,207,4,0,8,207,4,0,0,0,0,0,64,207,4,0,8,207,4,0,0,0,0,0,72,207,4,0,80,207,4,0,0,0,0,0,16,207,4,0,8,207,4,0,0,0,0,0,88,207,4,0,8,207,4,0,0,0,0,0,96,207,4,0,8,207,4,0,0,0,0,0,104,207,4,0,8,207,4,0,0,0,0,0,112,207,4,0,8,207,4,0,3,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,120,207,4,0,8,207,4,0,0,0,0,0,128,207,4,0,8,207,4,0,14,0,0,0,8,207,4,0,8,207,4,0,2,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,136,207,4,0,8,207,4,0,0,0,0,0,144,207,4,0,16,207,4,0,10,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,152,207,4,0,96,207,4,0,0,0,0,0,8,207,4,0,16,207,4,0,0,0,0,0,56,207,4,0,8,207,4,0,15,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,160,207,4,0,8,207,4,0,0,0,0,0,168,207,4,0,8,207,4,0,0,0,0,0,176,207,4,0,8,207,4,0,0,0,0,0,184,207,4,0,8,207,4,0,16,0,0,0,8,207,4,0,8,207,4,0,17,0,0,0,8,207,4,0,24,207,4,0,0,0,0,0,8,207,4,0,8,207,4,0,4,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,192,207,4,0,8,207,4,0,11,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,200,207,4,0,8,207,4,0,0,0,0,0,208,207,4,0,8,207,4,0,0,0,0,0,216,207,4,0,8,207,4,0,7,0,0,0,8,207,4,0,8,207,4,0,1,0,0,0,224,207,4,0,8,207,4,0,0,0,0,0,232,207,4,0,8,207,4,0,0,0,0,0,240,207,4,0,16,207,4,0,0,0,0,0,152,207,4,0,8,207,4,0,0,0,0,0,248,207,4,0,8,207,4,0,20,0,0,0,8,207,4,0,8,207,4,0,18,0,0,0,8,207,4,0,8,207,4,0,6,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,0,208,4,0,8,207,4,0,10,0,0,0,56,207,4,0,8,207,4,0,8,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,8,208,4,0,8,207,4,0,0,0,0,0,16,208,4,0,24,207,4,0,0,0,0,0,40,207,4,0,8,207,4,0,5,0,0,0,8,207,4,0,8,207,4,0,9,0,0,0,8,207,4,0,16,207,4,0,10,0,0,0,56,207,4,0,8,207,4,0,10,0,0,0,88,207,4,0,96,207,4,0,0,0,0,0,0,208,4,0,8,207,4,0,11,0,0,0,16,207,4,0,8,207,4,0,10,0,0,0,104,207,4,0,8,207,4,0,0,0,0,0,24,208,4,0,16,207,4,0,0,0,0,0,96,207,4,0,32,208,4,0,0,0,0,0,8,207,4,0,24,207,4,0,0,0,0,0,40,208,4,0,8,207,4,0,10,0,0,0,168,207,4,0,8,207,4,0,0,0,0,0,56,208,4,0,8,207,4,0,0,0,0,0,64,208,4,0,96,207,4,0,0,0,0,0,16,207,4,0,8,207,4,0,10,0,0,0,0,208,4,0,8,207,4,0,10,0,0,0,96,207,4,0,8,207,4,0,0,0,0,0,72,208,4,0,16,207,4,0,0,0,0,0,24,208,4,0,8,207,4,0,0,0,0,0,80,208,4,0,16,207,4,0,11,0,0,0,16,207,4,0,8,207,4,0,0,0,0,0,88,208,4,0,16,207,4,0,11,0,0,0,8,207,4,0,8,207,4,0,0,0,0,0,96,208,4,0,8,207,4,0,11,0,0,0,88,207,4,0,8,207,4,0,10,0,0,0,152,207,4,0,16,207,4,0,0,0,0,0,0,208,4,0,8,207,4,0,0,0,0,0,104,208,4,0,16,207,4,0,10,0,0,0,152,207,4,0,8,207,4,0,0,0,0,0,112,208,4,0,8,207,4,0,0,0,0,0,120,208,4,0,8,207,4,0,11,0,0,0,168,207,4,0,8,207,4,0,0,0,0,0,128,208,4,0,16,207,4,0,10,0,0,0,96,207,4,0,8,207,4,0,11,0,0,0,104,207,4,0,16,207,4,0,0,0,0,0,96,208,4,0,8,207,4,0,10,0,0,0,64,208,4,0,8,207,4,0,0,0,0,0,136,208,4,0,8,207,4,0,11,0,0,0,96,207,4,0,144,208,4,0,0,0,0,0,8,207,4,0,16,207,4,0,0,0,0,0,64,208,4,0,8,207,4,0,10,0,0,0,24,208,4,0,8,207,4,0,11,0,0,0,24,208,4,0,8,207,4,0,0,0,0,0,152,208,4,0,8,207,4,0,11,0,0,0,56,207,4,0,8,207,4,0,10,0,0,0,96,208,4,0,16,207,4,0,10,0,0,0,64,208,4,0,16,207,4,0,11,0,0,0,24,208,4,0,16,207,4,0,11,0,0,0,56,207,4,0,8,207,4,0,11,0,0,0,64,208,4,0,8,207,4,0,11,0,0,0,0,208,4,0,8,207,4,0,11,0,0,0,152,207,4,0,16,207,4,0,11,0,0,0,96,207,4,0,8,207,4,0,11,0,0,0,96,208,4,0,16,207,4,0,11,0,0,0,152,207,4,0,16,207,4,0,10,0,0,0,24,208,4,0,16,207,4,0,11,0,0,0,96,208,4,0,16,207,4,0,10,0,0,0,96,208,4,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,116,104,101,32,0,0,0,115,32,0,0,0,0,0,0,32,111,102,32,0,0,0,0,32,97,110,100,32,0,0,0,44,32,0,0,0,0,0,0,32,105,110,32,0,0,0,0,32,116,111,32,0,0,0,0,101,32,0,0,0,0,0,0,34,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,34,62,0,0,0,0,0,0,10,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,32,102,111,114,32,0,0,0,32,97,32,0,0,0,0,0,32,116,104,97,116,32,0,0,46,32,0,0,0,0,0,0,32,119,105,116,104,32,0,0,39,0,0,0,0,0,0,0,32,102,114,111,109,32,0,0,32,98,121,32,0,0,0,0,46,32,84,104,101,32,0,0,32,111,110,32,0,0,0,0,32,97,115,32,0,0,0,0,32,105,115,32,0,0,0,0,105,110,103,32,0,0,0,0,10,9,0,0,0,0,0,0,58,0,0,0,0,0,0,0,101,100,32,0,0,0,0,0,40,0,0,0,0,0,0,0,32,97,116,32,0,0,0,0,108,121,32,0,0,0,0,0,61,34,0,0,0,0,0,0,46,99,111,109,47,0,0,0,32,111,102,32,116,104,101,32,0,0,0,0,0,0,0,0,46,32,84,104,105,115,32,0,44,0,0,0,0,0,0,0,32,110,111,116,32,0,0,0,101,114,32,0,0,0,0,0,97,108,32,0,0,0,0,0,61,39,0,0,0,0,0,0,102,117,108,32,0,0,0,0,105,118,101,32,0,0,0,0,108,101,115,115,32,0,0,0,101,115,116,32,0,0,0,0,105,122,101,32,0,0,0,0,194,160,0,0,0,0,0,0,111,117,115,32,0,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,12,0,0,0,2,0,0,0,10,0,0,0,6,0,0,0,14,0,0,0,1,0,0,0,9,0,0,0,5,0,0,0,13,0,0,0,3,0,0,0,11,0,0,0,7,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,12,16,12,12,20,12,16,24,28,12,12,32,12,36,12,44,44,44,44,44,44,44,44,44,44,32,32,24,40,28,12,12,48,52,52,52,48,52,52,52,48,52,52,52,52,52,48,52,52,52,52,52,48,52,52,52,52,52,24,12,28,12,12,12,56,60,60,60,56,60,60,60,56,60,60,60,60,60,56,60,60,60,60,60,56,60,60,60,60,60,24,12,28,12,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,0,0,0,0,0,0,0,0,0,0,128,63,13,224,202,63,0,0,0,64,120,154,20,64,7,112,37,64,180,171,51,64,0,0,64,64,13,224,74,64,120,154,84,64,84,103,93,64,7,112,101,64,1,212,108,64,180,171,115,64,127,10,122,64,0,0,128,64,127,204,130,64,7,112,133,64,6,239,135,64,60,77,138,64,221,141,140,64,170,179,142,64,5,193,144,64,3,184,146,64,120,154,148,64,1,106,150,64,10,40,152,64,218,213,153,64,149,116,155,64,63,5,157,64,199,136,158,64,0,0,160,64,173,107,161,64,127,204,162,64,22,35,164,64,7,112,165,64,216,179,166,64,6,239,167,64,4,34,169,64,60,77,170,64,17,113,171,64,221,141,172,64,246,163,173,64,170,179,174,64,67,189,175,64,5,193,176,64,49,191,177,64,3,184,178,64,180,171,179,64,120,154,180,64,130,132,181,64,1,106,182,64,32,75,183,64,10,40,184,64,230,0,185,64,218,213,185,64,9,167,186,64,149,116,187,64,157,62,188,64,63,5,189,64,154,200,189,64,199,136,190,64,225,69,191,64,0,0,192,64,61,183,192,64,173,107,193,64,103,29,194,64,127,204,194,64,8,121,195,64,22,35,196,64,186,202,196,64,7,112,197,64,11,19,198,64,216,179,198,64,124,82,199,64,6,239,199,64,132,137,200,64,4,34,201,64,146,184,201,64,60,77,202,64,13,224,202,64,17,113,203,64,83,0,204,64,221,141,204,64,187,25,205,64,246,163,205,64,152,44,206,64,170,179,206,64,53,57,207,64,67,189,207,64,219,63,208,64,5,193,208,64,202,64,209,64,49,191,209,64,66,60,210,64,3,184,210,64,124,50,211,64,180,171,211,64,176,35,212,64,120,154,212,64,18,16,213,64,130,132,213,64,208,247,213,64,1,106,214,64,25,219,214,64,32,75,215,64,25,186,215,64,10,40,216,64,247,148,216,64,230,0,217,64,219,107,217,64,218,213,217,64,232,62,218,64,9,167,218,64,65,14,219,64,149,116,219,64,7,218,219,64,157,62,220,64,89,162,220,64,63,5,221,64,84,103,221,64,154,200,221,64,20,41,222,64,199,136,222,64,180,231,222,64,225,69,223,64,78,163,223,64,0,0,224,64,249,91,224,64,61,183,224,64,205,17,225,64,173,107,225,64,224,196,225,64,103,29,226,64,70,117,226,64,127,204,226,64,20,35,227,64,8,121,227,64,94,206,227,64,22,35,228,64,52,119,228,64,186,202,228,64,170,29,229,64,7,112,229,64,209,193,229,64,11,19,230,64,183,99,230,64,216,179,230,64,110,3,231,64,124,82,231,64,3,161,231,64,6,239,231,64,133,60,232,64,132,137,232,64,3,214,232,64,4,34,233,64,136,109,233,64,146,184,233,64,35,3,234,64,60,77,234,64,223,150,234,64,13,224,234,64,200,40,235,64,17,113,235,64,233,184,235,64,83,0,236,64,78,71,236,64,221,141,236,64,1,212,236,64,187,25,237,64,12,95,237,64,246,163,237,64,121,232,237,64,152,44,238,64,82,112,238,64,170,179,238,64,160,246,238,64,53,57,239,64,107,123,239,64,67,189,239,64,189,254,239,64,219,63,240,64,157,128,240,64,5,193,240,64,20,1,241,64,202,64,241,64,41,128,241,64,49,191,241,64,228,253,241,64,66,60,242,64,76,122,242,64,3,184,242,64,104,245,242,64,124,50,243,64,64,111,243,64,180,171,243,64,217,231,243,64,176,35,244,64,59,95,244,64,120,154,244,64,106,213,244,64,18,16,245,64,111,74,245,64,130,132,245,64,77,190,245,64,208,247,245,64,12,49,246,64,1,106,246,64,176,162,246,64,25,219,246,64,63,19,247,64,32,75,247,64,190,130,247,64,25,186,247,64,50,241,247,64,10,40,248,64,161,94,248,64,247,148,248,64,14,203,248,64,230,0,249,64,127,54,249,64,219,107,249,64,249,160,249,64,218,213,249,64,127,10,250,64,232,62,250,64,22,115,250,64,9,167,250,64,194,218,250,64,65,14,251,64,135,65,251,64,149,116,251,64,106,167,251,64,7,218,251,64,109,12,252,64,157,62,252,64,150,112,252,64,89,162,252,64,231,211,252,64,63,5,253,64,100,54,253,64,84,103,253,64,16,152,253,64,154,200,253,64,240,248,253,64,20,41,254,64,6,89,254,64,199,136,254,64,86,184,254,64,180,231,254,64,227,22,255,64,225,69,255,64,175,116,255,64,78,163,255,64,190,209,255,64,0,0,0,0,40,216,4,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,80,216,4,0,3,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,78,54,98,114,111,116,108,105,49,50,66,114,111,116,108,105,77,101,109,79,117,116,69,0,160,218,4,0,16,216,4,0,96,216,4],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+307248);allocate([78,54,98,114,111,116,108,105,49,49,66,114,111,116,108,105,77,101,109,73,110,69,0,0,160,218,4,0,56,216,4,0,104,216,4,0,0,0,0,0,120,218,4,0,136,216,4,0,120,218,4,0,112,216,4,0,78,54,98,114,111,116,108,105,56,66,114,111,116,108,105,73,110,69,0,0,0,0,0,0,78,54,98,114,111,116,108,105,57,66,114,111,116,108,105,79,117,116,69,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,208,216,4,0,5,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,160,218,4,0,192,216,4,0,248,216,4,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,120,218,4,0,232,216,4,0,0,0,0,0,40,217,4,0,7,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,160,218,4,0,24,217,4,0,248,216,4,0,0,0,0,0,0,0,0,0,104,217,4,0,7,0,0,0,9,0,0,0,2,0,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,160,218,4,0,80,217,4,0,40,217,4,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,120,218,4,0,120,217,4,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,160,218,4,0,144,217,4,0,136,217,4,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,160,218,4,0,200,217,4,0,184,217,4,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,160,218,4,0,40,218,4,0,184,217,4,0,0,0,0,0,160,218,4,0,0,218,4,0,80,218,4,0,0,0,0,0,0,0,0,0,240,217,4,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,232,218,4,0,10,0,0,0,14,0,0,0,12,0,0,0,13,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,160,218,4,0,192,218,4,0,240,217,4,0,0,0,0,0,0,0,0,0,0,0,0,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,0,0,47,104,111,109,101,47,110,102,114,111,105,100,117,114,101,47,112,114,111,106,101,99,116,115,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,47,104,111,109,101,47,110,102,114,111,105,100,117,114,101,47,112,114,111,106,101,99,116,115,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,144,221,4,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+317488);var tempDoublePtr=Runtime.alignMemory(allocate(12,"i8",ALLOC_STATIC),8);assert(tempDoublePtr%8==0);function copyTempFloat(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3]}function copyTempDouble(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3];HEAP8[tempDoublePtr+4]=HEAP8[ptr+4];HEAP8[tempDoublePtr+5]=HEAP8[ptr+5];HEAP8[tempDoublePtr+6]=HEAP8[ptr+6];HEAP8[tempDoublePtr+7]=HEAP8[ptr+7]}function ___assert_fail(condition,filename,line,func){ABORT=true;throw"Assertion failed: "+Pointer_stringify(condition)+", at: "+[filename?Pointer_stringify(filename):"unknown filename",line,func?Pointer_stringify(func):"unknown function"]+" at "+stackTrace()}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0){if(info.destructor){Runtime.dynCall("vi",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm["setTempRet0"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm["setTempRet0"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module["___cxa_is_pointer_type"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module["___cxa_can_catch"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm["setTempRet0"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm["setTempRet0"](throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0};EXCEPTIONS.last=ptr;if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}Module["_memset"]=_memset;var _BDtoILow=true;var _ceilf=Math_ceil;Module["_bitshift64Shl"]=_bitshift64Shl;function _abort(){Module["abort"]()}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};var ___errno_state=0;function ___setErrNo(value){HEAP32[___errno_state>>2]=value;return value}var PATH={splitPath:(function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)}),normalizeArray:(function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up--;up){parts.unshift("..")}}return parts}),normalize:(function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path}),dirname:(function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir}),basename:(function(path){if(path==="/")return"/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)}),extname:(function(path){return PATH.splitPath(path)[3]}),join:(function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))}),join2:(function(l,r){return PATH.normalize(l+"/"+r)}),resolve:(function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter((function(p){return!!p})),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."}),relative:(function(from,to){from=PATH.resolve(from).substr(1);to=PATH.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")})};var TTY={ttys:[],init:(function(){}),shutdown:(function(){}),register:(function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)}),stream_ops:{open:(function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}stream.tty=tty;stream.seekable=false}),close:(function(stream){stream.tty.ops.flush(stream.tty)}),flush:(function(stream){stream.tty.ops.flush(stream.tty)}),read:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}for(var i=0;i<length;i++){try{stream.tty.ops.put_char(stream.tty,buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})},default_tty_ops:{get_char:(function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=new Buffer(BUFSIZE);var bytesRead=0;var fd=process.stdin.fd;var usingDevice=false;try{fd=fs.openSync("/dev/stdin","r");usingDevice=true}catch(e){}bytesRead=fs.readSync(fd,buf,0,BUFSIZE,null);if(usingDevice){fs.closeSync(fd)}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()}),put_char:(function(tty,val){if(val===null||val===10){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}})},default_tty1_ops:{put_char:(function(tty,val){if(val===null||val===10){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}})}};var MEMFS={ops_table:null,mount:(function(mount){return MEMFS.createNode(null,"/",16384|511,0)}),createNode:(function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node}),getFileDataAsRegularArray:(function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents}),getFileDataAsTypedArray:(function(node){if(!node.contents)return new Uint8Array;if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)}),expandFileStorage:(function(node,newCapacity){if(node.contents&&node.contents.subarray&&newCapacity>node.contents.length){node.contents=MEMFS.getFileDataAsRegularArray(node);node.usedBytes=node.contents.length}if(!node.contents||node.contents.subarray){var prevCapacity=node.contents?node.contents.buffer.byteLength:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)|0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return}if(!node.contents&&newCapacity>0)node.contents=[];while(node.contents.length<newCapacity)node.contents.push(0)}),resizeFileStorage:(function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(new ArrayBuffer(newSize));if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize}),node_ops:{getattr:(function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr}),setattr:(function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}}),lookup:(function(parent,name){throw FS.genericErrors[ERRNO_CODES.ENOENT]}),mknod:(function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)}),rename:(function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir}),unlink:(function(parent,name){delete parent.contents[name]}),rmdir:(function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}delete parent.contents[name]}),readdir:(function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries}),symlink:(function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node}),readlink:(function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return node.link})},stream_ops:{read:(function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);assert(size>=0);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size}),write:(function(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=new Uint8Array(buffer.subarray(offset,offset+length));node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position}),allocate:(function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&(contents.buffer===buffer||contents.buffer===buffer.buffer)){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<stream.node.usedBytes){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)}buffer.set(contents,ptr)}return{ptr:ptr,allocated:allocated}}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0})}};var IDBFS={dbs:{},indexedDB:(function(){if(typeof indexedDB!=="undefined")return indexedDB;var ret=null;if(typeof window==="object")ret=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;assert(ret,"IDBFS used, but indexedDB not supported");return ret}),DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:(function(mount){return MEMFS.mount.apply(null,arguments)}),syncfs:(function(mount,populate,callback){IDBFS.getLocalSet(mount,(function(err,local){if(err)return callback(err);IDBFS.getRemoteSet(mount,(function(err,remote){if(err)return callback(err);var src=populate?remote:local;var dst=populate?local:remote;IDBFS.reconcile(src,dst,callback)}))}))}),getDB:(function(name,callback){var db=IDBFS.dbs[name];if(db){return callback(null,db)}var req;try{req=IDBFS.indexedDB().open(name,IDBFS.DB_VERSION)}catch(e){return callback(e)}req.onupgradeneeded=(function(e){var db=e.target.result;var transaction=e.target.transaction;var fileStore;if(db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)){fileStore=transaction.objectStore(IDBFS.DB_STORE_NAME)}else{fileStore=db.createObjectStore(IDBFS.DB_STORE_NAME)}if(!fileStore.indexNames.contains("timestamp")){fileStore.createIndex("timestamp","timestamp",{unique:false})}});req.onsuccess=(function(){db=req.result;IDBFS.dbs[name]=db;callback(null,db)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),getLocalSet:(function(mount,callback){var entries={};function isRealDir(p){return p!=="."&&p!==".."}function toAbsolute(root){return(function(p){return PATH.join2(root,p)})}var check=FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));while(check.length){var path=check.pop();var stat;try{stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){check.push.apply(check,FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))}entries[path]={timestamp:stat.mtime}}return callback(null,{type:"local",entries:entries})}),getRemoteSet:(function(mount,callback){var entries={};IDBFS.getDB(mount.mountpoint,(function(err,db){if(err)return callback(err);var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readonly");transaction.onerror=(function(e){callback(this.error);e.preventDefault()});var store=transaction.objectStore(IDBFS.DB_STORE_NAME);var index=store.index("timestamp");index.openKeyCursor().onsuccess=(function(event){var cursor=event.target.result;if(!cursor){return callback(null,{type:"remote",db:db,entries:entries})}entries[cursor.primaryKey]={timestamp:cursor.key};cursor.continue()})}))}),loadLocalEntry:(function(path,callback){var stat,node;try{var lookup=FS.lookupPath(path);node=lookup.node;stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){return callback(null,{timestamp:stat.mtime,mode:stat.mode})}else if(FS.isFile(stat.mode)){node.contents=MEMFS.getFileDataAsTypedArray(node);return callback(null,{timestamp:stat.mtime,mode:stat.mode,contents:node.contents})}else{return callback(new Error("node type not supported"))}}),storeLocalEntry:(function(path,entry,callback){try{if(FS.isDir(entry.mode)){FS.mkdir(path,entry.mode)}else if(FS.isFile(entry.mode)){FS.writeFile(path,entry.contents,{encoding:"binary",canOwn:true})}else{return callback(new Error("node type not supported"))}FS.chmod(path,entry.mode);FS.utime(path,entry.timestamp,entry.timestamp)}catch(e){return callback(e)}callback(null)}),removeLocalEntry:(function(path,callback){try{var lookup=FS.lookupPath(path);var stat=FS.stat(path);if(FS.isDir(stat.mode)){FS.rmdir(path)}else if(FS.isFile(stat.mode)){FS.unlink(path)}}catch(e){return callback(e)}callback(null)}),loadRemoteEntry:(function(store,path,callback){var req=store.get(path);req.onsuccess=(function(event){callback(null,event.target.result)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),storeRemoteEntry:(function(store,path,entry,callback){var req=store.put(entry,path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),removeRemoteEntry:(function(store,path,callback){var req=store.delete(path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),reconcile:(function(src,dst,callback){var total=0;var create=[];Object.keys(src.entries).forEach((function(key){var e=src.entries[key];var e2=dst.entries[key];if(!e2||e.timestamp>e2.timestamp){create.push(key);total++}}));var remove=[];Object.keys(dst.entries).forEach((function(key){var e=dst.entries[key];var e2=src.entries[key];if(!e2){remove.push(key);total++}}));if(!total){return callback(null)}var errored=false;var completed=0;var db=src.type==="remote"?src.db:dst.db;var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readwrite");var store=transaction.objectStore(IDBFS.DB_STORE_NAME);function done(err){if(err){if(!done.errored){done.errored=true;return callback(err)}return}if(++completed>=total){return callback(null)}}transaction.onerror=(function(e){done(this.error);e.preventDefault()});create.sort().forEach((function(path){if(dst.type==="local"){IDBFS.loadRemoteEntry(store,path,(function(err,entry){if(err)return done(err);IDBFS.storeLocalEntry(path,entry,done)}))}else{IDBFS.loadLocalEntry(path,(function(err,entry){if(err)return done(err);IDBFS.storeRemoteEntry(store,path,entry,done)}))}}));remove.sort().reverse().forEach((function(path){if(dst.type==="local"){IDBFS.removeLocalEntry(path,done)}else{IDBFS.removeRemoteEntry(store,path,done)}}))})};var NODEFS={isWindows:false,staticInit:(function(){NODEFS.isWindows=!!process.platform.match(/^win/)}),mount:(function(mount){assert(ENVIRONMENT_IS_NODE);return NODEFS.createNode(null,"/",NODEFS.getMode(mount.opts.root),0)}),createNode:(function(parent,name,mode,dev){if(!FS.isDir(mode)&&!FS.isFile(mode)&&!FS.isLink(mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=FS.createNode(parent,name,mode);node.node_ops=NODEFS.node_ops;node.stream_ops=NODEFS.stream_ops;return node}),getMode:(function(path){var stat;try{stat=fs.lstatSync(path);if(NODEFS.isWindows){stat.mode=stat.mode|(stat.mode&146)>>1}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return stat.mode}),realPath:(function(node){var parts=[];while(node.parent!==node){parts.push(node.name);node=node.parent}parts.push(node.mount.opts.root);parts.reverse();return PATH.join.apply(null,parts)}),flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:(function(flags){if(flags in NODEFS.flagsToPermissionStringMap){return NODEFS.flagsToPermissionStringMap[flags]}else{return flags}}),node_ops:{getattr:(function(node){var path=NODEFS.realPath(node);var stat;try{stat=fs.lstatSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}if(NODEFS.isWindows&&!stat.blksize){stat.blksize=4096}if(NODEFS.isWindows&&!stat.blocks){stat.blocks=(stat.size+stat.blksize-1)/stat.blksize|0}return{dev:stat.dev,ino:stat.ino,mode:stat.mode,nlink:stat.nlink,uid:stat.uid,gid:stat.gid,rdev:stat.rdev,size:stat.size,atime:stat.atime,mtime:stat.mtime,ctime:stat.ctime,blksize:stat.blksize,blocks:stat.blocks}}),setattr:(function(node,attr){var path=NODEFS.realPath(node);try{if(attr.mode!==undefined){fs.chmodSync(path,attr.mode);node.mode=attr.mode}if(attr.timestamp!==undefined){var date=new Date(attr.timestamp);fs.utimesSync(path,date,date)}if(attr.size!==undefined){fs.truncateSync(path,attr.size)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),lookup:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);var mode=NODEFS.getMode(path);return NODEFS.createNode(parent,name,mode)}),mknod:(function(parent,name,mode,dev){var node=NODEFS.createNode(parent,name,mode,dev);var path=NODEFS.realPath(node);try{if(FS.isDir(node.mode)){fs.mkdirSync(path,node.mode)}else{fs.writeFileSync(path,"",{mode:node.mode})}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return node}),rename:(function(oldNode,newDir,newName){var oldPath=NODEFS.realPath(oldNode);var newPath=PATH.join2(NODEFS.realPath(newDir),newName);try{fs.renameSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),unlink:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.unlinkSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),rmdir:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.rmdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readdir:(function(node){var path=NODEFS.realPath(node);try{return fs.readdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),symlink:(function(parent,newName,oldPath){var newPath=PATH.join2(NODEFS.realPath(parent),newName);try{fs.symlinkSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readlink:(function(node){var path=NODEFS.realPath(node);try{path=fs.readlinkSync(path);path=NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root),path);return path}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}})},stream_ops:{open:(function(stream){var path=NODEFS.realPath(stream.node);try{if(FS.isFile(stream.node.mode)){stream.nfd=fs.openSync(path,NODEFS.flagsToPermissionString(stream.flags))}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),close:(function(stream){try{if(FS.isFile(stream.node.mode)&&stream.nfd){fs.closeSync(stream.nfd)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),read:(function(stream,buffer,offset,length,position){if(length===0)return 0;var nbuffer=new Buffer(length);var res;try{res=fs.readSync(stream.nfd,nbuffer,0,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}if(res>0){for(var i=0;i<res;i++){buffer[offset+i]=nbuffer[i]}}return res}),write:(function(stream,buffer,offset,length,position){var nbuffer=new Buffer(buffer.subarray(offset,offset+length));var res;try{res=fs.writeSync(stream.nfd,nbuffer,0,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}return res}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){try{var stat=fs.fstatSync(stream.nfd);position+=stat.size}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position})}};var _stdin=allocate(1,"i32*",ALLOC_STATIC);var _stdout=allocate(1,"i32*",ALLOC_STATIC);var _stderr=allocate(1,"i32*",ALLOC_STATIC);function _fflush(stream){}var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:(function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return ___setErrNo(e.errno)}),lookupPath:(function(path,opts){path=PATH.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}var parts=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}}}}return{path:current_path,node:current}}),getPath:(function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}}),hashName:(function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length}),hashAddNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node}),hashRemoveNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}}),lookupNode:(function(parent,name){var err=FS.mayLookup(parent);if(err){throw new FS.ErrnoError(err,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)}),createNode:(function(parent,name,mode,rdev){if(!FS.FSNode){FS.FSNode=(function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev});FS.FSNode.prototype={};var readMode=292|73;var writeMode=146;Object.defineProperties(FS.FSNode.prototype,{read:{get:(function(){return(this.mode&readMode)===readMode}),set:(function(val){val?this.mode|=readMode:this.mode&=~readMode})},write:{get:(function(){return(this.mode&writeMode)===writeMode}),set:(function(val){val?this.mode|=writeMode:this.mode&=~writeMode})},isFolder:{get:(function(){return FS.isDir(this.mode)})},isDevice:{get:(function(){return FS.isChrdev(this.mode)})}})}var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node}),destroyNode:(function(node){FS.hashRemoveNode(node)}),isRoot:(function(node){return node===node.parent}),isMountpoint:(function(node){return!!node.mounted}),isFile:(function(mode){return(mode&61440)===32768}),isDir:(function(mode){return(mode&61440)===16384}),isLink:(function(mode){return(mode&61440)===40960}),isChrdev:(function(mode){return(mode&61440)===8192}),isBlkdev:(function(mode){return(mode&61440)===24576}),isFIFO:(function(mode){return(mode&61440)===4096}),isSocket:(function(mode){return(mode&49152)===49152}),flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:(function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags}),flagsToPermissionString:(function(flag){var accmode=flag&2097155;var perms=["r","w","rw"][accmode];if(flag&512){perms+="w"}return perms}),nodePermissions:(function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return ERRNO_CODES.EACCES}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return ERRNO_CODES.EACCES}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return ERRNO_CODES.EACCES}return 0}),mayLookup:(function(dir){var err=FS.nodePermissions(dir,"x");if(err)return err;if(!dir.node_ops.lookup)return ERRNO_CODES.EACCES;return 0}),mayCreate:(function(dir,name){try{var node=FS.lookupNode(dir,name);return ERRNO_CODES.EEXIST}catch(e){}return FS.nodePermissions(dir,"wx")}),mayDelete:(function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var err=FS.nodePermissions(dir,"wx");if(err){return err}if(isdir){if(!FS.isDir(node.mode)){return ERRNO_CODES.ENOTDIR}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return ERRNO_CODES.EBUSY}}else{if(FS.isDir(node.mode)){return ERRNO_CODES.EISDIR}}return 0}),mayOpen:(function(node,flags){if(!node){return ERRNO_CODES.ENOENT}if(FS.isLink(node.mode)){return ERRNO_CODES.ELOOP}else if(FS.isDir(node.mode)){if((flags&2097155)!==0||flags&512){return ERRNO_CODES.EISDIR}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))}),MAX_OPEN_FDS:4096,nextfd:(function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(ERRNO_CODES.EMFILE)}),getStream:(function(fd){return FS.streams[fd]}),createStream:(function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=(function(){});FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:(function(){return this.node}),set:(function(val){this.node=val})},isRead:{get:(function(){return(this.flags&2097155)!==1})},isWrite:{get:(function(){return(this.flags&2097155)!==0})},isAppend:{get:(function(){return this.flags&1024})}})}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream}),closeStream:(function(fd){FS.streams[fd]=null}),getStreamFromPtr:(function(ptr){return FS.streams[ptr-1]}),getPtrForStream:(function(stream){return stream?stream.fd+1:0}),chrdev_stream_ops:{open:(function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}}),llseek:(function(){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)})},major:(function(dev){return dev>>8}),minor:(function(dev){return dev&255}),makedev:(function(ma,mi){return ma<<8|mi}),registerDevice:(function(dev,ops){FS.devices[dev]={stream_ops:ops}}),getDevice:(function(dev){return FS.devices[dev]}),getMounts:(function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts}),syncfs:(function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}var mounts=FS.getMounts(FS.root.mount);var completed=0;function done(err){if(err){if(!done.errored){done.errored=true;return callback(err)}return}if(++completed>=mounts.length){callback(null)}}mounts.forEach((function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)}))}),mount:(function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot}),unmount:(function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach((function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}}));node.mounted=null;var idx=node.mount.mounts.indexOf(mount);assert(idx!==-1);node.mount.mounts.splice(idx,1)}),lookup:(function(parent,name){return parent.node_ops.lookup(parent,name)}),mknod:(function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.mayCreate(parent,name);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.mknod(parent,name,mode,dev)}),create:(function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)}),mkdir:(function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)}),mkdev:(function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)}),symlink:(function(oldpath,newpath){if(!PATH.resolve(oldpath)){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var newname=PATH.basename(newpath);var err=FS.mayCreate(parent,newname);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.symlink(parent,newname,oldpath)}),rename:(function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!old_dir||!new_dir)throw new FS.ErrnoError(ERRNO_CODES.ENOENT);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(ERRNO_CODES.EXDEV)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}relative=PATH.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var err=FS.mayDelete(old_dir,old_name,isdir);if(err){throw new FS.ErrnoError(err)}err=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(err){throw new FS.ErrnoError(err)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(new_dir!==old_dir){err=FS.nodePermissions(old_dir,"w");if(err){throw new FS.ErrnoError(err)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}}),rmdir:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,true);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}return node.node_ops.readdir(node)}),unlink:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,false);if(err){if(err===ERRNO_CODES.EISDIR)err=ERRNO_CODES.EPERM;throw new FS.ErrnoError(err)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readlink:(function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!link.node_ops.readlink){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return PATH.resolve(FS.getPath(lookup.node.parent),link.node_ops.readlink(link))}),stat:(function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!node.node_ops.getattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return node.node_ops.getattr(node)}),lstat:(function(path){return FS.stat(path,true)}),chmod:(function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})}),lchmod:(function(path,mode){FS.chmod(path,mode,true)}),fchmod:(function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chmod(stream.node,mode)}),chown:(function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{timestamp:Date.now()})}),lchown:(function(path,uid,gid){FS.chown(path,uid,gid,true)}),fchown:(function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chown(stream.node,uid,gid)}),truncate:(function(path,len){if(len<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.nodePermissions(node,"w");if(err){throw new FS.ErrnoError(err)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})}),ftruncate:(function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}FS.truncate(stream.node,len)}),utime:(function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})}),open:(function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(ERRNO_CODES.EEXIST)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(FS.isChrdev(node.mode)){flags&=~512}if(!created){var err=FS.mayOpen(node,flags);if(err){throw new FS.ErrnoError(err)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;Module["printErr"]("read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream}),close:(function(stream){try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}}),llseek:(function(stream,offset,whence){if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position}),read:(function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.read){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var seeking=true;if(typeof position==="undefined"){position=stream.position;seeking=false}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead}),write:(function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.write){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if(stream.flags&1024){FS.llseek(stream,0,2)}var seeking=true;if(typeof position==="undefined"){position=stream.position;seeking=false}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: "+e.message)}return bytesWritten}),allocate:(function(stream,offset,length){if(offset<0||length<=0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}stream.stream_ops.allocate(stream,offset,length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EACCES)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)}),munmap:(function(stream){return 0}),ioctl:(function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)}return stream.stream_ops.ioctl(stream,cmd,arg)}),readFile:(function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret}),writeFile:(function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";opts.encoding=opts.encoding||"utf8";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var stream=FS.open(path,opts.flags,opts.mode);if(opts.encoding==="utf8"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,0,opts.canOwn)}else if(opts.encoding==="binary"){FS.write(stream,data,0,data.length,0,opts.canOwn)}FS.close(stream)}),cwd:(function(){return FS.currentPath}),chdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}var err=FS.nodePermissions(lookup.node,"x");if(err){throw new FS.ErrnoError(err)}FS.currentPath=lookup.path}),createDefaultDirectories:(function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")}),createDefaultDevices:(function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:(function(){return 0}),write:(function(stream,buffer,offset,length,pos){return length})});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto!=="undefined"){var randomBuffer=new Uint8Array(1);random_device=(function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]})}else if(ENVIRONMENT_IS_NODE){random_device=(function(){return require("crypto").randomBytes(1)[0]})}else{random_device=(function(){return Math.random()*256|0})}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")}),createStandardStreams:(function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");HEAP32[_stdin>>2]=FS.getPtrForStream(stdin);assert(stdin.fd===0,"invalid handle for stdin ("+stdin.fd+")");var stdout=FS.open("/dev/stdout","w");HEAP32[_stdout>>2]=FS.getPtrForStream(stdout);assert(stdout.fd===1,"invalid handle for stdout ("+stdout.fd+")");var stderr=FS.open("/dev/stderr","w");HEAP32[_stderr>>2]=FS.getPtrForStream(stderr);assert(stderr.fd===2,"invalid handle for stderr ("+stderr.fd+")")}),ensureErrnoError:(function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=(function(errno){this.errno=errno;for(var key in ERRNO_CODES){if(ERRNO_CODES[key]===errno){this.code=key;break}}});this.setErrno(errno);this.message=ERRNO_MESSAGES[errno]};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[ERRNO_CODES.ENOENT].forEach((function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"}))}),staticInit:(function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices()}),init:(function(input,output,error){assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()}),quit:(function(){FS.init.initialized=false;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}}),getMode:(function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode}),joinPath:(function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path}),absolutePath:(function(relative,base){return PATH.resolve(base,relative)}),standardizePath:(function(path){return PATH.normalize(path)}),findObject:(function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{___setErrNo(ret.error);return null}}),analyzePath:(function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret}),createFolder:(function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)}),createPath:(function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current}),createFile:(function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)}),createDataFile:(function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node}),createDevice:(function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:(function(stream){stream.seekable=false}),close:(function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}}),read:(function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})});return FS.mkdev(path,mode,dev)}),createLink:(function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)}),forceLoadFile:(function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(Module["read"]){try{obj.contents=intArrayFromString(Module["read"](obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)___setErrNo(ERRNO_CODES.EIO);return success}),createLazyFile:(function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}});var lazyArray=this;lazyArray.setDataGetter((function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]}));this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperty(lazyArray,"length",{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._length})});Object.defineProperty(lazyArray,"chunkSize",{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize})});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperty(node,"usedBytes",{get:(function(){return this.contents.length})});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach((function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}return fn.apply(null,arguments)}}));stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);assert(size>=0);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node}),createPreloadedFile:(function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach((function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,(function(){if(onerror)onerror();removeRunDependency(dep)}));handled=true}}));if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,(function(byteArray){processData(byteArray)}),onerror)}else{processData(url)}}),indexedDB:(function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB}),DB_NAME:(function(){return"EM_FS_"+window.location.pathname}),DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){console.log("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror}),loadFilesFromDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror})};function _mkport(){throw"TODO"}var SOCKFS={mount:(function(mount){Module["websocket"]=Module["websocket"]&&"object"===typeof Module["websocket"]?Module["websocket"]:{};Module["websocket"]._callbacks={};Module["websocket"]["on"]=(function(event,callback){if("function"===typeof callback){this._callbacks[event]=callback}return this});Module["websocket"].emit=(function(event,param){if("function"===typeof this._callbacks[event]){this._callbacks[event].call(this,param)}});return FS.createNode(null,"/",16384|511,0)}),createSocket:(function(family,type,protocol){var streaming=type==1;if(protocol){assert(streaming==(protocol==6))}var sock={family:family,type:type,protocol:protocol,server:null,error:null,peers:{},pending:[],recv_queue:[],sock_ops:SOCKFS.websocket_sock_ops};var name=SOCKFS.nextname();var node=FS.createNode(SOCKFS.root,name,49152,0);node.sock=sock;var stream=FS.createStream({path:name,node:node,flags:FS.modeStringToFlags("r+"),seekable:false,stream_ops:SOCKFS.stream_ops});sock.stream=stream;return sock}),getSocket:(function(fd){var stream=FS.getStream(fd);if(!stream||!FS.isSocket(stream.node.mode)){return null}return stream.node.sock}),stream_ops:{poll:(function(stream){var sock=stream.node.sock;return sock.sock_ops.poll(sock)}),ioctl:(function(stream,request,varargs){var sock=stream.node.sock;return sock.sock_ops.ioctl(sock,request,varargs)}),read:(function(stream,buffer,offset,length,position){var sock=stream.node.sock;var msg=sock.sock_ops.recvmsg(sock,length);if(!msg){return 0}buffer.set(msg.buffer,offset);return msg.buffer.length}),write:(function(stream,buffer,offset,length,position){var sock=stream.node.sock;return sock.sock_ops.sendmsg(sock,buffer,offset,length)}),close:(function(stream){var sock=stream.node.sock;sock.sock_ops.close(sock)})},nextname:(function(){if(!SOCKFS.nextname.current){SOCKFS.nextname.current=0}return"socket["+SOCKFS.nextname.current++ +"]"}),websocket_sock_ops:{createPeer:(function(sock,addr,port){var ws;if(typeof addr==="object"){ws=addr;addr=null;port=null}if(ws){if(ws._socket){addr=ws._socket.remoteAddress;port=ws._socket.remotePort}else{var result=/ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);if(!result){throw new Error("WebSocket URL must be in the format ws(s)://address:port")}addr=result[1];port=parseInt(result[2],10)}}else{try{var runtimeConfig=Module["websocket"]&&"object"===typeof Module["websocket"];var url="ws:#".replace("#","//");if(runtimeConfig){if("string"===typeof Module["websocket"]["url"]){url=Module["websocket"]["url"]}}if(url==="ws://"||url==="wss://"){var parts=addr.split("/");url=url+parts[0]+":"+port+"/"+parts.slice(1).join("/")}var subProtocols="binary";if(runtimeConfig){if("string"===typeof Module["websocket"]["subprotocol"]){subProtocols=Module["websocket"]["subprotocol"]}}subProtocols=subProtocols.replace(/^ +| +$/g,"").split(/ *, */);var opts=ENVIRONMENT_IS_NODE?{"protocol":subProtocols.toString()}:subProtocols;var WebSocket=ENVIRONMENT_IS_NODE?require("ws"):window["WebSocket"];ws=new WebSocket(url,opts);ws.binaryType="arraybuffer"}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH)}}var peer={addr:addr,port:port,socket:ws,dgram_send_queue:[]};SOCKFS.websocket_sock_ops.addPeer(sock,peer);SOCKFS.websocket_sock_ops.handlePeerEvents(sock,peer);if(sock.type===2&&typeof sock.sport!=="undefined"){peer.dgram_send_queue.push(new Uint8Array([255,255,255,255,"p".charCodeAt(0),"o".charCodeAt(0),"r".charCodeAt(0),"t".charCodeAt(0),(sock.sport&65280)>>8,sock.sport&255]))}return peer}),getPeer:(function(sock,addr,port){return sock.peers[addr+":"+port]}),addPeer:(function(sock,peer){sock.peers[peer.addr+":"+peer.port]=peer}),removePeer:(function(sock,peer){delete sock.peers[peer.addr+":"+peer.port]}),handlePeerEvents:(function(sock,peer){var first=true;var handleOpen=(function(){Module["websocket"].emit("open",sock.stream.fd);try{var queued=peer.dgram_send_queue.shift();while(queued){peer.socket.send(queued);queued=peer.dgram_send_queue.shift()}}catch(e){peer.socket.close()}});function handleMessage(data){assert(typeof data!=="string"&&data.byteLength!==undefined);data=new Uint8Array(data);var wasfirst=first;first=false;if(wasfirst&&data.length===10&&data[0]===255&&data[1]===255&&data[2]===255&&data[3]===255&&data[4]==="p".charCodeAt(0)&&data[5]==="o".charCodeAt(0)&&data[6]==="r".charCodeAt(0)&&data[7]==="t".charCodeAt(0)){var newport=data[8]<<8|data[9];SOCKFS.websocket_sock_ops.removePeer(sock,peer);peer.port=newport;SOCKFS.websocket_sock_ops.addPeer(sock,peer);return}sock.recv_queue.push({addr:peer.addr,port:peer.port,data:data});Module["websocket"].emit("message",sock.stream.fd)}if(ENVIRONMENT_IS_NODE){peer.socket.on("open",handleOpen);peer.socket.on("message",(function(data,flags){if(!flags.binary){return}handleMessage((new Uint8Array(data)).buffer)}));peer.socket.on("close",(function(){Module["websocket"].emit("close",sock.stream.fd)}));peer.socket.on("error",(function(error){sock.error=ERRNO_CODES.ECONNREFUSED;Module["websocket"].emit("error",[sock.stream.fd,sock.error,"ECONNREFUSED: Connection refused"])}))}else{peer.socket.onopen=handleOpen;peer.socket.onclose=(function(){Module["websocket"].emit("close",sock.stream.fd)});peer.socket.onmessage=function peer_socket_onmessage(event){handleMessage(event.data)};peer.socket.onerror=(function(error){sock.error=ERRNO_CODES.ECONNREFUSED;Module["websocket"].emit("error",[sock.stream.fd,sock.error,"ECONNREFUSED: Connection refused"])})}}),poll:(function(sock){if(sock.type===1&&sock.server){return sock.pending.length?64|1:0}var mask=0;var dest=sock.type===1?SOCKFS.websocket_sock_ops.getPeer(sock,sock.daddr,sock.dport):null;if(sock.recv_queue.length||!dest||dest&&dest.socket.readyState===dest.socket.CLOSING||dest&&dest.socket.readyState===dest.socket.CLOSED){mask|=64|1}if(!dest||dest&&dest.socket.readyState===dest.socket.OPEN){mask|=4}if(dest&&dest.socket.readyState===dest.socket.CLOSING||dest&&dest.socket.readyState===dest.socket.CLOSED){mask|=16}return mask}),ioctl:(function(sock,request,arg){switch(request){case 21531:var bytes=0;if(sock.recv_queue.length){bytes=sock.recv_queue[0].data.length}HEAP32[arg>>2]=bytes;return 0;default:return ERRNO_CODES.EINVAL}}),close:(function(sock){if(sock.server){try{sock.server.close()}catch(e){}sock.server=null}var peers=Object.keys(sock.peers);for(var i=0;i<peers.length;i++){var peer=sock.peers[peers[i]];try{peer.socket.close()}catch(e){}SOCKFS.websocket_sock_ops.removePeer(sock,peer)}return 0}),bind:(function(sock,addr,port){if(typeof sock.saddr!=="undefined"||typeof sock.sport!=="undefined"){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}sock.saddr=addr;sock.sport=port||_mkport();if(sock.type===2){if(sock.server){sock.server.close();sock.server=null}try{sock.sock_ops.listen(sock,0)}catch(e){if(!(e instanceof FS.ErrnoError))throw e;if(e.errno!==ERRNO_CODES.EOPNOTSUPP)throw e}}}),connect:(function(sock,addr,port){if(sock.server){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}if(typeof sock.daddr!=="undefined"&&typeof sock.dport!=="undefined"){var dest=SOCKFS.websocket_sock_ops.getPeer(sock,sock.daddr,sock.dport);if(dest){if(dest.socket.readyState===dest.socket.CONNECTING){throw new FS.ErrnoError(ERRNO_CODES.EALREADY)}else{throw new FS.ErrnoError(ERRNO_CODES.EISCONN)}}}var peer=SOCKFS.websocket_sock_ops.createPeer(sock,addr,port);sock.daddr=peer.addr;sock.dport=peer.port;throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS)}),listen:(function(sock,backlog){if(!ENVIRONMENT_IS_NODE){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}if(sock.server){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var WebSocketServer=require("ws").Server;var host=sock.saddr;sock.server=new WebSocketServer({host:host,port:sock.sport});Module["websocket"].emit("listen",sock.stream.fd);sock.server.on("connection",(function(ws){if(sock.type===1){var newsock=SOCKFS.createSocket(sock.family,sock.type,sock.protocol);var peer=SOCKFS.websocket_sock_ops.createPeer(newsock,ws);newsock.daddr=peer.addr;newsock.dport=peer.port;sock.pending.push(newsock);Module["websocket"].emit("connection",newsock.stream.fd)}else{SOCKFS.websocket_sock_ops.createPeer(sock,ws);Module["websocket"].emit("connection",sock.stream.fd)}}));sock.server.on("closed",(function(){Module["websocket"].emit("close",sock.stream.fd);sock.server=null}));sock.server.on("error",(function(error){sock.error=ERRNO_CODES.EHOSTUNREACH;Module["websocket"].emit("error",[sock.stream.fd,sock.error,"EHOSTUNREACH: Host is unreachable"])}))}),accept:(function(listensock){if(!listensock.server){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var newsock=listensock.pending.shift();newsock.stream.flags=listensock.stream.flags;return newsock}),getname:(function(sock,peer){var addr,port;if(peer){if(sock.daddr===undefined||sock.dport===undefined){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}addr=sock.daddr;port=sock.dport}else{addr=sock.saddr||0;port=sock.sport||0}return{addr:addr,port:port}}),sendmsg:(function(sock,buffer,offset,length,addr,port){if(sock.type===2){if(addr===undefined||port===undefined){addr=sock.daddr;port=sock.dport}if(addr===undefined||port===undefined){throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ)}}else{addr=sock.daddr;port=sock.dport}var dest=SOCKFS.websocket_sock_ops.getPeer(sock,addr,port);if(sock.type===1){if(!dest||dest.socket.readyState===dest.socket.CLOSING||dest.socket.readyState===dest.socket.CLOSED){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}else if(dest.socket.readyState===dest.socket.CONNECTING){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}}var data;if(buffer instanceof Array||buffer instanceof ArrayBuffer){data=buffer.slice(offset,offset+length)}else{data=buffer.buffer.slice(buffer.byteOffset+offset,buffer.byteOffset+offset+length)}if(sock.type===2){if(!dest||dest.socket.readyState!==dest.socket.OPEN){if(!dest||dest.socket.readyState===dest.socket.CLOSING||dest.socket.readyState===dest.socket.CLOSED){dest=SOCKFS.websocket_sock_ops.createPeer(sock,addr,port)}dest.dgram_send_queue.push(data);return length}}try{dest.socket.send(data);return length}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}}),recvmsg:(function(sock,length){if(sock.type===1&&sock.server){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}var queued=sock.recv_queue.shift();if(!queued){if(sock.type===1){var dest=SOCKFS.websocket_sock_ops.getPeer(sock,sock.daddr,sock.dport);if(!dest){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}else if(dest.socket.readyState===dest.socket.CLOSING||dest.socket.readyState===dest.socket.CLOSED){return null}else{throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}}else{throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}}var queuedLength=queued.data.byteLength||queued.data.length;var queuedOffset=queued.data.byteOffset||0;var queuedBuffer=queued.data.buffer||queued.data;var bytesRead=Math.min(length,queuedLength);var res={buffer:new Uint8Array(queuedBuffer,queuedOffset,bytesRead),addr:queued.addr,port:queued.port};if(sock.type===1&&bytesRead<queuedLength){var bytesRemaining=queuedLength-bytesRead;queued.data=new Uint8Array(queuedBuffer,queuedOffset+bytesRead,bytesRemaining);sock.recv_queue.unshift(queued)}return res})}};function _send(fd,buf,len,flags){var sock=SOCKFS.getSocket(fd);if(!sock){___setErrNo(ERRNO_CODES.EBADF);return-1}return _write(fd,buf,len)}function _pwrite(fildes,buf,nbyte,offset){var stream=FS.getStream(fildes);if(!stream){___setErrNo(ERRNO_CODES.EBADF);return-1}try{var slab=HEAP8;return FS.write(stream,slab,buf,nbyte,offset)}catch(e){FS.handleFSError(e);return-1}}function _write(fildes,buf,nbyte){var stream=FS.getStream(fildes);if(!stream){___setErrNo(ERRNO_CODES.EBADF);return-1}try{var slab=HEAP8;return FS.write(stream,slab,buf,nbyte)}catch(e){FS.handleFSError(e);return-1}}function _fileno(stream){stream=FS.getStreamFromPtr(stream);if(!stream)return-1;return stream.fd}function _fwrite(ptr,size,nitems,stream){var bytesToWrite=nitems*size;if(bytesToWrite==0)return 0;var fd=_fileno(stream);var bytesWritten=_write(fd,ptr,bytesToWrite);if(bytesWritten==-1){var streamObj=FS.getStreamFromPtr(stream);if(streamObj)streamObj.error=true;return 0}else{return bytesWritten/size|0}}Module["_strlen"]=_strlen;function __reallyNegative(x){return x<0||x===0&&1/x===-Infinity}function __formatString(format,varargs){assert((varargs&3)===0);var textIndex=format;var argIndex=0;function getNextArg(type){var ret;argIndex=Runtime.prepVararg(argIndex,type);if(type==="double"){ret=(HEAP32[tempDoublePtr>>2]=HEAP32[varargs+argIndex>>2],HEAP32[tempDoublePtr+4>>2]=HEAP32[varargs+(argIndex+4)>>2],+HEAPF64[tempDoublePtr>>3]);argIndex+=8}else if(type=="i64"){ret=[HEAP32[varargs+argIndex>>2],HEAP32[varargs+(argIndex+4)>>2]];argIndex+=8}else{assert((argIndex&3)===0);type="i32";ret=HEAP32[varargs+argIndex>>2];argIndex+=4}return ret}var ret=[];var curr,next,currArg;while(1){var startTextIndex=textIndex;curr=HEAP8[textIndex>>0];if(curr===0)break;next=HEAP8[textIndex+1>>0];if(curr==37){var flagAlwaysSigned=false;var flagLeftAlign=false;var flagAlternative=false;var flagZeroPad=false;var flagPadSign=false;flagsLoop:while(1){switch(next){case 43:flagAlwaysSigned=true;break;case 45:flagLeftAlign=true;break;case 35:flagAlternative=true;break;case 48:if(flagZeroPad){break flagsLoop}else{flagZeroPad=true;break};case 32:flagPadSign=true;break;default:break flagsLoop}textIndex++;next=HEAP8[textIndex+1>>0]}var width=0;if(next==42){width=getNextArg("i32");textIndex++;next=HEAP8[textIndex+1>>0]}else{while(next>=48&&next<=57){width=width*10+(next-48);textIndex++;next=HEAP8[textIndex+1>>0]}}var precisionSet=false,precision=-1;if(next==46){precision=0;precisionSet=true;textIndex++;next=HEAP8[textIndex+1>>0];if(next==42){precision=getNextArg("i32");textIndex++}else{while(1){var precisionChr=HEAP8[textIndex+1>>0];if(precisionChr<48||precisionChr>57)break;precision=precision*10+(precisionChr-48);textIndex++}}next=HEAP8[textIndex+1>>0]}if(precision<0){precision=6;precisionSet=false}var argSize;switch(String.fromCharCode(next)){case"h":var nextNext=HEAP8[textIndex+2>>0];if(nextNext==104){textIndex++;argSize=1}else{argSize=2}break;case"l":var nextNext=HEAP8[textIndex+2>>0];if(nextNext==108){textIndex++;argSize=8}else{argSize=4}break;case"L":case"q":case"j":argSize=8;break;case"z":case"t":case"I":argSize=4;break;default:argSize=null}if(argSize)textIndex++;next=HEAP8[textIndex+1>>0];switch(String.fromCharCode(next)){case"d":case"i":case"u":case"o":case"x":case"X":case"p":{var signed=next==100||next==105;argSize=argSize||4;var currArg=getNextArg("i"+argSize*8);var origArg=currArg;var argText;if(argSize==8){currArg=Runtime.makeBigInt(currArg[0],currArg[1],next==117)}if(argSize<=4){var limit=Math.pow(256,argSize)-1;currArg=(signed?reSign:unSign)(currArg&limit,argSize*8)}var currAbsArg=Math.abs(currArg);var prefix="";if(next==100||next==105){if(argSize==8&&i64Math)argText=i64Math.stringify(origArg[0],origArg[1],null);else argText=reSign(currArg,8*argSize,1).toString(10)}else if(next==117){if(argSize==8&&i64Math)argText=i64Math.stringify(origArg[0],origArg[1],true);else argText=unSign(currArg,8*argSize,1).toString(10);currArg=Math.abs(currArg)}else if(next==111){argText=(flagAlternative?"0":"")+currAbsArg.toString(8)}else if(next==120||next==88){prefix=flagAlternative&&currArg!=0?"0x":"";if(argSize==8&&i64Math){if(origArg[1]){argText=(origArg[1]>>>0).toString(16);var lower=(origArg[0]>>>0).toString(16);while(lower.length<8)lower="0"+lower;argText+=lower}else{argText=(origArg[0]>>>0).toString(16)}}else if(currArg<0){currArg=-currArg;argText=(currAbsArg-1).toString(16);var buffer=[];for(var i=0;i<argText.length;i++){buffer.push((15-parseInt(argText[i],16)).toString(16))}argText=buffer.join("");while(argText.length<argSize*2)argText="f"+argText}else{argText=currAbsArg.toString(16)}if(next==88){prefix=prefix.toUpperCase();argText=argText.toUpperCase()}}else if(next==112){if(currAbsArg===0){argText="(nil)"}else{prefix="0x";argText=currAbsArg.toString(16)}}if(precisionSet){while(argText.length<precision){argText="0"+argText}}if(currArg>=0){if(flagAlwaysSigned){prefix="+"+prefix}else if(flagPadSign){prefix=" "+prefix}}if(argText.charAt(0)=="-"){prefix="-"+prefix;argText=argText.substr(1)}while(prefix.length+argText.length<width){if(flagLeftAlign){argText+=" "}else{if(flagZeroPad){argText="0"+argText}else{prefix=" "+prefix}}}argText=prefix+argText;argText.split("").forEach((function(chr){ret.push(chr.charCodeAt(0))}));break};case"f":case"F":case"e":case"E":case"g":case"G":{var currArg=getNextArg("double");var argText;if(isNaN(currArg)){argText="nan";flagZeroPad=false}else if(!isFinite(currArg)){argText=(currArg<0?"-":"")+"inf";flagZeroPad=false}else{var isGeneral=false;var effectivePrecision=Math.min(precision,20);if(next==103||next==71){isGeneral=true;precision=precision||1;var exponent=parseInt(currArg.toExponential(effectivePrecision).split("e")[1],10);if(precision>exponent&&exponent>=-4){next=(next==103?"f":"F").charCodeAt(0);precision-=exponent+1}else{next=(next==103?"e":"E").charCodeAt(0);precision--}effectivePrecision=Math.min(precision,20)}if(next==101||next==69){argText=currArg.toExponential(effectivePrecision);if(/[eE][-+]\d$/.test(argText)){argText=argText.slice(0,-1)+"0"+argText.slice(-1)}}else if(next==102||next==70){argText=currArg.toFixed(effectivePrecision);if(currArg===0&&__reallyNegative(currArg)){argText="-"+argText}}var parts=argText.split("e");if(isGeneral&&!flagAlternative){while(parts[0].length>1&&parts[0].indexOf(".")!=-1&&(parts[0].slice(-1)=="0"||parts[0].slice(-1)==".")){parts[0]=parts[0].slice(0,-1)}}else{if(flagAlternative&&argText.indexOf(".")==-1)parts[0]+=".";while(precision>effectivePrecision++)parts[0]+="0"}argText=parts[0]+(parts.length>1?"e"+parts[1]:"");if(next==69)argText=argText.toUpperCase();if(currArg>=0){if(flagAlwaysSigned){argText="+"+argText}else if(flagPadSign){argText=" "+argText}}}while(argText.length<width){if(flagLeftAlign){argText+=" "}else{if(flagZeroPad&&(argText[0]=="-"||argText[0]=="+")){argText=argText[0]+"0"+argText.slice(1)}else{argText=(flagZeroPad?"0":" ")+argText}}}if(next<97)argText=argText.toUpperCase();argText.split("").forEach((function(chr){ret.push(chr.charCodeAt(0))}));break};case"s":{var arg=getNextArg("i8*");var argLength=arg?_strlen(arg):"(null)".length;if(precisionSet)argLength=Math.min(argLength,precision);if(!flagLeftAlign){while(argLength<width--){ret.push(32)}}if(arg){for(var i=0;i<argLength;i++){ret.push(HEAPU8[arg++>>0])}}else{ret=ret.concat(intArrayFromString("(null)".substr(0,argLength),true))}if(flagLeftAlign){while(argLength<width--){ret.push(32)}}break};case"c":{if(flagLeftAlign)ret.push(getNextArg("i8"));while(--width>0){ret.push(32)}if(!flagLeftAlign)ret.push(getNextArg("i8"));break};case"n":{var ptr=getNextArg("i32*");HEAP32[ptr>>2]=ret.length;break};case"%":{ret.push(curr);break};default:{for(var i=startTextIndex;i<textIndex+2;i++){ret.push(HEAP8[i>>0])}}}textIndex+=2}else{ret.push(curr);textIndex+=1}}return ret}function _fprintf(stream,format,varargs){var result=__formatString(format,varargs);var stack=Runtime.stackSave();var ret=_fwrite(allocate(result,"i8",ALLOC_STACK),1,result.length,stream);Runtime.stackRestore(stack);return ret}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Runtime.dynCall("v",func);_pthread_once.seen[ptr]=1}function _fputc(c,stream){var chr=unSign(c&255);HEAP8[_fputc.ret>>0]=chr;var fd=_fileno(stream);var ret=_write(fd,_fputc.ret,1);if(ret==-1){var streamObj=FS.getStreamFromPtr(stream);if(streamObj)streamObj.error=true;return-1}else{return chr}}var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:return totalMemory/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}function _htonl(value){return((value&255)<<24)+((value&65280)<<8)+((value&16711680)>>>8)+((value&4278190080)>>>24)}function _ntohl(){return _htonl.apply(null,arguments)}function _htons(value){return((value&255)<<8)+((value&65280)>>8)}function _ntohs(){return _htons.apply(null,arguments)}function _emscripten_set_main_loop_timing(mode,value){Browser.mainLoop.timingMode=mode;Browser.mainLoop.timingValue=value;if(!Browser.mainLoop.func){return 1}if(mode==0){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler(){setTimeout(Browser.mainLoop.runner,value)};Browser.mainLoop.method="timeout"}else if(mode==1){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler(){Browser.requestAnimationFrame(Browser.mainLoop.runner)};Browser.mainLoop.method="rAF"}return 0}function _emscripten_set_main_loop(func,fps,simulateInfiniteLoop,arg,noSetTiming){Module["noExitRuntime"]=true;assert(!Browser.mainLoop.func,"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");Browser.mainLoop.func=func;Browser.mainLoop.arg=arg;var thisMainLoopId=Browser.mainLoop.currentlyRunningMainloop;Browser.mainLoop.runner=function Browser_mainLoop_runner(){if(ABORT)return;if(Browser.mainLoop.queue.length>0){var start=Date.now();var blocker=Browser.mainLoop.queue.shift();blocker.func(blocker.arg);if(Browser.mainLoop.remainingBlockers){var remaining=Browser.mainLoop.remainingBlockers;var next=remaining%1==0?remaining-1:Math.floor(remaining);if(blocker.counted){Browser.mainLoop.remainingBlockers=next}else{next=next+.5;Browser.mainLoop.remainingBlockers=(8*remaining+next)/9}}console.log('main loop blocker "'+blocker.name+'" took '+(Date.now()-start)+" ms");Browser.mainLoop.updateStatus();setTimeout(Browser.mainLoop.runner,0);return}if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0;if(Browser.mainLoop.timingMode==1&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0){Browser.mainLoop.scheduler();return}if(Browser.mainLoop.method==="timeout"&&Module.ctx){Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");Browser.mainLoop.method=""}Browser.mainLoop.runIter((function(){if(typeof arg!=="undefined"){Runtime.dynCall("vi",func,[arg])}else{Runtime.dynCall("v",func)}}));if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;if(typeof SDL==="object"&&SDL.audio&&SDL.audio.queueNewAudioData)SDL.audio.queueNewAudioData();Browser.mainLoop.scheduler()};if(!noSetTiming){if(fps&&fps>0)_emscripten_set_main_loop_timing(0,1e3/fps);else _emscripten_set_main_loop_timing(1,1);Browser.mainLoop.scheduler()}if(simulateInfiniteLoop){throw"SimulateInfiniteLoop"}}var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:(function(){Browser.mainLoop.scheduler=null;Browser.mainLoop.currentlyRunningMainloop++}),resume:(function(){Browser.mainLoop.currentlyRunningMainloop++;var timingMode=Browser.mainLoop.timingMode;var timingValue=Browser.mainLoop.timingValue;var func=Browser.mainLoop.func;Browser.mainLoop.func=null;_emscripten_set_main_loop(func,0,false,Browser.mainLoop.arg,true);_emscripten_set_main_loop_timing(timingMode,timingValue);Browser.mainLoop.scheduler()}),updateStatus:(function(){if(Module["setStatus"]){var message=Module["statusMessage"]||"Please wait...";var remaining=Browser.mainLoop.remainingBlockers;var expected=Browser.mainLoop.expectedBlockers;if(remaining){if(remaining<expected){Module["setStatus"](message+" ("+(expected-remaining)+"/"+expected+")")}else{Module["setStatus"](message)}}else{Module["setStatus"]("")}}}),runIter:(function(func){if(ABORT)return;if(Module["preMainLoop"]){var preRet=Module["preMainLoop"]();if(preRet===false){return}}try{func()}catch(e){if(e instanceof ExitStatus){return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}if(Module["postMainLoop"])Module["postMainLoop"]()})},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:(function(){if(!Module["preloadPlugins"])Module["preloadPlugins"]=[];if(Browser.initted)return;Browser.initted=true;try{new Blob;Browser.hasBlobConstructor=true}catch(e){Browser.hasBlobConstructor=false;console.log("warning: no blob constructor, cannot create blobs with mimetypes")}Browser.BlobBuilder=typeof MozBlobBuilder!="undefined"?MozBlobBuilder:typeof WebKitBlobBuilder!="undefined"?WebKitBlobBuilder:!Browser.hasBlobConstructor?console.log("warning: no BlobBuilder"):null;Browser.URLObject=typeof window!="undefined"?window.URL?window.URL:window.webkitURL:undefined;if(!Module.noImageDecoding&&typeof Browser.URLObject==="undefined"){console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");Module.noImageDecoding=true}var imagePlugin={};imagePlugin["canHandle"]=function imagePlugin_canHandle(name){return!Module.noImageDecoding&&/\.(jpg|jpeg|png|bmp)$/i.test(name)};imagePlugin["handle"]=function imagePlugin_handle(byteArray,name,onload,onerror){var b=null;if(Browser.hasBlobConstructor){try{b=new Blob([byteArray],{type:Browser.getMimetype(name)});if(b.size!==byteArray.length){b=new Blob([(new Uint8Array(byteArray)).buffer],{type:Browser.getMimetype(name)})}}catch(e){Runtime.warnOnce("Blob constructor present but fails: "+e+"; falling back to blob builder")}}if(!b){var bb=new Browser.BlobBuilder;bb.append((new Uint8Array(byteArray)).buffer);b=bb.getBlob()}var url=Browser.URLObject.createObjectURL(b);var img=new Image;img.onload=function img_onload(){assert(img.complete,"Image "+name+" could not be decoded");var canvas=document.createElement("canvas");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext("2d");ctx.drawImage(img,0,0);Module["preloadedImages"][name]=canvas;Browser.URLObject.revokeObjectURL(url);if(onload)onload(byteArray)};img.onerror=function img_onerror(event){console.log("Image "+url+" could not be decoded");if(onerror)onerror()};img.src=url};Module["preloadPlugins"].push(imagePlugin);var audioPlugin={};audioPlugin["canHandle"]=function audioPlugin_canHandle(name){return!Module.noAudioDecoding&&name.substr(-4)in{".ogg":1,".wav":1,".mp3":1}};audioPlugin["handle"]=function audioPlugin_handle(byteArray,name,onload,onerror){var done=false;function finish(audio){if(done)return;done=true;Module["preloadedAudios"][name]=audio;if(onload)onload(byteArray)}function fail(){if(done)return;done=true;Module["preloadedAudios"][name]=new Audio;if(onerror)onerror()}if(Browser.hasBlobConstructor){try{var b=new Blob([byteArray],{type:Browser.getMimetype(name)})}catch(e){return fail()}var url=Browser.URLObject.createObjectURL(b);var audio=new Audio;audio.addEventListener("canplaythrough",(function(){finish(audio)}),false);audio.onerror=function audio_onerror(event){if(done)return;console.log("warning: browser could not fully decode audio "+name+", trying slower base64 approach");function encode64(data){var BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var PAD="=";var ret="";var leftchar=0;var leftbits=0;for(var i=0;i<data.length;i++){leftchar=leftchar<<8|data[i];leftbits+=8;while(leftbits>=6){var curr=leftchar>>leftbits-6&63;leftbits-=6;ret+=BASE[curr]}}if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD}else if(leftbits==4){ret+=BASE[(leftchar&15)<<2];ret+=PAD}return ret}audio.src="data:audio/x-"+name.substr(-3)+";base64,"+encode64(byteArray);finish(audio)};audio.src=url;Browser.safeSetTimeout((function(){finish(audio)}),1e4)}else{return fail()}};Module["preloadPlugins"].push(audioPlugin);var canvas=Module["canvas"];function pointerLockChange(){Browser.pointerLock=document["pointerLockElement"]===canvas||document["mozPointerLockElement"]===canvas||document["webkitPointerLockElement"]===canvas||document["msPointerLockElement"]===canvas}if(canvas){canvas.requestPointerLock=canvas["requestPointerLock"]||canvas["mozRequestPointerLock"]||canvas["webkitRequestPointerLock"]||canvas["msRequestPointerLock"]||(function(){});canvas.exitPointerLock=document["exitPointerLock"]||document["mozExitPointerLock"]||document["webkitExitPointerLock"]||document["msExitPointerLock"]||(function(){});canvas.exitPointerLock=canvas.exitPointerLock.bind(document);document.addEventListener("pointerlockchange",pointerLockChange,false);document.addEventListener("mozpointerlockchange",pointerLockChange,false);document.addEventListener("webkitpointerlockchange",pointerLockChange,false);document.addEventListener("mspointerlockchange",pointerLockChange,false);if(Module["elementPointerLock"]){canvas.addEventListener("click",(function(ev){if(!Browser.pointerLock&&canvas.requestPointerLock){canvas.requestPointerLock();ev.preventDefault()}}),false)}}}),createContext:(function(canvas,useWebGL,setInModule,webGLContextAttributes){if(useWebGL&&Module.ctx&&canvas==Module.canvas)return Module.ctx;var ctx;var contextHandle;if(useWebGL){var contextAttributes={antialias:false,alpha:false};if(webGLContextAttributes){for(var attribute in webGLContextAttributes){contextAttributes[attribute]=webGLContextAttributes[attribute]}}contextHandle=GL.createContext(canvas,contextAttributes);if(contextHandle){ctx=GL.getContext(contextHandle).GLctx}canvas.style.backgroundColor="black"}else{ctx=canvas.getContext("2d")}if(!ctx)return null;if(setInModule){if(!useWebGL)assert(typeof GLctx==="undefined","cannot set in module if GLctx is used, but we are a non-GL context that would replace it");Module.ctx=ctx;if(useWebGL)GL.makeContextCurrent(contextHandle);Module.useWebGL=useWebGL;Browser.moduleContextCreatedCallbacks.forEach((function(callback){callback()}));Browser.init()}return ctx}),destroyContext:(function(canvas,useWebGL,setInModule){}),fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:(function(lockPointer,resizeCanvas,vrDevice){Browser.lockPointer=lockPointer;Browser.resizeCanvas=resizeCanvas;Browser.vrDevice=vrDevice;if(typeof Browser.lockPointer==="undefined")Browser.lockPointer=true;if(typeof Browser.resizeCanvas==="undefined")Browser.resizeCanvas=false;if(typeof Browser.vrDevice==="undefined")Browser.vrDevice=null;var canvas=Module["canvas"];function fullScreenChange(){Browser.isFullScreen=false;var canvasContainer=canvas.parentNode;if((document["webkitFullScreenElement"]||document["webkitFullscreenElement"]||document["mozFullScreenElement"]||document["mozFullscreenElement"]||document["fullScreenElement"]||document["fullscreenElement"]||document["msFullScreenElement"]||document["msFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvasContainer){canvas.cancelFullScreen=document["cancelFullScreen"]||document["mozCancelFullScreen"]||document["webkitCancelFullScreen"]||document["msExitFullscreen"]||document["exitFullscreen"]||(function(){});canvas.cancelFullScreen=canvas.cancelFullScreen.bind(document);if(Browser.lockPointer)canvas.requestPointerLock();Browser.isFullScreen=true;if(Browser.resizeCanvas)Browser.setFullScreenCanvasSize()}else{canvasContainer.parentNode.insertBefore(canvas,canvasContainer);canvasContainer.parentNode.removeChild(canvasContainer);if(Browser.resizeCanvas)Browser.setWindowedCanvasSize()}if(Module["onFullScreen"])Module["onFullScreen"](Browser.isFullScreen);Browser.updateCanvasDimensions(canvas)}if(!Browser.fullScreenHandlersInstalled){Browser.fullScreenHandlersInstalled=true;document.addEventListener("fullscreenchange",fullScreenChange,false);document.addEventListener("mozfullscreenchange",fullScreenChange,false);document.addEventListener("webkitfullscreenchange",fullScreenChange,false);document.addEventListener("MSFullscreenChange",fullScreenChange,false)}var canvasContainer=document.createElement("div");canvas.parentNode.insertBefore(canvasContainer,canvas);canvasContainer.appendChild(canvas);canvasContainer.requestFullScreen=canvasContainer["requestFullScreen"]||canvasContainer["mozRequestFullScreen"]||canvasContainer["msRequestFullscreen"]||(canvasContainer["webkitRequestFullScreen"]?(function(){canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"])}):null);if(vrDevice){canvasContainer.requestFullScreen({vrDisplay:vrDevice})}else{canvasContainer.requestFullScreen()}}),nextRAF:0,fakeRequestAnimationFrame:(function(func){var now=Date.now();if(Browser.nextRAF===0){Browser.nextRAF=now+1e3/60}else{while(now+2>=Browser.nextRAF){Browser.nextRAF+=1e3/60}}var delay=Math.max(Browser.nextRAF-now,0);setTimeout(func,delay)}),requestAnimationFrame:function requestAnimationFrame(func){if(typeof window==="undefined"){Browser.fakeRequestAnimationFrame(func)}else{if(!window.requestAnimationFrame){window.requestAnimationFrame=window["requestAnimationFrame"]||window["mozRequestAnimationFrame"]||window["webkitRequestAnimationFrame"]||window["msRequestAnimationFrame"]||window["oRequestAnimationFrame"]||Browser.fakeRequestAnimationFrame}window.requestAnimationFrame(func)}},safeCallback:(function(func){return(function(){if(!ABORT)return func.apply(null,arguments)})}),allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=false}),resumeAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=true;if(Browser.queuedAsyncCallbacks.length>0){var callbacks=Browser.queuedAsyncCallbacks;Browser.queuedAsyncCallbacks=[];callbacks.forEach((function(func){func()}))}}),safeRequestAnimationFrame:(function(func){return Browser.requestAnimationFrame((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}))}),safeSetTimeout:(function(func,timeout){Module["noExitRuntime"]=true;return setTimeout((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}),timeout)}),safeSetInterval:(function(func,timeout){Module["noExitRuntime"]=true;return setInterval((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}}),timeout)}),getMimetype:(function(name){return{"jpg":"image/jpeg","jpeg":"image/jpeg","png":"image/png","bmp":"image/bmp","ogg":"audio/ogg","wav":"audio/wav","mp3":"audio/mpeg"}[name.substr(name.lastIndexOf(".")+1)]}),getUserMedia:(function(func){if(!window.getUserMedia){window.getUserMedia=navigator["getUserMedia"]||navigator["mozGetUserMedia"]}window.getUserMedia(func)}),getMovementX:(function(event){return event["movementX"]||event["mozMovementX"]||event["webkitMovementX"]||0}),getMovementY:(function(event){return event["movementY"]||event["mozMovementY"]||event["webkitMovementY"]||0}),getMouseWheelDelta:(function(event){var delta=0;switch(event.type){case"DOMMouseScroll":delta=event.detail;break;case"mousewheel":delta=event.wheelDelta;break;case"wheel":delta=event["deltaY"];break;default:throw"unrecognized mouse wheel event: "+event.type}return delta}),mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:(function(event){if(Browser.pointerLock){if(event.type!="mousemove"&&"mozMovementX"in event){Browser.mouseMovementX=Browser.mouseMovementY=0}else{Browser.mouseMovementX=Browser.getMovementX(event);Browser.mouseMovementY=Browser.getMovementY(event)}if(typeof SDL!="undefined"){Browser.mouseX=SDL.mouseX+Browser.mouseMovementX;Browser.mouseY=SDL.mouseY+Browser.mouseMovementY}else{Browser.mouseX+=Browser.mouseMovementX;Browser.mouseY+=Browser.mouseMovementY}}else{var rect=Module["canvas"].getBoundingClientRect();var cw=Module["canvas"].width;var ch=Module["canvas"].height;var scrollX=typeof window.scrollX!=="undefined"?window.scrollX:window.pageXOffset;var scrollY=typeof window.scrollY!=="undefined"?window.scrollY:window.pageYOffset;if(event.type==="touchstart"||event.type==="touchend"||event.type==="touchmove"){var touch=event.touch;if(touch===undefined){return}var adjustedX=touch.pageX-(scrollX+rect.left);var adjustedY=touch.pageY-(scrollY+rect.top);adjustedX=adjustedX*(cw/rect.width);adjustedY=adjustedY*(ch/rect.height);var coords={x:adjustedX,y:adjustedY};if(event.type==="touchstart"){Browser.lastTouches[touch.identifier]=coords;Browser.touches[touch.identifier]=coords}else if(event.type==="touchend"||event.type==="touchmove"){var last=Browser.touches[touch.identifier];if(!last)last=coords;Browser.lastTouches[touch.identifier]=last;Browser.touches[touch.identifier]=coords}return}var x=event.pageX-(scrollX+rect.left);var y=event.pageY-(scrollY+rect.top);x=x*(cw/rect.width);y=y*(ch/rect.height);Browser.mouseMovementX=x-Browser.mouseX;Browser.mouseMovementY=y-Browser.mouseY;Browser.mouseX=x;Browser.mouseY=y}}),xhrLoad:(function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)}),asyncLoad:(function(url,onload,onerror,noRunDep){Browser.xhrLoad(url,(function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(!noRunDep)removeRunDependency("al "+url)}),(function(event){if(onerror){onerror()}else{throw'Loading data file "'+url+'" failed.'}}));if(!noRunDep)addRunDependency("al "+url)}),resizeListeners:[],updateResizeListeners:(function(){var canvas=Module["canvas"];Browser.resizeListeners.forEach((function(listener){listener(canvas.width,canvas.height)}))}),setCanvasSize:(function(width,height,noUpdates){var canvas=Module["canvas"];Browser.updateCanvasDimensions(canvas,width,height);if(!noUpdates)Browser.updateResizeListeners()}),windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags|8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),setWindowedCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags&~8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),updateCanvasDimensions:(function(canvas,wNative,hNative){if(wNative&&hNative){canvas.widthNative=wNative;canvas.heightNative=hNative}else{wNative=canvas.widthNative;hNative=canvas.heightNative}var w=wNative;var h=hNative;if(Module["forcedAspectRatio"]&&Module["forcedAspectRatio"]>0){if(w/h<Module["forcedAspectRatio"]){w=Math.round(h*Module["forcedAspectRatio"])}else{h=Math.round(w/Module["forcedAspectRatio"])}}if((document["webkitFullScreenElement"]||document["webkitFullscreenElement"]||document["mozFullScreenElement"]||document["mozFullscreenElement"]||document["fullScreenElement"]||document["fullscreenElement"]||document["msFullScreenElement"]||document["msFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvas.parentNode&&typeof screen!="undefined"){var factor=Math.min(screen.width/w,screen.height/h);w=Math.round(w*factor);h=Math.round(h*factor)}if(Browser.resizeCanvas){if(canvas.width!=w)canvas.width=w;if(canvas.height!=h)canvas.height=h;if(typeof canvas.style!="undefined"){canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}else{if(canvas.width!=wNative)canvas.width=wNative;if(canvas.height!=hNative)canvas.height=hNative;if(typeof canvas.style!="undefined"){if(w!=wNative||h!=hNative){canvas.style.setProperty("width",w+"px","important");canvas.style.setProperty("height",h+"px","important")}else{canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}}}),wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:(function(){var handle=Browser.nextWgetRequestHandle;Browser.nextWgetRequestHandle++;return handle})};function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function _malloc(bytes){var ptr=Runtime.dynamicAlloc(bytes+8);return ptr+8&4294967288}Module["_malloc"]=_malloc;function ___cxa_allocate_exception(size){return _malloc(size)}Module["_i64Add"]=_i64Add;Module["_bitshift64Lshr"]=_bitshift64Lshr;var _llvm_ctlz_i32=true;var _BDtoIHigh=true;var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}function ___cxa_guard_acquire(variable){if(!HEAP8[variable>>0]){HEAP8[variable>>0]=1;return 1}return 0}function ___cxa_guard_release(){}function _vfprintf(s,f,va_arg){return _fprintf(s,f,HEAP32[va_arg>>2])}function ___cxa_begin_catch(ptr){__ZSt18uncaught_exceptionv.uncaught_exception--;EXCEPTIONS.caught.push(ptr);EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));return ptr}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort("cannot dynamically allocate, sbrk now has control")})}var ret=DYNAMICTOP;if(bytes!=0){var success=self.alloc(bytes);if(!success)return-1>>>0}return ret}Module["_memmove"]=_memmove;function ___errno_location(){return ___errno_state}var _BItoD=true;function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}FS.staticInit();__ATINIT__.unshift((function(){if(!Module["noFSInit"]&&!FS.init.initialized)FS.init()}));__ATMAIN__.push((function(){FS.ignorePermissions=false}));__ATEXIT__.push((function(){FS.quit()}));Module["FS_createFolder"]=FS.createFolder;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createLink"]=FS.createLink;Module["FS_createDevice"]=FS.createDevice;___errno_state=Runtime.staticAlloc(4);HEAP32[___errno_state>>2]=0;__ATINIT__.unshift((function(){TTY.init()}));__ATEXIT__.push((function(){TTY.shutdown()}));if(ENVIRONMENT_IS_NODE){var fs=require("fs");var NODEJS_PATH=require("path");NODEFS.staticInit()}__ATINIT__.push((function(){SOCKFS.root=FS.mount(SOCKFS,{},null)}));_fputc.ret=allocate([0],"i8",ALLOC_STATIC);Module["requestFullScreen"]=function Module_requestFullScreen(lockPointer,resizeCanvas,vrDevice){Browser.requestFullScreen(lockPointer,resizeCanvas,vrDevice)};Module["requestAnimationFrame"]=function Module_requestAnimationFrame(func){Browser.requestAnimationFrame(func)};Module["setCanvasSize"]=function Module_setCanvasSize(width,height,noUpdates){Browser.setCanvasSize(width,height,noUpdates)};Module["pauseMainLoop"]=function Module_pauseMainLoop(){Browser.mainLoop.pause()};Module["resumeMainLoop"]=function Module_resumeMainLoop(){Browser.mainLoop.resume()};Module["getUserMedia"]=function Module_getUserMedia(){Browser.getUserMedia()};Module["createContext"]=function Module_createContext(canvas,useWebGL,setInModule,webGLContextAttributes){return Browser.createContext(canvas,useWebGL,setInModule,webGLContextAttributes)};STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);assert(DYNAMIC_BASE<TOTAL_MEMORY,"TOTAL_MEMORY not big enough for stack");var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_DYNAMIC);function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_v(index){try{Module["dynCall_v"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iii(index,a1,a2){try{return Module["dynCall_iii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity,"byteLength":byteLength};Module.asmLibraryArg={"abort":abort,"assert":assert,"invoke_iiii":invoke_iiii,"invoke_viiiii":invoke_viiiii,"invoke_vi":invoke_vi,"invoke_ii":invoke_ii,"invoke_v":invoke_v,"invoke_viiiiii":invoke_viiiiii,"invoke_iii":invoke_iii,"invoke_viiii":invoke_viiii,"_send":_send,"_pthread_key_create":_pthread_key_create,"___cxa_guard_acquire":___cxa_guard_acquire,"_emscripten_set_main_loop_timing":_emscripten_set_main_loop_timing,"_vfprintf":_vfprintf,"___assert_fail":___assert_fail,"_write":_write,"___cxa_allocate_exception":___cxa_allocate_exception,"__ZSt18uncaught_exceptionv":__ZSt18uncaught_exceptionv,"_sbrk":_sbrk,"_fflush":_fflush,"___cxa_guard_release":___cxa_guard_release,"_pwrite":_pwrite,"___setErrNo":___setErrNo,"_ceilf":_ceilf,"___cxa_begin_catch":___cxa_begin_catch,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_fileno":_fileno,"___resumeException":___resumeException,"___cxa_find_matching_catch":___cxa_find_matching_catch,"_sysconf":_sysconf,"_pthread_getspecific":_pthread_getspecific,"_ntohs":_ntohs,"_htonl":_htonl,"_pthread_once":_pthread_once,"_mkport":_mkport,"__reallyNegative":__reallyNegative,"_htons":_htons,"_ntohl":_ntohl,"_emscripten_set_main_loop":_emscripten_set_main_loop,"___errno_location":___errno_location,"_pthread_setspecific":_pthread_setspecific,"_fputc":_fputc,"___cxa_throw":___cxa_throw,"_abort":_abort,"_fwrite":_fwrite,"_time":_time,"_fprintf":_fprintf,"__formatString":__formatString,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"cttz_i8":cttz_i8,"_stderr":_stderr};// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer) {
"use asm";var a=global.Int8Array;var b=global.Int16Array;var c=global.Int32Array;var d=global.Uint8Array;var e=global.Uint16Array;var f=global.Uint32Array;var g=global.Float32Array;var h=global.Float64Array;var i=new a(buffer);var j=new b(buffer);var k=new c(buffer);var l=new d(buffer);var m=new e(buffer);var n=new f(buffer);var o=new g(buffer);var p=new h(buffer);var q=global.byteLength;var r=env.STACKTOP|0;var s=env.STACK_MAX|0;var t=env.tempDoublePtr|0;var u=env.ABORT|0;var v=env.cttz_i8|0;var w=env._stderr|0;var x=0;var y=0;var z=0;var A=0;var B=global.NaN,C=global.Infinity;var D=0,E=0,F=0,G=0,H=0.0,I=0,J=0,K=0,L=0.0;var M=0;var N=0;var O=0;var P=0;var Q=0;var R=0;var S=0;var T=0;var U=0;var V=0;var W=global.Math.floor;var X=global.Math.abs;var Y=global.Math.sqrt;var Z=global.Math.pow;var _=global.Math.cos;var $=global.Math.sin;var aa=global.Math.tan;var ba=global.Math.acos;var ca=global.Math.asin;var da=global.Math.atan;var ea=global.Math.atan2;var fa=global.Math.exp;var ga=global.Math.log;var ha=global.Math.ceil;var ia=global.Math.imul;var ja=global.Math.min;var ka=global.Math.clz32;var la=env.abort;var ma=env.assert;var na=env.invoke_iiii;var oa=env.invoke_viiiii;var pa=env.invoke_vi;var qa=env.invoke_ii;var ra=env.invoke_v;var sa=env.invoke_viiiiii;var ta=env.invoke_iii;var ua=env.invoke_viiii;var va=env._send;var wa=env._pthread_key_create;var xa=env.___cxa_guard_acquire;var ya=env._emscripten_set_main_loop_timing;var za=env._vfprintf;var Aa=env.___assert_fail;var Ba=env._write;var Ca=env.___cxa_allocate_exception;var Da=env.__ZSt18uncaught_exceptionv;var Ea=env._sbrk;var Fa=env._fflush;var Ga=env.___cxa_guard_release;var Ha=env._pwrite;var Ia=env.___setErrNo;var Ja=env._ceilf;var Ka=env.___cxa_begin_catch;var La=env._emscripten_memcpy_big;var Ma=env._fileno;var Na=env.___resumeException;var Oa=env.___cxa_find_matching_catch;var Pa=env._sysconf;var Qa=env._pthread_getspecific;var Ra=env._ntohs;var Sa=env._htonl;var Ta=env._pthread_once;var Ua=env._mkport;var Va=env.__reallyNegative;var Wa=env._htons;var Xa=env._ntohl;var Ya=env._emscripten_set_main_loop;var Za=env.___errno_location;var _a=env._pthread_setspecific;var $a=env._fputc;var ab=env.___cxa_throw;var bb=env._abort;var cb=env._fwrite;var db=env._time;var eb=env._fprintf;var fb=env.__formatString;var gb=0.0;function _emscripten_replace_memory(newBuffer){if(q(newBuffer)&16777215||q(newBuffer)<=16777215||q(newBuffer)>2147483648)return false;i=new a(newBuffer);j=new b(newBuffer);k=new c(newBuffer);l=new d(newBuffer);m=new e(newBuffer);n=new f(newBuffer);o=new g(newBuffer);p=new h(newBuffer);buffer=newBuffer;return true}
// EMSCRIPTEN_START_FUNCS
function Ad(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0.0,i=0.0,j=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;D=r;r=r+3552|0;y=D+2848|0;z=D;C=D+2832|0;e=C+4|0;k[e>>2]=0;q=C+8|0;k[q>>2]=0;B=C+4|0;k[C>>2]=B;A=(b|0)>0;if(A){s=B;f=0;o=0;while(1){n=d+(o<<2)|0;do if(f){m=k[n>>2]|0;j=f;while(1){g=k[j+16>>2]|0;if((m|0)<(g|0)){g=k[j>>2]|0;if(!g){g=j;f=j;x=10;break}}else{if((g|0)>=(m|0)){g=j;x=15;break}f=j+4|0;g=k[f>>2]|0;if(!g){g=f;f=j;x=14;break}}j=g}if((x|0)==10){x=0;k[y>>2]=f;j=g;break}else if((x|0)==14){x=0;k[y>>2]=f;j=g;break}else if((x|0)==15){x=0;k[y>>2]=g;j=y;f=g;break}}else{k[y>>2]=B;j=B;f=s}while(0);if(!(k[j>>2]|0)){g=Af(20)|0;k[g+16>>2]=k[n>>2];k[g>>2]=0;k[g+4>>2]=0;k[g+8>>2]=f;k[j>>2]=g;f=k[k[C>>2]>>2]|0;if(f){k[C>>2]=f;g=k[j>>2]|0}Tb(k[e>>2]|0,g);k[q>>2]=(k[q>>2]|0)+1}g=o+1|0;if((g|0)>=(b|0))break;f=k[B>>2]|0;o=g}if(A){u=z+2816|0;v=z+2816|0;w=0;do{g=k[((w|0)==0?d:d+(w+-1<<2)|0)>>2]|0;q=a+(w*2832|0)|0;t=a+(w*2832|0)+2816|0;if(!(k[t>>2]|0))h=0.0;else{Kg(z|0,q|0,2832)|0;k[v>>2]=(k[v>>2]|0)+(k[c+(g*2832|0)+2816>>2]|0);f=0;do{e=z+(f<<2)|0;k[e>>2]=(k[e>>2]|0)+(k[c+(g*2832|0)+(f<<2)>>2]|0);f=f+1|0}while((f|0)!=704);j=k[v>>2]|0;do if(!j)h=12.0;else{f=0;e=0;do{f=((k[z+(e<<2)>>2]|0)>0&1)+f|0;e=e+1|0}while((e|0)<704&(f|0)<5);m=f;if((m|0)==2){h=+(j+20|0);break}else if((m|0)==1){h=12.0;break}Fg(y|0,0,704)|0;Oe(z,704,15,y);f=0;e=0;do{f=(ia(l[y+e>>0]|0,k[z+(e<<2)>>2]|0)|0)+f|0;e=e+1|0}while((e|0)!=704);if((m|0)==4)f=f+37|0;else if((m|0)==3)f=f+28|0;else f=(id(y,704)|0)+f|0;h=+(f|0);}while(0);h=h-+p[c+(g*2832|0)+2824>>3]}f=k[C>>2]|0;if((f|0)!=(B|0)){e=f;while(1){s=e+16|0;o=k[s>>2]|0;if(!(k[t>>2]|0))i=0.0;else{Kg(z|0,q|0,2832)|0;k[u>>2]=(k[u>>2]|0)+(k[c+(o*2832|0)+2816>>2]|0);j=0;do{f=z+(j<<2)|0;k[f>>2]=(k[f>>2]|0)+(k[c+(o*2832|0)+(j<<2)>>2]|0);j=j+1|0}while((j|0)!=704);f=k[u>>2]|0;do if(!f)i=12.0;else{m=0;j=0;do{m=((k[z+(j<<2)>>2]|0)>0&1)+m|0;j=j+1|0}while((j|0)<704&(m|0)<5);n=m;if((n|0)==1){i=12.0;break}else if((n|0)==2){i=+(f+20|0);break}Fg(y|0,0,704)|0;Oe(z,704,15,y);m=0;j=0;do{m=(ia(l[y+j>>0]|0,k[z+(j<<2)>>2]|0)|0)+m|0;j=j+1|0}while((j|0)!=704);if((n|0)==3)j=m+28|0;else if((n|0)==4)j=m+37|0;else j=(id(y,704)|0)+m|0;i=+(j|0);}while(0);i=i-+p[c+(o*2832|0)+2824>>3]}if(i<h){h=i;g=k[s>>2]|0}f=k[e+4>>2]|0;if(!f)while(1){f=k[e+8>>2]|0;if((k[f>>2]|0)==(e|0))break;else e=f}else while(1){e=k[f>>2]|0;if(!e)break;else f=e}if((f|0)==(B|0))break;else e=f}}k[d+(w<<2)>>2]=g;w=w+1|0}while((w|0)<(b|0));f=B;g=C}else x=4}else x=4;if((x|0)==4){f=B;g=C}e=k[g>>2]|0;if((e|0)!=(f|0))do{Fg(c+((k[e+16>>2]|0)*2832|0)|0,0,2820)|0;f=k[e+4>>2]|0;if(!f)while(1){f=k[e+8>>2]|0;if((k[f>>2]|0)==(e|0)){e=f;break}else e=f}else{e=f;while(1){f=k[e>>2]|0;if(!f)break;else e=f}}}while((e|0)!=(B|0));if(A)g=0;else{b=k[B>>2]|0;od(C,b);r=D;return}do{f=k[d+(g<<2)>>2]|0;e=c+(f*2832|0)+2816|0;k[e>>2]=(k[e>>2]|0)+(k[a+(g*2832|0)+2816>>2]|0);e=0;do{A=c+(f*2832|0)+(e<<2)|0;k[A>>2]=(k[A>>2]|0)+(k[a+(g*2832|0)+(e<<2)>>2]|0);e=e+1|0}while((e|0)!=704);g=g+1|0}while((g|0)!=(b|0));b=k[B>>2]|0;od(C,b);r=D;return}function Bd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;x=r;r=r+32|0;u=x+24|0;w=x+12|0;v=x;Cd(w,a);q=v+4|0;k[q>>2]=0;s=v+8|0;k[s>>2]=0;c=v+4|0;k[v>>2]=c;t=b+4|0;e=k[t>>2]|0;d=k[b>>2]|0;a:do if((e|0)==(d|0)){h=a;d=e;j=0}else{n=c;g=0;l=0;j=0;while(1){m=d+(l<<2)|0;if(g){f=k[m>>2]|0;i=c;h=g;b:do{while(1){if((k[h+16>>2]|0)>=(f|0)){i=h;break}h=k[h+4>>2]|0;if(!h)break b}h=k[i>>2]|0}while((h|0)!=0);if(!((i|0)!=(c|0)?(f|0)>=(k[i+16>>2]|0):0))p=12}else p=12;if((p|0)==12){do if(g){f=k[m>>2]|0;while(1){h=k[g+16>>2]|0;if((f|0)<(h|0)){h=k[g>>2]|0;if(!h){h=g;i=g;p=16;break}else g=h}else{if((h|0)>=(f|0)){p=22;break}h=g+4|0;i=k[h>>2]|0;if(!i){p=20;break}else g=i}}if((p|0)==16){k[u>>2]=i;f=h;h=i;p=23;break}else if((p|0)==20){k[u>>2]=g;f=h;h=g;p=23;break}else if((p|0)==22){p=0;k[u>>2]=g;if(!g){f=u;h=g;p=23;break}else break}}else{k[u>>2]=c;f=c;h=n;p=23}while(0);if((p|0)==23){p=0;g=Af(24)|0;k[g+16>>2]=k[m>>2];k[g+20>>2]=0;k[g>>2]=0;k[g+4>>2]=0;k[g+8>>2]=h;k[f>>2]=g;h=k[k[v>>2]>>2]|0;if(!h)f=g;else{k[v>>2]=h;f=k[f>>2]|0}Tb(k[q>>2]|0,f);k[s>>2]=(k[s>>2]|0)+1;d=k[b>>2]|0}k[g+20>>2]=j;Kg((k[a>>2]|0)+(j*2832|0)|0,(k[w>>2]|0)+((k[d+(l<<2)>>2]|0)*2832|0)|0,2832)|0;e=k[t>>2]|0;d=k[b>>2]|0;j=j+1|0}i=l+1|0;if(i>>>0>=e-d>>2>>>0){h=a;break a}g=k[c>>2]|0;l=i}}while(0);f=a+4|0;i=k[f>>2]|0;h=k[h>>2]|0;g=(i-h|0)/2832|0;if(j>>>0<=g>>>0){if(j>>>0<g>>>0?(o=h+(j*2832|0)|0,(i|0)!=(o|0)):0)k[f>>2]=i+(~(((i+-2832-o|0)>>>0)/2832|0)*2832|0);}else{yd(a,j-g|0);e=k[t>>2]|0;d=k[b>>2]|0}if((e|0)!=(d|0)){m=c;l=0;do{i=d+(l<<2)|0;f=k[c>>2]|0;do if(f){j=k[i>>2]|0;while(1){g=k[f+16>>2]|0;if((j|0)<(g|0)){g=k[f>>2]|0;if(!g){e=f;p=41;break}else f=g}else{if((g|0)>=(j|0)){p=47;break}g=f+4|0;h=k[g>>2]|0;if(!h){e=g;p=45;break}else f=h}}if((p|0)==41){k[u>>2]=f;j=e;e=f;p=48;break}else if((p|0)==45){k[u>>2]=f;j=e;e=f;p=48;break}else if((p|0)==47){p=0;k[u>>2]=f;if(!f){j=u;e=f;p=48;break}else break}}else{k[u>>2]=c;j=c;e=m;p=48}while(0);if((p|0)==48){f=Af(24)|0;k[f+16>>2]=k[i>>2];k[f+20>>2]=0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=e;k[j>>2]=f;e=k[k[v>>2]>>2]|0;if(!e)e=f;else{k[v>>2]=e;e=k[j>>2]|0}Tb(k[q>>2]|0,e);k[s>>2]=(k[s>>2]|0)+1;d=k[b>>2]|0;e=k[t>>2]|0}k[d+(l<<2)>>2]=k[f+20>>2];l=l+1|0}while(l>>>0<e-d>>2>>>0);}nd(v,k[c>>2]|0);e=k[w>>2]|0;if(!e){r=x;return}c=w+4|0;d=k[c>>2]|0;if((d|0)!=(e|0))k[c>>2]=d+(~(((d+-2832-e|0)>>>0)/2832|0)*2832|0);Df(e);r=x;return}function Cd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;k[a>>2]=0;g=a+4|0;k[g>>2]=0;k[a+8>>2]=0;f=b+4|0;h=k[f>>2]|0;c=k[b>>2]|0;e=h-c|0;d=(e|0)/2832|0;if((h|0)==(c|0))return;if(d>>>0>1516584)yf(a);c=Af(e)|0;k[g>>2]=c;k[a>>2]=c;k[a+8>>2]=c+(d*2832|0);d=k[b>>2]|0;e=k[f>>2]|0;if((d|0)==(e|0))return;do{Kg(c|0,d|0,2832)|0;c=(k[g>>2]|0)+2832|0;k[g>>2]=c;d=d+2832|0}while((d|0)!=(e|0));return}function Dd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0.0,g=0,h=0.0,j=0.0,m=0.0,n=0.0,q=0.0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=r;r=r+3584|0;y=C+2880|0;x=C+40|0;z=C+2876|0;A=C+2872|0;B=C+32|0;w=C;if((c|0)==(d|0)){r=C;return}g=(d|0)<(c|0);u=g?c:d;d=g?d:c;k[w>>2]=d;k[w+4>>2]=u;i[w+8>>0]=1;c=k[b+(d<<2)>>2]|0;g=k[b+(u<<2)>>2]|0;b=g+c|0;t=+(c|0);if((c|0)<256)q=+o[316384+(c<<2)>>2];else q=+kg(t);s=+(g|0);if((g|0)<256)j=+o[316384+(g<<2)>>2];else j=+kg(s);m=+(b|0);if((b|0)<256)h=+o[316384+(b<<2)>>2];else h=+kg(m);v=w+24|0;b=a+(d*2832|0)|0;f=+p[a+(d*2832|0)+2824>>3];n=+p[a+(u*2832|0)+2824>>3];s=(t*q+s*j-m*h)*.5-f-n;p[v>>3]=s;do if(!(k[a+(d*2832|0)+2816>>2]|0)){p[w+16>>3]=n;f=n}else{g=k[a+(u*2832|0)+2816>>2]|0;if(!g){p[w+16>>3]=f;break}c=k[e>>2]|0;if((c|0)==(k[e+4>>2]|0))t=1.e+99;else{t=+p[c+24>>3];t=t>0.0?t:0.0}Kg(x|0,b|0,2832)|0;c=x+2816|0;k[c>>2]=(k[c>>2]|0)+g;b=0;do{g=x+(b<<2)|0;k[g>>2]=(k[g>>2]|0)+(k[a+(u*2832|0)+(b<<2)>>2]|0);b=b+1|0}while((b|0)!=704);d=k[c>>2]|0;do if(!d)f=12.0;else{c=0;b=0;do{c=((k[x+(b<<2)>>2]|0)>0&1)+c|0;b=b+1|0}while((b|0)<704&(c|0)<5);g=c;if((g|0)==2){f=+(d+20|0);break}else if((g|0)==1){f=12.0;break}Fg(y|0,0,704)|0;Oe(x,704,15,y);c=0;b=0;do{c=(ia(l[y+b>>0]|0,k[x+(b<<2)>>2]|0)|0)+c|0;b=b+1|0}while((b|0)!=704);if((g|0)==3)c=c+28|0;else if((g|0)==4)c=c+37|0;else c=(id(y,704)|0)+c|0;f=+(c|0);}while(0);if(f<t-s){p[w+16>>3]=f;break}r=C;return}while(0);p[v>>3]=f+s;d=e+4|0;c=k[d>>2]|0;if((c|0)==(k[e+8>>2]|0)){rd(e,w);d=k[d>>2]|0}else{k[c>>2]=k[w>>2];k[c+4>>2]=k[w+4>>2];k[c+8>>2]=k[w+8>>2];k[c+12>>2]=k[w+12>>2];k[c+16>>2]=k[w+16>>2];k[c+20>>2]=k[w+20>>2];k[c+24>>2]=k[w+24>>2];k[c+28>>2]=k[w+28>>2];a=(k[d>>2]|0)+32|0;k[d>>2]=a;d=a}w=d;a=k[e>>2]|0;k[z>>2]=a;k[A>>2]=w;k[x>>2]=k[z>>2];k[y>>2]=k[A>>2];sd(x,y,B,w-a>>5);r=C;return}function Ed(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0;t=r;r=r+1040|0;s=t;c=(b>>>0)/(c>>>0)|0;o=c+1|0;o=(o|0)>(d|0)?d:o;j=(b>>>0)/(o>>>0)|0;if((o|0)<=0){r=t;return}m=b+-1-e|0;n=s+1024|0;q=f+4|0;p=f+8|0;i=c+1|0;i=(i|0)<(d|0)?i:d;if(!e){c=0;do{Fg(s|0,0,1028)|0;d=k[q>>2]|0;if((d|0)==(k[p>>2]|0))Jd(f,s);else{Kg(d|0,s|0,1040)|0;k[q>>2]=(k[q>>2]|0)+1040}c=c+1|0}while((c|0)!=(i|0));r=t;return}else{c=7;h=0}do{d=((ia(h,b)|0)>>>0)/(o>>>0)|0;if(h){g=c*16807|0;g=(g|0)==0?1:g;c=g;d=((g>>>0)%(j>>>0)|0)+d|0}Fg(s|0,0,1024)|0;k[n>>2]=e;d=a+((d+e|0)>>>0<b>>>0?d:m)|0;g=e;while(1){u=s+((l[d>>0]|0)<<2)|0;k[u>>2]=(k[u>>2]|0)+1;g=g+-1|0;if(!g)break;else d=d+1|0}d=k[q>>2]|0;if((d|0)==(k[p>>2]|0))Jd(f,s);else{Kg(d|0,s|0,1040)|0;k[q>>2]=(k[q>>2]|0)+1040}h=h+1|0}while((h|0)!=(i|0));r=t;return}function Fd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+1040|0;p=q;o=k[d>>2]|0;n=((k[d+4>>2]|0)-o|0)/1040|0;j=((b<<1>>>0)/(c>>>0)|0)+99+n|0;j=j-((j>>>0)%(n>>>0)|0)|0;if((j|0)<=0){r=q;return}i=b+1-c|0;m=p+1024|0;if(b>>>0<=c>>>0){f=(b|0)==0;g=0;do{Fg(p|0,0,1024)|0;k[m>>2]=b;if(f)e=0;else{d=a;e=b;while(1){c=p+((l[d>>0]|0)<<2)|0;k[c>>2]=(k[c>>2]|0)+1;e=e+-1|0;if(!e)break;else d=d+1|0}e=k[m>>2]|0}d=(g>>>0)%(n>>>0)|0;c=o+(d*1040|0)+1024|0;k[c>>2]=(k[c>>2]|0)+e;e=0;do{c=o+(d*1040|0)+(e<<2)|0;k[c>>2]=(k[c>>2]|0)+(k[p+(e<<2)>>2]|0);e=e+1|0}while((e|0)!=256);g=g+1|0}while((g|0)<(j|0));r=q;return}g=(c|0)==0;h=7;b=0;do{Fg(p|0,0,1024)|0;f=h*16807|0;h=(f|0)==0?1:f;k[m>>2]=c;if(g)e=0;else{e=a+((h>>>0)%(i>>>0)|0)|0;d=c;while(1){f=p+((l[e>>0]|0)<<2)|0;k[f>>2]=(k[f>>2]|0)+1;d=d+-1|0;if(!d)break;else e=e+1|0}e=k[m>>2]|0}f=(b>>>0)%(n>>>0)|0;d=o+(f*1040|0)+1024|0;k[d>>2]=(k[d>>2]|0)+e;e=0;do{d=o+(f*1040|0)+(e<<2)|0;k[d>>2]=(k[d>>2]|0)+(k[p+(e<<2)>>2]|0);e=e+1|0}while((e|0)!=256);b=b+1|0}while((b|0)<(j|0));r=q;return}function Gd(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0.0,n=0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0.0;r=k[d>>2]|0;d=(k[d+4>>2]|0)-r|0;v=(d|0)/1040|0;if(v>>>0<2){if(!b)return;Fg(e|0,0,b|0)|0;return}u=v<<8;u=Cf(u>>>0>536870911?-1:u<<3)|0;Fg(u|0,0,v<<11|0)|0;d=(d|0)>0;g=0;do{if(d){h=ia(g,v)|0;f=0;do{n=k[r+(f*1040|0)+1024>>2]|0;j=k[r+(f*1040|0)+(g<<2)>>2]|0;if((n|0)<256)q=+o[316384+(n<<2)>>2];else q=+kg(+(n|0));if(!j)m=q+2.0;else{if((j|0)<256)m=+o[316384+(j<<2)>>2];else m=+kg(+(j|0));m=q-m}p[u+(f+h<<3)>>3]=m;f=f+1|0}while((f|0)<(v|0));}g=g+1|0}while((g|0)!=256);s=Cf(v>>>0>536870911?-1:v<<3)|0;Fg(s|0,0,v<<3|0)|0;r=ia(v,b)|0;t=Cf(r)|0;Fg(t|0,0,r|0)|0;if(b){g=0;do{r=ia(g,v)|0;n=ia(l[a+g>>0]|0,v)|0;if(d){j=e+g|0;h=0;m=1.e+99;do{f=s+(h<<3)|0;q=+p[u+(h+n<<3)>>3]+ +p[f>>3];p[f>>3]=q;if(q<m){i[j>>0]=h;m=q}h=h+1|0}while((h|0)<(v|0));}else m=1.e+99;if(g>>>0<2e3)q=(+(g>>>0)*.07/2.0e3+.77)*c;else q=c;if(d){j=0;do{n=s+(j<<3)|0;w=+p[n>>3]-m;p[n>>3]=w;if(w>=q){p[n>>3]=q;i[t+(j+r)>>0]=1}j=j+1|0}while((j|0)<(v|0));}g=g+1|0}while((g|0)!=(b|0));d=b+-1|0;if((d|0)>0){n=d;h=l[e+d>>0]|0;j=ia(v,d)|0;while(1){g=n;n=n+-1|0;j=j-v|0;f=e+n|0;if(!(i[t+(j+h)>>0]|0))d=h;else d=l[f>>0]|0;i[f>>0]=d;if((g|0)<=1)break;else h=d}}}Ef(u);Ef(s);Ef(t);return}function Hd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,m=0;h=Vc(c,b)|0;i=k[d>>2]|0;m=d+4|0;f=k[m>>2]|0;e=i;if((f|0)==(i|0))g=i;else{g=f+(~(((f+-1040-e|0)>>>0)/1040|0)*1040|0)|0;k[m>>2]=g}f=(g-e|0)/1040|0;if(h>>>0<=f>>>0){if(h>>>0<f>>>0?(j=i+(h*1040|0)|0,(g|0)!=(j|0)):0)k[m>>2]=g+(~(((g+-1040-j|0)>>>0)/1040|0)*1040|0);}else Ld(d,h-f|0);if(!b)return;e=k[d>>2]|0;f=0;do{d=l[c+f>>0]|0;m=e+(d*1040|0)+((l[a+f>>0]|0)<<2)|0;k[m>>2]=(k[m>>2]|0)+1;d=e+(d*1040|0)+1024|0;k[d>>2]=(k[d>>2]|0)+1;f=f+1|0}while((f|0)!=(b|0));return}function Id(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;w=r;r=r+1088|0;u=w+1076|0;s=w+1064|0;m=w;q=w+1052|0;o=w+1040|0;k[u>>2]=0;v=u+4|0;k[v>>2]=0;k[u+8>>2]=0;k[s>>2]=0;t=s+4|0;k[t>>2]=0;k[s+8>>2]=0;n=(b|0)==0;do if(!n)if(b>>>0>1073741823)yf(s);else{h=b<<2;f=Af(h)|0;k[s>>2]=f;j=f+(b<<2)|0;k[s+8>>2]=j;Fg(f|0,0,h|0)|0;k[t>>2]=j;break}else f=0;while(0);Fg(m|0,0,1028)|0;g=m+1024|0;j=u+8|0;h=0;e=0;a:while(1){while(1){if(e>>>0>=b>>>0)break a;d=e+1|0;if((d|0)==(b|0)){p=10;break}x=(i[c+e>>0]|0)==(i[c+d>>0]|0);k[f+(e<<2)>>2]=h;e=m+(l[a+e>>0]<<2)|0;k[e>>2]=(k[e>>2]|0)+1;k[g>>2]=(k[g>>2]|0)+1;if(x)e=d;else{e=d;break}}if((p|0)==10){p=0;k[f+(e<<2)>>2]=h;e=m+(l[a+e>>0]<<2)|0;k[e>>2]=(k[e>>2]|0)+1;k[g>>2]=(k[g>>2]|0)+1;e=b}d=k[v>>2]|0;if((d|0)==(k[j>>2]|0)){Jd(u,m);f=k[s>>2]|0}else{Kg(d|0,m|0,1040)|0;k[v>>2]=d+1040}Fg(m|0,0,1028)|0;h=h+1|0}k[q>>2]=0;h=q+4|0;k[h>>2]=0;k[q+8>>2]=0;k[o>>2]=0;g=o+4|0;k[g>>2]=0;k[o+8>>2]=0;Kd(u,1,((k[v>>2]|0)-(k[u>>2]|0)|0)/1040|0,256,q,o);if(n){f=k[o>>2]|0;if(f)p=19}else{d=k[s>>2]|0;f=k[o>>2]|0;e=0;do{i[c+e>>0]=k[f+(k[d+(e<<2)>>2]<<2)>>2];e=e+1|0}while((e|0)!=(b|0));p=19}if((p|0)==19){e=k[g>>2]|0;if((e|0)!=(f|0))k[g>>2]=e+(~((e+-4-f|0)>>>2)<<2);Df(f);}f=k[q>>2]|0;e=f;if(f){d=k[h>>2]|0;if((d|0)!=(f|0))k[h>>2]=d+(~(((d+-1040-e|0)>>>0)/1040|0)*1040|0);Df(f);}e=k[s>>2]|0;d=e;if(e){f=k[t>>2]|0;if((f|0)!=(e|0))k[t>>2]=f+(~((f+-4-d|0)>>>2)<<2);Df(e);}d=k[u>>2]|0;if(!d){r=w;return}e=k[v>>2]|0;if((e|0)!=(d|0))k[v>>2]=e+(~(((e+-1040-d|0)>>>0)/1040|0)*1040|0);Df(d);r=w;return}function Jd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;g=a+4|0;h=k[a>>2]|0;i=h;d=(((k[g>>2]|0)-i|0)/1040|0)+1|0;if(d>>>0>4129776)yf(a);j=a+8|0;e=h;c=((k[j>>2]|0)-e|0)/1040|0;if(c>>>0<2064888){c=c<<1;d=c>>>0<d>>>0?d:c;e=(k[g>>2]|0)-e|0;c=(e|0)/1040|0;if(!d){f=0;d=0}else l=6}else{e=(k[g>>2]|0)-e|0;d=4129776;c=(e|0)/1040|0;l=6}if((l|0)==6){f=d;d=Af(d*1040|0)|0}Kg(d+(c*1040|0)|0,b|0,1040)|0;b=d+((((e|0)/-1040|0)+c|0)*1040|0)|0;Kg(b|0,h|0,e|0)|0;k[a>>2]=b;k[g>>2]=d+((c+1|0)*1040|0);k[j>>2]=d+(f*1040|0);if(!i)return;Df(i);return}function Kd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0.0,j=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0;v=r;r=r+272|0;q=v+16|0;t=v;s=ia(c,b)|0;k[t>>2]=0;u=t+4|0;k[u>>2]=0;k[t+8>>2]=0;if(s){if(s>>>0>1073741823)yf(t);j=Af(s<<2)|0;k[u>>2]=j;k[t>>2]=j;m=j+(s<<2)|0;k[t+8>>2]=m;h=s;while(1){k[j>>2]=1;h=h+-1|0;if(!h)break;else j=j+4|0}k[u>>2]=m}m=e+4|0;j=k[m>>2]|0;h=k[e>>2]|0;g=(j-h|0)/1040|0;if(s>>>0<=g>>>0){if(s>>>0<g>>>0?(n=h+(s*1040|0)|0,(j|0)!=(n|0)):0)k[m>>2]=j+(~(((j+-1040-n|0)>>>0)/1040|0)*1040|0);}else Ld(e,s-g|0);h=f+4|0;g=k[h>>2]|0;j=k[f>>2]|0;m=g-j>>2;if(s>>>0<=m>>>0){if(s>>>0<m>>>0?(o=j+(s<<2)|0,(g|0)!=(o|0)):0)k[h>>2]=g+(~((g+-4-o|0)>>>2)<<2);}else hd(f,s-m|0);if((s|0)>0){h=k[e>>2]|0;o=0;do{Kg(h+(o*1040|0)|0,(k[a>>2]|0)+(o*1040|0)|0,1040)|0;n=k[a>>2]|0;j=k[n+(o*1040|0)+1024>>2]|0;do if(!j)i=12.0;else{h=0;m=0;do{h=((k[n+(o*1040|0)+(m<<2)>>2]|0)>0&1)+h|0;m=m+1|0}while((m|0)<256&(h|0)<5);g=h;if((g|0)==1){i=12.0;break}else if((g|0)==2){i=+(j+20|0);break}Fg(q|0,0,256)|0;Oe(n+(o*1040|0)|0,256,15,q);h=0;m=0;do{h=(ia(l[q+m>>0]|0,k[n+(o*1040|0)+(m<<2)>>2]|0)|0)+h|0;m=m+1|0}while((m|0)!=256);if((g|0)==4)h=h+37|0;else if((g|0)==3)h=h+28|0;else h=(id(q,256)|0)+h|0;i=+(h|0);}while(0);h=k[e>>2]|0;p[h+(o*1040|0)+1032>>3]=i;k[(k[f>>2]|0)+(o<<2)>>2]=o;o=o+1|0}while((o|0)<(s|0));}if((b|0)>1&(c|0)>0){h=0;do{q=ia(h,b)|0;Md(k[e>>2]|0,k[t>>2]|0,(k[f>>2]|0)+(q<<2)|0,b,d);h=h+1|0}while((h|0)<(c|0));}Md(k[e>>2]|0,k[t>>2]|0,k[f>>2]|0,s,d);Nd(k[a>>2]|0,s,k[e>>2]|0,k[f>>2]|0);Od(e,f);h=k[t>>2]|0;if(!h){r=v;return}g=k[u>>2]|0;if((g|0)!=(h|0))k[u>>2]=g+(~((g+-4-h|0)>>>2)<<2);Df(h);r=v;return}function Ld(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;i=a+8|0;f=k[i>>2]|0;j=a+4|0;c=k[j>>2]|0;d=c;if(((f-d|0)/1040|0)>>>0>=b>>>0){do{Fg(c|0,0,1028)|0;c=(k[j>>2]|0)+1040|0;k[j>>2]=c;b=b+-1|0}while((b|0)!=0);return}c=k[a>>2]|0;e=((d-c|0)/1040|0)+b|0;if(e>>>0>4129776)yf(a);d=c;c=(f-d|0)/1040|0;if(c>>>0<2064888){c=c<<1;c=c>>>0<e>>>0?e:c;d=((k[j>>2]|0)-d|0)/1040|0;if(!c){e=0;g=0}else h=8}else{c=4129776;d=((k[j>>2]|0)-d|0)/1040|0;h=8}if((h|0)==8){e=c;g=Af(c*1040|0)|0}c=g+(d*1040|0)|0;f=g+(e*1040|0)|0;e=c;do{Fg(e|0,0,1028)|0;e=c+1040|0;c=e;b=b+-1|0}while((b|0)!=0);b=c;c=k[a>>2]|0;e=(k[j>>2]|0)-c|0;d=g+((((e|0)/-1040|0)+d|0)*1040|0)|0;Kg(d|0,c|0,e|0)|0;k[a>>2]=d;k[j>>2]=b;k[i>>2]=f;if(!c)return;Df(c);return}function Md(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0.0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;I=r;r=r+96|0;x=I+8|0;w=I+92|0;v=I+88|0;y=I+84|0;z=I+80|0;A=I+76|0;B=I;H=I+64|0;E=I+52|0;D=I+40|0;s=H+4|0;k[s>>2]=0;t=H+8|0;k[t>>2]=0;F=H+4|0;k[H>>2]=F;k[E>>2]=0;G=E+4|0;k[G>>2]=0;k[E+8>>2]=0;C=(d|0)>0;if(C){o=F;q=E+8|0;g=0;j=0;while(1){f=c+(j<<2)|0;if(g){m=k[f>>2]|0;h=F;l=g;a:do{while(1){if((k[l+16>>2]|0)>=(m|0)){h=l;break}l=k[l+4>>2]|0;if(!l)break a}l=k[h>>2]|0}while((l|0)!=0);if(!((h|0)!=(F|0)?(m|0)>=(k[h+16>>2]|0):0))n=11}else n=11;do if((n|0)==11){n=0;do if(g){m=k[f>>2]|0;l=g;while(1){h=k[l+16>>2]|0;if((m|0)<(h|0)){h=k[l>>2]|0;if(!h){h=l;g=l;n=15;break}}else{if((h|0)>=(m|0)){h=l;n=20;break}g=l+4|0;h=k[g>>2]|0;if(!h){h=g;g=l;n=19;break}}l=h}if((n|0)==15){n=0;k[x>>2]=g;m=h;break}else if((n|0)==19){n=0;k[x>>2]=g;m=h;break}else if((n|0)==20){n=0;k[x>>2]=h;m=x;g=h;break}}else{k[x>>2]=F;m=F;g=o}while(0);if(!(k[m>>2]|0)){h=Af(20)|0;k[h+16>>2]=k[f>>2];k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=g;k[m>>2]=h;g=k[k[H>>2]>>2]|0;if(g){k[H>>2]=g;h=k[m>>2]|0}Tb(k[s>>2]|0,h);k[t>>2]=(k[t>>2]|0)+1}h=k[G>>2]|0;if((h|0)==(k[q>>2]|0)){Zc(E,f);break}else{k[h>>2]=k[f>>2];k[G>>2]=h+4;break}}while(0);j=j+1|0;if((j|0)>=(d|0))break;g=k[F>>2]|0}j=k[G>>2]|0;f=k[E>>2]|0}else{j=0;f=0}k[D>>2]=0;o=D+4|0;k[o>>2]=0;k[D+8>>2]=0;if((j|0)==(f|0))j=f;else{m=0;do{g=m;m=m+1|0;if(m>>>0<j-f>>2>>>0){h=m;do{Qd(a,b,k[f+(g<<2)>>2]|0,k[f+(h<<2)>>2]|0,D);h=h+1|0;j=k[G>>2]|0;f=k[E>>2]|0}while(h>>>0<j-f>>2>>>0);}}while(m>>>0<j-f>>2>>>0);}b:do if(j-f>>2>>>0>1){u=0.0;t=1;while(1){while(1){h=k[D>>2]|0;if(+p[h+24>>3]>=u)break;q=k[h>>2]|0;n=k[h+4>>2]|0;g=a+(q*1040|0)+1024|0;k[g>>2]=(k[g>>2]|0)+(k[a+(n*1040|0)+1024>>2]|0);g=0;do{l=a+(q*1040|0)+(g<<2)|0;k[l>>2]=(k[l>>2]|0)+(k[a+(n*1040|0)+(g<<2)>>2]|0);g=g+1|0}while((g|0)!=256);p[a+(q*1040|0)+1032>>3]=+p[h+16>>3];g=b+(q<<2)|0;k[g>>2]=(k[g>>2]|0)+(k[b+(n<<2)>>2]|0);if(C){l=0;do{g=c+(l<<2)|0;if((k[g>>2]|0)==(n|0))k[g>>2]=q;l=l+1|0}while((l|0)!=(d|0));}m=j-f>>2;if(m>>>0>1){g=1;l=0;while(1){l=f+(l<<2)|0;if((k[l>>2]|0)>=(n|0))k[l>>2]=k[f+(g<<2)>>2];l=g+1|0;if(l>>>0<m>>>0){s=g;g=l;l=s}else break}}k[G>>2]=j+-4;j=k[o>>2]|0;l=(j|0)==(h|0);c:do if(!l){g=j-h>>5;m=0;do{f=k[h+(m<<5)>>2]|0;if(!((f|0)!=(q|0)?(s=k[h+(m<<5)+4>>2]|0,!((s|0)==(n|0)|((f|0)==(n|0)|(s|0)==(q|0)))):0))i[h+(m<<5)+8>>0]=0;m=m+1|0}while(m>>>0<g>>>0);if(!l)do{if(i[h+8>>0]|0)break c;g=h;f=j-g|0;if((f|0)>32){j=j+-32|0;k[x>>2]=k[h>>2];k[x+4>>2]=k[h+4>>2];k[x+8>>2]=k[h+8>>2];k[x+12>>2]=k[h+12>>2];k[x+16>>2]=k[h+16>>2];k[x+20>>2]=k[h+20>>2];k[x+24>>2]=k[h+24>>2];k[x+28>>2]=k[h+28>>2];k[h>>2]=k[j>>2];k[h+4>>2]=k[j+4>>2];k[h+8>>2]=k[j+8>>2];k[h+12>>2]=k[j+12>>2];k[h+16>>2]=k[j+16>>2];k[h+20>>2]=k[j+20>>2];k[h+24>>2]=k[j+24>>2];k[h+28>>2]=k[j+28>>2];k[j>>2]=k[x>>2];k[j+4>>2]=k[x+4>>2];k[j+8>>2]=k[x+8>>2];k[j+12>>2]=k[x+12>>2];k[j+16>>2]=k[x+16>>2];k[j+20>>2]=k[x+20>>2];k[j+24>>2]=k[x+24>>2];k[j+28>>2]=k[x+28>>2];k[y>>2]=g;k[z>>2]=j;k[A>>2]=g;k[v>>2]=k[y>>2];k[w>>2]=k[z>>2];k[x>>2]=k[A>>2];qd(v,w,B,(f>>5)+-1|0,x);j=k[o>>2]|0;h=k[D>>2]|0}j=j+-32|0;k[o>>2]=j}while((h|0)!=(j|0));}while(0);h=k[G>>2]|0;f=k[E>>2]|0;if((h|0)==(f|0)){j=h;f=h}else{h=0;do{Qd(a,b,q,k[f+(h<<2)>>2]|0,D);h=h+1|0;j=k[G>>2]|0;f=k[E>>2]|0}while(h>>>0<j-f>>2>>>0);}if(j-f>>2>>>0<=t>>>0)break b}if(j-f>>2>>>0>e>>>0){u=1.e+99;t=e}else break}}while(0);h=k[D>>2]|0;j=h;if(h){g=k[o>>2]|0;if((g|0)!=(h|0))k[o>>2]=g+(~((g+-32-j|0)>>>5)<<5);Df(h);f=k[E>>2]|0}if(!f){a=k[F>>2]|0;od(H,a);r=I;return}g=k[G>>2]|0;if((g|0)!=(f|0))k[G>>2]=g+(~((g+-4-f|0)>>>2)<<2);Df(f);a=k[F>>2]|0;od(H,a);r=I;return}function Nd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0.0,i=0.0,j=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;D=r;r=r+1312|0;y=D+1056|0;z=D;C=D+1040|0;e=C+4|0;k[e>>2]=0;q=C+8|0;k[q>>2]=0;B=C+4|0;k[C>>2]=B;A=(b|0)>0;if(A){s=B;f=0;o=0;while(1){n=d+(o<<2)|0;do if(f){m=k[n>>2]|0;j=f;while(1){g=k[j+16>>2]|0;if((m|0)<(g|0)){g=k[j>>2]|0;if(!g){g=j;f=j;x=10;break}}else{if((g|0)>=(m|0)){g=j;x=15;break}f=j+4|0;g=k[f>>2]|0;if(!g){g=f;f=j;x=14;break}}j=g}if((x|0)==10){x=0;k[y>>2]=f;j=g;break}else if((x|0)==14){x=0;k[y>>2]=f;j=g;break}else if((x|0)==15){x=0;k[y>>2]=g;j=y;f=g;break}}else{k[y>>2]=B;j=B;f=s}while(0);if(!(k[j>>2]|0)){g=Af(20)|0;k[g+16>>2]=k[n>>2];k[g>>2]=0;k[g+4>>2]=0;k[g+8>>2]=f;k[j>>2]=g;f=k[k[C>>2]>>2]|0;if(f){k[C>>2]=f;g=k[j>>2]|0}Tb(k[e>>2]|0,g);k[q>>2]=(k[q>>2]|0)+1}g=o+1|0;if((g|0)>=(b|0))break;f=k[B>>2]|0;o=g}if(A){u=z+1024|0;v=z+1024|0;w=0;do{g=k[((w|0)==0?d:d+(w+-1<<2)|0)>>2]|0;q=a+(w*1040|0)|0;t=a+(w*1040|0)+1024|0;if(!(k[t>>2]|0))h=0.0;else{Kg(z|0,q|0,1040)|0;k[v>>2]=(k[v>>2]|0)+(k[c+(g*1040|0)+1024>>2]|0);f=0;do{e=z+(f<<2)|0;k[e>>2]=(k[e>>2]|0)+(k[c+(g*1040|0)+(f<<2)>>2]|0);f=f+1|0}while((f|0)!=256);j=k[v>>2]|0;do if(!j)h=12.0;else{f=0;e=0;do{f=((k[z+(e<<2)>>2]|0)>0&1)+f|0;e=e+1|0}while((e|0)<256&(f|0)<5);m=f;if((m|0)==2){h=+(j+20|0);break}else if((m|0)==1){h=12.0;break}Fg(y|0,0,256)|0;Oe(z,256,15,y);f=0;e=0;do{f=(ia(l[y+e>>0]|0,k[z+(e<<2)>>2]|0)|0)+f|0;e=e+1|0}while((e|0)!=256);if((m|0)==4)f=f+37|0;else if((m|0)==3)f=f+28|0;else f=(id(y,256)|0)+f|0;h=+(f|0);}while(0);h=h-+p[c+(g*1040|0)+1032>>3]}f=k[C>>2]|0;if((f|0)!=(B|0)){e=f;while(1){s=e+16|0;o=k[s>>2]|0;if(!(k[t>>2]|0))i=0.0;else{Kg(z|0,q|0,1040)|0;k[u>>2]=(k[u>>2]|0)+(k[c+(o*1040|0)+1024>>2]|0);j=0;do{f=z+(j<<2)|0;k[f>>2]=(k[f>>2]|0)+(k[c+(o*1040|0)+(j<<2)>>2]|0);j=j+1|0}while((j|0)!=256);f=k[u>>2]|0;do if(!f)i=12.0;else{m=0;j=0;do{m=((k[z+(j<<2)>>2]|0)>0&1)+m|0;j=j+1|0}while((j|0)<256&(m|0)<5);n=m;if((n|0)==1){i=12.0;break}else if((n|0)==2){i=+(f+20|0);break}Fg(y|0,0,256)|0;Oe(z,256,15,y);m=0;j=0;do{m=(ia(l[y+j>>0]|0,k[z+(j<<2)>>2]|0)|0)+m|0;j=j+1|0}while((j|0)!=256);if((n|0)==4)j=m+37|0;else if((n|0)==3)j=m+28|0;else j=(id(y,256)|0)+m|0;i=+(j|0);}while(0);i=i-+p[c+(o*1040|0)+1032>>3]}if(i<h){h=i;g=k[s>>2]|0}f=k[e+4>>2]|0;if(!f)while(1){f=k[e+8>>2]|0;if((k[f>>2]|0)==(e|0))break;else e=f}else while(1){e=k[f>>2]|0;if(!e)break;else f=e}if((f|0)==(B|0))break;else e=f}}k[d+(w<<2)>>2]=g;w=w+1|0}while((w|0)<(b|0));f=B;g=C}else x=4}else x=4;if((x|0)==4){f=B;g=C}e=k[g>>2]|0;if((e|0)!=(f|0))do{Fg(c+((k[e+16>>2]|0)*1040|0)|0,0,1028)|0;f=k[e+4>>2]|0;if(!f)while(1){f=k[e+8>>2]|0;if((k[f>>2]|0)==(e|0)){e=f;break}else e=f}else{e=f;while(1){f=k[e>>2]|0;if(!f)break;else e=f}}}while((e|0)!=(B|0));if(A)g=0;else{b=k[B>>2]|0;od(C,b);r=D;return}do{f=k[d+(g<<2)>>2]|0;e=c+(f*1040|0)+1024|0;k[e>>2]=(k[e>>2]|0)+(k[a+(g*1040|0)+1024>>2]|0);e=0;do{A=c+(f*1040|0)+(e<<2)|0;k[A>>2]=(k[A>>2]|0)+(k[a+(g*1040|0)+(e<<2)>>2]|0);e=e+1|0}while((e|0)!=256);g=g+1|0}while((g|0)!=(b|0));b=k[B>>2]|0;od(C,b);r=D;return}function Od(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;x=r;r=r+32|0;u=x+24|0;w=x+12|0;v=x;Pd(w,a);q=v+4|0;k[q>>2]=0;s=v+8|0;k[s>>2]=0;c=v+4|0;k[v>>2]=c;t=b+4|0;e=k[t>>2]|0;d=k[b>>2]|0;a:do if((e|0)==(d|0)){h=a;d=e;j=0}else{n=c;g=0;l=0;j=0;while(1){m=d+(l<<2)|0;if(g){f=k[m>>2]|0;i=c;h=g;b:do{while(1){if((k[h+16>>2]|0)>=(f|0)){i=h;break}h=k[h+4>>2]|0;if(!h)break b}h=k[i>>2]|0}while((h|0)!=0);if(!((i|0)!=(c|0)?(f|0)>=(k[i+16>>2]|0):0))p=12}else p=12;if((p|0)==12){do if(g){f=k[m>>2]|0;while(1){h=k[g+16>>2]|0;if((f|0)<(h|0)){h=k[g>>2]|0;if(!h){h=g;i=g;p=16;break}else g=h}else{if((h|0)>=(f|0)){p=22;break}h=g+4|0;i=k[h>>2]|0;if(!i){p=20;break}else g=i}}if((p|0)==16){k[u>>2]=i;f=h;h=i;p=23;break}else if((p|0)==20){k[u>>2]=g;f=h;h=g;p=23;break}else if((p|0)==22){p=0;k[u>>2]=g;if(!g){f=u;h=g;p=23;break}else break}}else{k[u>>2]=c;f=c;h=n;p=23}while(0);if((p|0)==23){p=0;g=Af(24)|0;k[g+16>>2]=k[m>>2];k[g+20>>2]=0;k[g>>2]=0;k[g+4>>2]=0;k[g+8>>2]=h;k[f>>2]=g;h=k[k[v>>2]>>2]|0;if(!h)f=g;else{k[v>>2]=h;f=k[f>>2]|0}Tb(k[q>>2]|0,f);k[s>>2]=(k[s>>2]|0)+1;d=k[b>>2]|0}k[g+20>>2]=j;Kg((k[a>>2]|0)+(j*1040|0)|0,(k[w>>2]|0)+((k[d+(l<<2)>>2]|0)*1040|0)|0,1040)|0;e=k[t>>2]|0;d=k[b>>2]|0;j=j+1|0}i=l+1|0;if(i>>>0>=e-d>>2>>>0){h=a;break a}g=k[c>>2]|0;l=i}}while(0);f=a+4|0;i=k[f>>2]|0;h=k[h>>2]|0;g=(i-h|0)/1040|0;if(j>>>0<=g>>>0){if(j>>>0<g>>>0?(o=h+(j*1040|0)|0,(i|0)!=(o|0)):0)k[f>>2]=i+(~(((i+-1040-o|0)>>>0)/1040|0)*1040|0);}else{Ld(a,j-g|0);e=k[t>>2]|0;d=k[b>>2]|0}if((e|0)!=(d|0)){m=c;l=0;do{i=d+(l<<2)|0;f=k[c>>2]|0;do if(f){j=k[i>>2]|0;while(1){g=k[f+16>>2]|0;if((j|0)<(g|0)){g=k[f>>2]|0;if(!g){e=f;p=41;break}else f=g}else{if((g|0)>=(j|0)){p=47;break}g=f+4|0;h=k[g>>2]|0;if(!h){e=g;p=45;break}else f=h}}if((p|0)==41){k[u>>2]=f;j=e;e=f;p=48;break}else if((p|0)==45){k[u>>2]=f;j=e;e=f;p=48;break}else if((p|0)==47){p=0;k[u>>2]=f;if(!f){j=u;e=f;p=48;break}else break}}else{k[u>>2]=c;j=c;e=m;p=48}while(0);if((p|0)==48){f=Af(24)|0;k[f+16>>2]=k[i>>2];k[f+20>>2]=0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=e;k[j>>2]=f;e=k[k[v>>2]>>2]|0;if(!e)e=f;else{k[v>>2]=e;e=k[j>>2]|0}Tb(k[q>>2]|0,e);k[s>>2]=(k[s>>2]|0)+1;d=k[b>>2]|0;e=k[t>>2]|0}k[d+(l<<2)>>2]=k[f+20>>2];l=l+1|0}while(l>>>0<e-d>>2>>>0);}nd(v,k[c>>2]|0);e=k[w>>2]|0;if(!e){r=x;return}c=w+4|0;d=k[c>>2]|0;if((d|0)!=(e|0))k[c>>2]=d+(~(((d+-1040-e|0)>>>0)/1040|0)*1040|0);Df(e);r=x;return}function Pd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;k[a>>2]=0;g=a+4|0;k[g>>2]=0;k[a+8>>2]=0;f=b+4|0;h=k[f>>2]|0;c=k[b>>2]|0;e=h-c|0;d=(e|0)/1040|0;if((h|0)==(c|0))return;if(d>>>0>4129776)yf(a);c=Af(e)|0;k[g>>2]=c;k[a>>2]=c;k[a+8>>2]=c+(d*1040|0);d=k[b>>2]|0;e=k[f>>2]|0;if((d|0)==(e|0))return;do{Kg(c|0,d|0,1040)|0;c=(k[g>>2]|0)+1040|0;k[g>>2]=c;d=d+1040|0}while((d|0)!=(e|0));return}function Qd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0.0,g=0,h=0.0,j=0.0,m=0.0,n=0.0,q=0.0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=r;r=r+1344|0;y=C+1088|0;x=C+40|0;z=C+1084|0;A=C+1080|0;B=C+32|0;w=C;if((c|0)==(d|0)){r=C;return}g=(d|0)<(c|0);u=g?c:d;d=g?d:c;k[w>>2]=d;k[w+4>>2]=u;i[w+8>>0]=1;c=k[b+(d<<2)>>2]|0;g=k[b+(u<<2)>>2]|0;b=g+c|0;t=+(c|0);if((c|0)<256)q=+o[316384+(c<<2)>>2];else q=+kg(t);s=+(g|0);if((g|0)<256)j=+o[316384+(g<<2)>>2];else j=+kg(s);m=+(b|0);if((b|0)<256)h=+o[316384+(b<<2)>>2];else h=+kg(m);v=w+24|0;b=a+(d*1040|0)|0;f=+p[a+(d*1040|0)+1032>>3];n=+p[a+(u*1040|0)+1032>>3];s=(t*q+s*j-m*h)*.5-f-n;p[v>>3]=s;do if(!(k[a+(d*1040|0)+1024>>2]|0)){p[w+16>>3]=n;f=n}else{g=k[a+(u*1040|0)+1024>>2]|0;if(!g){p[w+16>>3]=f;break}c=k[e>>2]|0;if((c|0)==(k[e+4>>2]|0))t=1.e+99;else{t=+p[c+24>>3];t=t>0.0?t:0.0}Kg(x|0,b|0,1040)|0;c=x+1024|0;k[c>>2]=(k[c>>2]|0)+g;b=0;do{g=x+(b<<2)|0;k[g>>2]=(k[g>>2]|0)+(k[a+(u*1040|0)+(b<<2)>>2]|0);b=b+1|0}while((b|0)!=256);d=k[c>>2]|0;do if(!d)f=12.0;else{c=0;b=0;do{c=((k[x+(b<<2)>>2]|0)>0&1)+c|0;b=b+1|0}while((b|0)<256&(c|0)<5);g=c;if((g|0)==1){f=12.0;break}else if((g|0)==2){f=+(d+20|0);break}Fg(y|0,0,256)|0;Oe(x,256,15,y);c=0;b=0;do{c=(ia(l[y+b>>0]|0,k[x+(b<<2)>>2]|0)|0)+c|0;b=b+1|0}while((b|0)!=256);if((g|0)==3)c=c+28|0;else if((g|0)==4)c=c+37|0;else c=(id(y,256)|0)+c|0;f=+(c|0);}while(0);if(f<t-s){p[w+16>>3]=f;break}r=C;return}while(0);p[v>>3]=f+s;d=e+4|0;c=k[d>>2]|0;if((c|0)==(k[e+8>>2]|0)){rd(e,w);d=k[d>>2]|0}else{k[c>>2]=k[w>>2];k[c+4>>2]=k[w+4>>2];k[c+8>>2]=k[w+8>>2];k[c+12>>2]=k[w+12>>2];k[c+16>>2]=k[w+16>>2];k[c+20>>2]=k[w+20>>2];k[c+24>>2]=k[w+24>>2];k[c+28>>2]=k[w+28>>2];a=(k[d>>2]|0)+32|0;k[d>>2]=a;d=a}w=d;a=k[e>>2]|0;k[z>>2]=a;k[A>>2]=w;k[x>>2]=k[z>>2];k[y>>2]=k[A>>2];sd(x,y,B,w-a>>5);r=C;return}function Rd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0;f=k[b>>2]|0;d=c+(f>>3)|0;e=l[d>>0]|0;if(!a){g=d;i[g>>0]=e;i[g+1>>0]=e>>8;i[g+2>>0]=e>>16;i[g+3>>0]=e>>24;d=d+4|0;i[d>>0]=0;i[d+1>>0]=0;i[d+2>>0]=0;i[d+3>>0]=0;d=f+1|0;k[b>>2]=d;return}h=Gg(1,0,f&7|0)|0;g=M;h=h|e;e=d;i[e>>0]=h;i[e+1>>0]=h>>8;i[e+2>>0]=h>>16;i[e+3>>0]=h>>24;d=d+4|0;i[d>>0]=g;i[d+1>>0]=g>>8;i[d+2>>0]=g>>16;i[d+3>>0]=g>>24;d=f+1|0;k[b>>2]=d;g=(ka(a|0)|0)^31;if(g>>>0>=8)Aa(190080,190104,52,190128);h=c+(d>>3)|0;j=l[h>>0]|0;d=Gg(g|0,0,d&7|0)|0;e=M;j=d|j;d=h;h=d;i[h>>0]=j;i[h+1>>0]=j>>8;i[h+2>>0]=j>>16;i[h+3>>0]=j>>24;d=d+4|0;i[d>>0]=e;i[d+1>>0]=e>>8;i[d+2>>0]=e>>16;i[d+3>>0]=e>>24;f=f+4|0;k[b>>2]=f;d=a-(1<<g)|0;e=((d|0)<0)<<31>>31;a=Gg(1,0,g|0)|0;h=M;if(!(h>>>0>e>>>0|(h|0)==(e|0)&a>>>0>d>>>0))Aa(190080,190104,52,190128);a=c+(f>>3)|0;h=l[a>>0]|0;c=Gg(d|0,e|0,f&7|0)|0;e=M;c=h|c;d=a;a=d;i[a>>0]=c;i[a+1>>0]=c>>8;i[a+2>>0]=c>>16;i[a+3>>0]=c>>24;d=d+4|0;i[d>>0]=e;i[d+1>>0]=e>>8;i[d+2>>0]=e>>16;i[d+3>>0]=e>>24;d=f+g|0;k[b>>2]=d;return}function Sd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,m=0,n=0;f=k[c>>2]|0;e=d+(f>>3)|0;j=l[e>>0]|0;h=Gg(a&1|0,0,f&7|0)|0;g=M;j=h|j;h=e;i[h>>0]=j;i[h+1>>0]=j>>8;i[h+2>>0]=j>>16;i[h+3>>0]=j>>24;e=e+4|0;i[e>>0]=g;i[e+1>>0]=g>>8;i[e+2>>0]=g>>16;i[e+3>>0]=g>>24;e=f+1|0;k[c>>2]=e;g=(b|0)==0;if(a){j=d+(e>>3)|0;n=l[j>>0]|0;m=Gg(g&1|0,0,e&7|0)|0;h=M;m=n|m;e=j;j=e;i[j>>0]=m;i[j+1>>0]=m>>8;i[j+2>>0]=m>>16;i[j+3>>0]=m>>24;e=e+4|0;i[e>>0]=h;i[e+1>>0]=h>>8;i[e+2>>0]=h>>16;i[e+3>>0]=h>>24;e=f+2|0;k[c>>2]=e;if(g){m=1;return m|0}}else if(g){m=0;return m|0}b=b+-1|0;if(b){f=((ka(b|0)|0)^31)+1|0;if(f>>>0>24){m=0;return m|0}}else f=1;g=(f|0)<16?4:(f+3|0)/4|0;f=g+-4|0;g=g<<2;if(f>>>0>=4)Aa(190080,190104,52,190128);j=d+(e>>3)|0;h=l[j>>0]|0;f=Gg(f|0,((f|0)<0)<<31>>31|0,e&7|0)|0;m=M;h=f|h;f=j;j=f;i[j>>0]=h;i[j+1>>0]=h>>8;i[j+2>>0]=h>>16;i[j+3>>0]=h>>24;f=f+4|0;i[f>>0]=m;i[f+1>>0]=m>>8;i[f+2>>0]=m>>16;i[f+3>>0]=m>>24;f=e+2|0;k[c>>2]=f;e=((b|0)<0)<<31>>31;m=Gg(1,0,g|0)|0;j=M;if(!(j>>>0>e>>>0|(j|0)==(e|0)&m>>>0>b>>>0))Aa(190080,190104,52,190128);j=d+(f>>3)|0;n=l[j>>0]|0;h=Gg(b|0,e|0,f&7|0)|0;m=M;h=n|h;e=j;j=e;i[j>>0]=h;i[j+1>>0]=h>>8;i[j+2>>0]=h>>16;i[j+3>>0]=h>>24;e=e+4|0;i[e>>0]=m;i[e+1>>0]=m>>8;i[e+2>>0]=m>>16;i[e+3>>0]=m>>24;e=f+g|0;k[c>>2]=e;if(a){m=1;return m|0}m=d+(e>>3)|0;h=l[m>>0]|0;j=m;i[j>>0]=h;i[j+1>>0]=h>>8;i[j+2>>0]=h>>16;i[j+3>>0]=h>>24;m=m+4|0;i[m>>0]=0;i[m+1>>0]=0;i[m+2>>0]=0;i[m+3>>0]=0;k[c>>2]=e+1;m=1;return m|0}function Td(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0;f=k[b>>2]|0;g=c+(f>>3)|0;d=l[g>>0]|0;h=g;i[h>>0]=d;i[h+1>>0]=d>>8;i[h+2>>0]=d>>16;i[h+3>>0]=d>>24;g=g+4|0;i[g>>0]=0;i[g+1>>0]=0;i[g+2>>0]=0;i[g+3>>0]=0;g=f+1|0;k[b>>2]=g;h=a+-1|0;if(h){a=((ka(h|0)|0)^31)+1|0;if(a>>>0>24){a=0;return a|0}}else a=1;e=(a|0)<16?4:(a+3|0)/4|0;d=e+-4|0;e=e<<2;if(d>>>0>=4)Aa(190080,190104,52,190128);a=c+(g>>3)|0;j=l[a>>0]|0;g=Gg(d|0,((d|0)<0)<<31>>31|0,g&7|0)|0;d=M;j=g|j;g=a;i[g>>0]=j;i[g+1>>0]=j>>8;i[g+2>>0]=j>>16;i[g+3>>0]=j>>24;a=a+4|0;i[a>>0]=d;i[a+1>>0]=d>>8;i[a+2>>0]=d>>16;i[a+3>>0]=d>>24;a=f+3|0;k[b>>2]=a;d=((h|0)<0)<<31>>31;f=Gg(1,0,e|0)|0;g=M;if(!(g>>>0>d>>>0|(g|0)==(d|0)&f>>>0>h>>>0))Aa(190080,190104,52,190128);g=c+(a>>3)|0;j=l[g>>0]|0;h=Gg(h|0,d|0,a&7|0)|0;f=M;h=j|h;d=g;g=d;i[g>>0]=h;i[g+1>>0]=h>>8;i[g+2>>0]=h>>16;i[g+3>>0]=h>>24;d=d+4|0;i[d>>0]=f;i[d+1>>0]=f>>8;i[d+2>>0]=f>>16;i[d+3>>0]=f>>24;a=a+e|0;d=c+(a>>3)|0;f=l[d>>0]|0;g=Gg(1,0,a&7|0)|0;e=M;g=f|g;f=d;i[f>>0]=g;i[f+1>>0]=g>>8;i[f+2>>0]=g>>16;i[f+3>>0]=g>>24;d=d+4|0;i[d>>0]=e;i[d+1>>0]=e>>8;i[d+2>>0]=e>>16;i[d+3>>0]=e>>24;k[b>>2]=a+1;a=1;return a|0}function Ud(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,m=0,n=0;if((a|0)>1?(i[b+15>>0]|0)==0:0)if(!(i[b+14>>0]|0))if(!(i[b+13>>0]|0))if(!(i[b+12>>0]|0))if(!(i[b+11>>0]|0))if(!(i[b+10>>0]|0))if(!(i[b+9>>0]|0))if(!(i[b+8>>0]|0))if(!(i[b+7>>0]|0))if(!(i[b+16>>0]|0))if(!(i[b+6>>0]|0))if(!(i[b+17>>0]|0))if(!(i[b+5>>0]|0))if(!(i[b>>0]|0))if(!(i[b+4>>0]|0))if(!(i[b+3>>0]|0))if(!(i[b+2>>0]|0))h=(i[b+1>>0]|0)!=0&1;else h=2;else h=3;else h=4;else h=5;else h=6;else h=7;else h=8;else h=9;else h=10;else h=11;else h=12;else h=13;else h=14;else h=15;else h=16;else h=17;else h=18;if((i[b+1>>0]|0)==0?(i[b+2>>0]|0)==0:0)e=(i[b+3>>0]|0)==0?3:2;else e=0;a=k[c>>2]|0;f=d+(a>>3)|0;m=l[f>>0]|0;j=Gg(e|0,0,a&7|0)|0;g=M;m=j|m;j=f;i[j>>0]=m;i[j+1>>0]=m>>8;i[j+2>>0]=m>>16;i[j+3>>0]=m>>24;f=f+4|0;i[f>>0]=g;i[f+1>>0]=g>>8;i[f+2>>0]=g>>16;i[f+3>>0]=g>>24;a=a+2|0;k[c>>2]=a;if(e>>>0>=h>>>0)return;while(1){g=l[b+(l[190144+e>>0]|0)>>0]|0;f=i[190168+g>>0]|0;g=l[190176+g>>0]|0;j=Gg(1,0,f&255|0)|0;m=M;if(!(m>>>0>0|(m|0)==0&j>>>0>g>>>0)){a=9;break}m=d+(a>>3)|0;n=l[m>>0]|0;g=Gg(g|0,0,a&7|0)|0;j=M;n=g|n;g=m;m=g;i[m>>0]=n;i[m+1>>0]=n>>8;i[m+2>>0]=n>>16;i[m+3>>0]=n>>24;g=g+4|0;i[g>>0]=j;i[g+1>>0]=j>>8;i[g+2>>0]=j>>16;i[g+3>>0]=j>>24;a=a+(f&255)|0;k[c>>2]=a;e=e+1|0;if((e|0)>=(h|0)){a=11;break}}if((a|0)==9)Aa(190080,190104,52,190128);else if((a|0)==11)return}function Vd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,n=0,o=0,p=0,q=0,r=0,s=0;g=k[a+4>>2]|0;o=k[a>>2]|0;if((g|0)==(o|0))return;n=k[d>>2]|0;j=g-o|0;a=k[b>>2]|0;h=0;while(1){d=l[o+h>>0]|0;b=i[c+d>>0]|0;g=m[n+(d<<1)>>1]|0;p=Gg(1,0,b&255|0)|0;q=M;if(!(q>>>0>0|(q|0)==0&p>>>0>g>>>0)){a=4;break}p=k[e>>2]|0;r=f+(p>>3)|0;s=l[r>>0]|0;g=Gg(g|0,0,p&7|0)|0;q=M;s=g|s;g=r;r=g;i[r>>0]=s;i[r+1>>0]=s>>8;i[r+2>>0]=s>>16;i[r+3>>0]=s>>24;g=g+4|0;i[g>>0]=q;i[g+1>>0]=q>>8;i[g+2>>0]=q>>16;i[g+3>>0]=q>>24;b=p+(b&255)|0;k[e>>2]=b;if((d|0)==17){g=i[a+h>>0]|0;if((g&255)>=8){a=10;break}p=f+(b>>3)|0;r=l[p>>0]|0;q=Gg(g&255|0,0,b&7|0)|0;d=M;q=r|q;g=p;p=g;i[p>>0]=q;i[p+1>>0]=q>>8;i[p+2>>0]=q>>16;i[p+3>>0]=q>>24;g=g+4|0;i[g>>0]=d;i[g+1>>0]=d>>8;i[g+2>>0]=d>>16;i[g+3>>0]=d>>24;k[e>>2]=b+3}else if((d|0)==16){g=i[a+h>>0]|0;if((g&255)>=4){a=7;break}p=f+(b>>3)|0;r=l[p>>0]|0;q=Gg(g&255|0,0,b&7|0)|0;d=M;q=r|q;g=p;p=g;i[p>>0]=q;i[p+1>>0]=q>>8;i[p+2>>0]=q>>16;i[p+3>>0]=q>>24;g=g+4|0;i[g>>0]=d;i[g+1>>0]=d>>8;i[g+2>>0]=d>>16;i[g+3>>0]=d>>24;k[e>>2]=b+2}h=h+1|0;if(h>>>0>=j>>>0){a=13;break}}if((a|0)==4)Aa(190080,190104,52,190128);else if((a|0)==7)Aa(190080,190104,52,190128);else if((a|0)==10)Aa(190080,190104,52,190128);else if((a|0)==13)return}function Wd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,r=0;h=k[e>>2]|0;g=f+(h>>3)|0;n=l[g>>0]|0;o=Gg(1,0,h&7|0)|0;j=M;n=o|n;o=g;i[o>>0]=n;i[o+1>>0]=n>>8;i[o+2>>0]=n>>16;i[o+3>>0]=n>>24;g=g+4|0;i[g>>0]=j;i[g+1>>0]=j>>8;i[g+2>>0]=j>>16;i[g+3>>0]=j>>24;g=h+2|0;k[e>>2]=g;j=c+-1|0;if(j>>>0>=4)Aa(190080,190104,52,190128);o=f+(g>>3)|0;m=l[o>>0]|0;j=Gg(j|0,((j|0)<0)<<31>>31|0,g&7|0)|0;n=M;j=m|j;m=o;i[m>>0]=j;i[m+1>>0]=j>>8;i[m+2>>0]=j>>16;i[m+3>>0]=j>>24;o=o+4|0;i[o>>0]=n;i[o+1>>0]=n>>8;i[o+2>>0]=n>>16;i[o+3>>0]=n>>24;k[e>>2]=h+4;o=0;do{h=o;o=o+1|0;if((o|0)<(c|0)){h=b+(h<<2)|0;j=k[h>>2]|0;g=o;do{n=b+(g<<2)|0;m=k[n>>2]|0;if((l[a+m>>0]|0)<(l[a+j>>0]|0)){k[n>>2]=j;k[h>>2]=m;j=m}g=g+1|0}while((g|0)!=(c|0));}}while((o|0)!=(c|0));if((c|0)==2){g=k[b>>2]|0;h=((g|0)<0)<<31>>31;m=Gg(1,0,d|0)|0;n=M;if(!(n>>>0>h>>>0|(n|0)==(h|0)&m>>>0>g>>>0))Aa(190080,190104,52,190128);j=k[e>>2]|0;a=f+(j>>3)|0;c=l[a>>0]|0;h=Gg(g|0,h|0,j&7|0)|0;g=M;c=h|c;h=a;a=h;i[a>>0]=c;i[a+1>>0]=c>>8;i[a+2>>0]=c>>16;i[a+3>>0]=c>>24;h=h+4|0;i[h>>0]=g;i[h+1>>0]=g>>8;i[h+2>>0]=g>>16;i[h+3>>0]=g>>24;j=j+d|0;k[e>>2]=j;h=k[b+4>>2]|0;g=((h|0)<0)<<31>>31;if(!(n>>>0>g>>>0|(n|0)==(g|0)&m>>>0>h>>>0))Aa(190080,190104,52,190128);b=f+(j>>3)|0;c=l[b>>0]|0;o=Gg(h|0,g|0,j&7|0)|0;a=M;o=c|o;c=b;i[c>>0]=o;i[c+1>>0]=o>>8;i[c+2>>0]=o>>16;i[c+3>>0]=o>>24;b=b+4|0;i[b>>0]=a;i[b+1>>0]=a>>8;i[b+2>>0]=a>>16;i[b+3>>0]=a>>24;k[e>>2]=j+d;return}j=k[b>>2]|0;h=((j|0)<0)<<31>>31;o=Gg(1,0,d|0)|0;n=M;if(!(n>>>0>h>>>0|(n|0)==(h|0)&o>>>0>j>>>0))Aa(190080,190104,52,190128);g=k[e>>2]|0;m=f+(g>>3)|0;p=l[m>>0]|0;j=Gg(j|0,h|0,g&7|0)|0;h=M;p=j|p;j=m;m=j;i[m>>0]=p;i[m+1>>0]=p>>8;i[m+2>>0]=p>>16;i[m+3>>0]=p>>24;j=j+4|0;i[j>>0]=h;i[j+1>>0]=h>>8;i[j+2>>0]=h>>16;i[j+3>>0]=h>>24;j=g+d|0;k[e>>2]=j;h=k[b+4>>2]|0;g=((h|0)<0)<<31>>31;if(!(n>>>0>g>>>0|(n|0)==(g|0)&o>>>0>h>>>0))Aa(190080,190104,52,190128);m=f+(j>>3)|0;q=l[m>>0]|0;p=Gg(h|0,g|0,j&7|0)|0;g=M;p=q|p;h=m;m=h;i[m>>0]=p;i[m+1>>0]=p>>8;i[m+2>>0]=p>>16;i[m+3>>0]=p>>24;h=h+4|0;i[h>>0]=g;i[h+1>>0]=g>>8;i[h+2>>0]=g>>16;i[h+3>>0]=g>>24;j=j+d|0;k[e>>2]=j;h=k[b+8>>2]|0;g=((h|0)<0)<<31>>31;if(!(n>>>0>g>>>0|(n|0)==(g|0)&o>>>0>h>>>0))Aa(190080,190104,52,190128);q=f+(j>>3)|0;r=l[q>>0]|0;p=Gg(h|0,g|0,j&7|0)|0;m=M;p=r|p;g=q;h=g;i[h>>0]=p;i[h+1>>0]=p>>8;i[h+2>>0]=p>>16;i[h+3>>0]=p>>24;g=g+4|0;i[g>>0]=m;i[g+1>>0]=m>>8;i[g+2>>0]=m>>16;i[g+3>>0]=m>>24;g=j+d|0;k[e>>2]=g;if((c|0)==3)return;j=k[b+12>>2]|0;h=((j|0)<0)<<31>>31;if(!(n>>>0>h>>>0|(n|0)==(h|0)&o>>>0>j>>>0))Aa(190080,190104,52,190128);c=f+(g>>3)|0;n=l[c>>0]|0;m=Gg(j|0,h|0,g&7|0)|0;o=M;m=n|m;n=c;i[n>>0]=m;i[n+1>>0]=m>>8;i[n+2>>0]=m>>16;i[n+3>>0]=m>>24;c=c+4|0;i[c>>0]=o;i[c+1>>0]=o>>8;i[c+2>>0]=o>>16;i[c+3>>0]=o>>24;d=g+d|0;k[e>>2]=d;c=f+(d>>3)|0;o=l[c>>0]|0;b=Gg((i[a+(k[b>>2]|0)>>0]|0)==1|0,0,d&7|0)|0;a=M;o=b|o;b=c;c=b;i[c>>0]=o;i[c+1>>0]=o>>8;i[c+2>>0]=o>>16;i[c+3>>0]=o>>24;b=b+4|0;i[b>>0]=a;i[b+1>>0]=a>>8;i[b+2>>0]=a>>16;i[b+3>>0]=a>>24;k[e>>2]=d+1;return}function Xd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0;v=r;r=r+144|0;t=v+100|0;p=v+88|0;q=v+16|0;n=v+112|0;o=v;k[t>>2]=0;u=t+4|0;k[u>>2]=0;k[t+8>>2]=0;k[p>>2]=0;s=p+4|0;k[s>>2]=0;k[p+8>>2]=0;h=Af(256)|0;m=h;k[t>>2]=m;k[u>>2]=m;k[t+8>>2]=h+256;h=Af(256)|0;m=h;k[p>>2]=m;k[s>>2]=m;k[p+8>>2]=h+256;Se(a,b,t,p);h=q;m=h+72|0;do{k[h>>2]=0;h=h+4|0}while((h|0)<(m|0));a=k[u>>2]|0;e=k[t>>2]|0;if((a|0)==(e|0)){e=0;a=0;b=0}else{b=a-e|0;a=0;do{m=q+((l[e+a>>0]|0)<<2)|0;k[m>>2]=(k[m>>2]|0)+1;a=a+1|0}while(a>>>0<b>>>0);e=0;a=0;b=0}do{if(k[q+(a<<2)>>2]|0)if(b){if((b|0)==1){b=2;break}}else{e=a;b=1}a=a+1|0}while((a|0)<18);h=n;m=h+18|0;do{i[h>>0]=0;h=h+1|0}while((h|0)<(m|0));k[o>>2]=0;a=o+4|0;k[a>>2]=0;k[o+8>>2]=0;f=Af(36)|0;k[o>>2]=f;g=f+36|0;k[o+8>>2]=g;h=f;m=h+36|0;do{j[h>>1]=0;h=h+2|0}while((h|0)<(m|0));k[a>>2]=g;Oe(q,18,5,n);Te(n,18,f);Ud(b,n,c,d);if((b|0)==1)i[n+e>>0]=0;Vd(t,p,n,o,c,d);k[a>>2]=f;Df(f);a=k[p>>2]|0;if(a){if((k[s>>2]|0)!=(a|0))k[s>>2]=a;Df(a);}a=k[t>>2]|0;if(!a){r=v;return}if((k[u>>2]|0)!=(a|0))k[u>>2]=a;Df(a);r=v;return}function Yd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,m=0,n=0,o=0,p=0;p=r;r=r+16|0;o=p;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;k[o+12>>2]=0;if(b){j=0;h=0;while(1){if(k[a+(h<<2)>>2]|0){if((j|0)>=4){if((j|0)>4){h=j;break}}else k[o+(j<<2)>>2]=h;j=j+1|0}h=h+1|0;if(h>>>0>=b>>>0){h=j;break}}j=b+-1|0;if(!j){j=h;m=0}else{g=h;n=9}}else{j=-1;g=0;n=9}if((n|0)==9){h=0;do{j=j>>1;h=h+1|0}while((j|0)!=0);j=g;m=h}if((j|0)<2){j=k[e>>2]|0;g=f+(j>>3)|0;a=l[g>>0]|0;b=Gg(1,0,j&7|0)|0;h=M;a=b|a;b=g;i[b>>0]=a;i[b+1>>0]=a>>8;i[b+2>>0]=a>>16;i[b+3>>0]=a>>24;g=g+4|0;i[g>>0]=h;i[g+1>>0]=h>>8;i[g+2>>0]=h>>16;i[g+3>>0]=h>>24;j=j+4|0;k[e>>2]=j;g=k[o>>2]|0;h=((g|0)<0)<<31>>31;o=Gg(1,0,m|0)|0;b=M;if(!(b>>>0>h>>>0|(b|0)==(h|0)&o>>>0>g>>>0))Aa(190080,190104,52,190128);o=f+(j>>3)|0;a=l[o>>0]|0;c=Gg(g|0,h|0,j&7|0)|0;b=M;c=a|c;a=o;i[a>>0]=c;i[a+1>>0]=c>>8;i[a+2>>0]=c>>16;i[a+3>>0]=c>>24;o=o+4|0;i[o>>0]=b;i[o+1>>0]=b>>8;i[o+2>>0]=b>>16;i[o+3>>0]=b>>24;k[e>>2]=j+m;r=p;return}Oe(a,b,15,c);Te(c,b,d);if((j|0)<5){Wd(c,o,j,m,e,f);r=p;return}else{Xd(c,b,e,f);r=p;return}}function Zd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+32|0;p=q+12|0;o=q;d=k[b>>2]|0;i=b+4|0;f=k[i>>2]|0;if((d|0)==(f|0)){ge(a,b);r=q;return}e=d+4|0;if((e|0)==(f|0))e=d;else{c=e;e=d;do{l=(k[d>>2]|0)<(k[c>>2]|0);e=l?c:e;d=l?c:d;c=c+4|0}while((c|0)!=(f|0));}e=(k[e>>2]|0)+1|0;k[p>>2]=0;l=p+4|0;k[l>>2]=0;k[p+8>>2]=0;if(e){if(e>>>0>1073741823)yf(p);j=e<<2;c=Af(j)|0;k[p>>2]=c;e=c+(e<<2)|0;k[p+8>>2]=e;Fg(c|0,0,j|0)|0;k[l>>2]=e;if((e|0)!=(c|0)){e=e-c>>2;d=0;do{k[c+(d<<2)>>2]=d;d=d+1|0}while(d>>>0<e>>>0);}}e=k[i>>2]|0;d=k[b>>2]|0;c=e-d|0;f=c>>2;k[o>>2]=0;j=o+4|0;k[j>>2]=0;k[o+8>>2]=0;do if(f)if(f>>>0>1073741823)yf(o);else{n=Af(c)|0;k[o>>2]=n;h=n+(f<<2)|0;k[o+8>>2]=h;Fg(n|0,0,c|0)|0;k[j>>2]=h;h=k[i>>2]|0;m=k[b>>2]|0;break}else{h=e;m=d;n=0}while(0);a:do if((h|0)!=(m|0)){f=k[l>>2]|0;b=k[p>>2]|0;i=h-m>>2;h=f-b>>2;if((f|0)==(b|0)){e=f+-4|0;d=0;while(1){k[n+(d<<2)>>2]=-1;k[f>>2]=k[e>>2];d=d+1|0;if(d>>>0>=i>>>0)break a}}c=b+-4|0;g=0;do{f=k[m+(g<<2)>>2]|0;e=0;while(1){if((k[b+(e<<2)>>2]|0)==(f|0)){d=24;break}e=e+1|0;if(e>>>0>=h>>>0){d=23;break}}if((d|0)==23){k[n+(g<<2)>>2]=-1;f=k[c>>2]|0}else if((d|0)==24){k[n+(g<<2)>>2]=e;f=k[b+(e<<2)>>2]|0;if((e|0)>0)do{d=e;e=e+-1|0;k[b+(d<<2)>>2]=k[b+(e<<2)>>2]}while((d|0)>1);}k[b>>2]=f;g=g+1|0}while(g>>>0<i>>>0);}while(0);ge(a,o);d=k[o>>2]|0;c=d;if(d){e=k[j>>2]|0;if((e|0)!=(d|0))k[j>>2]=e+(~((e+-4-c|0)>>>2)<<2);Df(d);}c=k[p>>2]|0;if(!c){r=q;return}d=k[l>>2]|0;if((d|0)!=(c|0))k[l>>2]=d+(~((d+-4-c|0)>>>2)<<2);Df(c);r=q;return}function _d(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;w=r;r=r+32|0;p=w+16|0;q=w+12|0;v=w+8|0;s=w+4|0;t=w;u=a+4|0;g=k[u>>2]|0;l=k[a>>2]|0;j=(g|0)==(l|0);if(j){o=k[b>>2]|0;k[b>>2]=(o|0)<0?o:0;r=w;return}i=g-l>>2;f=0;e=0;do{a:do if(f>>>0<i>>>0)do{if(!(k[l+(f<<2)>>2]|0))break a;f=f+1|0}while(f>>>0<i>>>0);while(0);b:do if(f>>>0<i>>>0){h=0;do{if(k[l+(f<<2)>>2]|0)break b;h=h+1|0;f=f+1|0}while(f>>>0<i>>>0);}else h=0;while(0);e=(h|0)<(e|0)?e:h}while(f>>>0<i>>>0);if((e|0)>0)e=(ka(e|0)|0)^31;else e=0;o=k[b>>2]|0;k[b>>2]=(o|0)<(e|0)?o:e;if(j){r=w;return}j=c+4|0;m=c+8|0;n=d+4|0;o=d+8|0;e=l;i=0;while(1){h=k[e+(i<<2)>>2]|0;c:do if(!h){h=i+1|0;f=g-e>>2;if(h>>>0<f>>>0){g=1;do{if(k[e+(h<<2)>>2]|0)break;g=g+1|0;h=h+1|0}while(h>>>0<f>>>0);f=g+i|0;if(!g)break}else{f=i+1|0;g=1}e=k[b>>2]|0;while(1){if((g|0)<(2<<e|0))break;h=k[j>>2]|0;if((h|0)==(k[m>>2]|0))Zc(c,b);else{k[h>>2]=e;k[j>>2]=h+4}e=(1<<k[b>>2])+-1|0;k[t>>2]=e;h=k[n>>2]|0;if((h|0)==(k[o>>2]|0))Zc(d,t);else{k[h>>2]=e;k[n>>2]=h+4}e=k[b>>2]|0;g=g+1+(-2<<e)|0;if(!g)break c}h=(ka(g|0)|0)^31;k[v>>2]=h;e=k[j>>2]|0;if((e|0)==(k[m>>2]|0))Zc(c,v);else{k[e>>2]=h;k[j>>2]=e+4}e=g-(1<<h)|0;k[s>>2]=e;g=k[n>>2]|0;if((g|0)==(k[o>>2]|0)){Zc(d,s);break}else{k[g>>2]=e;k[n>>2]=g+4;break}}else{f=(k[b>>2]|0)+h|0;k[p>>2]=f;e=k[j>>2]|0;if((e|0)==(k[m>>2]|0))Zc(c,p);else{k[e>>2]=f;k[j>>2]=e+4}k[q>>2]=0;f=k[n>>2]|0;if((f|0)==(k[o>>2]|0))Zc(d,q);else{k[f>>2]=0;k[n>>2]=f+4}f=i+1|0}while(0);g=k[u>>2]|0;e=k[a>>2]|0;if(f>>>0>=g-e>>2>>>0)break;else i=f}r=w;return}function $d(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0;u=r;r=r+1136|0;t=u+1120|0;n=u+1108|0;s=u+1104|0;o=u;h=t+4|0;i=t+8|0;j=n+4|0;l=n+8|0;m=o+1088|0;b=0;p=1;q=0;f=2147483647;while(1){k[t>>2]=0;k[h>>2]=0;k[i>>2]=0;k[n>>2]=0;k[j>>2]=0;k[l>>2]=0;k[s>>2]=q;_d(a,s,t,n);if((k[s>>2]|0)<(q|0))g=2;else{Fg(o|0,0,1092)|0;c=k[h>>2]|0;e=k[t>>2]|0;if((c|0)!=(e|0)){c=c-e>>2;d=0;do{g=o+(k[e+(d<<2)>>2]<<2)|0;k[g>>2]=(k[g>>2]|0)+1;k[m>>2]=(k[m>>2]|0)+1;d=d+1|0}while(d>>>0<c>>>0);}c=~~+he(o);c=(q|0)>0?c+4|0:c;if((q|0)>=1){d=1;do{c=(ia(k[o+(d<<2)>>2]|0,d)|0)+c|0;d=d+1|0}while((d|0)!=(p|0));}e=(c|0)<(f|0);g=0;b=e?q:b;f=e?c:f}e=k[n>>2]|0;d=e;if(e){c=k[j>>2]|0;if((c|0)!=(e|0))k[j>>2]=c+(~((c+-4-d|0)>>>2)<<2);Df(e);}e=k[t>>2]|0;d=e;if(e){c=k[h>>2]|0;if((c|0)!=(e|0))k[h>>2]=c+(~((c+-4-d|0)>>>2)<<2);Df(e);}q=q+1|0;if(g){c=19;break}if((q|0)>=17){c=19;break}else p=p+1|0}if((c|0)==19){r=u;return b|0}return 0}function ae(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;x=r;r=r+1984|0;w=x+1968|0;u=x+1956|0;j=x+1944|0;h=x+1940|0;n=x;p=x+1104|0;Rd(b+-1|0,c,d);if((b|0)==1){r=x;return}Zd(w,a);k[u>>2]=0;v=u+4|0;k[v>>2]=0;k[u+8>>2]=0;k[j>>2]=0;s=j+4|0;k[s>>2]=0;k[j+8>>2]=0;a=$d(w)|0;k[h>>2]=a;_d(w,h,u,j);Fg(n|0,0,1092)|0;a=k[v>>2]|0;g=k[u>>2]|0;if((a|0)!=(g|0)){e=n+1088|0;a=a-g>>2;f=0;do{o=n+(k[g+(f<<2)>>2]<<2)|0;k[o>>2]=(k[o>>2]|0)+1;k[e>>2]=(k[e>>2]|0)+1;f=f+1|0}while(f>>>0<a>>>0);}o=k[h>>2]|0;h=(o|0)>0;a=k[c>>2]|0;f=d+(a>>3)|0;y=l[f>>0]|0;e=Gg(h&1|0,0,a&7|0)|0;g=M;y=e|y;e=f;i[e>>0]=y;i[e+1>>0]=y>>8;i[e+2>>0]=y>>16;i[e+3>>0]=y>>24;f=f+4|0;i[f>>0]=g;i[f+1>>0]=g>>8;i[f+2>>0]=g>>16;i[f+3>>0]=g>>24;f=a+1|0;k[c>>2]=f;do if(h){e=o+-1|0;if(e>>>0<16){h=d+(f>>3)|0;y=l[h>>0]|0;e=Gg(e|0,((e|0)<0)<<31>>31|0,f&7|0)|0;g=M;e=y|e;f=h;i[f>>0]=e;i[f+1>>0]=e>>8;i[f+2>>0]=e>>16;i[f+3>>0]=e>>24;h=h+4|0;i[h>>0]=g;i[h+1>>0]=g>>8;i[h+2>>0]=g>>16;i[h+3>>0]=g>>24;k[c>>2]=a+5;break}else Aa(190080,190104,52,190128);}while(0);Fg(p|0,0,816)|0;Yd(n,o+b|0,p,p+272|0,c,d);f=k[v>>2]|0;a=k[u>>2]|0;a:do if((f|0)!=(a|0)){b=f-a>>2;j=k[j>>2]|0;n=0;while(1){g=a+(n<<2)|0;e=k[g>>2]|0;f=i[p+e>>0]|0;e=m[p+272+(e<<1)>>1]|0;h=Gg(1,0,f&255|0)|0;y=M;if(!(y>>>0>0|(y|0)==0&h>>>0>e>>>0)){f=13;break}h=k[c>>2]|0;z=d+(h>>3)|0;A=l[z>>0]|0;e=Gg(e|0,0,h&7|0)|0;y=M;A=e|A;e=z;z=e;i[z>>0]=A;i[z+1>>0]=A>>8;i[z+2>>0]=A>>16;i[z+3>>0]=A>>24;e=e+4|0;i[e>>0]=y;i[e+1>>0]=y>>8;i[e+2>>0]=y>>16;i[e+3>>0]=y>>24;f=h+(f&255)|0;k[c>>2]=f;h=k[g>>2]|0;if(!((h|0)<1|(h|0)>(o|0))){e=k[j+(n<<2)>>2]|0;g=((e|0)<0)<<31>>31;y=Gg(1,0,h|0)|0;z=M;if(!(z>>>0>g>>>0|(z|0)==(g|0)&y>>>0>e>>>0)){f=16;break}y=d+(f>>3)|0;A=l[y>>0]|0;z=Gg(e|0,g|0,f&7|0)|0;e=M;z=A|z;g=y;y=g;i[y>>0]=z;i[y+1>>0]=z>>8;i[y+2>>0]=z>>16;i[y+3>>0]=z>>24;g=g+4|0;i[g>>0]=e;i[g+1>>0]=e>>8;i[g+2>>0]=e>>16;i[g+3>>0]=e>>24;f=h+f|0;k[c>>2]=f}n=n+1|0;if(n>>>0>=b>>>0){q=f;t=j;break a}}if((f|0)==13)Aa(190080,190104,52,190128);else if((f|0)==16)Aa(190080,190104,52,190128);}else{q=k[c>>2]|0;t=k[j>>2]|0}while(0);f=d+(q>>3)|0;b=l[f>>0]|0;o=Gg(1,0,q&7|0)|0;p=M;b=o|b;o=f;i[o>>0]=b;i[o+1>>0]=b>>8;i[o+2>>0]=b>>16;i[o+3>>0]=b>>24;f=f+4|0;i[f>>0]=p;i[f+1>>0]=p>>8;i[f+2>>0]=p>>16;i[f+3>>0]=p>>24;k[c>>2]=q+1;f=t;if(t){a=k[s>>2]|0;if((a|0)!=(t|0))k[s>>2]=a+(~((a+-4-f|0)>>>2)<<2);Df(t);a=k[u>>2]|0}f=a;if(a){e=k[v>>2]|0;if((e|0)!=(a|0))k[v>>2]=e+(~((e+-4-f|0)>>>2)<<2);Df(a);}a=k[w>>2]|0;if(!a){r=x;return}e=w+4|0;f=k[e>>2]|0;if((f|0)!=(a|0))k[e>>2]=f+(~((f+-4-a|0)>>>2)<<2);Df(a);r=x;return}function be(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,n=0;do if((b|0)>0){e=k[(k[a>>2]|0)+(b<<2)>>2]|0;f=i[(k[a+48>>2]|0)+e>>0]|0;e=m[(k[a+60>>2]|0)+(e<<1)>>1]|0;g=Gg(1,0,f&255|0)|0;h=M;if(h>>>0>0|(h|0)==0&g>>>0>e>>>0){g=k[c>>2]|0;j=d+(g>>3)|0;n=l[j>>0]|0;e=Gg(e|0,0,g&7|0)|0;h=M;n=e|n;e=j;j=e;i[j>>0]=n;i[j+1>>0]=n>>8;i[j+2>>0]=n>>16;i[j+3>>0]=n>>24;e=e+4|0;i[e>>0]=h;i[e+1>>0]=h>>8;i[e+2>>0]=h>>16;i[e+3>>0]=h>>24;k[c>>2]=g+(f&255);break}else Aa(190080,190104,52,190128);}while(0);f=k[(k[a+12>>2]|0)+(b<<2)>>2]|0;e=i[(k[a+72>>2]|0)+f>>0]|0;f=m[(k[a+84>>2]|0)+(f<<1)>>1]|0;g=Gg(1,0,e&255|0)|0;h=M;if(!(h>>>0>0|(h|0)==0&g>>>0>f>>>0))Aa(190080,190104,52,190128);g=k[c>>2]|0;h=d+(g>>3)|0;n=l[h>>0]|0;j=Gg(f|0,0,g&7|0)|0;f=M;n=j|n;j=h;i[j>>0]=n;i[j+1>>0]=n>>8;i[j+2>>0]=n>>16;i[j+3>>0]=n>>24;h=h+4|0;i[h>>0]=f;i[h+1>>0]=f>>8;i[h+2>>0]=f>>16;i[h+3>>0]=f>>24;g=g+(e&255)|0;k[c>>2]=g;h=k[(k[a+24>>2]|0)+(b<<2)>>2]|0;f=k[(k[a+36>>2]|0)+(b<<2)>>2]|0;e=((f|0)<0)<<31>>31;b=Gg(1,0,h|0)|0;a=M;if(a>>>0>e>>>0|(a|0)==(e|0)&b>>>0>f>>>0){b=d+(g>>3)|0;d=l[b>>0]|0;a=Gg(f|0,e|0,g&7|0)|0;f=M;a=d|a;e=b;b=e;i[b>>0]=a;i[b+1>>0]=a>>8;i[b+2>>0]=a>>16;i[b+3>>0]=a>>24;e=e+4|0;i[e>>0]=f;i[e+1>>0]=f>>8;i[e+2>>0]=f>>16;i[e+3>>0]=f>>24;k[c>>2]=h+g;return}else Aa(190080,190104,52,190128);}function ce(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;F=r;r=r+16|0;D=F;n=(k[a+4>>2]|0)-(k[a>>2]|0)|0;B=n>>2;C=c+2|0;k[D>>2]=0;E=D+4|0;k[E>>2]=0;k[D+8>>2]=0;do if(C)if(C>>>0>1073741823)yf(D);else{z=C<<2;y=Af(z)|0;k[D>>2]=y;A=y+(C<<2)|0;k[D+8>>2]=A;Fg(y|0,0,z|0)|0;k[E>>2]=A;break}while(0);A=Af(104)|0;h=A;g=h+104|0;do{k[h>>2]=0;h=h+4|0}while((h|0)<(g|0));j=d+4|0;i=k[j>>2]|0;h=k[d>>2]|0;g=i-h>>2;if(B>>>0<=g>>>0){if(B>>>0<g>>>0?(l=h+(B<<2)|0,(i|0)!=(l|0)):0)k[j>>2]=i+(~((i+-4-l|0)>>>2)<<2);}else hd(d,B-g|0);q=d+12|0;j=d+16|0;i=k[j>>2]|0;h=k[q>>2]|0;g=i-h>>2;if(B>>>0<=g>>>0){if(B>>>0<g>>>0?(m=h+(B<<2)|0,(i|0)!=(m|0)):0)k[j>>2]=i+(~((i+-4-m|0)>>>2)<<2);}else hd(q,B-g|0);p=d+24|0;j=d+28|0;i=k[j>>2]|0;h=k[p>>2]|0;g=i-h>>2;if(B>>>0<=g>>>0){if(B>>>0<g>>>0?(v=h+(B<<2)|0,(i|0)!=(v|0)):0)k[j>>2]=i+(~((i+-4-v|0)>>>2)<<2);}else hd(p,B-g|0);l=d+36|0;j=d+40|0;i=k[j>>2]|0;h=k[l>>2]|0;g=i-h>>2;if(B>>>0<=g>>>0){if(B>>>0<g>>>0?(u=h+(B<<2)|0,(i|0)!=(u|0)):0)k[j>>2]=i+(~((i+-4-u|0)>>>2)<<2);}else hd(l,B-g|0);z=d+48|0;j=d+52|0;i=k[j>>2]|0;h=k[z>>2]|0;g=i-h|0;if(C>>>0<=g>>>0){if(C>>>0<g>>>0?(w=h+C|0,(i|0)!=(w|0)):0)k[j>>2]=w}else Fb(z,C-g|0);y=d+60|0;j=d+64|0;i=k[j>>2]|0;g=k[y>>2]|0;h=i-g>>1;if(C>>>0<=h>>>0){if(C>>>0<h>>>0?(x=g+(C<<1)|0,(i|0)!=(x|0)):0)k[j>>2]=i+(~((i+-2-x|0)>>>1)<<1);}else ie(y,C-h|0);x=d+72|0;h=d+76|0;g=k[h>>2]|0;i=k[x>>2]|0;j=g-i|0;if(j>>>0>=26){if(j>>>0>26?(t=i+26|0,(g|0)!=(t|0)):0)k[h>>2]=t}else Fb(x,26-j|0);w=d+84|0;j=d+88|0;i=k[j>>2]|0;h=k[w>>2]|0;g=i-h>>1;if(g>>>0>=26){if(g>>>0>26?(s=h+52|0,(i|0)!=(s|0)):0)k[j>>2]=i+(~((i+-2-s|0)>>>1)<<1);}else ie(w,26-g|0);if((n|0)>0){t=k[a>>2]|0;u=k[d>>2]|0;v=k[D>>2]|0;s=k[b>>2]|0;q=k[q>>2]|0;p=k[p>>2]|0;n=k[l>>2]|0;b=0;o=1;j=0;while(1){a=k[t+(b<<2)>>2]|0;if((a|0)==(o+1|0))j=1;else j=(a|0)==(j|0)?0:a+2|0;k[u+(b<<2)>>2]=j;if((b|0)>0){g=v+(j<<2)|0;k[g>>2]=(k[g>>2]|0)+1}i=k[s+(b<<2)>>2]|0;h=q+(b<<2)|0;g=p+(b<<2)|0;m=n+(b<<2)|0;k[h>>2]=0;j=0;while(1){l=j+1|0;if((k[190184+(l<<3)>>2]|0)>(i|0)){l=j;break}k[h>>2]=l;if((l|0)<25)j=l;else break}k[g>>2]=k[190184+(l<<3)+4>>2];k[m>>2]=i-(k[190184+(k[h>>2]<<3)>>2]|0);g=A+(k[h>>2]<<2)|0;k[g>>2]=(k[g>>2]|0)+1;b=b+1|0;if((b|0)>=(B|0))break;else{j=o;o=a}}}Rd(c+-1|0,e,f);if((c|0)>1){Yd(k[D>>2]|0,C,k[z>>2]|0,k[y>>2]|0,e,f);Yd(A,26,k[x>>2]|0,k[w>>2]|0,e,f);be(d,0,e,f);}Df(A);g=k[D>>2]|0;if(!g){r=F;return}h=k[E>>2]|0;if((h|0)!=(g|0))k[E>>2]=h+(~((h+-4-g|0)>>>2)<<2);Df(g);r=F;return}function de(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;x=r;r=r+48|0;v=x+24|0;u=x+12|0;t=x;Rd(a+-1|0,c,d);if((a|0)<=1){r=x;return}p=b+-1|0;n=(1<<p)+-1|0;j=p+a|0;k[v>>2]=0;w=v+4|0;k[w>>2]=0;k[v+8>>2]=0;do if(j){if(j>>>0>1073741823)yf(v);e=j<<2;h=Af(e)|0;k[v>>2]=h;g=h+(j<<2)|0;k[v+8>>2]=g;Fg(h|0,0,e|0)|0;k[w>>2]=g;k[u>>2]=0;g=u+4|0;k[g>>2]=0;k[u+8>>2]=0;e=(j|0)<0;if(e)yf(u);f=Af(j)|0;k[g>>2]=f;k[u>>2]=f;k[u+8>>2]=f+j;h=j;do{i[f>>0]=0;f=(k[g>>2]|0)+1|0;k[g>>2]=f;h=h+-1|0}while((h|0)!=0);k[t>>2]=0;h=t+4|0;k[h>>2]=0;k[t+8>>2]=0;if(e)yf(t);else{q=j<<1;g=Af(q)|0;k[t>>2]=g;o=g+(j<<1)|0;k[t+8>>2]=o;Fg(g|0,0,q|0)|0;k[h>>2]=o;o=u;q=t;break}}else{k[u>>2]=0;k[u+4>>2]=0;k[u+8>>2]=0;k[t>>2]=0;k[t+4>>2]=0;k[t+8>>2]=0;o=u;q=t}while(0);h=k[c>>2]|0;g=d+(h>>3)|0;y=l[g>>0]|0;e=Gg(1,0,h&7|0)|0;f=M;y=e|y;e=g;i[e>>0]=y;i[e+1>>0]=y>>8;i[e+2>>0]=y>>16;i[e+3>>0]=y>>24;g=g+4|0;i[g>>0]=f;i[g+1>>0]=f>>8;i[g+2>>0]=f>>16;i[g+3>>0]=f>>24;g=h+1|0;k[c>>2]=g;f=b+-2|0;if(f>>>0>=16)Aa(190080,190104,52,190128);e=d+(g>>3)|0;z=l[e>>0]|0;y=Gg(f|0,((f|0)<0)<<31>>31|0,g&7|0)|0;f=M;y=z|y;g=e;e=g;i[e>>0]=y;i[e+1>>0]=y>>8;i[e+2>>0]=y>>16;i[e+3>>0]=y>>24;g=g+4|0;i[g>>0]=f;i[g+1>>0]=f>>8;i[g+2>>0]=f>>16;i[g+3>>0]=f>>24;k[c>>2]=h+5;g=k[v>>2]|0;k[g+(p<<2)>>2]=a;k[g>>2]=1;if((j|0)>(b|0)){f=b+a+-1|0;h=b;do{k[g+(h<<2)>>2]=1;h=h+1|0}while((h|0)!=(f|0));}Yd(g,j,k[o>>2]|0,k[q>>2]|0,c,d);a:do if((a|0)>0){e=((n|0)<0)<<31>>31;j=Gg(1,0,p|0)|0;b=M;if(b>>>0>e>>>0|(b|0)==(e|0)&j>>>0>n>>>0){b=0;while(1){g=(b|0)==0?0:p+b|0;h=i[(k[o>>2]|0)+g>>0]|0;g=m[(k[q>>2]|0)+(g<<1)>>1]|0;j=Gg(1,0,h&255|0)|0;f=M;if(!(f>>>0>0|(f|0)==0&j>>>0>g>>>0)){h=25;break}f=k[c>>2]|0;y=d+(f>>3)|0;z=l[y>>0]|0;g=Gg(g|0,0,f&7|0)|0;j=M;z=g|z;g=y;y=g;i[y>>0]=z;i[y+1>>0]=z>>8;i[y+2>>0]=z>>16;i[y+3>>0]=z>>24;g=g+4|0;i[g>>0]=j;i[g+1>>0]=j>>8;i[g+2>>0]=j>>16;i[g+3>>0]=j>>24;h=f+(h&255)|0;k[c>>2]=h;g=i[(k[o>>2]|0)+p>>0]|0;f=m[(k[q>>2]|0)+(p<<1)>>1]|0;j=Gg(1,0,g&255|0)|0;y=M;if(!(y>>>0>0|(y|0)==0&j>>>0>f>>>0)){h=27;break}j=d+(h>>3)|0;y=l[j>>0]|0;z=Gg(f|0,0,h&7|0)|0;f=M;z=y|z;y=j;i[y>>0]=z;i[y+1>>0]=z>>8;i[y+2>>0]=z>>16;i[y+3>>0]=z>>24;j=j+4|0;i[j>>0]=f;i[j+1>>0]=f>>8;i[j+2>>0]=f>>16;i[j+3>>0]=f>>24;h=(g&255)+h|0;j=d+(h>>3)|0;f=l[j>>0]|0;y=Gg(n|0,e|0,h&7|0)|0;g=M;y=f|y;f=j;i[f>>0]=y;i[f+1>>0]=y>>8;i[f+2>>0]=y>>16;i[f+3>>0]=y>>24;j=j+4|0;i[j>>0]=g;i[j+1>>0]=g>>8;i[j+2>>0]=g>>16;i[j+3>>0]=g>>24;h=h+p|0;k[c>>2]=h;b=b+1|0;if((b|0)>=(a|0)){s=h;break a}}if((h|0)==25)Aa(190080,190104,52,190128);else if((h|0)==27)Aa(190080,190104,52,190128);}else{h=i[k[o>>2]>>0]|0;g=m[k[q>>2]>>1]|0;a=Gg(1,0,h&255|0)|0;n=M;if(!(n>>>0>0|(n|0)==0&a>>>0>g>>>0))Aa(190080,190104,52,190128);f=k[c>>2]|0;n=d+(f>>3)|0;j=l[n>>0]|0;g=Gg(g|0,0,f&7|0)|0;a=M;j=g|j;g=n;n=g;i[n>>0]=j;i[n+1>>0]=j>>8;i[n+2>>0]=j>>16;i[n+3>>0]=j>>24;g=g+4|0;i[g>>0]=a;i[g+1>>0]=a>>8;i[g+2>>0]=a>>16;i[g+3>>0]=a>>24;f=f+(h&255)|0;k[c>>2]=f;g=i[(k[o>>2]|0)+p>>0]|0;h=m[(k[q>>2]|0)+(p<<1)>>1]|0;p=Gg(1,0,g&255|0)|0;o=M;if(o>>>0>0|(o|0)==0&p>>>0>h>>>0){p=d+(f>>3)|0;a=l[p>>0]|0;n=Gg(h|0,0,f&7|0)|0;o=M;n=a|n;a=p;i[a>>0]=n;i[a+1>>0]=n>>8;i[a+2>>0]=n>>16;i[a+3>>0]=n>>24;p=p+4|0;i[p>>0]=o;i[p+1>>0]=o>>8;i[p+2>>0]=o>>16;i[p+3>>0]=o>>24;k[c>>2]=(g&255)+f;Aa(190080,190104,52,190128);}else Aa(190080,190104,52,190128);}}else s=k[c>>2]|0;while(0);g=d+(s>>3)|0;o=l[g>>0]|0;p=Gg(1,0,s&7|0)|0;h=M;o=p|o;p=g;i[p>>0]=o;i[p+1>>0]=o>>8;i[p+2>>0]=o>>16;i[p+3>>0]=o>>24;g=g+4|0;i[g>>0]=h;i[g+1>>0]=h>>8;i[g+2>>0]=h>>16;i[g+3>>0]=h>>24;k[c>>2]=s+1;g=k[t>>2]|0;h=g;if(g){f=t+4|0;e=k[f>>2]|0;if((e|0)!=(g|0))k[f>>2]=e+(~((e+-2-h|0)>>>1)<<1);Df(g);}e=k[u>>2]|0;if(e){f=u+4|0;if((k[f>>2]|0)!=(e|0))k[f>>2]=e;Df(e);}e=k[v>>2]|0;if(!e){r=x;return}f=k[w>>2]|0;if((f|0)!=(e|0))k[w>>2]=f+(~((f+-4-e|0)>>>2)<<2);Df(e);r=x;return}function ee(a,b,c,d,e,f,g,h,m,n,o,p,q,s,t){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;m=m|0;n=n|0;o=o|0;p=p|0;q=q|0;s=s|0;t=t|0;var u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,N=0,O=0,P=0,Q=0;P=r;r=r+448|0;O=P+296|0;L=P+148|0;J=P;if(!(Sd(g,c,s,t)|0)){I=0;r=P;return I|0}if(!c){I=(k[s>>2]|0)+7|0;k[s>>2]=I&-8;i[t+(I>>3)>>0]=0;I=1;r=P;return I|0}D=k[q>>2]|0;E=q+4|0;F=q+16|0;k[O>>2]=256;k[O+4>>2]=D;k[O+8>>2]=E;k[O+12>>2]=F;N=O+16|0;w=O+116|0;y=N;z=y+100|0;do{k[y>>2]=0;y=y+4|0}while((y|0)<(z|0));c=k[F>>2]|0;if((c|0)==(k[q+20>>2]|0))c=0;else c=k[c>>2]|0;k[w>>2]=c;B=O+120|0;k[B>>2]=0;k[B+4>>2]=0;k[B+8>>2]=0;k[B+12>>2]=0;k[B+16>>2]=0;k[B+20>>2]=0;k[B+24>>2]=0;B=k[q+28>>2]|0;x=q+44|0;k[L>>2]=704;A=L+4|0;k[A>>2]=B;B=L+8|0;k[B>>2]=q+32;C=L+12|0;k[C>>2]=x;K=L+16|0;w=L+116|0;y=K;z=y+100|0;do{k[y>>2]=0;y=y+4|0}while((y|0)<(z|0));c=k[x>>2]|0;if((c|0)==(k[q+48>>2]|0))c=0;else c=k[c>>2]|0;k[w>>2]=c;w=L+120|0;k[w>>2]=0;k[w+4>>2]=0;k[w+8>>2]=0;k[w+12>>2]=0;k[w+16>>2]=0;k[w+20>>2]=0;k[w+24>>2]=0;w=k[q+56>>2]|0;x=q+72|0;k[J>>2]=h+16+(48<<m);c=J+4|0;k[c>>2]=w;w=J+8|0;k[w>>2]=q+60;v=J+12|0;k[v>>2]=x;I=J+16|0;u=J+116|0;y=I;z=y+100|0;do{k[y>>2]=0;y=y+4|0}while((y|0)<(z|0));x=k[x>>2]|0;if((x|0)==(k[q+76>>2]|0))x=0;else x=k[x>>2]|0;k[u>>2]=x;H=J+120|0;k[H>>2]=0;k[H+4>>2]=0;k[H+8>>2]=0;k[H+12>>2]=0;k[H+16>>2]=0;k[H+20>>2]=0;k[H+24>>2]=0;ce(E,F,D,N,s,t);ce(k[B>>2]|0,k[C>>2]|0,k[A>>2]|0,K,s,t);ce(k[w>>2]|0,k[v>>2]|0,k[c>>2]|0,I,s,t);if(m>>>0>=4)Aa(190080,190104,52,190128);w=k[s>>2]|0;v=t+(w>>3)|0;G=l[v>>0]|0;H=Gg(m|0,((m|0)<0)<<31>>31|0,w&7|0)|0;c=M;G=H|G;H=v;i[H>>0]=G;i[H+1>>0]=G>>8;i[H+2>>0]=G>>16;i[H+3>>0]=G>>24;v=v+4|0;i[v>>0]=c;i[v+1>>0]=c>>8;i[v+2>>0]=c>>16;i[v+3>>0]=c>>24;v=w+2|0;k[s>>2]=v;c=h>>m;if(c>>>0>=16)Aa(190080,190104,52,190128);G=t+(v>>3)|0;m=l[G>>0]|0;h=Gg(c|0,((c|0)<0)<<31>>31|0,v&7|0)|0;H=M;h=m|h;c=G;G=c;i[G>>0]=h;i[G+1>>0]=h>>8;i[G+2>>0]=h>>16;i[G+3>>0]=h>>24;c=c+4|0;i[c>>0]=H;i[c+1>>0]=H>>8;i[c+2>>0]=H>>16;i[c+3>>0]=H>>24;c=w+6|0;k[s>>2]=c;if((k[q>>2]|0)>0){v=((n|0)<0)<<31>>31;if(n>>>0<4){w=0;do{H=t+(c>>3)|0;m=l[H>>0]|0;h=Gg(n|0,v|0,c&7|0)|0;G=M;m=h|m;h=H;i[h>>0]=m;i[h+1>>0]=m>>8;i[h+2>>0]=m>>16;i[h+3>>0]=m>>24;H=H+4|0;i[H>>0]=G;i[H+1>>0]=G>>8;i[H+2>>0]=G>>16;i[H+3>>0]=G>>24;c=c+2|0;k[s>>2]=c;w=w+1|0}while((w|0)<(k[q>>2]|0));}else Aa(190080,190104,52,190128);}G=q+84|0;H=q+88|0;v=q+108|0;c=((k[q+112>>2]|0)-(k[v>>2]|0)|0)/1040|0;if((k[G>>2]|0)==(k[H>>2]|0))de(c,6,s,t);else ae(G,c,s,t);B=q+96|0;C=q+100|0;c=q+132|0;w=((k[q+136>>2]|0)-(k[c>>2]|0)|0)/2096|0;if((k[B>>2]|0)==(k[C>>2]|0))de(w,2,s,t);else ae(B,w,s,t);ke(O,v,s,t);le(L,q+120|0,s,t);me(J,c,s,t);a:do if(p){A=(n|0)==0;w=e;c=f;q=0;m=b;while(1){h=k[o+(q<<5)>>2]|0;F=k[o+(q<<5)+4>>2]|0;E=j[o+(q<<5)+8>>1]|0;D=j[o+(q<<5)+10>>1]|0;u=o+(q<<5)+16|0;x=k[u>>2]|0;u=k[u+4>>2]|0;y=k[o+(q<<5)+24>>2]|0;z=E&65535;ne(L,z,s,t);v=u&65535;u=Jg(x|0,u|0,48)|0;b=Gg(1,0,u|0)|0;f=M;if(!(f>>>0>v>>>0|(f|0)==(v|0)&b>>>0>x>>>0)){c=27;break}b=k[s>>2]|0;e=t+(b>>3)|0;Q=l[e>>0]|0;v=Gg(x|0,v|0,b&7|0)|0;f=M;v=v|Q;x=e;e=x;i[e>>0]=v;i[e+1>>0]=v>>8;i[e+2>>0]=v>>16;i[e+3>>0]=v>>24;x=x+4|0;i[x>>0]=f;i[x+1>>0]=f>>8;i[x+2>>0]=f>>16;i[x+3>>0]=f>>24;k[s>>2]=b+u;x=(h|0)>0;b:do if((k[G>>2]|0)==(k[H>>2]|0))if(x){v=0;x=m;do{ne(O,l[a+(x&d)>>0]|0,s,t);x=x+1|0;v=v+1|0}while((v|0)<(h|0));v=w}else{v=w;x=m}else if(x){if(A){c=w;v=0;x=m;while(1){w=i[a+(x&d)>>0]|0;oe(O,w&255,c&63,G,s,t);x=x+1|0;v=v+1|0;if((v|0)>=(h|0)){v=w;break b}else c=w}}else{u=0;x=m}while(1){if((n|0)==3)c=((l[316128+(w&255)>>0]|0)<<3)+(l[316128+(c&255)>>0]|0)&255;else if((n|0)==2)c=i[315616+(c&255|256)>>0]|i[315616+(w&255)>>0];else if((n|0)==1)c=(w&255)>>>2;else c=0;v=i[a+(x&d)>>0]|0;oe(O,v&255,c&255,G,s,t);x=x+1|0;u=u+1|0;if((u|0)>=(h|0)){c=w;break}else{c=w;w=v}}}else{v=w;x=m}while(0);m=x+F|0;if((F|0)>0){c=i[a+(m+-2&d)>>0]|0;w=i[a+(m+-1&d)>>0]|0;if((E&65535)>127){u=D&65535;x=y>>>24;v=y&16777215;if((k[B>>2]|0)==(k[C>>2]|0))ne(J,u,s,t);else{f=z>>>6;b=z&7;pe(J,u,b>>>0<3&((f|0)==7|((f|0)==4|(f&1021|0)==0))?b:3,B,s,t);}b=Gg(1,0,x|0)|0;f=M;if(!(f>>>0>0|(f|0)==0&b>>>0>v>>>0)){c=45;break}b=k[s>>2]|0;f=t+(b>>3)|0;F=l[f>>0]|0;h=Gg(v|0,0,b&7|0)|0;e=M;F=h|F;h=f;i[h>>0]=F;i[h+1>>0]=F>>8;i[h+2>>0]=F>>16;i[h+3>>0]=F>>24;f=f+4|0;i[f>>0]=e;i[f+1>>0]=e>>8;i[f+2>>0]=e>>16;i[f+3>>0]=e>>24;k[s>>2]=b+x}}else w=v;q=q+1|0;if(q>>>0>=p>>>0)break a}if((c|0)==27)Aa(190080,190104,52,190128);else if((c|0)==45)Aa(190080,190104,52,190128);}while(0);if(g){H=(k[s>>2]|0)+7|0;k[s>>2]=H&-8;i[t+(H>>3)>>0]=0}c=k[J+136>>2]|0;w=c;if(c){v=J+140|0;u=k[v>>2]|0;if((u|0)!=(c|0))k[v>>2]=u+(~((u+-2-w|0)>>>1)<<1);Df(c);}w=k[J+124>>2]|0;if(w){c=J+128|0;if((k[c>>2]|0)!=(w|0))k[c>>2]=w;Df(w);}je(I);c=k[L+136>>2]|0;w=c;if(c){v=L+140|0;u=k[v>>2]|0;if((u|0)!=(c|0))k[v>>2]=u+(~((u+-2-w|0)>>>1)<<1);Df(c);}u=k[L+124>>2]|0;if(u){v=L+128|0;if((k[v>>2]|0)!=(u|0))k[v>>2]=u;Df(u);}je(K);v=k[O+136>>2]|0;u=v;if(v){w=O+140|0;c=k[w>>2]|0;if((c|0)!=(v|0))k[w>>2]=c+(~((c+-2-u|0)>>>1)<<1);Df(v);}v=k[O+124>>2]|0;if(v){u=O+128|0;if((k[u>>2]|0)!=(v|0))k[u>>2]=v;Df(v);}je(N);I=1;r=P;return I|0}function fe(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,m=0;if(!(Td(e,f,g)|0)){h=0;return h|0}m=(k[f>>2]|0)+7|0;h=m&-8;k[f>>2]=h;i[g+(m>>3)>>0]=0;j=d&c;c=d+1|0;if((j+e|0)>>>0>c>>>0){c=c-j|0;Kg(g+(m>>3)|0,b+j|0,c|0)|0;h=h+(c<<3)|0;k[f>>2]=h;e=e-c|0;j=0}Kg(g+(h>>3)|0,b+j|0,e|0)|0;h=h+(e<<3)|0;k[f>>2]=h;if(h&7)Aa(190392,190104,85,190408);j=g+(h>>3)|0;i[j>>0]=0;if(!a){h=1;return h|0}c=j;j=c;i[j>>0]=1;i[j+1>>0]=0;i[j+2>>0]=0;i[j+3>>0]=0;c=c+4|0;i[c>>0]=0;i[c+1>>0]=0;i[c+2>>0]=0;i[c+3>>0]=0;c=h+1|0;j=g+(c>>3)|0;d=l[j>>0]|0;c=Gg(1,0,c&7|0)|0;e=M;d=c|d;c=j;i[c>>0]=d;i[c+1>>0]=d>>8;i[c+2>>0]=d>>16;i[c+3>>0]=d>>24;j=j+4|0;i[j>>0]=e;i[j+1>>0]=e>>8;i[j+2>>0]=e>>16;i[j+3>>0]=e>>24;h=h+9|0;k[f>>2]=h&-8;i[g+(h>>3)>>0]=0;h=1;return h|0}function ge(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;k[a>>2]=0;g=a+4|0;k[g>>2]=0;k[a+8>>2]=0;e=b+4|0;c=(k[e>>2]|0)-(k[b>>2]|0)|0;d=c>>2;if(!d)return;if(d>>>0>1073741823)yf(a);f=Af(c)|0;k[g>>2]=f;k[a>>2]=f;k[a+8>>2]=f+(d<<2);a=k[b>>2]|0;b=k[e>>2]|0;if((a|0)==(b|0))return;d=(b+-4-a|0)>>>2;c=f;while(1){k[c>>2]=k[a>>2];a=a+4|0;if((a|0)==(b|0))break;else c=c+4|0}k[g>>2]=f+(d+1<<2);return}function he(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;q=r;r=r+368|0;p=q;o=q+344|0;n=q+72|0;d=k[a+1088>>2]|0;if(!d){s=12.0;r=q;return +s}else{b=0;c=0}do{b=((k[a+(c<<2)>>2]|0)>0&1)+b|0;c=c+1|0}while((b|0)<5&(c|0)<272);if((b|0)==2){s=+(d+20|0);r=q;return +s}else if((b|0)==1){s=12.0;r=q;return +s}else{Fg(n|0,0,272)|0;Oe(a,272,15,n);c=0;d=0;do{c=(ia(l[n+d>>0]|0,k[a+(d<<2)>>2]|0)|0)+c|0;d=d+1|0}while((d|0)!=272);if((b|0)==3)b=c+28|0;else if((b|0)==4)b=c+37|0;else{d=p;a=d+72|0;do{k[d>>2]=0;d=d+4|0}while((d|0)<(a|0));j=p+68|0;m=p+64|0;a=0;b=1;h=8;a:while(1){g=a;while(1){e=i[n+g>>0]|0;f=e&255;b=(f|0)>(b|0)?f:b;a=g+1|0;b:do if((a|0)<272){d=1;do{if((i[n+a>>0]|0)!=e<<24>>24)break b;d=d+1|0;a=a+1|0}while((a|0)<272);}else d=1;while(0);g=d+g|0;a=e<<24>>24==0;if(a&(g|0)==272)break a;if(!a){e=g;a=d;break}if((d|0)<3)k[p>>2]=(k[p>>2]|0)+d;else{a=k[j>>2]|0;d=d+-2|0;do{a=a+1|0;d=d>>3}while((d|0)>0);k[j>>2]=a}if((g|0)>=272)break a}if((f|0)==(h|0))d=a;else{d=p+(f<<2)|0;k[d>>2]=(k[d>>2]|0)+1;d=a+-1|0}if((d|0)<3){h=p+(f<<2)|0;k[h>>2]=(k[h>>2]|0)+d}else{a=k[m>>2]|0;d=d+-2|0;do{a=a+1|0;d=d>>2}while((d|0)>0);k[m>>2]=a}if((e|0)<272){a=e;h=f}else break}d=o;a=d+18|0;do{i[d>>0]=0;d=d+1|0}while((d|0)<(a|0));Oe(p,18,7,o);D=o+16|0;i[D>>0]=(l[D>>0]|0)+2;C=o+17|0;h=(l[C>>0]|0)+3|0;i[C>>0]=h;C=ia(l[o>>0]|0,k[p>>2]|0)|0;B=ia(l[o+1>>0]|0,k[p+4>>2]|0)|0;A=ia(l[o+2>>0]|0,k[p+8>>2]|0)|0;z=ia(l[o+3>>0]|0,k[p+12>>2]|0)|0;y=ia(l[o+4>>0]|0,k[p+16>>2]|0)|0;x=ia(l[o+5>>0]|0,k[p+20>>2]|0)|0;w=ia(l[o+6>>0]|0,k[p+24>>2]|0)|0;v=ia(l[o+7>>0]|0,k[p+28>>2]|0)|0;u=ia(l[o+8>>0]|0,k[p+32>>2]|0)|0;t=ia(l[o+9>>0]|0,k[p+36>>2]|0)|0;n=ia(l[o+10>>0]|0,k[p+40>>2]|0)|0;d=ia(l[o+11>>0]|0,k[p+44>>2]|0)|0;a=ia(l[o+12>>0]|0,k[p+48>>2]|0)|0;e=ia(l[o+13>>0]|0,k[p+52>>2]|0)|0;f=ia(l[o+14>>0]|0,k[p+56>>2]|0)|0;g=ia(l[o+15>>0]|0,k[p+60>>2]|0)|0;m=ia(l[D>>0]|0,k[m>>2]|0)|0;b=c+18+(b<<1)+C+B+A+z+y+x+w+v+u+t+n+d+a+e+f+g+m+(ia(k[j>>2]|0,h&255)|0)|0}s=+(b|0);r=q;return +s}return 0.0}function ie(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;g=a+8|0;d=k[g>>2]|0;j=a+4|0;e=k[j>>2]|0;c=e;if(d-c>>1>>>0>=b>>>0){Fg(e|0,0,b<<1|0)|0;k[j>>2]=e+(b<<1);return}h=k[a>>2]|0;i=h;c=(c-i>>1)+b|0;if((c|0)<0)yf(a);l=h;f=d-l|0;f=f>>1>>>0<1073741823?(f>>>0<c>>>0?c:f):2147483647;d=e-l|0;c=d>>1;if(!f)e=0;else e=Af(f<<1)|0;Fg(e+(c<<1)|0,0,b<<1|0)|0;Kg(e|0,h|0,d|0)|0;k[a>>2]=e;k[j>>2]=e+(c+b<<1);k[g>>2]=e+(f<<1);if(!i)return;Df(i);return}function je(a){a=a|0;var b=0,c=0,d=0,e=0;d=k[a+84>>2]|0;e=d;if(d){c=a+88|0;b=k[c>>2]|0;if((b|0)!=(d|0))k[c>>2]=b+(~((b+-2-e|0)>>>1)<<1);Df(d);}b=k[a+72>>2]|0;if(b){c=a+76|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Df(b);}d=k[a+60>>2]|0;c=d;if(d){b=a+64|0;e=k[b>>2]|0;if((e|0)!=(d|0))k[b>>2]=e+(~((e+-2-c|0)>>>1)<<1);Df(d);}c=k[a+48>>2]|0;if(c){b=a+52|0;if((k[b>>2]|0)!=(c|0))k[b>>2]=c;Df(c);}e=k[a+36>>2]|0;d=e;if(e){c=a+40|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(e);}e=k[a+24>>2]|0;d=e;if(e){c=a+28|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(e);}e=k[a+12>>2]|0;d=e;if(e){c=a+16|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(e);}d=k[a>>2]|0;if(!d)return;c=a+4|0;b=k[c>>2]|0;if((b|0)!=(d|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(d);return}function ke(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;p=a+124|0;q=b+4|0;f=k[q>>2]|0;e=k[b>>2]|0;g=k[a>>2]|0;n=ia(g,(f-e|0)/1040|0)|0;l=a+128|0;j=k[l>>2]|0;i=k[p>>2]|0;h=j-i|0;if(n>>>0<=h>>>0){if(n>>>0<h>>>0?(m=i+n|0,(j|0)!=(m|0)):0)k[l>>2]=m}else{Fb(p,n-h|0);f=k[q>>2]|0;e=k[b>>2]|0;g=k[a>>2]|0}n=a+136|0;g=ia(g,(f-e|0)/1040|0)|0;h=a+140|0;i=k[h>>2]|0;j=k[n>>2]|0;l=i-j>>1;if(g>>>0<=l>>>0){if(g>>>0<l>>>0?(o=j+(g<<1)|0,(i|0)!=(o|0)):0)k[h>>2]=i+(~((i+-2-o|0)>>>1)<<1);}else{ie(n,g-l|0);f=k[q>>2]|0;e=k[b>>2]|0}if((f|0)==(e|0))return;else f=0;do{m=k[a>>2]|0;o=ia(m,f)|0;Yd(e+(f*1040|0)|0,m,(k[p>>2]|0)+o|0,(k[n>>2]|0)+(o<<1)|0,c,d);f=f+1|0;e=k[b>>2]|0}while(f>>>0<(((k[q>>2]|0)-e|0)/1040|0)>>>0);return}function le(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;p=a+124|0;q=b+4|0;f=k[q>>2]|0;e=k[b>>2]|0;g=k[a>>2]|0;n=ia(g,(f-e|0)/2832|0)|0;l=a+128|0;j=k[l>>2]|0;i=k[p>>2]|0;h=j-i|0;if(n>>>0<=h>>>0){if(n>>>0<h>>>0?(m=i+n|0,(j|0)!=(m|0)):0)k[l>>2]=m}else{Fb(p,n-h|0);f=k[q>>2]|0;e=k[b>>2]|0;g=k[a>>2]|0}n=a+136|0;g=ia(g,(f-e|0)/2832|0)|0;h=a+140|0;i=k[h>>2]|0;j=k[n>>2]|0;l=i-j>>1;if(g>>>0<=l>>>0){if(g>>>0<l>>>0?(o=j+(g<<1)|0,(i|0)!=(o|0)):0)k[h>>2]=i+(~((i+-2-o|0)>>>1)<<1);}else{ie(n,g-l|0);f=k[q>>2]|0;e=k[b>>2]|0}if((f|0)==(e|0))return;else f=0;do{m=k[a>>2]|0;o=ia(m,f)|0;Yd(e+(f*2832|0)|0,m,(k[p>>2]|0)+o|0,(k[n>>2]|0)+(o<<1)|0,c,d);f=f+1|0;e=k[b>>2]|0}while(f>>>0<(((k[q>>2]|0)-e|0)/2832|0)>>>0);return}function me(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;p=a+124|0;q=b+4|0;f=k[q>>2]|0;e=k[b>>2]|0;g=k[a>>2]|0;n=ia(g,(f-e|0)/2096|0)|0;l=a+128|0;j=k[l>>2]|0;i=k[p>>2]|0;h=j-i|0;if(n>>>0<=h>>>0){if(n>>>0<h>>>0?(m=i+n|0,(j|0)!=(m|0)):0)k[l>>2]=m}else{Fb(p,n-h|0);f=k[q>>2]|0;e=k[b>>2]|0;g=k[a>>2]|0}n=a+136|0;g=ia(g,(f-e|0)/2096|0)|0;h=a+140|0;i=k[h>>2]|0;j=k[n>>2]|0;l=i-j>>1;if(g>>>0<=l>>>0){if(g>>>0<l>>>0?(o=j+(g<<1)|0,(i|0)!=(o|0)):0)k[h>>2]=i+(~((i+-2-o|0)>>>1)<<1);}else{ie(n,g-l|0);f=k[q>>2]|0;e=k[b>>2]|0}if((f|0)==(e|0))return;else f=0;do{m=k[a>>2]|0;o=ia(m,f)|0;Yd(e+(f*2096|0)|0,m,(k[p>>2]|0)+o|0,(k[n>>2]|0)+(o<<1)|0,c,d);f=f+1|0;e=k[b>>2]|0}while(f>>>0<(((k[q>>2]|0)-e|0)/2096|0)>>>0);return}function ne(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;g=a+116|0;f=k[g>>2]|0;if(!f){h=a+112|0;f=(k[h>>2]|0)+1|0;k[h>>2]=f;k[g>>2]=k[(k[k[a+12>>2]>>2]|0)+(f<<2)>>2];h=ia(k[a>>2]|0,k[(k[k[a+8>>2]>>2]|0)+(f<<2)>>2]|0)|0;e=a+120|0;k[e>>2]=h;be(a+16|0,f,c,d);f=k[g>>2]|0}else e=a+120|0;k[g>>2]=f+-1;e=(k[e>>2]|0)+b|0;f=i[(k[a+124>>2]|0)+e>>0]|0;e=m[(k[a+136>>2]|0)+(e<<1)>>1]|0;g=Gg(1,0,f&255|0)|0;b=M;if(b>>>0>0|(b|0)==0&g>>>0>e>>>0){g=k[c>>2]|0;a=d+(g>>3)|0;d=l[a>>0]|0;e=Gg(e|0,0,g&7|0)|0;b=M;d=e|d;e=a;a=e;i[a>>0]=d;i[a+1>>0]=d>>8;i[a+2>>0]=d>>16;i[a+3>>0]=d>>24;e=e+4|0;i[e>>0]=b;i[e+1>>0]=b>>8;i[e+2>>0]=b>>16;i[e+3>>0]=b>>24;k[c>>2]=g+(f&255);return}else Aa(190080,190104,52,190128);}function oe(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;j=a+116|0;h=k[j>>2]|0;if(!h){g=a+112|0;h=(k[g>>2]|0)+1|0;k[g>>2]=h;k[j>>2]=k[(k[k[a+12>>2]>>2]|0)+(h<<2)>>2];g=a+120|0;k[g>>2]=k[(k[k[a+8>>2]>>2]|0)+(h<<2)>>2]<<6;be(a+16|0,h,e,f);h=k[j>>2]|0}else g=a+120|0;k[j>>2]=h+-1;g=(ia(k[a>>2]|0,k[(k[d>>2]|0)+((k[g>>2]|0)+c<<2)>>2]|0)|0)+b|0;h=i[(k[a+124>>2]|0)+g>>0]|0;g=m[(k[a+136>>2]|0)+(g<<1)>>1]|0;j=Gg(1,0,h&255|0)|0;c=M;if(c>>>0>0|(c|0)==0&j>>>0>g>>>0){j=k[e>>2]|0;d=f+(j>>3)|0;b=l[d>>0]|0;g=Gg(g|0,0,j&7|0)|0;c=M;b=g|b;g=d;d=g;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;g=g+4|0;i[g>>0]=c;i[g+1>>0]=c>>8;i[g+2>>0]=c>>16;i[g+3>>0]=c>>24;k[e>>2]=j+(h&255);return}else Aa(190080,190104,52,190128);}function pe(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;j=a+116|0;h=k[j>>2]|0;if(!h){g=a+112|0;h=(k[g>>2]|0)+1|0;k[g>>2]=h;k[j>>2]=k[(k[k[a+12>>2]>>2]|0)+(h<<2)>>2];g=a+120|0;k[g>>2]=k[(k[k[a+8>>2]>>2]|0)+(h<<2)>>2]<<2;be(a+16|0,h,e,f);h=k[j>>2]|0}else g=a+120|0;k[j>>2]=h+-1;g=(ia(k[a>>2]|0,k[(k[d>>2]|0)+((k[g>>2]|0)+c<<2)>>2]|0)|0)+b|0;h=i[(k[a+124>>2]|0)+g>>0]|0;g=m[(k[a+136>>2]|0)+(g<<1)>>1]|0;j=Gg(1,0,h&255|0)|0;c=M;if(c>>>0>0|(c|0)==0&j>>>0>g>>>0){j=k[e>>2]|0;d=f+(j>>3)|0;b=l[d>>0]|0;g=Gg(g|0,0,j&7|0)|0;c=M;b=g|b;g=d;d=g;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;g=g+4|0;i[g>>0]=c;i[g+1>>0]=c>>8;i[g+2>>0]=c>>16;i[g+3>>0]=c>>24;k[e>>2]=j+(h&255);return}else Aa(190080,190104,52,190128);}function qe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0;d=i[b>>0]|0;e=d&255;if((e&128|0)==0?(k[a>>2]=e,d<<24>>24!=0):0){b=1;return b|0}if((c|0)>1){d=l[b>>0]|0;if(((d&224|0)==192?(f=l[b+1>>0]|0,(f&192|0)==128):0)?(f=f&63|d<<6&1984,k[a>>2]=f,f>>>0>127):0){b=2;return b|0}if((c|0)>2){d=l[b>>0]|0;if((((d&240|0)==224?(g=l[b+1>>0]|0,(g&192|0)==128):0)?(h=l[b+2>>0]|0,(h&192|0)==128):0)?(h=g<<6&4032|d<<12&61440|h&63,k[a>>2]=h,h>>>0>2047):0){b=3;return b|0}if((((((c|0)>3?(j=l[b>>0]|0,(j&248|0)==240):0)?(m=l[b+1>>0]|0,(m&192|0)==128):0)?(n=l[b+2>>0]|0,(n&192|0)==128):0)?(o=l[b+3>>0]|0,(o&192|0)==128):0)?(o=m<<12&258048|j<<18&1835008|n<<6&4032|o&63,k[a>>2]=o,(o+-65536|0)>>>0<1048576):0){b=4;return b|0}}}k[a>>2]=l[b>>0]|0|1114112;b=1;return b|0}function re(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,l=0,n=0,o=0,p=0;if((d|c|0)==0|(b|0)==0)return;h=c+16|0;i=1<<d+2;l=(1<<d)+65535|0;n=0;do{if((k[a+(n<<5)+4>>2]|0)>0?(m[a+(n<<5)+8>>1]|0)>127:0){g=a+(n<<5)+10|0;f=j[g>>1]|0;c=f&65535;if((f&65535)<16){c=c+1|0;f=a+(n<<5)+24|0}else{f=a+(n<<5)+24|0;o=k[f>>2]|0;e=o>>>24;c=(o&16777215)+13+(c+-12-(e<<1)<<e)|0}e=c+-1|0;if((h|0)<(c|0)){e=e-h+i|0;if(!e)c=-2;else c=((ka(e|0)|0)^31)+-1|0;p=e>>>c&1;o=c-d|0;j[g>>1]=(e&l)+h+(((o<<1)+-2|p)<<d);c=e-((p|2)<<c)>>d|o<<24}else{j[g>>1]=e;c=0}k[f>>2]=c}n=n+1|0}while((n|0)!=(b|0));return}function se(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];c=a+24|0;l=Af(36)|0;b=l;e=l;f=e+36|0;do{k[e>>2]=0;e=e+4|0}while((e|0)<(f|0));k[c>>2]=b;k[a+32>>2]=0;g=a+36|0;k[g>>2]=0;h=a+40|0;k[h>>2]=0;j=a+52|0;d=a+4|0;k[j>>2]=0;k[j+4>>2]=0;k[j+8>>2]=0;k[j+12>>2]=0;k[j+16>>2]=0;e=a+90|0;f=e+10|0;do{i[e>>0]=0;e=e+1|0}while((e|0)<(f|0));e=k[d>>2]|0;e=(e|0)>0?e:0;k[d>>2]=e;c=a+8|0;b=k[c>>2]|0;if((b|0)>=16){if((b|0)>24){k[c>>2]=24;b=24}}else{k[c>>2]=16;b=16}c=a+12|0;d=k[c>>2]|0;if(!d){k[c>>2]=16;if((e|0)>8)if((b|0)>16){f=(b|0)<21?b:21;k[c>>2]=f;c=f;f=10}else{c=16;f=10}else{c=16;f=11}}else{f=k[((d|0)>16?c:190440)>>2]|0;f=(f|0)<24?f:24;k[c>>2]=f;c=f;f=10}if((f|0)==10)if((e|0)<10)f=11;if((f|0)==11){i[a+16>>0]=0;i[a+17>>0]=0;i[a+18>>0]=1;i[a+19>>0]=0}k[a+20>>2]=(1<<b)+-16;f=b+1|0;d=c+1|0;f=(f|0)<(d|0)?d:f;d=Af(20)|0;k[d>>2]=f;f=1<<f;k[d+4>>2]=f+-1;c=1<<c;k[d+8>>2]=c;k[d+12>>2]=0;f=c+f|0;m=Cf((f|0)<-3?-1:f+3|0)|0;k[d+16>>2]=m;i[m+f>>0]=0;i[m+(f+1)>>0]=0;i[m+(f+2)>>0]=0;k[g>>2]=d;if((e|0)>9){k[a+44>>2]=c+-1;g=Cf(c>>>0>1073741823?-1:c<<2)|0;k[h>>2]=g}h=(c|0)>262144?c:262144;k[a+48>>2]=h;h=Cf(h>>>0>134217727?-1:h<<5)|0;k[j>>2]=h;if((b|0)==16){c=1;b=0}else{c=4;b=((b<<1)+222|1)&255}i[a+88>>0]=b;i[a+89>>0]=c;k[a+72>>2]=4;k[a+76>>2]=11;k[a+80>>2]=15;k[a+84>>2]=16;switch(e|0){case 7:{k[a+28>>2]=5;b=5;break}case 3:case 2:{k[a+28>>2]=2;b=2;break}case 1:case 0:{k[a+28>>2]=1;b=1;break}case 9:{k[a+28>>2]=7;b=7;break}case 4:{k[a+28>>2]=3;b=3;break}case 6:case 5:{k[a+28>>2]=4;b=4;break}case 8:{k[a+28>>2]=6;b=6;break}default:{b=(k[a>>2]|0)==0?8:9;k[a+28>>2]=b}}ze(l,b);if(k[a>>2]|0)return;if(!(i[a+16>>0]|0))return;b=(i[a+17>>0]|0)!=0;if(!(k[47608]|0)){l=Af(40)|0;k[l>>2]=0;k[l+4>>2]=0;k[l+8>>2]=0;k[l+12>>2]=0;o[l+16>>2]=1.0;j=l+20|0;k[j>>2]=0;k[j+4>>2]=0;k[j+8>>2]=0;k[j+12>>2]=0;o[l+36>>2]=1.0;k[47608]=l;Ae(l,b);}b=k[(k[a+24>>2]|0)+28>>2]|0;if(!b)return;k[b+33619976>>2]=k[47608];return}function te(a){a=a|0;var b=0,c=0;c=a+96|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Ef(b);c=a+52|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Ef(b);c=a+40|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Ef(b);c=a+36|0;b=k[c>>2]|0;k[c>>2]=0;if(b){c=k[b+16>>2]|0;if(c)Ef(c);Df(b);}c=a+24|0;b=k[c>>2]|0;k[c>>2]=0;if(!b)return;Be(b);Df(b);return}function ue(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0.0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;A=r;r=r+16|0;l=A;q=a+32|0;g=k[q>>2]|0;v=a+68|0;f=k[v>>2]|0;w=g-f|0;s=k[a+36>>2]|0;z=k[s+16>>2]|0;s=k[s+4>>2]|0;t=a+12|0;if(w>>>0>1<<k[t>>2]>>>0){t=0;r=A;return t|0}u=a+19|0;if(!(i[u>>0]|0))p=0;else{m=s&f;if((g|0)==(f|0))h=0.0;else{f=0;g=0;do{p=qe(l,z+(f+m)|0,w-f|0)|0;f=p+f|0;g=((k[l>>2]|0)<1114112?p:0)+g|0}while(f>>>0<w>>>0);h=+(g>>>0);}p=h>+(w>>>0)*.75}o=a+40|0;f=k[o>>2]|0;do if(f){l=k[v>>2]|0;g=a+44|0;m=k[g>>2]|0;if(p){_e(l,w,s,m,z,f);break}else{$e(l,w,s,m,z,f);break}}else g=a+44|0;while(0);m=a+60|0;l=a+56|0;n=a+52|0;zc(w,k[v>>2]|0,z,s,k[o>>2]|0,k[g>>2]|0,k[a+20>>2]|0,(i[u>>0]|0)!=0?8.115:4.0,k[a+4>>2]|0,k[a+24>>2]|0,k[a+28>>2]|0,a+72|0,m,(k[n>>2]|0)+(k[l>>2]<<5)|0,l);if((!(b|c)?(x=1<<k[t>>2],((x>>>1)+(k[l>>2]|0)|0)>>>0<(k[a+48>>2]|0)>>>0):0)?(y=k[q>>2]|0,(y+x|0)>>>0<=(s+1+(k[a+64>>2]|0)|0)>>>0):0){k[v>>2]=y;k[d>>2]=0;t=1;r=A;return t|0}g=k[m>>2]|0;if((g|0)>0){do if((g|0)>=6){if((g|0)<130){t=g+-2|0;f=((ka(t|0)|0)^31)+-1|0;f=(t>>f)+2+(f<<1)|0;break}if((g|0)<2114){f=((ka(g+-66|0)|0)^31)+10|0;break}if((g|0)<6210)f=21;else f=(g|0)<22594?22:23}else f=g;while(0);o=g-(k[190544+(f<<2)>>2]|0)|0;q=(f<<3&56|k[190640+((f>>3)*3<<2)>>2]<<6|2)&65535;f=Gg(k[190448+(f<<2)>>2]|0,0,48)|0;t=k[l>>2]|0;k[l>>2]=t+1;s=k[n>>2]|0;k[s+(t<<5)>>2]=g;k[s+(t<<5)+4>>2]=0;j[s+(t<<5)+8>>1]=q;j[s+(t<<5)+10>>1]=16;q=s+(t<<5)+16|0;k[q>>2]=o|f;k[q+4>>2]=((o|0)<0)<<31>>31|M;k[s+(t<<5)+24>>2]=0;k[m>>2]=0}t=ve(a,b,p,d,e)|0;r=A;return t|0}function ve(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0.0,n=0.0,q=0,s=0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;K=r;r=r+1056|0;J=K+1040|0;H=K+16|0;I=K;C=a+32|0;w=k[C>>2]|0;E=a+64|0;x=k[E>>2]|0;F=w-x|0;D=k[a+36>>2]|0;G=k[D+16>>2]|0;D=k[D+4>>2]|0;g=(F<<1)+500|0;h=a+92|0;if((k[h>>2]|0)>>>0<g>>>0){B=Cf(g)|0;f=a+96|0;j=k[f>>2]|0;k[f>>2]=B;if(j)Ef(j);k[h>>2]=g}else f=a+96|0;y=k[f>>2]|0;z=a+88|0;i[y>>0]=i[z>>0]|0;A=a+89|0;k[J>>2]=l[A>>0];B=a+56|0;s=k[B>>2]|0;if(s>>>0<((F>>>8)+2|0)>>>0){if((s|0)>0){q=k[a+52>>2]|0;h=0;j=0;do{j=(k[q+(h<<5)>>2]|0)+j|0;h=h+1|0}while((h|0)<(s|0));}else j=0;m=+(F>>>0);if(+(j|0)>m*.99){Fg(H|0,0,1024)|0;if((i[190680]|0)==0?(xa(190680)|0)!=0:0){p[23836]=m*7.92/13.0;Ga(190680);}j=k[E>>2]|0;h=k[C>>2]|0;if(j>>>0<h>>>0)do{f=H+(l[G+(j&D)>>0]<<2)|0;k[f>>2]=(k[f>>2]|0)+1;j=j+13|0}while(j>>>0<h>>>0);g=H+1024|0;h=H;m=0.0;j=0;do{s=k[h>>2]|0;v=+(s|0);if((s|0)<256)u=+o[316384+(s<<2)>>2];else u=+kg(v);q=k[h+4>>2]|0;h=h+8|0;j=s+j+q|0;n=+(q|0);if((q|0)<256)t=+o[316384+(q<<2)>>2];else t=+kg(n);m=m-v*u-n*t}while(h>>>0<g>>>0);t=+(j|0);if(j){if((j|0)<256)n=+o[316384+(j<<2)>>2];else n=+kg(t);m=m+t*n}j=(m<t?t:m)>+p[23836]}else j=0}else j=0;a:do if((w|0)==(x|0))if(Sd(b,0,J,y)|0){k[J>>2]=(k[J>>2]|0)+7&-8;break}else{G=0;r=K;return G|0}else{if(j){if(fe(b,G,k[E>>2]|0,D,F,J,y)|0)break;else f=0;r=K;return f|0}g=a+72|0;k[I>>2]=k[g>>2];k[I+4>>2]=k[g+4>>2];k[I+8>>2]=k[g+8>>2];k[I+12>>2]=k[g+12>>2];f=a+4|0;if((k[f>>2]|0)>9?(k[a>>2]|0)==1:0){re(k[a+52>>2]|0,k[B>>2]|0,12,1);q=1;s=12}else{q=0;s=0}j=c?2:3;Fg(H|0,0,144)|0;h=k[E>>2]|0;if(!(i[a+18>>0]|0))af(G,h,D,i[a+90>>0]|0,i[a+91>>0]|0,k[a+52>>2]|0,k[B>>2]|0,j,(i[a+19>>0]|0)!=0,H);else bf(G,h,D,k[a+52>>2]|0,k[B>>2]|0,H);if((k[f>>2]|0)>2)cf(s,q,H);do if(ee(G,k[E>>2]|0,F,D,i[a+90>>0]|0,i[a+91>>0]|0,b,s,q,j,k[a+52>>2]|0,k[B>>2]|0,H,J,y)|0){if((F+4|0)>>>0<k[J>>2]>>3>>>0?(k[g>>2]=k[I>>2],k[g+4>>2]=k[I+4>>2],k[g+8>>2]=k[I+8>>2],k[g+12>>2]=k[I+12>>2],i[y>>0]=i[z>>0]|0,k[J>>2]=l[A>>0],!(fe(b,G,k[E>>2]|0,D,F,J,y)|0)):0)break;Ce(H);break a}while(0);Ce(H);G=0;r=K;return G|0}while(0);c=k[J>>2]|0;F=c>>3;i[z>>0]=i[y+F>>0]|0;i[A>>0]=c&7;C=k[C>>2]|0;k[E>>2]=C;k[a+68>>2]=C;i[a+90>>0]=i[G+(C+-1&D)>>0]|0;i[a+91>>0]=i[G+(C+-2&D)>>0]|0;k[B>>2]=0;k[e>>2]=y;k[d>>2]=F;G=1;r=K;return G|0}function we(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;j=r;r=r+160|0;h=j+132|0;i=j+32|0;f=j+16|0;g=j;if(!(k[d>>2]|0)){e=0;r=j;return e|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];se(i,h);qf(f,c,b);of(g,e,k[d>>2]|0);k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];if(!(xe(h,f,g)|0))e=0;else{k[d>>2]=k[g+12>>2];e=1}te(i);r=j;return e|0}function xe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;i=r;r=r+128|0;g=i+108|0;e=i+104|0;f=i+100|0;h=i;k[e>>2]=0;k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];se(h,g);while(1){if(!(ye(b,h)|0))d=1;else d=(hb[k[(k[b>>2]|0)+8>>2]&3](b,0,g)|0)==0;k[e>>2]=0;if(!(ue(h,d,0,e,f)|0)){d=0;a=8;break}a=k[e>>2]|0;if(!a)if(d){d=1;a=8;break}else continue;else{a=(hb[k[(k[c>>2]|0)+8>>2]&3](c,k[f>>2]|0,a)|0)^1;if(d|a){d=a&1^1;a=8;break}else continue}}if((a|0)==8){te(h);r=i;return d|0}return 0}function ye(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0;u=r;r=r+16|0;q=u+4|0;s=u;n=1<<k[b+12>>2];k[q>>2]=0;l=hb[k[(k[a>>2]|0)+8>>2]&3](a,n,q)|0;if(!l){m=0;r=u;return m|0}m=k[q>>2]|0;p=b+36|0;f=k[p>>2]|0;g=f+12|0;h=k[f+4>>2]&k[g>>2];j=f+8|0;d=k[j>>2]|0;if(d>>>0>h>>>0){e=f+16|0;d=d-h|0;Kg((k[e>>2]|0)+((1<<k[f>>2])+h)|0,l|0,(d>>>0<m>>>0?d:m)|0)|0;d=e}else d=f+16|0;c=1<<k[f>>2];e=(k[d>>2]|0)+h|0;if((h+m|0)>>>0>c>>>0){j=(k[j>>2]|0)+(c-h)|0;Kg(e|0,l|0,(j>>>0<m>>>0?j:m)|0)|0;j=(1<<k[f>>2])-h|0;Kg(k[d>>2]|0,l+j|0,m-j|0)|0}else Kg(e|0,l|0,m|0)|0;k[g>>2]=(k[g>>2]|0)+m;o=b+32|0;k[o>>2]=(k[o>>2]|0)+m;d=k[p>>2]|0;c=k[d+12>>2]|0;if(c>>>0<=(k[d+4>>2]|0)>>>0){m=(k[d+16>>2]|0)+c|0;i[m>>0]=0;i[m+1>>0]=0;i[m+2>>0]=0}c=k[q>>2]|0;if((n|0)==(c|0)){m=n;r=u;return m|0}n=n-c|0;while(1){k[s>>2]=0;l=hb[k[(k[a>>2]|0)+8>>2]&3](a,n,s)|0;if(!l)break;j=k[s>>2]|0;h=k[p>>2]|0;g=h+12|0;f=k[h+4>>2]&k[g>>2];b=h+8|0;d=k[b>>2]|0;if(d>>>0>f>>>0){m=h+16|0;d=d-f|0;Kg((k[m>>2]|0)+((1<<k[h>>2])+f)|0,l|0,(d>>>0<j>>>0?d:j)|0)|0;d=m}else d=h+16|0;e=1<<k[h>>2];c=(k[d>>2]|0)+f|0;if((f+j|0)>>>0>e>>>0){m=(k[b>>2]|0)+(e-f)|0;Kg(c|0,l|0,(m>>>0<j>>>0?m:j)|0)|0;m=(1<<k[h>>2])-f|0;Kg(k[d>>2]|0,l+m|0,j-m|0)|0}else Kg(c|0,l|0,j|0)|0;k[g>>2]=(k[g>>2]|0)+j;k[o>>2]=(k[o>>2]|0)+j;c=k[p>>2]|0;d=k[c+12>>2]|0;if(d>>>0<=(k[c+4>>2]|0)>>>0){m=(k[c+16>>2]|0)+d|0;i[m>>0]=0;i[m+1>>0]=0;i[m+2>>0]=0}d=k[s>>2]|0;c=(k[q>>2]|0)+d|0;k[q>>2]=c;if((n|0)==(d|0)){t=23;break}else n=n-d|0}if((t|0)==23){r=u;return c|0}m=k[q>>2]|0;r=u;return m|0}function ze(a,b){a=a|0;b=b|0;var c=0;do switch(b|0){case 9:{c=Af(33619980)|0;k[c+33619976>>2]=0;Fg(c|0,0,65536)|0;k[c+33619968>>2]=0;k[c+33619972>>2]=0;a=a+32|0;b=k[a>>2]|0;k[a>>2]=c;if(!b)return;Df(b);return}case 6:{c=Af(16842764)|0;k[c+16842760>>2]=0;Fg(c|0,0,65536)|0;k[c+16842752>>2]=0;k[c+16842756>>2]=0;a=a+20|0;b=k[a>>2]|0;k[a>>2]=c;if(!b)return;Df(b);return}case 2:{c=Af(524312)|0;Fg(c|0,0,524312)|0;a=a+4|0;b=k[a>>2]|0;k[a>>2]=c;if(!b)return;Df(b);return}case 3:{c=Af(1081356)|0;k[c+1081352>>2]=0;Fg(c|0,0,32768)|0;k[c+1081344>>2]=0;k[c+1081348>>2]=0;a=a+8|0;b=k[a>>2]|0;k[a>>2]=c;if(!b)return;Df(b);return}case 8:{c=Af(33619980)|0;k[c+33619976>>2]=0;Fg(c|0,0,65536)|0;k[c+33619968>>2]=0;k[c+33619972>>2]=0;a=a+28|0;b=k[a>>2]|0;k[a>>2]=c;if(!b)return;Df(b);return}case 7:{c=Af(33619980)|0;k[c+33619976>>2]=0;Fg(c|0,0,65536)|0;k[c+33619968>>2]=0;k[c+33619972>>2]=0;a=a+24|0;b=k[a>>2]|0;k[a>>2]=c;if(!b)return;Df(b);return}case 1:{c=Af(262156)|0;Fg(c|0,0,262156)|0;b=k[a>>2]|0;k[a>>2]=c;if(!b)return;Df(b);return}case 4:{c=Af(2129932)|0;k[c+2129928>>2]=0;Fg(c|0,0,32768)|0;k[c+2129920>>2]=0;k[c+2129924>>2]=0;a=a+12|0;b=k[a>>2]|0;k[a>>2]=c;if(!b)return;Df(b);return}case 5:{c=Af(8454156)|0;k[c+8454152>>2]=0;Fg(c|0,0,65536)|0;k[c+8454144>>2]=0;k[c+8454148>>2]=0;a=a+16|0;b=k[a>>2]|0;k[a>>2]=c;if(!b)return;Df(b);return}default:return}while(0);}function Ae(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;n=r;r=r+16|0;m=n;l=m+4|0;j=b?120:0;while(1){f=24;do{d=k[190696+(f<<2)>>2]|0;c=1<<d;d=j<<d;b=k[190800+(f<<2)>>2]|0;g=c;do{h=g;g=g+-1|0;e=g+d|0;De(m,313688+(((e|0)/(c|0)|0)*12|0)|0,190904+((ia((e|0)%(c|0)|0,f)|0)+b)|0,f);o=i[m>>0]|0;if(((o&1)==0?(o&255)>>>1:k[l>>2]|0)>>>0>3)Ee(a,m,f,e);Bg(m);}while((h|0)>1);f=f+-1|0}while((f|0)>3);if((j|0)>0)j=j+-1|0;else break}r=n;return}function Be(a){a=a|0;var b=0,c=0;c=a+32|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Df(b);c=a+28|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Df(b);c=a+24|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Df(b);c=a+20|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Df(b);c=a+16|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Df(b);c=a+12|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Df(b);c=a+8|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Df(b);c=a+4|0;b=k[c>>2]|0;k[c>>2]=0;if(b)Df(b);b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Df(b);return}function Ce(a){a=a|0;var b=0,c=0,d=0,e=0;d=k[a+132>>2]|0;e=d;if(d){c=a+136|0;b=k[c>>2]|0;if((b|0)!=(d|0))k[c>>2]=b+(~(((b+-2096-e|0)>>>0)/2096|0)*2096|0);Df(d);}e=k[a+120>>2]|0;d=e;if(e){c=a+124|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~(((b+-2832-d|0)>>>0)/2832|0)*2832|0);Df(e);}e=k[a+108>>2]|0;d=e;if(e){c=a+112|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~(((b+-1040-d|0)>>>0)/1040|0)*1040|0);Df(e);}e=k[a+96>>2]|0;d=e;if(e){c=a+100|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(e);}e=k[a+84>>2]|0;d=e;if(e){c=a+88|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(e);}e=k[a+72>>2]|0;d=e;if(e){c=a+76|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(e);}e=k[a+60>>2]|0;d=e;if(e){c=a+64|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(e);}e=k[a+44>>2]|0;d=e;if(e){c=a+48|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(e);}e=k[a+32>>2]|0;d=e;if(e){c=a+36|0;b=k[c>>2]|0;if((b|0)!=(e|0))k[c>>2]=b+(~((b+-4-d|0)>>>2)<<2);Df(e);}d=k[a+16>>2]|0;c=d;if(d){b=a+20|0;e=k[b>>2]|0;if((e|0)!=(d|0))k[b>>2]=e+(~((e+-4-c|0)>>>2)<<2);Df(d);}d=k[a+4>>2]|0;if(!d)return;b=a+8|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-4-d|0)>>>2)<<2);Df(d);return}function De(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+48|0;n=q+24|0;m=q+12|0;p=q;o=k[b>>2]|0;Ag(a,o,Hg(o|0)|0);o=b+4|0;g=k[o>>2]|0;h=(g|0)<10?g:0;f=d-h|0;do if((f|0)>0){if((g|0)>11){d=g+-11|0;if((f|0)<=(d|0))break;g=c+d|0;h=c+f|0;j=h-g|0;if(j>>>0>4294967279)xf(n);if(j>>>0<11){i[n>>0]=j<<1;e=n+1|0}else{o=j+16&-16;e=Af(o)|0;k[n+8>>2]=e;k[n>>2]=o|1;k[n+4>>2]=j}if((d|0)!=(f|0)){f=g;c=e;while(1){i[c>>0]=i[f>>0]|0;f=f+1|0;if((f|0)==(h|0))break;else c=c+1|0}e=e+j|0}i[e>>0]=0;o=i[n>>0]|0;m=(o&1)==0;Cg(a,m?n+1|0:k[n+8>>2]|0,m?(o&255)>>>1:k[n+4>>2]|0)|0;Bg(n);break}j=c+f|0;if(f>>>0<11){i[m>>0]=f<<1;e=m+1|0}else{n=f+16&-16;e=Af(n)|0;k[m+8>>2]=e;k[m>>2]=n|1;k[m+4>>2]=f}if((h|0)!=(d|0)){d=e;while(1){i[d>>0]=i[c>>0]|0;c=c+1|0;if((c|0)==(j|0))break;else d=d+1|0}e=e+f|0}i[e>>0]=0;e=i[m>>0]|0;n=(e&1)==0;Cg(a,n?m+1|0:k[m+8>>2]|0,n?(e&255)>>>1:k[m+4>>2]|0)|0;Bg(m);e=i[a>>0]|0;if(!(e&1)){e=(e&255)>>>1;g=a+1|0}else{e=k[a+4>>2]|0;g=k[a+8>>2]|0}d=e-f|0;c=g+d|0;e=k[o>>2]|0;if((e|0)==10){e=i[c>>0]|0;if((f|0)==1|(e&255)<192){if((e+-97&255)>=26)break;i[c>>0]=e&255^32;break}if((e&255)<224){o=g+(d+1)|0;i[o>>0]=(l[o>>0]|0)^32;break}if((f|0)==2)break;o=g+(d+2)|0;i[o>>0]=(l[o>>0]|0)^5;break}else if((e|0)!=11)break;while(1){e=i[c>>0]|0;do if((f|0)==1|(e&255)<192)if((e+-97&255)<26){i[c>>0]=e&255^32;e=1}else e=1;else{if((e&255)<224){e=c+1|0;i[e>>0]=(l[e>>0]|0)^32;e=2;break}if((f|0)==2)e=2;else{e=c+2|0;i[e>>0]=(l[e>>0]|0)^5;e=3}}while(0);f=f-e|0;if((f|0)<=0)break;else c=c+e|0}}while(0);o=k[b+8>>2]|0;Ag(p,o,Hg(o|0)|0);o=i[p>>0]|0;n=(o&1)==0;Cg(a,n?p+1|0:k[p+8>>2]|0,n?(o&255)>>>1:k[p+4>>2]|0)|0;Bg(p);r=q;return}function Ee(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,m=0;m=r;r=r+16|0;j=m;d=(d<<6)+c|0;c=Fe(a,b)|0;if((c|0)!=0?(d|0)>=(k[c+20>>2]|0):0){r=m;return}c=Ge(a,b)|0;k[c>>2]=d;k[j>>2]=0;d=i[b>>0]|0;c=(d&1)==0;e=b+4|0;d=c?(d&255)>>>1:k[e>>2]|0;c=c?b+1|0:k[b+8>>2]|0;if((((d|0)!=0?(f=i[c>>0]|0,k[j>>2]=f,d>>>0>1):0)?(g=(i[c+1>>0]<<8)+f|0,k[j>>2]=g,d>>>0>2):0)?(h=(i[c+2>>0]<<16)+g|0,k[j>>2]=h,d>>>0>3):0)k[j>>2]=(l[c+3>>0]<<24)+h;d=a+20|0;f=He(d,j)|0;c=i[b>>0]|0;c=(c&1)==0?(c&255)>>>1:k[e>>2]|0;if((k[f>>2]|0)>>>0>=c>>>0){r=m;return}d=He(d,j)|0;k[d>>2]=c;r=m;return}function Fe(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0;m=i[b>>0]|0;e=(m&1)==0;n=e?b+1|0:k[b+8>>2]|0;m=e?(m&255)>>>1:k[b+4>>2]|0;if(m>>>0>3){e=m;c=n;d=m;while(1){b=ia(l[c>>0]|l[c+1>>0]<<8|l[c+2>>0]<<16|l[c+3>>0]<<24,1540483477)|0;d=(ia(b>>>24^b,1540483477)|0)^(ia(d,1540483477)|0);e=e+-4|0;if(e>>>0<=3)break;else c=c+4|0}e=m+-4|0;c=e&-4;e=e-c|0;c=n+(c+4)|0}else{e=m;c=n;d=m}if((e|0)==2){f=d;j=6}else if((e|0)==1){g=d;j=7}else if((e|0)==3){f=l[c+2>>0]<<16^d;j=6}else h=d;if((j|0)==6){g=l[c+1>>0]<<8^f;j=7}if((j|0)==7)h=ia(l[c>>0]^g,1540483477)|0;b=ia(h>>>13^h,1540483477)|0;b=b>>>15^b;j=k[a+4>>2]|0;if(!j){m=0;return m|0}h=j+-1|0;e=(h&j|0)==0;if(e)g=b&h;else g=(b>>>0)%(j>>>0)|0;b=k[(k[a>>2]|0)+(g<<2)>>2]|0;if(!b){m=0;return m|0}b=k[b>>2]|0;if(!b){m=0;return m|0}a=(m|0)==0;if(e){a:while(1){if((k[b+4>>2]&h|0)!=(g|0)){b=0;j=31;break}c=b+8|0;j=i[c>>0]|0;d=(j&1)==0;b:do if(((d?(j&255)>>>1:k[b+12>>2]|0)|0)==(m|0)){c=d?c+1|0:k[b+16>>2]|0;if(!d)if(!(lg(c,n,m)|0)){j=31;break a}else break;if(a){j=31;break a}else{e=m;d=n}while(1){if((i[c>>0]|0)!=(i[d>>0]|0))break b;e=e+-1|0;if(!e){j=31;break a}else{c=c+1|0;d=d+1|0}}}while(0);b=k[b>>2]|0;if(!b){b=0;j=31;break}}if((j|0)==31)return b|0}else{c:while(1){if((((k[b+4>>2]|0)>>>0)%(j>>>0)|0|0)!=(g|0)){b=0;j=31;break}c=b+8|0;h=i[c>>0]|0;d=(h&1)==0;d:do if(((d?(h&255)>>>1:k[b+12>>2]|0)|0)==(m|0)){c=d?c+1|0:k[b+16>>2]|0;if(!d)if(!(lg(c,n,m)|0)){j=31;break c}else break;if(a){j=31;break c}else{e=m;d=n}while(1){if((i[c>>0]|0)!=(i[d>>0]|0))break d;e=e+-1|0;if(!e){j=31;break c}else{c=c+1|0;d=d+1|0}}}while(0);b=k[b>>2]|0;if(!b){b=0;j=31;break}}if((j|0)==31)return b|0}return 0}function Ge(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;e=r;r=r+16|0;c=e;d=Fe(a,b)|0;if(d){c=d;c=c+20|0;r=e;return c|0}d=Af(24)|0;zg(d+8|0,b);k[d+20>>2]=0;Le(c,a,d);c=k[c>>2]|0;c=c+20|0;r=e;return c|0}function He(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;i=r;r=r+16|0;h=i;f=k[b>>2]|0;d=k[a+4>>2]|0;a:do if(d){e=d+-1|0;c=(e&d|0)==0;if(c)g=e&f;else g=(f>>>0)%(d>>>0)|0;b=k[(k[a>>2]|0)+(g<<2)>>2]|0;if(b)if(c){do{b=k[b>>2]|0;if(!b)break a;if((k[b+4>>2]&e|0)!=(g|0))break a}while((k[b+8>>2]|0)!=(f|0));b=b+12|0;r=i;return b|0}else{do{b=k[b>>2]|0;if(!b)break a;if((((k[b+4>>2]|0)>>>0)%(d>>>0)|0|0)!=(g|0))break a}while((k[b+8>>2]|0)!=(f|0));b=b+12|0;r=i;return b|0}}while(0);b=Af(16)|0;k[b+8>>2]=f;k[b+12>>2]=0;Ie(h,a,b);b=k[h>>2]|0;b=b+12|0;r=i;return b|0}function Ie(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0.0,h=0.0,j=0,l=0,m=0,n=0,p=0,q=0,r=0;e=k[c+8>>2]|0;r=c+4|0;k[r>>2]=e;q=b+4|0;j=k[q>>2]|0;p=(j|0)==0;a:do if(!p){m=j+-1|0;n=(m&j|0)==0;if(n)l=m&e;else l=(e>>>0)%(j>>>0)|0;d=k[(k[b>>2]|0)+(l<<2)>>2]|0;if(!d)d=l;else{while(1){d=k[d>>2]|0;if(!d){d=l;break a}f=k[d+4>>2]|0;if(n)f=f&m;else f=(f>>>0)%(j>>>0)|0;if((f|0)!=(l|0)){d=l;break a}if((k[d+8>>2]|0)==(e|0)){e=0;break}}q=d;k[a>>2]=q;q=a+4|0;i[q>>0]=e;return}}else d=0;while(0);n=b+12|0;g=+(((k[n>>2]|0)+1|0)>>>0);h=+o[b+16>>2];do if(p|g>+(j>>>0)*h){if(j>>>0>2)f=(j+-1&j|0)==0;else f=0;f=(f&1|j<<1)^1;e=~~+ha(+(g/h))>>>0;Je(b,f>>>0<e>>>0?e:f);f=k[q>>2]|0;e=k[r>>2]|0;d=f+-1|0;if(!(d&f)){j=f;d=d&e;break}else{j=f;d=(e>>>0)%(f>>>0)|0;break}}while(0);e=k[(k[b>>2]|0)+(d<<2)>>2]|0;if(!e){e=b+8|0;k[c>>2]=k[e>>2];k[e>>2]=c;k[(k[b>>2]|0)+(d<<2)>>2]=e;e=k[c>>2]|0;if(e){e=k[e+4>>2]|0;d=j+-1|0;if(!(d&j))e=e&d;else e=(e>>>0)%(j>>>0)|0;k[(k[b>>2]|0)+(e<<2)>>2]=c}}else{k[c>>2]=k[e>>2];k[e>>2]=c}k[n>>2]=(k[n>>2]|0)+1;p=1;q=c;k[a>>2]=q;q=a+4|0;i[q>>0]=p;return}function Je(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;if((b|0)!=1){if(b+-1&b)b=xg(b)|0}else b=2;e=k[a+4>>2]|0;if(b>>>0>e>>>0){Ke(a,b);return}if(b>>>0>=e>>>0)return;if(e>>>0>2)d=(e+-1&e|0)==0;else d=0;c=~~+ha(+(+((k[a+12>>2]|0)>>>0)/+o[a+16>>2]))>>>0;if(d)c=1<<32-(ka(c+-1|0)|0);else c=xg(c)|0;b=b>>>0<c>>>0?c:b;if(b>>>0>=e>>>0)return;Ke(a,b);return}function Ke(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;c=(b|0)!=0;if(c)e=Af(b<<2)|0;else e=0;d=k[a>>2]|0;k[a>>2]=e;if(d)Df(d);k[a+4>>2]=b;if(c)c=0;else return;do{k[(k[a>>2]|0)+(c<<2)>>2]=0;c=c+1|0}while((c|0)!=(b|0));d=a+8|0;f=k[d>>2]|0;if(!f)return;e=k[f+4>>2]|0;l=b+-1|0;m=(l&b|0)==0;if(m)e=e&l;else e=(e>>>0)%(b>>>0)|0;k[(k[a>>2]|0)+(e<<2)>>2]=d;d=k[f>>2]|0;if(!d)return;else{h=f;j=e;c=f}a:while(1){e=d;d=c;b:while(1){while(1){c=k[e+4>>2]|0;if(m)i=c&l;else i=(c>>>0)%(b>>>0)|0;if((i|0)==(j|0)){d=e;break}c=(k[a>>2]|0)+(i<<2)|0;if(!(k[c>>2]|0)){g=i;break b}g=e+8|0;c=e;while(1){f=k[c>>2]|0;if(!f)break;if((k[g>>2]|0)==(k[f+8>>2]|0))c=f;else break}k[d>>2]=f;k[c>>2]=k[k[(k[a>>2]|0)+(i<<2)>>2]>>2];k[k[(k[a>>2]|0)+(i<<2)>>2]>>2]=e;e=k[h>>2]|0;if(!e){c=25;break a}}e=k[d>>2]|0;if(!e){c=25;break a}else h=d}k[c>>2]=d;d=k[e>>2]|0;if(!d){c=25;break}else{h=e;j=g;c=e}}if((c|0)==25)return}function Le(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0.0,j=0.0,m=0,n=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=c+8|0;v=i[w>>0]|0;r=(v&1)==0;w=r?w+1|0:k[c+16>>2]|0;v=r?(v&255)>>>1:k[c+12>>2]|0;if(v>>>0>3){f=v;g=w;e=v;while(1){r=ia(l[g>>0]|l[g+1>>0]<<8|l[g+2>>0]<<16|l[g+3>>0]<<24,1540483477)|0;e=(ia(r>>>24^r,1540483477)|0)^(ia(e,1540483477)|0);f=f+-4|0;if(f>>>0<=3)break;else g=g+4|0}f=v+-4|0;g=f&-4;f=f-g|0;g=w+(g+4)|0}else{f=v;g=w;e=v}if((f|0)==1)q=7;else if((f|0)==3){e=l[g+2>>0]<<16^e;q=6}else if((f|0)==2)q=6;if((q|0)==6){e=l[g+1>>0]<<8^e;q=7}if((q|0)==7)e=ia(l[g>>0]^e,1540483477)|0;g=ia(e>>>13^e,1540483477)|0;g=g>>>15^g;u=c+4|0;k[u>>2]=g;s=b+4|0;t=k[s>>2]|0;r=(t|0)==0;a:do if(!r){p=t+-1|0;q=(p&t|0)==0;if(q)n=g&p;else n=(g>>>0)%(t>>>0)|0;g=k[(k[b>>2]|0)+(n<<2)>>2]|0;if((g|0)!=0?(d=k[g>>2]|0,(d|0)!=0):0){m=(v|0)==0;b:while(1){g=k[d+4>>2]|0;if(q)g=g&p;else g=(g>>>0)%(t>>>0)|0;if((g|0)!=(n|0)){d=n;break a}g=d+8|0;e=i[g>>0]|0;f=(e&1)==0;c:do if(((f?(e&255)>>>1:k[d+12>>2]|0)|0)==(v|0)){g=f?g+1|0:k[d+16>>2]|0;if(!f)if(!(lg(g,w,v)|0)){e=0;q=40;break b}else break;if(m){e=0;q=40;break b}else{e=v;f=w}while(1){if((i[g>>0]|0)!=(i[f>>0]|0))break c;e=e+-1|0;if(!e){e=0;q=40;break b}else{g=g+1|0;f=f+1|0}}}while(0);d=k[d>>2]|0;if(!d){d=n;break a}}if((q|0)==40){r=d;k[a>>2]=r;r=a+4|0;i[r>>0]=e;return}}else d=n}else d=0;while(0);m=b+12|0;h=+(((k[m>>2]|0)+1|0)>>>0);j=+o[b+16>>2];do if(r|h>+(t>>>0)*j){if(t>>>0>2)f=(t+-1&t|0)==0;else f=0;f=(f&1|t<<1)^1;e=~~+ha(+(h/j))>>>0;Me(b,f>>>0<e>>>0?e:f);f=k[s>>2]|0;e=k[u>>2]|0;d=f+-1|0;if(!(d&f)){g=f;d=d&e;break}else{g=f;d=(e>>>0)%(f>>>0)|0;break}}else g=t;while(0);e=k[(k[b>>2]|0)+(d<<2)>>2]|0;if(!e){e=b+8|0;k[c>>2]=k[e>>2];k[e>>2]=c;k[(k[b>>2]|0)+(d<<2)>>2]=e;e=k[c>>2]|0;if(e){e=k[e+4>>2]|0;d=g+-1|0;if(!(d&g))d=e&d;else d=(e>>>0)%(g>>>0)|0;k[(k[b>>2]|0)+(d<<2)>>2]=c}}else{k[c>>2]=k[e>>2];k[e>>2]=c}k[m>>2]=(k[m>>2]|0)+1;q=1;r=c;k[a>>2]=r;r=a+4|0;i[r>>0]=q;return}function Me(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;if((b|0)!=1){if(b+-1&b)b=xg(b)|0}else b=2;e=k[a+4>>2]|0;if(b>>>0>e>>>0){Ne(a,b);return}if(b>>>0>=e>>>0)return;if(e>>>0>2)d=(e+-1&e|0)==0;else d=0;c=~~+ha(+(+((k[a+12>>2]|0)>>>0)/+o[a+16>>2]))>>>0;if(d)c=1<<32-(ka(c+-1|0)|0);else c=xg(c)|0;b=b>>>0<c>>>0?c:b;if(b>>>0>=e>>>0)return;Ne(a,b);return}function Ne(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;c=(b|0)!=0;if(c)e=Af(b<<2)|0;else e=0;d=k[a>>2]|0;k[a>>2]=e;if(d)Df(d);k[a+4>>2]=b;if(c)c=0;else return;do{k[(k[a>>2]|0)+(c<<2)>>2]=0;c=c+1|0}while((c|0)!=(b|0));d=a+8|0;c=k[d>>2]|0;if(!c)return;e=k[c+4>>2]|0;s=b+-1|0;t=(s&b|0)==0;if(t)e=e&s;else e=(e>>>0)%(b>>>0)|0;k[(k[a>>2]|0)+(e<<2)>>2]=d;d=k[c>>2]|0;if(!d)return;else{g=c;f=e}a:while(1){r=g;e=d;d=c;b:while(1){while(1){c=k[e+4>>2]|0;if(t)q=c&s;else q=(c>>>0)%(b>>>0)|0;if((q|0)==(f|0)){d=e;break}c=(k[a>>2]|0)+(q<<2)|0;if(!(k[c>>2]|0)){f=q;break b}c=k[e>>2]|0;c:do if(!c)c=e;else{n=e+8|0;p=i[n>>0]|0;m=(p&1)==0;p=m?(p&255)>>>1:k[e+12>>2]|0;l=e+16|0;n=n+1|0;o=(p|0)==0;if(m){m=c;c=e}else{j=e;while(1){g=c+8|0;n=i[g>>0]|0;h=(n&1)==0;if((p|0)!=((h?(n&255)>>>1:k[c+12>>2]|0)|0)){c=j;break c}if(lg(k[l>>2]|0,h?g+1|0:k[c+16>>2]|0,p)|0){c=j;break c}g=k[c>>2]|0;if(!g)break c;else{j=c;c=g}}}while(1){j=m+8|0;l=i[j>>0]|0;h=(l&1)==0;if((p|0)!=((h?(l&255)>>>1:k[m+12>>2]|0)|0))break c;if(!o){l=p;g=n;j=h?j+1|0:k[m+16>>2]|0;while(1){if((i[g>>0]|0)!=(i[j>>0]|0))break c;l=l+-1|0;if(!l)break;else{g=g+1|0;j=j+1|0}}}g=k[m>>2]|0;if(!g){c=m;break}else{c=m;m=g}}}while(0);k[d>>2]=k[c>>2];k[c>>2]=k[k[(k[a>>2]|0)+(q<<2)>>2]>>2];k[k[(k[a>>2]|0)+(q<<2)>>2]>>2]=e;e=k[r>>2]|0;if(!e){c=33;break a}}e=k[d>>2]|0;if(!e){c=33;break a}else r=d}k[c>>2]=d;d=k[e>>2]|0;if(!d){c=33;break}else{g=e;c=e}}if((c|0)==33)return}function Oe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;I=r;r=r+32|0;v=I+16|0;D=I+12|0;F=I;G=F+4|0;w=F+8|0;x=b<<1|1;u=F+8|0;y=x<<3;z=(b|0)>0;A=d+b|0;B=d+1|0;E=b>>>0<2;C=1;a:while(1){k[D>>2]=C;k[F>>2]=0;k[G>>2]=0;k[w>>2]=0;e=Af(y)|0;k[F>>2]=e;k[G>>2]=e;k[u>>2]=e+(x<<3);if(z){q=b;do{s=q;q=q+-1|0;f=a+(q<<2)|0;e=k[f>>2]|0;do if(e){o=k[((e|0)<(C|0)?D:f)>>2]|0;h=k[G>>2]|0;if((h|0)!=(k[u>>2]|0)){e=Gg(q|0,0,48)|0;t=h;k[t>>2]=e|o;k[t+4>>2]=M|65535;k[G>>2]=(k[G>>2]|0)+8;break}p=k[F>>2]|0;n=p;m=(h-n>>3)+1|0;if(m>>>0>536870911){H=8;break a}g=p;h=h-g|0;if(h>>3>>>0<268435455){h=h>>2;m=h>>>0<m>>>0?m:h;g=(k[G>>2]|0)-g|0;h=g>>3;if(!m){e=0;f=0;m=g}else H=12}else{g=(k[G>>2]|0)-g|0;m=536870911;h=g>>3;H=12}if((H|0)==12){H=0;e=m;f=Af(m<<3)|0;m=g}g=Gg(q|0,0,48)|0;t=f+(h<<3)|0;k[t>>2]=g|o;k[t+4>>2]=M|65535;Kg(f|0,p|0,m|0)|0;k[F>>2]=f;k[G>>2]=f+(h+1<<3);k[u>>2]=f+(e<<3);if(n)Df(n);}while(0);}while((s|0)>1);f=k[G>>2]|0;e=k[F>>2]|0}else f=e;t=f-e|0;s=t>>3;if((s|0)==1){H=17;break}k[v>>2]=1;if((t|0)>1024){h=s;while(1){g=Bf(h<<3,318200)|0;if(g){H=23;break}if((h|0)>1)h=(h|0)/2|0;else{g=0;h=0;break}}if((H|0)==23)H=0;m=g}else{m=0;h=0;g=0}Ve(e,f,v,s,m,h);if(g)Df(g);h=k[G>>2]|0;if((h|0)==(k[u>>2]|0)){p=k[F>>2]|0;o=p;g=(h-o>>3)+1|0;if(g>>>0>536870911){H=31;break}m=p;h=h-m|0;if(h>>3>>>0<268435455){h=h>>2;h=h>>>0<g>>>0?g:h;m=(k[G>>2]|0)-m|0;g=m>>3;if(!h){e=0;f=0}else H=35}else{m=(k[G>>2]|0)-m|0;h=536870911;g=m>>3;H=35}if((H|0)==35){H=0;e=h;f=Af(h<<3)|0}h=f+(g<<3)|0;k[h>>2]=2147483647;k[h+4>>2]=-1;h=f+(g+1<<3)|0;Kg(f|0,p|0,m|0)|0;k[F>>2]=f;k[G>>2]=h;k[u>>2]=f+(e<<3);if(o){Df(o);h=k[G>>2]|0}}else{k[h>>2]=2147483647;k[h+4>>2]=-1;h=(k[G>>2]|0)+8|0;k[G>>2]=h}if((h|0)==(k[u>>2]|0)){o=k[F>>2]|0;n=o;g=(h-n>>3)+1|0;if(g>>>0>536870911){H=41;break}m=o;h=h-m|0;if(h>>3>>>0<268435455){h=h>>2;h=h>>>0<g>>>0?g:h;g=(k[G>>2]|0)-m|0;m=g>>3;if(!h){e=0;f=0;h=g}else H=45}else{g=(k[G>>2]|0)-m|0;h=536870911;m=g>>3;H=45}if((H|0)==45){H=0;e=h;f=Af(h<<3)|0;h=g}g=f+(m<<3)|0;k[g>>2]=2147483647;k[g+4>>2]=-1;Kg(f|0,o|0,h|0)|0;k[F>>2]=f;k[G>>2]=f+(m+1<<3);k[u>>2]=f+(e<<3);if(n)Df(n);}else{e=h;k[e>>2]=2147483647;k[e+4>>2]=-1;k[G>>2]=(k[G>>2]|0)+8}if((t|0)>8){o=0;n=s+1|0;do{s=s+-1|0;q=k[F>>2]|0;g=(k[q+(o<<3)>>2]|0)>(k[q+(n<<3)>>2]|0);m=g&1;f=(m^1)+o|0;m=m+n|0;g=g?n:o;p=(k[q+(f<<3)>>2]|0)>(k[q+(m<<3)>>2]|0);h=p&1;o=(h^1)+f|0;n=h+m|0;f=p?m:f;m=k[G>>2]|0;p=q;h=m-p>>3;e=h+-1|0;k[q+(e<<3)>>2]=(k[q+(f<<3)>>2]|0)+(k[q+(g<<3)>>2]|0);j[q+(e<<3)+4>>1]=g;j[q+(e<<3)+6>>1]=f;if((m|0)==(k[u>>2]|0)){h=h+1|0;if(h>>>0>536870911){H=54;break a}g=q;m=m-g|0;if(m>>3>>>0<268435455){m=m>>2;m=m>>>0<h>>>0?h:m;g=(k[G>>2]|0)-g|0;h=g>>3;if(!m){e=0;f=0;m=g}else H=58}else{g=(k[G>>2]|0)-g|0;m=536870911;h=g>>3;H=58}if((H|0)==58){H=0;e=m;f=Af(m<<3)|0;m=g}g=f+(h<<3)|0;k[g>>2]=2147483647;k[g+4>>2]=-1;Kg(f|0,q|0,m|0)|0;k[F>>2]=f;k[G>>2]=f+(h+1<<3);k[u>>2]=f+(e<<3);if(p)Df(p);}else{e=m;k[e>>2]=2147483647;k[e+4>>2]=-1;k[G>>2]=(k[G>>2]|0)+8}}while((s|0)>1);}e=k[F>>2]|0;We(e+((t>>2)+-1<<3)|0,e,d,0);if(E)f=d;else{f=d;e=B;do{f=(l[f>>0]|0)<(l[e>>0]|0)?e:f;e=e+1|0}while((e|0)!=(A|0));}f=(l[f>>0]|0)>(c|0);e=k[F>>2]|0;g=e;if(e){h=k[G>>2]|0;if((h|0)!=(e|0))k[G>>2]=h+(~((h+-8-g|0)>>>3)<<3);Df(e);}if(f)C=C<<1;else{H=68;break}}if((H|0)==8)yf(F);else if((H|0)==17){i[d+(j[e+6>>1]|0)>>0]=1;if(!e){r=I;return}if((f|0)!=(e|0))k[G>>2]=f+(~((f+-8-e|0)>>>3)<<3);Df(e);r=I;return}else if((H|0)==31)yf(F);else if((H|0)==41)yf(F);else if((H|0)==54)yf(F);else if((H|0)==68){r=I;return}}function Pe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;if((a|0)!=(b|0)){s=b&255;g=d+4|0;l=k[g>>2]|0;o=d+8|0;if((l|0)==(k[o>>2]|0)){p=k[d>>2]|0;r=p;a=l-r+1|0;if((a|0)<0)yf(d);q=p;l=l-q|0;if(l>>>0<1073741823){l=l<<1;l=l>>>0<a>>>0?a:l;m=k[g>>2]|0;a=m-q|0;if(!l){j=0;n=0;l=m}else w=9}else{a=k[g>>2]|0;l=2147483647;m=a;a=a-q|0;w=9}if((w|0)==9){j=l;n=Af(l)|0;l=m}i[n+a>>0]=s;l=l-q|0;m=n+(a-l)|0;Kg(m|0,p|0,l|0)|0;k[d>>2]=m;k[g>>2]=n+(a+1);k[o>>2]=n+j;if(r)Df(r);}else{i[l>>0]=s;k[g>>2]=(k[g>>2]|0)+1}s=e+4|0;l=k[s>>2]|0;r=e+8|0;if((l|0)==(k[r>>2]|0)){q=k[e>>2]|0;n=q;a=l-n+1|0;if((a|0)<0)yf(e);o=q;l=l-o|0;if(l>>>0<1073741823){l=l<<1;l=l>>>0<a>>>0?a:l;m=k[s>>2]|0;a=m-o|0;if(!l){g=0;j=0;l=m}else w=19}else{a=k[s>>2]|0;l=2147483647;m=a;a=a-o|0;w=19}if((w|0)==19){g=l;j=Af(l)|0;l=m}i[j+a>>0]=0;o=l-o|0;p=j+(a-o)|0;Kg(p|0,q|0,o|0)|0;k[e>>2]=p;k[s>>2]=j+(a+1);k[r>>2]=j+g;if(n)Df(n);}else{i[l>>0]=0;k[s>>2]=(k[s>>2]|0)+1}c=c+-1|0}do if((c|0)==7){n=b&255;o=d+4|0;l=k[o>>2]|0;p=d+8|0;if((l|0)==(k[p>>2]|0)){r=k[d>>2]|0;s=r;j=l-s+1|0;if((j|0)<0)yf(d);q=r;a=l-q|0;if(a>>>0<1073741823){l=a<<1;l=l>>>0<j>>>0?j:l;j=k[o>>2]|0;a=j-q|0;if(!l){m=0;g=0;l=j}else w=31}else{a=k[o>>2]|0;l=2147483647;j=a;a=a-q|0;w=31}if((w|0)==31){m=l;g=Af(l)|0;l=j}i[g+a>>0]=n;l=l-q|0;n=g+(a-l)|0;Kg(n|0,r|0,l|0)|0;k[d>>2]=n;k[o>>2]=g+(a+1);k[p>>2]=g+m;if(s)Df(s);}else{i[l>>0]=n;k[o>>2]=(k[o>>2]|0)+1}o=e+4|0;a=k[o>>2]|0;n=e+8|0;if((a|0)!=(k[n>>2]|0)){i[a>>0]=0;k[o>>2]=(k[o>>2]|0)+1;v=6;break}m=k[e>>2]|0;p=m;j=a-p+1|0;if((j|0)<0)yf(e);q=m;a=a-q|0;if(a>>>0<1073741823){a=a<<1;a=a>>>0<j>>>0?j:a;l=k[o>>2]|0;j=l-q|0;if(!a){g=0;a=0}else w=41}else{j=k[o>>2]|0;a=2147483647;l=j;j=j-q|0;w=41}if((w|0)==41){g=a;a=Af(a)|0}i[a+j>>0]=0;q=l-q|0;l=a+(j-q)|0;Kg(l|0,m|0,q|0)|0;k[e>>2]=l;k[o>>2]=a+(j+1);k[n>>2]=a+g;if(!p)v=6;else{Df(p);v=6}}else if((c|0)<3){if((c|0)<=0)return;n=b&255;o=d+4|0;p=d+8|0;t=e+4|0;u=e+8|0;b=0;while(1){l=k[o>>2]|0;if((l|0)==(k[p>>2]|0)){r=k[d>>2]|0;g=r;a=l-g+1|0;if((a|0)<0){w=50;break}j=r;l=l-j|0;if(l>>>0<1073741823){l=l<<1;l=l>>>0<a>>>0?a:l;m=k[o>>2]|0;a=m-j|0;if(!l){s=0;q=0}else w=54}else{a=k[o>>2]|0;l=2147483647;m=a;a=a-j|0;w=54}if((w|0)==54){w=0;s=l;q=Af(l)|0}i[q+a>>0]=n;l=m-j|0;m=q+(a-l)|0;Kg(m|0,r|0,l|0)|0;k[d>>2]=m;k[o>>2]=q+(a+1);k[p>>2]=q+s;if(g)Df(g);}else{i[l>>0]=n;k[o>>2]=(k[o>>2]|0)+1}l=k[t>>2]|0;if((l|0)==(k[u>>2]|0)){r=k[e>>2]|0;g=r;a=l-g+1|0;if((a|0)<0){w=60;break}j=r;l=l-j|0;if(l>>>0<1073741823){l=l<<1;l=l>>>0<a>>>0?a:l;m=k[t>>2]|0;a=m-j|0;if(!l){s=0;q=0}else w=64}else{a=k[t>>2]|0;l=2147483647;m=a;a=a-j|0;w=64}if((w|0)==64){w=0;s=l;q=Af(l)|0}i[q+a>>0]=0;l=m-j|0;m=q+(a-l)|0;Kg(m|0,r|0,l|0)|0;k[e>>2]=m;k[t>>2]=q+(a+1);k[u>>2]=q+s;if(g)Df(g);}else{i[l>>0]=0;k[t>>2]=(k[t>>2]|0)+1}b=b+1|0;if((b|0)==(c|0)){w=99;break}}if((w|0)==50)yf(d);else if((w|0)==60)yf(e);else if((w|0)==99)return}else v=c;while(0);j=v+-3|0;t=d+4|0;l=k[t>>2]|0;a=k[d>>2]|0;g=l-a|0;do if((j|0)>-1){c=d+8|0;b=e+4|0;u=e+8|0;while(1){if((l|0)==(k[c>>2]|0)){s=k[d>>2]|0;r=s;a=l-r+1|0;if((a|0)<0){w=73;break}q=s;l=l-q|0;if(l>>>0<1073741823){l=l<<1;l=l>>>0<a>>>0?a:l;m=k[t>>2]|0;a=m-q|0;if(!l){o=0;n=0;l=m}else w=77}else{a=k[t>>2]|0;l=2147483647;m=a;a=a-q|0;w=77}if((w|0)==77){w=0;o=l;n=Af(l)|0;l=m}i[n+a>>0]=16;m=l-q|0;p=n+(a-m)|0;Kg(p|0,s|0,m|0)|0;k[d>>2]=p;k[t>>2]=n+(a+1);k[c>>2]=n+o;if(r)Df(r);}else{i[l>>0]=16;k[t>>2]=(k[t>>2]|0)+1}s=j&3;l=k[b>>2]|0;if((l|0)==(k[u>>2]|0)){r=k[e>>2]|0;o=r;a=l-o+1|0;if((a|0)<0){w=83;break}p=r;l=l-p|0;if(l>>>0<1073741823){l=l<<1;l=l>>>0<a>>>0?a:l;n=k[b>>2]|0;m=n-p|0;if(!l){a=0;q=0;l=n}else w=87}else{m=k[b>>2]|0;l=2147483647;n=m;m=m-p|0;w=87}if((w|0)==87){w=0;a=l;q=Af(l)|0;l=n}i[q+m>>0]=s;n=l-p|0;p=q+(m-n)|0;Kg(p|0,r|0,n|0)|0;k[e>>2]=p;k[b>>2]=q+(m+1);k[u>>2]=q+a;if(o)Df(o);}else{i[l>>0]=s;k[b>>2]=(k[b>>2]|0)+1}a=j>>2;l=k[t>>2]|0;if((a|0)>0)j=a+-1|0;else{f=l;w=91;break}}if((w|0)==73)yf(d);else if((w|0)==83)yf(e);else if((w|0)==91){h=f;f=k[d>>2]|0;break}}else{h=l;f=a}while(0);a=h-f|0;j=a+-1|0;if((j|0)>(g|0)){p=f+g|0;h=i[p>>0]|0;i[p>>0]=i[f+j>>0]|0;i[(k[d>>2]|0)+j>>0]=h;h=g+1|0;f=a+-2|0;if((h|0)<(f|0))do{n=k[d>>2]|0;o=n+h|0;p=i[o>>0]|0;i[o>>0]=i[n+f>>0]|0;i[(k[d>>2]|0)+f>>0]=p;h=h+1|0;f=f+-1|0}while((h|0)<(f|0));h=k[t>>2]|0;f=k[d>>2]|0}f=h-f+-1|0;if((f|0)<=(g|0))return;do{n=k[e>>2]|0;o=n+g|0;p=i[o>>0]|0;i[o>>0]=i[n+f>>0]|0;i[(k[e>>2]|0)+f>>0]=p;g=g+1|0;f=f+-1|0}while((g|0)<(f|0));return}function Qe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;do if((a|0)==11){n=b+4|0;h=k[n>>2]|0;o=b+8|0;if((h|0)==(k[o>>2]|0)){q=k[b>>2]|0;m=q;g=h-m+1|0;if((g|0)<0)yf(b);l=q;h=h-l|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<g>>>0?g:h;j=k[n>>2]|0;g=j-l|0;if(!h){e=0;h=0}else w=9}else{g=k[n>>2]|0;h=2147483647;j=g;g=g-l|0;w=9}if((w|0)==9){e=h;h=Af(h)|0}i[h+g>>0]=0;j=j-l|0;l=h+(g-j)|0;Kg(l|0,q|0,j|0)|0;k[b>>2]=l;k[n>>2]=h+(g+1);k[o>>2]=h+e;if(m)Df(m);}else{i[h>>0]=0;k[n>>2]=(k[n>>2]|0)+1}o=c+4|0;h=k[o>>2]|0;n=c+8|0;if((h|0)!=(k[n>>2]|0)){i[h>>0]=0;k[o>>2]=(k[o>>2]|0)+1;m=10;break}m=k[c>>2]|0;p=m;j=h-p+1|0;if((j|0)<0)yf(c);q=m;h=h-q|0;if(h>>>0<1073741823){g=h<<1;j=g>>>0<j>>>0?j:g;g=k[o>>2]|0;h=g-q|0;if(!j){l=0;e=0;j=g}else w=19}else{h=k[o>>2]|0;j=2147483647;g=h;h=h-q|0;w=19}if((w|0)==19){l=j;e=Af(j)|0;j=g}i[e+h>>0]=0;g=j-q|0;j=e+(h-g)|0;Kg(j|0,m|0,g|0)|0;k[c>>2]=j;k[o>>2]=e+(h+1);k[n>>2]=e+l;if(!p)m=10;else{Df(p);m=10}}else if((a|0)<3){if((a|0)<=0)return;o=b+4|0;s=b+8|0;t=c+4|0;u=c+8|0;v=0;while(1){j=k[o>>2]|0;if((j|0)==(k[s>>2]|0)){r=k[b>>2]|0;e=r;h=j-e+1|0;if((h|0)<0){w=28;break}p=r;j=j-p|0;if(j>>>0<1073741823){j=j<<1;j=j>>>0<h>>>0?h:j;l=k[o>>2]|0;h=l-p|0;if(!j){q=0;n=0}else w=32}else{h=k[o>>2]|0;j=2147483647;l=h;h=h-p|0;w=32}if((w|0)==32){w=0;q=j;n=Af(j)|0}i[n+h>>0]=0;j=l-p|0;l=n+(h-j)|0;Kg(l|0,r|0,j|0)|0;k[b>>2]=l;k[o>>2]=n+(h+1);k[s>>2]=n+q;if(e)Df(e);}else{i[j>>0]=0;k[o>>2]=(k[o>>2]|0)+1}j=k[t>>2]|0;if((j|0)==(k[u>>2]|0)){p=k[c>>2]|0;e=p;h=j-e+1|0;if((h|0)<0){w=38;break}g=p;j=j-g|0;if(j>>>0<1073741823){j=j<<1;j=j>>>0<h>>>0?h:j;l=k[t>>2]|0;h=l-g|0;if(!j){q=0;n=0}else w=42}else{h=k[t>>2]|0;j=2147483647;l=h;h=h-g|0;w=42}if((w|0)==42){w=0;q=j;n=Af(j)|0}i[n+h>>0]=0;j=l-g|0;l=n+(h-j)|0;Kg(l|0,p|0,j|0)|0;k[c>>2]=l;k[t>>2]=n+(h+1);k[u>>2]=n+q;if(e)Df(e);}else{i[j>>0]=0;k[t>>2]=(k[t>>2]|0)+1}v=v+1|0;if((v|0)==(a|0)){w=77;break}}if((w|0)==28)yf(b);else if((w|0)==38)yf(c);else if((w|0)==77)return}else m=a;while(0);g=m+-3|0;t=b+4|0;j=k[t>>2]|0;h=k[b>>2]|0;e=j-h|0;do if((g|0)>-1){a=b+8|0;v=c+4|0;u=c+8|0;while(1){if((j|0)==(k[a>>2]|0)){q=k[b>>2]|0;p=q;h=j-p+1|0;if((h|0)<0){w=51;break}o=q;j=j-o|0;if(j>>>0<1073741823){j=j<<1;j=j>>>0<h>>>0?h:j;h=k[t>>2]|0;l=h-o|0;if(!j){n=0;m=0;j=h}else w=55}else{l=k[t>>2]|0;j=2147483647;h=l;l=l-o|0;w=55}if((w|0)==55){w=0;n=j;m=Af(j)|0;j=h}i[m+l>>0]=17;j=j-o|0;o=m+(l-j)|0;Kg(o|0,q|0,j|0)|0;k[b>>2]=o;k[t>>2]=m+(l+1);k[a>>2]=m+n;if(p)Df(p);}else{i[j>>0]=17;k[t>>2]=(k[t>>2]|0)+1}p=g&7;j=k[v>>2]|0;if((j|0)==(k[u>>2]|0)){m=k[c>>2]|0;o=m;h=j-o+1|0;if((h|0)<0){w=61;break}r=m;j=j-r|0;if(j>>>0<1073741823){j=j<<1;j=j>>>0<h>>>0?h:j;l=k[v>>2]|0;h=l-r|0;if(!j){q=0;n=0}else w=65}else{h=k[v>>2]|0;j=2147483647;l=h;h=h-r|0;w=65}if((w|0)==65){w=0;q=j;n=Af(j)|0}i[n+h>>0]=p;j=l-r|0;l=n+(h-j)|0;Kg(l|0,m|0,j|0)|0;k[c>>2]=l;k[v>>2]=n+(h+1);k[u>>2]=n+q;if(o)Df(o);}else{i[j>>0]=p;k[v>>2]=(k[v>>2]|0)+1}h=g>>3;j=k[t>>2]|0;if((h|0)>0)g=h+-1|0;else{d=j;w=69;break}}if((w|0)==51)yf(b);else if((w|0)==61)yf(c);else if((w|0)==69){f=d;d=k[b>>2]|0;break}}else{f=j;d=h}while(0);h=f-d|0;g=h+-1|0;if((g|0)>(e|0)){o=d+e|0;f=i[o>>0]|0;i[o>>0]=i[d+g>>0]|0;i[(k[b>>2]|0)+g>>0]=f;f=e+1|0;d=h+-2|0;if((f|0)<(d|0))do{m=k[b>>2]|0;n=m+f|0;o=i[n>>0]|0;i[n>>0]=i[m+d>>0]|0;i[(k[b>>2]|0)+d>>0]=o;f=f+1|0;d=d+-1|0}while((f|0)<(d|0));f=k[t>>2]|0;d=k[b>>2]|0}d=f-d+-1|0;if((d|0)<=(e|0))return;do{m=k[c>>2]|0;n=m+e|0;o=i[n>>0]|0;i[n>>0]=i[m+d>>0]|0;i[(k[c>>2]|0)+d>>0]=o;e=e+1|0;d=d+-1|0}while((e|0)<(d|0));return}function Re(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;if((a|0)>0){d=0;c=0}else{m=1;return m|0}do{c=((k[b+(d<<2)>>2]|0)!=0&1)+c|0;d=d+1|0}while((d|0)!=(a|0));if((c|0)<16){m=1;return m|0}else c=a;while(1){d=(c|0)>-1;if((c|0)==0|d^1){c=1;p=55;break}a=c+-1|0;if(!(k[b+(a<<2)>>2]|0))c=a;else break}if((p|0)==55)return c|0;if((c|0)>0){g=0;e=0;a=1073741824}else{m=1;return m|0}do{f=k[b+(g<<2)>>2]|0;if(f){e=e+1|0;a=(a|0)>(f|0)?f:a}g=g+1|0}while((g|0)!=(c|0));if((e|0)<5){m=1;return m|0}if((a|0)<4&(c-e|0)<6?(l=c+-1|0,(l|0)>1):0){a=1;do{if(((k[b+(a+-1<<2)>>2]|0)!=0?(j=b+(a<<2)|0,(k[j>>2]|0)==0):0)?(k[b+(a+1<<2)>>2]|0)!=0:0)k[j>>2]=1;a=a+1|0}while((a|0)!=(l|0));}if((e|0)<28){m=1;return m|0}m=og(c,1)|0;if(!m){m=0;return m|0}n=c+1|0;if(d){j=0;e=0;a=k[b>>2]|0;do{f=(j|0)==(c|0);if(!f?(k[b+(j<<2)>>2]|0)==(a|0):0)e=e+1|0;else{if((a|0)==0&(e|0)>4){if((e|0)>0)p=27}else if((e|0)>6&(a|0)!=0)p=27;if((p|0)==27){p=0;g=j+-1|0;h=0;do{i[m+(g-h)>>0]=1;h=h+1|0}while((h|0)!=(e|0));}if(f)e=1;else{e=1;a=k[b+(j<<2)>>2]|0}}j=j+1|0}while((j|0)<(n|0));if(d){g=c+-2|0;a=0;d=(((k[b+4>>2]|0)+(k[b>>2]|0)+(k[b+8>>2]|0)<<8|0)/3|0)+420|0;l=0;f=0;do{h=(a|0)==(c|0);do if(!h?(i[m+a>>0]|0)==0:0){if((a|0)!=0?(i[m+(a+-1)>>0]|0)!=0:0){p=40;break}j=(k[b+(a<<2)>>2]<<8)-d|0;if((((j|0)>-1?j:0-j|0)|0)<=1239)j=l;else p=40}else p=40;while(0);do if((p|0)==40){p=0;if(!((l|0)<=3?!((l|0)>2&(f|0)==0):0))p=42;if((p|0)==42?(p=0,o=(((l|0)/2|0)+f|0)/(l|0)|0,o=(f|0)==0?0:(o|0)<1?1:o,(l|0)>0):0){f=a+-1|0;e=0;do{k[b+(f-e<<2)>>2]=o;e=e+1|0}while((e|0)!=(l|0));}if((a|0)<(g|0)){d=(((k[b+(a+1<<2)>>2]|0)+(k[b+(a<<2)>>2]|0)+(k[b+(a+2<<2)>>2]|0)<<8|0)/3|0)+420|0;j=0;f=0;break}if((a|0)<(c|0)){d=k[b+(a<<2)>>2]<<8;j=0;f=0}else{d=0;j=0;f=0}}while(0);l=j+1|0;if(!h){f=(k[b+(a<<2)>>2]|0)+f|0;if((j|0)>2)d=(((l|0)/2|0)+(f<<8)|0)/(l|0)|0;d=(l|0)==4?d+120|0:d}a=a+1|0}while((a|0)<(n|0));}}ng(m);m=1;return m|0}function Se(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;if(!b)return;f=b+-1|0;g=0;e=b;do{if(i[a+(f-g)>>0]|0)break;e=e+-1|0;g=g+1|0}while(g>>>0<b>>>0);if(b>>>0>50){if(!e){k=0;j=0;e=0;b=0;g=0}else{f=0;h=0;m=0;b=0;g=0;do{l=i[a+m>>0]|0;j=m+1|0;a:do if(j>>>0<e>>>0){k=1;do{if((i[a+j>>0]|0)!=l<<24>>24)break a;k=k+1|0;j=j+1|0}while(j>>>0<e>>>0);}else k=1;while(0);j=l<<24>>24==0&(k|0)>2;h=(j&1)+h|0;g=(j?k:0)+g|0;l=l<<24>>24!=0&(k|0)>3;b=(l?k:0)+b|0;f=(l&1)+f|0;m=k+m|0}while(m>>>0<e>>>0);k=f<<1;j=h<<1}b=(b-k|0)>2&1;f=(g-j|0)>2&1;m=e}else{b=0;f=0;m=e}if(!m)return;l=f<<24>>24==0;if(!(b<<24>>24)){f=0;e=8;do{k=i[a+f>>0]|0;h=k&255;g=k<<24>>24==0;b:do if(!(l|k<<24>>24!=0)?(n=f+1|0,n>>>0<m>>>0):0){j=n;b=1;do{if((i[a+j>>0]|0)!=k<<24>>24)break b;b=b+1|0;j=j+1|0}while(j>>>0<m>>>0);}else b=1;while(0);if(g)Qe(b,c,d);else{Pe(e,h,b,c,d);e=h}f=b+f|0}while(f>>>0<m>>>0);return}if(l){l=0;g=8}else{h=0;j=8;while(1){b=i[a+h>>0]|0;e=b&255;k=b<<24>>24==0;g=h+1|0;c:do if(g>>>0<m>>>0){f=1;while(1){if((i[a+g>>0]|0)!=b<<24>>24){g=f;break c}f=f+1|0;g=g+1|0;if(g>>>0>=m>>>0){g=f;break}}}else g=1;while(0);if(k){Qe(g,c,d);e=j}else Pe(j,e,g,c,d);h=g+h|0;if(h>>>0>=m>>>0)break;else j=e}return}do{k=i[a+l>>0]|0;h=k&255;j=k<<24>>24==0;do if(j){e=1;o=29}else{f=l+1|0;if(f>>>0<m>>>0){e=1;do{if((i[a+f>>0]|0)!=k<<24>>24)break;e=e+1|0;f=f+1|0}while(f>>>0<m>>>0);if(j){o=29;break}}else e=1;Pe(g,h,e,c,d);g=h}while(0);if((o|0)==29){o=0;Qe(e,c,d);}l=e+l|0}while(l>>>0<m>>>0);return}function Te(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,n=0,o=0;o=r;r=r+64|0;f=o+32|0;n=o;e=f;d=e+32|0;do{j[e>>1]=0;e=e+2|0}while((e|0)<(d|0));d=(b|0)>0;if(d){e=0;do{g=f+((l[a+e>>0]|0)<<1)|0;j[g>>1]=(j[g>>1]|0)+1<<16>>16;e=e+1|0}while((e|0)!=(b|0));}j[f>>1]=0;j[n>>1]=0;j[n+2>>1]=0;e=(m[f+2>>1]|0)<<1;j[n+4>>1]=e;e=(m[f+4>>1]|0)+e<<1;j[n+6>>1]=e;e=(m[f+6>>1]|0)+e<<1;j[n+8>>1]=e;e=(m[f+8>>1]|0)+e<<1;j[n+10>>1]=e;e=(m[f+10>>1]|0)+e<<1;j[n+12>>1]=e;e=(m[f+12>>1]|0)+e<<1;j[n+14>>1]=e;e=(m[f+14>>1]|0)+e<<1;j[n+16>>1]=e;e=(m[f+16>>1]|0)+e<<1;j[n+18>>1]=e;e=(m[f+18>>1]|0)+e<<1;j[n+20>>1]=e;e=(m[f+20>>1]|0)+e<<1;j[n+22>>1]=e;e=(m[f+22>>1]|0)+e<<1;j[n+24>>1]=e;e=(m[f+24>>1]|0)+e<<1;j[n+26>>1]=e;e=(m[f+26>>1]|0)+e<<1;j[n+28>>1]=e;j[n+30>>1]=(m[f+28>>1]|0)+e<<1;if(d)h=0;else{r=o;return}do{d=i[a+h>>0]|0;if(d<<24>>24){g=d&255;e=n+(g<<1)|0;f=j[e>>1]|0;j[e>>1]=f+1<<16>>16;e=k[315552+((f&15)<<2)>>2]|0;if((d&255)>4){d=4;do{f=(f&65535)>>>4;e=k[315552+((f&15)<<2)>>2]|e<<4;d=d+4|0}while((d|0)<(g|0));}j[c+(h<<1)>>1]=e>>>(0-g&3);}h=h+1|0}while((h|0)!=(b|0));r=o;return}function Ue(a,b){a=a|0;b=b|0;return (k[a>>2]|0)<(k[b>>2]|0)|0}function Ve(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0;l=r;r=r+16|0;i=l;if((d|0)==1|(d|0)==0){r=l;return}else if((d|0)==2){g=b+-8|0;if(!(nb[k[c>>2]&1](g,a)|0)){r=l;return}b=a;j=k[b>>2]|0;b=k[b+4>>2]|0;d=g;i=k[d+4>>2]|0;c=a;k[c>>2]=k[d>>2];k[c+4>>2]=i;c=g;k[c>>2]=j;k[c+4>>2]=b;r=l;return}else{if((d|0)<129){if((a|0)!=(b|0)?(h=a+8|0,(h|0)!=(b|0)):0)do{e=h;g=h;f=k[g+4>>2]|0;d=i;k[d>>2]=k[g>>2];k[d+4>>2]=f;a:do if((h|0)==(a|0))j=8;else{f=h;while(1){f=f+-8|0;g=e;if(!(nb[k[c>>2]&1](i,f)|0)){e=g;break a}m=f;d=k[m+4>>2]|0;k[e>>2]=k[m>>2];k[e+4>>2]=d;e=g+-8|0;if((f|0)==(a|0)){j=8;break}}}while(0);if((j|0)==8)j=0;g=i;f=k[g+4>>2]|0;d=e;k[d>>2]=k[g>>2];k[d+4>>2]=f;h=h+8|0}while((h|0)!=(b|0));r=l;return}h=(d|0)/2|0;g=a+(h<<3)|0;if((d|0)>(f|0)){Ve(a,g,c,h,e,f);j=d-h|0;Ve(g,b,c,j,e,f);Ye(a,g,b,c,h,j,e,f);r=l;return}Xe(a,g,c,h,e);j=e+(h<<3)|0;Xe(g,b,c,d-h|0,j);f=e+(d<<3)|0;b:do if((d+1|0)>>>0<3){e=j;g=a}else{h=j;g=a;while(1){if((h|0)==(f|0))break;if(nb[k[c>>2]&1](h,e)|0){i=h;b=k[i+4>>2]|0;a=g;k[a>>2]=k[i>>2];k[a+4>>2]=b;h=h+8|0}else{i=e;b=k[i+4>>2]|0;a=g;k[a>>2]=k[i>>2];k[a+4>>2]=b;e=e+8|0}g=g+8|0;if((e|0)==(j|0)){e=h;break b}}if((e|0)==(j|0)){r=l;return}while(1){b=e;a=k[b+4>>2]|0;c=g;k[c>>2]=k[b>>2];k[c+4>>2]=a;e=e+8|0;if((e|0)==(j|0))break;else g=g+8|0}r=l;return}while(0);if((e|0)==(f|0)){r=l;return}while(1){b=e;a=k[b+4>>2]|0;c=g;k[c>>2]=k[b>>2];k[c+4>>2]=a;e=e+8|0;if((e|0)==(f|0))break;else g=g+8|0}r=l;return}}function We(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=j[a+4>>1]|0;if(e<<16>>16>-1){do{d=d+1|0;We(b+(e<<16>>16<<3)|0,b,c,d);f=j[a+6>>1]|0;a=b+(f<<3)|0;e=j[b+(f<<3)+4>>1]|0}while(e<<16>>16>-1);e=d}else e=d;i[c+(j[a+6>>1]|0)>>0]=e;return}
function Ec(a,b,c,d,e,f,g,h,i,m,n,o,q,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;m=m|0;n=n|0;o=o|0;q=q|0;s=s|0;var t=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;X=r;r=r+80|0;Q=X+68|0;S=X+64|0;O=X+60|0;U=X+40|0;R=X+56|0;T=X+52|0;P=X+48|0;V=X+32|0;W=X;if(a>>>0>2&b>>>0>2){K=b+-3|0;J=c+(K&d)|0;J=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>17;L=m+(J<<1)|0;M=j[L>>1]|0;k[m+65536+(J<<8)+((M&63)<<2)>>2]=K;j[L>>1]=M+1<<16>>16;L=b+-2|0;M=c+(L&d)|0;M=(ia(l[M>>0]|l[M+1>>0]<<8|l[M+2>>0]<<16|l[M+3>>0]<<24,506832829)|0)>>>17;J=m+(M<<1)|0;K=j[J>>1]|0;k[m+65536+(M<<8)+((K&63)<<2)>>2]=L;j[J>>1]=K+1<<16>>16;J=b+-1|0;K=c+(J&d)|0;K=(ia(l[K>>0]|l[K+1>>0]<<8|l[K+2>>0]<<16|l[K+3>>0]<<24,506832829)|0)>>>17;M=m+(K<<1)|0;L=j[M>>1]|0;k[m+65536+(K<<8)+((L&63)<<2)>>2]=J;j[M>>1]=L+1<<16>>16}t=k[o>>2]|0;u=d&b;E=b-u|0;F=u+a|0;G=(i|0)<9?64:512;if((u+3|0)>>>0>=F>>>0){L=q;M=a;K=t;M=K+M|0;k[o>>2]=M;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}H=G<<2;I=F+-4|0;J=F+-3|0;K=(i|0)<4;L=n+4|0;M=n+8|0;N=n+12|0;D=(i|0)>1;C=q;B=G+u|0;a:while(1){A=B+H|0;while(1){b=u+E|0;k[Q>>2]=0;k[S>>2]=0;k[O>>2]=0;p[U>>3]=h;if(Pc(m,c,d,e,f,5.4,n,b,a,b>>>0>g>>>0?g:b,Q,S,O,U)|0){i=0;break}t=t+1|0;w=c+u|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>17;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+65536+(w<<8)+((a&63)<<2)>>2]=b;j[i>>1]=a+1<<16>>16;b=u+1|0;do if(b>>>0>B>>>0)if(b>>>0>A>>>0){u=u+17|0;u=I>>>0<u>>>0?I:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>17;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+65536+(w<<8)+((a&63)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+4|0;b=b+4|0}while(b>>>0<u>>>0);}else{u=u+9|0;u=J>>>0<u>>>0?J:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>17;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+65536+(w<<8)+((a&63)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+2|0;b=b+2|0}while(b>>>0<u>>>0);}while(0);a=F-b|0;if((b+3|0)>>>0<F>>>0)u=b;else{b=C;i=34;break a}}while(1){a=a+-1|0;if(K){b=(k[Q>>2]|0)+-1|0;b=(a|0)<(b|0)?a:b}else b=0;k[R>>2]=b;k[T>>2]=0;k[P>>2]=0;p[V>>3]=h;y=u+E|0;B=y+1|0;x=c+u|0;x=(ia(l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24,506832829)|0)>>>17;b=m+(x<<1)|0;w=j[b>>1]|0;k[m+65536+(x<<8)+((w&63)<<2)>>2]=y;j[b>>1]=w+1<<16>>16;if(!(Pc(m,c,d,e,f,5.4,n,B,a,B>>>0>g>>>0?g:B,R,T,P,V)|0))break;v=+p[V>>3];if(!(v>=+p[U>>3]+7.0))break;b=u+1|0;t=t+1|0;k[Q>>2]=k[R>>2];k[S>>2]=k[T>>2];k[O>>2]=k[P>>2];p[U>>3]=v;i=i+1|0;if((i|0)>=4){u=b;break}else u=b}z=k[Q>>2]|0;B=u+G+(z<<1)|0;A=u+E|0;w=k[O>>2]|0;b=w+16|0;do if(w>>>0<=(A>>>0>g>>>0?g:A)>>>0){x=k[n>>2]|0;if((w|0)==(x|0))b=1;else{y=k[L>>2]|0;a=k[M>>2]|0;if((w|0)!=(y|0))if((w|0)!=(a|0))if((w|0)!=(k[N>>2]|0)){b:do if(D&(w|0)>5){i=4;while(1){if((w|0)==((k[800+(i<<2)>>2]|0)+(k[n+(k[736+(i<<2)>>2]<<2)>>2]|0)|0)?(w|0)>=(k[189760+(i<<2)>>2]|0):0){b=i;break}i=i+1|0;if((i|0)>=16)break b}b=b+1|0}while(0);if((b|0)<=1)break}else b=4;else{a=w;b=3}else b=2;k[N>>2]=a;k[M>>2]=y;k[L>>2]=x;k[n>>2]=w}}while(0);Kc(W,t,z,k[S>>2]|0,b);b=C+32|0;k[C>>2]=k[W>>2];k[C+4>>2]=k[W+4>>2];k[C+8>>2]=k[W+8>>2];k[C+12>>2]=k[W+12>>2];k[C+16>>2]=k[W+16>>2];k[C+20>>2]=k[W+20>>2];k[C+24>>2]=k[W+24>>2];if((z|0)>1){a=1;do{i=c+(a+u)|0;i=(ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>17;C=m+(i<<1)|0;t=j[C>>1]|0;k[m+65536+(i<<8)+((t&63)<<2)>>2]=a+A;j[C>>1]=t+1<<16>>16;a=a+1|0}while((a|0)<(z|0));}u=z+u|0;a=F-u|0;if((u+3|0)>>>0>=F>>>0){t=0;i=34;break}else{C=b;t=0}}if((i|0)==34){L=t+a|0;k[o>>2]=L;L=b;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}}function Fc(a,b,c,d,e,f,g,h,i,m,n,o,q,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;m=m|0;n=n|0;o=o|0;q=q|0;s=s|0;var t=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;X=r;r=r+80|0;Q=X+68|0;S=X+64|0;O=X+60|0;U=X+40|0;R=X+56|0;T=X+52|0;P=X+48|0;V=X+32|0;W=X;if(a>>>0>2&b>>>0>2){K=b+-3|0;J=c+(K&d)|0;J=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>17;L=m+(J<<1)|0;M=j[L>>1]|0;k[m+65536+(J<<9)+((M&127)<<2)>>2]=K;j[L>>1]=M+1<<16>>16;L=b+-2|0;M=c+(L&d)|0;M=(ia(l[M>>0]|l[M+1>>0]<<8|l[M+2>>0]<<16|l[M+3>>0]<<24,506832829)|0)>>>17;J=m+(M<<1)|0;K=j[J>>1]|0;k[m+65536+(M<<9)+((K&127)<<2)>>2]=L;j[J>>1]=K+1<<16>>16;J=b+-1|0;K=c+(J&d)|0;K=(ia(l[K>>0]|l[K+1>>0]<<8|l[K+2>>0]<<16|l[K+3>>0]<<24,506832829)|0)>>>17;M=m+(K<<1)|0;L=j[M>>1]|0;k[m+65536+(K<<9)+((L&127)<<2)>>2]=J;j[M>>1]=L+1<<16>>16}t=k[o>>2]|0;u=d&b;E=b-u|0;F=u+a|0;G=(i|0)<9?64:512;if((u+3|0)>>>0>=F>>>0){L=q;M=a;K=t;M=K+M|0;k[o>>2]=M;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}H=G<<2;I=F+-4|0;J=F+-3|0;K=(i|0)<4;L=n+4|0;M=n+8|0;N=n+12|0;D=(i|0)>1;C=q;B=G+u|0;a:while(1){A=B+H|0;while(1){b=u+E|0;k[Q>>2]=0;k[S>>2]=0;k[O>>2]=0;p[U>>3]=h;if(Oc(m,c,d,e,f,5.4,n,b,a,b>>>0>g>>>0?g:b,Q,S,O,U)|0){i=0;break}t=t+1|0;w=c+u|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>17;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+65536+(w<<9)+((a&127)<<2)>>2]=b;j[i>>1]=a+1<<16>>16;b=u+1|0;do if(b>>>0>B>>>0)if(b>>>0>A>>>0){u=u+17|0;u=I>>>0<u>>>0?I:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>17;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+65536+(w<<9)+((a&127)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+4|0;b=b+4|0}while(b>>>0<u>>>0);}else{u=u+9|0;u=J>>>0<u>>>0?J:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>17;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+65536+(w<<9)+((a&127)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+2|0;b=b+2|0}while(b>>>0<u>>>0);}while(0);a=F-b|0;if((b+3|0)>>>0<F>>>0)u=b;else{b=C;i=34;break a}}while(1){a=a+-1|0;if(K){b=(k[Q>>2]|0)+-1|0;b=(a|0)<(b|0)?a:b}else b=0;k[R>>2]=b;k[T>>2]=0;k[P>>2]=0;p[V>>3]=h;y=u+E|0;B=y+1|0;x=c+u|0;x=(ia(l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24,506832829)|0)>>>17;b=m+(x<<1)|0;w=j[b>>1]|0;k[m+65536+(x<<9)+((w&127)<<2)>>2]=y;j[b>>1]=w+1<<16>>16;if(!(Oc(m,c,d,e,f,5.4,n,B,a,B>>>0>g>>>0?g:B,R,T,P,V)|0))break;v=+p[V>>3];if(!(v>=+p[U>>3]+7.0))break;b=u+1|0;t=t+1|0;k[Q>>2]=k[R>>2];k[S>>2]=k[T>>2];k[O>>2]=k[P>>2];p[U>>3]=v;i=i+1|0;if((i|0)>=4){u=b;break}else u=b}z=k[Q>>2]|0;B=u+G+(z<<1)|0;A=u+E|0;w=k[O>>2]|0;b=w+16|0;do if(w>>>0<=(A>>>0>g>>>0?g:A)>>>0){x=k[n>>2]|0;if((w|0)==(x|0))b=1;else{y=k[L>>2]|0;a=k[M>>2]|0;if((w|0)!=(y|0))if((w|0)!=(a|0))if((w|0)!=(k[N>>2]|0)){b:do if(D&(w|0)>5){i=4;while(1){if((w|0)==((k[800+(i<<2)>>2]|0)+(k[n+(k[736+(i<<2)>>2]<<2)>>2]|0)|0)?(w|0)>=(k[189696+(i<<2)>>2]|0):0){b=i;break}i=i+1|0;if((i|0)>=16)break b}b=b+1|0}while(0);if((b|0)<=1)break}else b=4;else{a=w;b=3}else b=2;k[N>>2]=a;k[M>>2]=y;k[L>>2]=x;k[n>>2]=w}}while(0);Kc(W,t,z,k[S>>2]|0,b);b=C+32|0;k[C>>2]=k[W>>2];k[C+4>>2]=k[W+4>>2];k[C+8>>2]=k[W+8>>2];k[C+12>>2]=k[W+12>>2];k[C+16>>2]=k[W+16>>2];k[C+20>>2]=k[W+20>>2];k[C+24>>2]=k[W+24>>2];if((z|0)>1){a=1;do{i=c+(a+u)|0;i=(ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>17;C=m+(i<<1)|0;t=j[C>>1]|0;k[m+65536+(i<<9)+((t&127)<<2)>>2]=a+A;j[C>>1]=t+1<<16>>16;a=a+1|0}while((a|0)<(z|0));}u=z+u|0;a=F-u|0;if((u+3|0)>>>0>=F>>>0){t=0;i=34;break}else{C=b;t=0}}if((i|0)==34){L=t+a|0;k[o>>2]=L;L=b;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}}function Gc(a,b,c,d,e,f,g,h,i,m,n,o,q,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;m=m|0;n=n|0;o=o|0;q=q|0;s=s|0;var t=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;X=r;r=r+80|0;Q=X+68|0;S=X+64|0;O=X+60|0;U=X+40|0;R=X+56|0;T=X+52|0;P=X+48|0;V=X+32|0;W=X;if(a>>>0>2&b>>>0>2){K=b+-3|0;J=c+(K&d)|0;J=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>17;L=m+(J<<1)|0;M=j[L>>1]|0;k[m+65536+(J<<10)+((M&255)<<2)>>2]=K;j[L>>1]=M+1<<16>>16;L=b+-2|0;M=c+(L&d)|0;M=(ia(l[M>>0]|l[M+1>>0]<<8|l[M+2>>0]<<16|l[M+3>>0]<<24,506832829)|0)>>>17;J=m+(M<<1)|0;K=j[J>>1]|0;k[m+65536+(M<<10)+((K&255)<<2)>>2]=L;j[J>>1]=K+1<<16>>16;J=b+-1|0;K=c+(J&d)|0;K=(ia(l[K>>0]|l[K+1>>0]<<8|l[K+2>>0]<<16|l[K+3>>0]<<24,506832829)|0)>>>17;M=m+(K<<1)|0;L=j[M>>1]|0;k[m+65536+(K<<10)+((L&255)<<2)>>2]=J;j[M>>1]=L+1<<16>>16}t=k[o>>2]|0;u=d&b;E=b-u|0;F=u+a|0;G=(i|0)<9?64:512;if((u+3|0)>>>0>=F>>>0){L=q;M=a;K=t;M=K+M|0;k[o>>2]=M;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}H=G<<2;I=F+-4|0;J=F+-3|0;K=(i|0)<4;L=n+4|0;M=n+8|0;N=n+12|0;D=(i|0)>1;C=q;B=G+u|0;a:while(1){A=B+H|0;while(1){b=u+E|0;k[Q>>2]=0;k[S>>2]=0;k[O>>2]=0;p[U>>3]=h;if(Nc(m,c,d,e,f,5.4,n,b,a,b>>>0>g>>>0?g:b,Q,S,O,U)|0){i=0;break}t=t+1|0;w=c+u|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>17;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+65536+(w<<10)+((a&255)<<2)>>2]=b;j[i>>1]=a+1<<16>>16;b=u+1|0;do if(b>>>0>B>>>0)if(b>>>0>A>>>0){u=u+17|0;u=I>>>0<u>>>0?I:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>17;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+65536+(w<<10)+((a&255)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+4|0;b=b+4|0}while(b>>>0<u>>>0);}else{u=u+9|0;u=J>>>0<u>>>0?J:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>17;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+65536+(w<<10)+((a&255)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+2|0;b=b+2|0}while(b>>>0<u>>>0);}while(0);a=F-b|0;if((b+3|0)>>>0<F>>>0)u=b;else{b=C;i=34;break a}}while(1){a=a+-1|0;if(K){b=(k[Q>>2]|0)+-1|0;b=(a|0)<(b|0)?a:b}else b=0;k[R>>2]=b;k[T>>2]=0;k[P>>2]=0;p[V>>3]=h;y=u+E|0;B=y+1|0;x=c+u|0;x=(ia(l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24,506832829)|0)>>>17;b=m+(x<<1)|0;w=j[b>>1]|0;k[m+65536+(x<<10)+((w&255)<<2)>>2]=y;j[b>>1]=w+1<<16>>16;if(!(Nc(m,c,d,e,f,5.4,n,B,a,B>>>0>g>>>0?g:B,R,T,P,V)|0))break;v=+p[V>>3];if(!(v>=+p[U>>3]+7.0))break;b=u+1|0;t=t+1|0;k[Q>>2]=k[R>>2];k[S>>2]=k[T>>2];k[O>>2]=k[P>>2];p[U>>3]=v;i=i+1|0;if((i|0)>=4){u=b;break}else u=b}z=k[Q>>2]|0;B=u+G+(z<<1)|0;A=u+E|0;w=k[O>>2]|0;b=w+16|0;do if(w>>>0<=(A>>>0>g>>>0?g:A)>>>0){x=k[n>>2]|0;if((w|0)==(x|0))b=1;else{y=k[L>>2]|0;a=k[M>>2]|0;if((w|0)!=(y|0))if((w|0)!=(a|0))if((w|0)!=(k[N>>2]|0)){b:do if(D&(w|0)>5){i=4;while(1){if((w|0)==((k[800+(i<<2)>>2]|0)+(k[n+(k[736+(i<<2)>>2]<<2)>>2]|0)|0)?(w|0)>=(k[189632+(i<<2)>>2]|0):0){b=i;break}i=i+1|0;if((i|0)>=16)break b}b=b+1|0}while(0);if((b|0)<=1)break}else b=4;else{a=w;b=3}else b=2;k[N>>2]=a;k[M>>2]=y;k[L>>2]=x;k[n>>2]=w}}while(0);Kc(W,t,z,k[S>>2]|0,b);b=C+32|0;k[C>>2]=k[W>>2];k[C+4>>2]=k[W+4>>2];k[C+8>>2]=k[W+8>>2];k[C+12>>2]=k[W+12>>2];k[C+16>>2]=k[W+16>>2];k[C+20>>2]=k[W+20>>2];k[C+24>>2]=k[W+24>>2];if((z|0)>1){a=1;do{i=c+(a+u)|0;i=(ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>17;C=m+(i<<1)|0;t=j[C>>1]|0;k[m+65536+(i<<10)+((t&255)<<2)>>2]=a+A;j[C>>1]=t+1<<16>>16;a=a+1|0}while((a|0)<(z|0));}u=z+u|0;a=F-u|0;if((u+3|0)>>>0>=F>>>0){t=0;i=34;break}else{C=b;t=0}}if((i|0)==34){L=t+a|0;k[o>>2]=L;L=b;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}}function Hc(a,b,c,d,e,f,g,h,i,m,n,q,s,t){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;m=m|0;n=n|0;q=q|0;s=s|0;t=t|0;var u=0,v=0,w=0.0,x=0,y=0.0,z=0.0,A=0,B=0,C=0,D=0,E=0.0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0.0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0;ga=r;r=r+128|0;_=ga+120|0;ba=ga+116|0;X=ga+112|0;ea=ga+80|0;Y=ga+108|0;$=ga+104|0;V=ga+100|0;ca=ga+72|0;R=ga+40|0;Z=ga+96|0;aa=ga+92|0;W=ga+88|0;da=ga+32|0;fa=ga;if(a>>>0>2&b>>>0>2){S=b+-3|0;B=c+(S&d)|0;B=(ia(l[B>>0]|l[B+1>>0]<<8|l[B+2>>0]<<16|l[B+3>>0]<<24,506832829)|0)>>>17;T=m+(B<<1)|0;U=j[T>>1]|0;k[m+65536+(B<<10)+((U&255)<<2)>>2]=S;j[T>>1]=U+1<<16>>16;T=b+-2|0;U=c+(T&d)|0;U=(ia(l[U>>0]|l[U+1>>0]<<8|l[U+2>>0]<<16|l[U+3>>0]<<24,506832829)|0)>>>17;B=m+(U<<1)|0;S=j[B>>1]|0;k[m+65536+(U<<10)+((S&255)<<2)>>2]=T;j[B>>1]=S+1<<16>>16;B=b+-1|0;S=c+(B&d)|0;S=(ia(l[S>>0]|l[S+1>>0]<<8|l[S+2>>0]<<16|l[S+3>>0]<<24,506832829)|0)>>>17;U=m+(S<<1)|0;T=j[U>>1]|0;k[m+65536+(S<<10)+((T&255)<<2)>>2]=B;j[U>>1]=T+1<<16>>16}u=k[q>>2]|0;A=d&b;S=b-A|0;T=A+a|0;U=(i|0)<9?64:512;x=U+A|0;v=b+a|0;if(v>>>0>b>>>0){w=0.0;do{w=w+ +o[e+((b&f)<<2)>>2];b=b+1|0}while((b|0)!=(v|0));}else w=0.0;Q=(a|0)==0?w:w/+(a>>>0);k[_>>2]=0;k[ba>>2]=0;k[X>>2]=0;p[ea>>3]=0.0;if((A+3|0)>>>0>=T>>>0){e=s;m=a;n=u;m=n+m|0;k[q>>2]=m;s=e-s|0;s=s>>5;e=k[t>>2]|0;s=e+s|0;k[t>>2]=s;r=ga;return}I=U<<2;J=T+-4|0;K=T+-3|0;L=m+33619976|0;M=n+4|0;N=n+8|0;O=n+12|0;P=(i|0)>1;H=(i|0)<4;G=s;w=0.0;F=x;i=A;b=0;a:while(1){B=F+I|0;while(1){x=i+S|0;if((u|0)<8)z=+p[672+(u<<3)>>3]+h;else z=h;k[Y>>2]=0;k[$>>2]=0;k[V>>2]=0;p[ca>>3]=z;if(Lc(m,c,d,e,f,Q,n,x,a,x>>>0>g>>>0?g:x,Y,$,V,ca)|0){B=x;E=z;break}u=u+1|0;a=c+i|0;a=(ia(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24,506832829)|0)>>>17;b=m+(a<<1)|0;A=j[b>>1]|0;k[m+65536+(a<<10)+((A&255)<<2)>>2]=x;j[b>>1]=A+1<<16>>16;b=i+1|0;do if(b>>>0>F>>>0)if(b>>>0>B>>>0){i=i+17|0;i=J>>>0<i>>>0?J:i;if(b>>>0>=i>>>0)break;do{a=c+b|0;a=(ia(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24,506832829)|0)>>>17;A=m+(a<<1)|0;x=j[A>>1]|0;k[m+65536+(a<<10)+((x&255)<<2)>>2]=b+S;j[A>>1]=x+1<<16>>16;u=u+4|0;b=b+4|0}while(b>>>0<i>>>0);}else{i=i+9|0;i=K>>>0<i>>>0?K:i;if(b>>>0>=i>>>0)break;do{a=c+b|0;a=(ia(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24,506832829)|0)>>>17;A=m+(a<<1)|0;x=j[A>>1]|0;k[m+65536+(a<<10)+((x&255)<<2)>>2]=b+S;j[A>>1]=x+1<<16>>16;u=u+2|0;b=b+2|0}while(b>>>0<i>>>0);}while(0);a=T-b|0;if((b+3|0)>>>0<T>>>0){i=b;b=0}else{b=G;v=56;break a}}if(b&w>+p[ca>>3]){v=G+-32|0;A=j[G+-22>>1]|0;b=k[G+-8>>2]|0;x=(k[G+-28>>2]|0)+-1|0;a=A&65535;if((A&65535)<16)b=a+1|0;else{A=b>>>24;b=(b&16777215)+13+(a+-12-(A<<1)<<A)|0}Kc(R,k[G+-32>>2]|0,x,x,b);k[v>>2]=k[R>>2];k[v+4>>2]=k[R+4>>2];k[v+8>>2]=k[R+8>>2];k[v+12>>2]=k[R+12>>2];k[v+16>>2]=k[R+16>>2];k[v+20>>2]=k[R+20>>2];k[v+24>>2]=k[R+24>>2];a=c+i|0;a=(ia(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24,506832829)|0)>>>17;D=m+(a<<1)|0;v=j[D>>1]|0;k[m+65536+(a<<10)+((v&255)<<2)>>2]=B;j[D>>1]=v+1<<16>>16;D=k[_>>2]|0;k[Y>>2]=D;k[$>>2]=k[ba>>2];v=k[X>>2]|0;k[V>>2]=v;p[ca>>3]=w;a=i+-1|0}else{C=0;while(1){a=a+-1|0;v=k[Y>>2]|0;if(H){b=v+-1|0;b=(a|0)<(b|0)?a:b}else b=0;k[Z>>2]=b;k[aa>>2]=0;k[W>>2]=0;p[da>>3]=E;D=i+S|0;B=D+1|0;b=c+i|0;b=(ia(l[b>>0]|l[b+1>>0]<<8|l[b+2>>0]<<16|l[b+3>>0]<<24,506832829)|0)>>>17;A=m+(b<<1)|0;x=j[A>>1]|0;k[m+65536+(b<<10)+((x&255)<<2)>>2]=D;j[A>>1]=x+1<<16>>16;B=Lc(m,c,d,e,f,Q,n,B,a,B>>>0>g>>>0?g:B,Z,aa,W,da)|0;if((v|0)>3)y=+o[e+((i+4&f)<<2)>>2]-Q+0.0;else y=0.0;b=k[Z>>2]|0;x=b+1-v|0;if((x|0)>0){A=0;do{y=y-(+o[e+((A+i+v&f)<<2)>>2]-Q);A=A+1|0}while((A|0)!=(x|0));}if(!B){b=v;a=i;break}z=+p[da>>3];if(!(z>=+p[ca>>3]+(+(C|0)*.2+2.0+((u|0)<1?y+.97:y)+ +o[e+((i&f)<<2)>>2]*.04))){b=v;a=i;break}i=i+1|0;u=u+1|0;k[Y>>2]=b;k[$>>2]=k[aa>>2];k[V>>2]=k[W>>2];p[ca>>3]=z;C=C+1|0;if((C|0)>=4){a=i;break}}D=b;v=k[V>>2]|0}F=a+U+(D<<1)|0;C=a+S|0;b=v+16|0;C=v>>>0>(C>>>0>g>>>0?g:C)>>>0;do if(!C){A=k[n>>2]|0;if((v|0)==(A|0))b=1;else{i=k[M>>2]|0;B=k[N>>2]|0;if((v|0)!=(i|0))if((v|0)!=(B|0))if((v|0)!=(k[O>>2]|0)){b:do if(P&(v|0)>5){x=4;while(1){if((v|0)==((k[800+(x<<2)>>2]|0)+(k[n+(k[736+(x<<2)>>2]<<2)>>2]|0)|0)?(v|0)>=(k[189568+(x<<2)>>2]|0):0)break;x=x+1|0;if((x|0)>=16)break b}b=x+1|0}while(0);if((b|0)>1)x=B;else break}else{x=B;b=4}else{x=v;b=3}else{x=B;b=2}k[O>>2]=x;k[N>>2]=i;k[M>>2]=A;k[n>>2]=v}}while(0);Kc(fa,u,D,k[$>>2]|0,b);b=G+32|0;k[G>>2]=k[fa>>2];k[G+4>>2]=k[fa+4>>2];k[G+8>>2]=k[fa+8>>2];k[G+12>>2]=k[fa+12>>2];k[G+16>>2]=k[fa+16>>2];k[G+20>>2]=k[fa+20>>2];k[G+24>>2]=k[fa+24>>2];x=a+1|0;v=D+-1|0;if((v|0)>1){B=(v|0)>2?v:2;u=a+-1|0;A=a;i=1;while(1){if((A+4|0)>>>0<T>>>0){ha=c+x|0;ha=(ia(l[ha>>0]|l[ha+1>>0]<<8|l[ha+2>>0]<<16|l[ha+3>>0]<<24,506832829)|0)>>>17;A=m+(ha<<1)|0;G=j[A>>1]|0;k[m+65536+(ha<<10)+((G&255)<<2)>>2]=x+S;j[A>>1]=G+1<<16>>16}i=i+1|0;if((i|0)>=(v|0))break;else{A=x;x=x+1|0}}A=u+B|0;a=a+B|0}else{A=a;a=x}if(C|(A+21|0)>>>0<T>>>0&((D|0)>3&(k[L>>2]|0)!=0)^1)x=0;else{x=a+S|0;p[ea>>3]=E;x=Lc(m,c,d,e,f,Q,n,x,T-a|0,x>>>0>g>>>0?g:x,_,ba,X,ea)|0;w=+p[ea>>3]}w=w-+o[e+((a&f)<<2)>>2]+-3.75;p[ea>>3]=w;if((A+4|0)>>>0<T>>>0){D=c+a|0;D=(ia(l[D>>0]|l[D+1>>0]<<8|l[D+2>>0]<<16|l[D+3>>0]<<24,506832829)|0)>>>17;B=m+(D<<1)|0;i=j[B>>1]|0;k[m+65536+(D<<10)+((i&255)<<2)>>2]=a+S;j[B>>1]=i+1<<16>>16}i=A+2|0;a=T-i|0;if((A+5|0)>>>0>=T>>>0){u=0;v=56;break}else{G=b;u=0;b=x}}if((v|0)==56){e=u+a|0;k[q>>2]=e;e=b;s=e-s|0;s=s>>5;e=k[t>>2]|0;s=e+s|0;k[t>>2]=s;r=ga;return}}function Ic(a,b,c,d,e,f,g,h,i,m,n,q,s,t){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;m=m|0;n=n|0;q=q|0;s=s|0;t=t|0;var u=0,v=0,w=0.0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0.0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0;$=r;r=r+80|0;U=$+68|0;W=$+64|0;S=$+60|0;Y=$+40|0;V=$+56|0;X=$+52|0;T=$+48|0;Z=$+32|0;_=$;if(a>>>0>2&b>>>0>2){L=b+-3|0;K=c+(L&d)|0;K=(ia((l[K>>0]|l[K+1>>0]<<8|l[K+2>>0]<<16|l[K+3>>0]<<24)&16777215,506832829)|0)>>>17;M=m+(K<<1)|0;N=j[M>>1]|0;k[m+65536+(K<<10)+((N&255)<<2)>>2]=L;j[M>>1]=N+1<<16>>16;M=b+-2|0;N=c+(M&d)|0;N=(ia((l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24)&16777215,506832829)|0)>>>17;K=m+(N<<1)|0;L=j[K>>1]|0;k[m+65536+(N<<10)+((L&255)<<2)>>2]=M;j[K>>1]=L+1<<16>>16;K=b+-1|0;L=c+(K&d)|0;L=(ia((l[L>>0]|l[L+1>>0]<<8|l[L+2>>0]<<16|l[L+3>>0]<<24)&16777215,506832829)|0)>>>17;N=m+(L<<1)|0;M=j[N>>1]|0;k[m+65536+(L<<10)+((M&255)<<2)>>2]=K;j[N>>1]=M+1<<16>>16}u=k[q>>2]|0;z=d&b;P=b-z|0;Q=z+a|0;R=(i|0)<9?64:512;y=R+z|0;v=b+a|0;if(v>>>0>b>>>0){w=0.0;do{w=w+ +o[e+((b&f)<<2)>>2];b=b+1|0}while((b|0)!=(v|0));}else w=0.0;O=(a|0)==0?w:w/+(a>>>0);if((z+3|0)>>>0>=Q>>>0){M=s;N=a;L=u;N=L+N|0;k[q>>2]=N;N=s;N=M-N|0;N=N>>5;M=k[t>>2]|0;N=M+N|0;k[t>>2]=N;r=$;return}H=R<<2;I=Q+-4|0;J=Q+-3|0;K=(i|0)<4;L=n+4|0;M=n+8|0;N=n+12|0;G=(i|0)>1;F=s;v=z;a:while(1){E=y+H|0;while(1){b=v+P|0;if((u|0)<8)w=+p[672+(u<<3)>>3]+h;else w=h;k[U>>2]=0;k[W>>2]=0;k[S>>2]=0;p[Y>>3]=w;if(Jc(m,c,d,e,f,O,n,b,a,b>>>0>g>>>0?g:b,U,W,S,Y)|0){b=v;D=w;break}u=u+1|0;i=c+v|0;i=(ia((l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24)&16777215,506832829)|0)>>>17;C=m+(i<<1)|0;a=j[C>>1]|0;k[m+65536+(i<<10)+((a&255)<<2)>>2]=b;j[C>>1]=a+1<<16>>16;b=v+1|0;do if(b>>>0>y>>>0)if(b>>>0>E>>>0){a=v+17|0;a=I>>>0<a>>>0?I:a;if(b>>>0>=a>>>0)break;do{i=c+b|0;i=(ia((l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24)&16777215,506832829)|0)>>>17;C=m+(i<<1)|0;v=j[C>>1]|0;k[m+65536+(i<<10)+((v&255)<<2)>>2]=b+P;j[C>>1]=v+1<<16>>16;u=u+4|0;b=b+4|0}while(b>>>0<a>>>0);}else{a=v+9|0;a=J>>>0<a>>>0?J:a;if(b>>>0>=a>>>0)break;do{i=c+b|0;i=(ia((l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24)&16777215,506832829)|0)>>>17;C=m+(i<<1)|0;v=j[C>>1]|0;k[m+65536+(i<<10)+((v&255)<<2)>>2]=b+P;j[C>>1]=v+1<<16>>16;u=u+2|0;b=b+2|0}while(b>>>0<a>>>0);}while(0);a=Q-b|0;if((b+3|0)>>>0<Q>>>0)v=b;else{b=F;v=43;break a}}C=0;B=b;while(1){a=a+-1|0;A=k[U>>2]|0;if(K){b=A+-1|0;b=(a|0)<(b|0)?a:b}else b=0;k[V>>2]=b;k[X>>2]=0;k[T>>2]=0;p[Z>>3]=D;i=B+P|0;z=i+1|0;b=c+B|0;b=(ia((l[b>>0]|l[b+1>>0]<<8|l[b+2>>0]<<16|l[b+3>>0]<<24)&16777215,506832829)|0)>>>17;E=m+(b<<1)|0;v=j[E>>1]|0;k[m+65536+(b<<10)+((v&255)<<2)>>2]=i;j[E>>1]=v+1<<16>>16;z=Jc(m,c,d,e,f,O,n,z,a,z>>>0>g>>>0?g:z,V,X,T,Z)|0;if((A|0)>3)w=+o[e+((B+4&f)<<2)>>2]-O+0.0;else w=0.0;v=k[V>>2]|0;i=v+1-A|0;if((i|0)>0){y=0;do{w=w-(+o[e+((y+B+A&f)<<2)>>2]-O);y=y+1|0}while((y|0)!=(i|0));}if(!z){E=A;C=B;break}x=+p[Z>>3];if(!(x>=+p[Y>>3]+(+(C|0)*.2+2.0+((u|0)<1?w+.97:w)+ +o[e+((B&f)<<2)>>2]*.04))){E=A;C=B;break}b=B+1|0;u=u+1|0;k[U>>2]=v;k[W>>2]=k[X>>2];k[S>>2]=k[T>>2];p[Y>>3]=x;C=C+1|0;if((C|0)>=4){E=v;C=b;break}else B=b}y=C+R+(E<<1)|0;B=C+P|0;z=k[S>>2]|0;b=z+16|0;do if(z>>>0<=(B>>>0>g>>>0?g:B)>>>0){v=k[n>>2]|0;if((z|0)==(v|0))b=1;else{A=k[L>>2]|0;a=k[M>>2]|0;if((z|0)!=(A|0))if((z|0)!=(a|0))if((z|0)!=(k[N>>2]|0)){b:do if(G&(z|0)>5){i=4;while(1){if((z|0)==((k[800+(i<<2)>>2]|0)+(k[n+(k[736+(i<<2)>>2]<<2)>>2]|0)|0)?(z|0)>=(k[864+(i<<2)>>2]|0):0)break;i=i+1|0;if((i|0)>=16)break b}b=i+1|0}while(0);if((b|0)>1)i=a;else break}else{i=a;b=4}else{i=z;b=3}else{i=a;b=2}k[N>>2]=i;k[M>>2]=A;k[L>>2]=v;k[n>>2]=z}}while(0);Kc(_,u,E,k[W>>2]|0,b);b=F+32|0;k[F>>2]=k[_>>2];k[F+4>>2]=k[_+4>>2];k[F+8>>2]=k[_+8>>2];k[F+12>>2]=k[_+12>>2];k[F+16>>2]=k[_+16>>2];k[F+20>>2]=k[_+20>>2];k[F+24>>2]=k[_+24>>2];if((E|0)>1){a=1;do{v=c+(a+C)|0;v=(ia((l[v>>0]|l[v+1>>0]<<8|l[v+2>>0]<<16|l[v+3>>0]<<24)&16777215,506832829)|0)>>>17;F=m+(v<<1)|0;u=j[F>>1]|0;k[m+65536+(v<<10)+((u&255)<<2)>>2]=a+B;j[F>>1]=u+1<<16>>16;a=a+1|0}while((a|0)<(E|0));}v=E+C|0;a=Q-v|0;if((v+3|0)>>>0>=Q>>>0){u=0;v=43;break}else{F=b;u=0}}if((v|0)==43){M=u+a|0;k[q>>2]=M;M=b;N=s;N=M-N|0;N=N>>5;M=k[t>>2]|0;N=M+N|0;k[t>>2]=N;r=$;return}}function Jc(a,b,c,d,e,f,g,h,m,n,q,r,s,t){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;h=h|0;m=m|0;n=n|0;q=q|0;r=r|0;s=s|0;t=t|0;var u=0,v=0.0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0.0,D=0.0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0.0,N=0,O=0,P=0,Q=0,R=0.0,S=0;k[r>>2]=0;Q=h&c;if(!d){M=0.0;R=0.0;C=0.0}else{C=+o[d+((h&e)<<2)>>2]+ +o[d+((h+1&e)<<2)>>2];R=C+ +o[d+((h+2&e)<<2)>>2];M=R-f*3.0+.3;R=R+ +o[d+((h+3&e)<<2)>>2]-f*4.0;C=C-f*2.0+1.2}D=+p[t>>3];F=k[q>>2]|0;k[q>>2]=0;N=b+Q|0;I=b+(Q+m)|0;K=m+-4|0;J=b+(K+Q)|0;K=(K|0)<0;e=0;u=0;while(1){G=(k[800+(e<<2)>>2]|0)+(k[g+(k[736+(e<<2)>>2]<<2)>>2]|0)|0;y=h-G|0;do if(((!(G>>>0>n>>>0|y>>>0>=h>>>0)?(A=y&c,B=F+Q|0,B>>>0<=c>>>0):0)?(E=A+F|0,E>>>0<=c>>>0):0)?(i[b+B>>0]|0)==(i[b+E>>0]|0):0){a:do if(K){y=0;x=N}else{y=0;x=N;do{H=b+(y+A)|0;if((l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24|0)!=(l[H>>0]|l[H+1>>0]<<8|l[H+2>>0]<<16|l[H+3>>0]<<24|0))break a;x=x+4|0;y=y+4|0}while(x>>>0<=J>>>0);}while(0);b:do if(x>>>0<I>>>0)do{if((i[b+(y+A)>>0]|0)!=(i[x>>0]|0))break b;x=x+1|0;y=y+1|0}while(x>>>0<I>>>0);while(0);if(y>>>0<3?!((e|0)<2&(y|0)==2):0){y=F;v=D;break}v=+(y|0)*f-+p[1120+(e<<3)>>3];if((y|0)==3)z=M;else if((y|0)==2)z=C;else z=R;v=v+z;if(D<v){k[q>>2]=y;k[r>>2]=y;k[s>>2]=G;p[t>>3]=v;u=1}else{y=F;v=D}}else{y=F;v=D}while(0);e=e+1|0;if((e|0)==16)break;else{F=y;D=v}}A=h+-64|0;A=(A|0)<0?0:A;C=C+-1.0;x=h+-1|0;c:do if((x|0)>(A|0)){B=b+(Q+1)|0;D=f*2.0;while(1){e=x;while(1){x=h-e|0;if(x>>>0>n>>>0)break c;H=e&c;if((i[N>>0]|0)==(i[b+H>>0]|0)?(i[B>>0]|0)==(i[b+(H+1)>>0]|0):0){if((e|0)==(h|0))d=-1;else d=(ka(x|0)|0)^31;z=C+(D-+(d|0)*2.3);if(v<z){v=z;y=e;break}}e=e+-1|0;if((e|0)<=(A|0))break c}k[q>>2]=2;k[r>>2]=2;k[s>>2]=x;x=y+-1|0;if((x|0)<=(A|0)){y=2;u=1;break}else{y=2;u=1}}}while(0);g=(ia((l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24)&16777215,506832829)|0)>>>17;H=j[a+(g<<1)>>1]|0;x=H&65535;H=(H&65535)>256?x+-256|0:0;d:do if((x|0)>(H|0)){while(1){G=y+Q|0;F=G>>>0>c>>>0;G=b+G|0;while(1){x=x+-1|0;E=k[a+65536+(g<<10)+((x&255)<<2)>>2]|0;if((E|0)>-1){d=h-E|0;if(d>>>0>n>>>0){D=v;break d}B=E&c;if((!F?(L=B+y|0,L>>>0<=c>>>0):0)?(i[G>>0]|0)==(i[b+L>>0]|0):0){e:do if(K){e=0;A=N}else{e=0;A=N;do{S=b+(e+B)|0;if((l[A>>0]|l[A+1>>0]<<8|l[A+2>>0]<<16|l[A+3>>0]<<24|0)!=(l[S>>0]|l[S+1>>0]<<8|l[S+2>>0]<<16|l[S+3>>0]<<24|0))break e;A=A+4|0;e=e+4|0}while(A>>>0<=J>>>0);}while(0);f:do if(A>>>0<I>>>0)do{if((i[b+(e+B)>>0]|0)!=(i[A>>0]|0))break f;A=A+1|0;e=e+1|0}while(A>>>0<I>>>0);while(0);if(e>>>0>=3){if((E|0)==(h|0))z=-1.2;else z=+((ka(d|0)|0)^31|0)*1.2;z=(e>>>0>3?R:M)+(+(e|0)*f-z);if(v<z){v=z;y=e;break}}}}if((x|0)<=(H|0)){D=v;break d}}k[q>>2]=y;k[r>>2]=y;k[s>>2]=d;p[t>>3]=v;if((x|0)>(H|0))u=1;else{u=1;break}}return u|0}else D=v;while(0);if(u){N=1;return N|0}H=a+33619972|0;G=k[H>>2]|0;x=a+33619968|0;B=k[x>>2]|0;if(G>>>0<B>>>7>>>0){N=0;return N|0}A=(ia(l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24,506832829)|0)>>>18<<1;g=n+1|0;k[x>>2]=B+1;N=j[1248+(A<<1)>>1]|0;e=N&65535;if(N<<16>>16!=0?(w=e&31,O=e>>>5,w>>>0<=m>>>0):0){u=(k[190800+(w<<2)>>2]|0)+(ia(w,O)|0)|0;d=66784+u|0;y=66784+(u+w)|0;u=66784+(w+-4+u)|0;g:do if(w>>>0<4)e=0;else{e=0;do{N=b+(e+Q)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24|0))break g;d=d+4|0;e=e+4|0}while(d>>>0<=u>>>0);}while(0);h:do if(d>>>0<y>>>0)do{if((i[b+(e+Q)>>0]|0)!=(i[d>>0]|0))break h;d=d+1|0;e=e+1|0}while(d>>>0<y>>>0);while(0);if((e|0)==(w|0)){u=g+O|0;if(!u)v=-1.2;else v=+((ka(u|0)|0)^31|0)*1.2;v=R+(+(w|0)*f-v);if(!(D<v))P=67}else P=67}else P=67;if((P|0)==67){k[x>>2]=B+2;N=j[1248+((A|1)<<1)>>1]|0;u=N&65535;if(!(N<<16>>16)){N=0;return N|0}w=u&31;y=u>>>5;if(w>>>0>m>>>0){N=0;return N|0}d=(k[190800+(w<<2)>>2]|0)+(ia(w,y)|0)|0;e=66784+d|0;x=66784+(d+w)|0;d=66784+(w+-4+d)|0;i:do if(w>>>0<4)u=0;else{u=0;do{N=b+(u+Q)|0;if((l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0)!=(l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24|0))break i;e=e+4|0;u=u+4|0}while(e>>>0<=d>>>0);}while(0);j:do if(e>>>0<x>>>0)do{if((i[b+(u+Q)>>0]|0)!=(i[e>>0]|0))break j;e=e+1|0;u=u+1|0}while(e>>>0<x>>>0);while(0);if((u|0)!=(w|0)){N=0;return N|0}u=g+y|0;if(!u)v=-1.2;else v=+((ka(u|0)|0)^31|0)*1.2;v=R+(+(w|0)*f-v);if(!(D<v)){N=0;return N|0}}k[H>>2]=G+1;k[q>>2]=w;k[r>>2]=w;k[s>>2]=u;p[t>>3]=v;N=1;return N|0}function Kc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0;k[a>>2]=b;k[a+4>>2]=c;c=a+10|0;if((e|0)<17){p=e+65535&65535;j[c>>1]=p;c=0}else{i=e+-13|0;m=((ka(i|0)|0)^31)+-1|0;l=i>>m;p=(m<<1)+12+l&65535;j[c>>1]=p;c=i-(l<<m)|m<<24}k[a+24>>2]=c;o=a+8|0;i=a+16|0;do if((b|0)>=6){if((b|0)<130){m=b+-2|0;g=((ka(m|0)|0)^31)+-1|0;g=(m>>g)+2+(g<<1)|0;break}if((b|0)<2114){g=((ka(b+-66|0)|0)^31)+10|0;break}if((b|0)<6210)g=21;else g=(b|0)<22594?22:23}else g=b;while(0);do if((d|0)>=10){if((d|0)<134){m=d+-6|0;h=((ka(m|0)|0)^31)+-1|0;h=(m>>h)+4+(h<<1)|0;break}if((d|0)<2118)h=((ka(d+-70|0)|0)^31)+12|0;else h=23}else h=d+-2|0;while(0);l=k[190448+(g<<2)>>2]|0;m=Ig(k[928+(h<<2)>>2]|0,0,l|0,((l|0)<0)<<31>>31|0)|0;n=M;b=b-(k[190544+(g<<2)>>2]|0)|0;f=((b|0)<0)<<31>>31;a=d-(k[1024+(h<<2)>>2]|0)|0;e=((a|0)<0)<<31>>31;c=h&7|g<<3&56;if(p<<16>>16==0&(g|0)<8&(h|0)<16){g=(h|0)<8?c:c|64;g=g&65535;j[o>>1]=g;g=Gg(m|0,n|0,48)|0;m=M;h=Gg(a|0,e|0,l|0)|0;l=M;g=b|g;m=f|m;h=g|h;l=m|l;m=i;i=m;k[i>>2]=h;m=m+4|0;k[m>>2]=l;return}else{g=k[190640+((h>>3)+((g>>3)*3|0)<<2)>>2]<<6|c;g=g&65535;j[o>>1]=g;g=Gg(m|0,n|0,48)|0;m=M;h=Gg(a|0,e|0,l|0)|0;l=M;g=b|g;m=f|m;h=g|h;l=m|l;m=i;i=m;k[i>>2]=h;m=m+4|0;k[m>>2]=l;return}}function Lc(a,b,c,d,e,f,g,h,m,n,q,s,t,u){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;h=h|0;m=m|0;n=n|0;q=q|0;s=s|0;t=t|0;u=u|0;var v=0,w=0,x=0.0,y=0,z=0.0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0.0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0.0,R=0,S=0,T=0;S=r;r=r+16|0;R=S;k[s>>2]=0;O=h&c;if(!d){I=0.0;Q=0.0}else{Q=+o[d+((h&e)<<2)>>2]+ +o[d+((h+1&e)<<2)>>2]+ +o[d+((h+2&e)<<2)>>2];I=Q-f*3.0+.3;Q=Q+ +o[d+((h+3&e)<<2)>>2]-f*4.0}x=+p[u>>3];v=k[q>>2]|0;k[q>>2]=0;P=b+O|0;H=b+(O+m)|0;K=m+-4|0;J=b+(K+O)|0;K=(K|0)<0;E=0;y=0;while(1){F=(k[800+(E<<2)>>2]|0)+(k[g+(k[736+(E<<2)>>2]<<2)>>2]|0)|0;d=h-F|0;if(((!(F>>>0>n>>>0|d>>>0>=h>>>0)?(A=d&c,C=v+O|0,C>>>0<=c>>>0):0)?(D=A+v|0,D>>>0<=c>>>0):0)?(i[b+C>>0]|0)==(i[b+D>>0]|0):0){a:do if(K){B=0;d=P}else{B=0;d=P;do{G=b+(B+A)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[G>>0]|l[G+1>>0]<<8|l[G+2>>0]<<16|l[G+3>>0]<<24|0))break a;d=d+4|0;B=B+4|0}while(d>>>0<=J>>>0);}while(0);b:do if(d>>>0<H>>>0)do{if((i[b+(B+A)>>0]|0)!=(i[d>>0]|0))break b;d=d+1|0;B=B+1|0}while(d>>>0<H>>>0);while(0);if(B>>>0>=4?(z=Q+(+(B|0)*f-+p[1120+(E<<3)>>3]),x<z):0){k[q>>2]=B;k[s>>2]=B;k[t>>2]=F;p[u>>3]=z;x=z;y=1}else B=v}else B=v;E=E+1|0;if((E|0)==16)break;else v=B}g=(ia(l[P>>0]|l[P+1>>0]<<8|l[P+2>>0]<<16|l[P+3>>0]<<24,506832829)|0)>>>17;G=j[a+(g<<1)>>1]|0;d=G&65535;G=(G&65535)>256?d+-256|0:0;c:do if((d|0)>(G|0))while(1){A=B+O|0;E=A>>>0>c>>>0;A=b+A|0;while(1){d=d+-1|0;v=k[a+65536+(g<<10)+((d&255)<<2)>>2]|0;if((v|0)>-1){e=h-v|0;if(e>>>0>n>>>0){I=x;N=37;break c}F=v&c;if((!E?(L=F+B|0,L>>>0<=c>>>0):0)?(i[A>>0]|0)==(i[b+L>>0]|0):0){d:do if(K){D=0;C=P}else{D=0;C=P;do{T=b+(D+F)|0;if((l[C>>0]|l[C+1>>0]<<8|l[C+2>>0]<<16|l[C+3>>0]<<24|0)!=(l[T>>0]|l[T+1>>0]<<8|l[T+2>>0]<<16|l[T+3>>0]<<24|0))break d;C=C+4|0;D=D+4|0}while(C>>>0<=J>>>0);}while(0);e:do if(C>>>0<H>>>0)do{if((i[b+(D+F)>>0]|0)!=(i[C>>0]|0))break e;C=C+1|0;D=D+1|0}while(C>>>0<H>>>0);while(0);if(D>>>0>=4){if((v|0)==(h|0))z=-1.2;else z=+((ka(e|0)|0)^31|0)*1.2;z=(D>>>0>3?Q:I)+(+(D|0)*f-z);if(x<z){x=z;B=D;break}}}}if((d|0)<=(G|0)){I=x;N=37;break c}}k[q>>2]=B;k[s>>2]=B;k[t>>2]=e;p[u>>3]=x;if((d|0)>(G|0))y=1;else{v=1;break}}else{I=x;N=37}while(0);do if((N|0)==37)if(!y){g=a+33619972|0;H=k[g>>2]|0;v=a+33619968|0;E=k[v>>2]|0;if(H>>>0<E>>>7>>>0){x=I;v=0}else{F=(ia(l[P>>0]|l[P+1>>0]<<8|l[P+2>>0]<<16|l[P+3>>0]<<24,506832829)|0)>>>18<<1;G=n+1|0;k[v>>2]=E+1;c=j[1248+(F<<1)>>1]|0;A=c&65535;if(c<<16>>16!=0?(w=A&31,M=A>>>5,w>>>0<=m>>>0):0){D=(k[190800+(w<<2)>>2]|0)+(ia(w,M)|0)|0;e=66784+D|0;C=66784+(D+w)|0;D=66784+(w+-4+D)|0;f:do if(w>>>0<4)d=0;else{d=0;do{c=b+(d+O)|0;if((l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0)!=(l[c>>0]|l[c+1>>0]<<8|l[c+2>>0]<<16|l[c+3>>0]<<24|0))break f;e=e+4|0;d=d+4|0}while(e>>>0<=D>>>0);}while(0);g:do if(e>>>0<C>>>0)do{if((i[b+(d+O)>>0]|0)!=(i[e>>0]|0))break g;e=e+1|0;d=d+1|0}while(e>>>0<C>>>0);while(0);if((d|0)==(w|0)){y=G+M|0;if(!y)z=-1.2;else z=+((ka(y|0)|0)^31|0)*1.2;x=Q+(+(w|0)*f-z);if(!(I<x))N=52}else N=52}else N=52;if((N|0)==52){k[v>>2]=E+2;M=j[1248+((F|1)<<1)>>1]|0;y=M&65535;if(!(M<<16>>16)){x=I;v=0;break}w=y&31;D=y>>>5;if(w>>>0>m>>>0){x=I;v=0;break}d=(k[190800+(w<<2)>>2]|0)+(ia(w,D)|0)|0;A=66784+d|0;e=66784+(d+w)|0;d=66784+(w+-4+d)|0;h:do if(w>>>0<4)y=0;else{y=0;do{M=b+(y+O)|0;if((l[A>>0]|l[A+1>>0]<<8|l[A+2>>0]<<16|l[A+3>>0]<<24|0)!=(l[M>>0]|l[M+1>>0]<<8|l[M+2>>0]<<16|l[M+3>>0]<<24|0))break h;A=A+4|0;y=y+4|0}while(A>>>0<=d>>>0);}while(0);i:do if(A>>>0<e>>>0)do{if((i[b+(y+O)>>0]|0)!=(i[A>>0]|0))break i;A=A+1|0;y=y+1|0}while(A>>>0<e>>>0);while(0);if((y|0)!=(w|0)){x=I;v=0;break}y=G+D|0;if(!y)x=-1.2;else x=+((ka(y|0)|0)^31|0)*1.2;x=Q+(+(w|0)*f-x);if(!(I<x)){x=I;v=0;break}}k[g>>2]=H+1;k[q>>2]=w;k[s>>2]=w;k[t>>2]=y;p[u>>3]=x;B=w;v=1}}else{x=I;v=1}while(0);F=a+33619976|0;y=k[F>>2]|0;if(!y){M=v;r=S;return M|0}A=l[P>>0]|l[P+1>>0]<<8|l[P+2>>0]<<16|l[P+3>>0]<<24;C=k[y+24>>2]|0;j:do if(C){D=C+-1|0;e=(D&C|0)==0;if(e)d=D&A;else d=(A>>>0)%(C>>>0)|0;w=k[(k[y+20>>2]|0)+(d<<2)>>2]|0;if(w){do{w=k[w>>2]|0;if(!w){w=0;break j}y=k[w+4>>2]|0;if(e)y=y&D;else y=(y>>>0)%(C>>>0)|0;if((y|0)!=(d|0)){w=0;break j}}while((k[w+8>>2]|0)!=(A|0));w=k[w+12>>2]|0}else w=0}else w=0;while(0);w=w>>>0>m>>>0?m:w;if(!((w|0)>(B|0)&(w|0)>3)){M=v;r=S;return M|0}d=n+1|0;z=x;A=w;while(1){Ag(R,P,A);w=Mc(k[F>>2]|0,R)|0;if(w){w=k[w+20>>2]|0;y=d+(w>>6)|0;if(!y)x=-1.2;else x=+((ka(y|0)|0)^31|0)*1.2;x=Q+(+(A|0)*f-x);if(z<x){k[q>>2]=A;k[s>>2]=w&63;k[t>>2]=y;p[u>>3]=x;w=A;v=1}else{w=B;x=z}}else{w=B;x=z}Bg(R);A=A+-1|0;if(!((A|0)>(w|0)&(A|0)>3))break;else{B=w;z=x}}r=S;return v|0}function Mc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0;m=i[b>>0]|0;j=(m&1)==0;n=j?b+1|0:k[b+8>>2]|0;m=j?(m&255)>>>1:k[b+4>>2]|0;if(m>>>0>3){c=m;d=n;b=m;while(1){j=ia(l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24,1540483477)|0;b=(ia(j>>>24^j,1540483477)|0)^(ia(b,1540483477)|0);c=c+-4|0;if(c>>>0<=3)break;else d=d+4|0}c=m+-4|0;d=c&-4;c=c-d|0;d=n+(d+4)|0}else{c=m;d=n;b=m}if((c|0)==3){b=l[d+2>>0]<<16^b;e=6}else if((c|0)==2)e=6;else if((c|0)==1)e=7;if((e|0)==6){b=l[d+1>>0]<<8^b;e=7}if((e|0)==7)b=ia(l[d>>0]^b,1540483477)|0;b=ia(b>>>13^b,1540483477)|0;b=b>>>15^b;g=k[a+4>>2]|0;if(!g){m=0;return m|0}h=g+-1|0;j=(h&g|0)==0;if(j)f=b&h;else f=(b>>>0)%(g>>>0)|0;b=k[(k[a>>2]|0)+(f<<2)>>2]|0;if(!b){m=0;return m|0}b=k[b>>2]|0;if(!b){m=0;return m|0}e=(m|0)==0;a:while(1){d=k[b+4>>2]|0;if(j)d=d&h;else d=(d>>>0)%(g>>>0)|0;if((d|0)!=(f|0)){b=0;e=26;break}d=b+8|0;a=i[d>>0]|0;c=(a&1)==0;b:do if(((c?(a&255)>>>1:k[b+12>>2]|0)|0)==(m|0)){d=c?d+1|0:k[b+16>>2]|0;if(!c)if(!(lg(d,n,m)|0)){e=26;break a}else break;if(e){e=26;break a}else{a=m;c=n}while(1){if((i[d>>0]|0)!=(i[c>>0]|0))break b;a=a+-1|0;if(!a){e=26;break a}else{d=d+1|0;c=c+1|0}}}while(0);b=k[b>>2]|0;if(!b){b=0;e=26;break}}if((e|0)==26)return b|0;return 0}function Nc(a,b,c,d,e,f,g,h,m,n,o,q,r,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;h=h|0;m=m|0;n=n|0;o=o|0;q=q|0;r=r|0;s=s|0;var t=0,u=0.0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;k[q>>2]=0;M=h&c;u=+p[s>>3];B=k[o>>2]|0;k[o>>2]=0;J=b+M|0;F=b+(M+m)|0;H=m+-4|0;G=b+(H+M)|0;H=(H|0)<0;D=0;t=0;while(1){A=(k[800+(D<<2)>>2]|0)+(k[g+(k[736+(D<<2)>>2]<<2)>>2]|0)|0;x=h-A|0;if(((!(A>>>0>n>>>0|x>>>0>=h>>>0)?(C=x&c,z=B+M|0,z>>>0<=c>>>0):0)?(E=C+B|0,E>>>0<=c>>>0):0)?(i[b+z>>0]|0)==(i[b+E>>0]|0):0){a:do if(H){w=0;x=J}else{w=0;x=J;do{e=b+(w+C)|0;if((l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24|0)!=(l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0))break a;x=x+4|0;w=w+4|0}while(x>>>0<=G>>>0);}while(0);b:do if(x>>>0<F>>>0)do{if((i[b+(w+C)>>0]|0)!=(i[x>>0]|0))break b;x=x+1|0;w=w+1|0}while(x>>>0<F>>>0);while(0);if(w>>>0>=4?(y=+(w|0)*f-+p[1120+(D<<3)>>3],u<y):0){k[o>>2]=w;k[q>>2]=w;k[r>>2]=A;p[s>>3]=y;u=y;t=1}else w=B}else w=B;D=D+1|0;if((D|0)==16)break;else B=w}g=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>17;E=j[a+(g<<1)>>1]|0;x=E&65535;E=(E&65535)>256?x+-256|0:0;c:do if((x|0)>(E|0)){while(1){D=w+M|0;C=D>>>0>c>>>0;D=b+D|0;while(1){x=x+-1|0;B=k[a+65536+(g<<10)+((x&255)<<2)>>2]|0;if((B|0)>-1){d=h-B|0;if(d>>>0>n>>>0){y=u;break c}A=B&c;if((!C?(I=A+w|0,I>>>0<=c>>>0):0)?(i[D>>0]|0)==(i[b+I>>0]|0):0){d:do if(H){e=0;z=J}else{e=0;z=J;do{N=b+(e+A)|0;if((l[z>>0]|l[z+1>>0]<<8|l[z+2>>0]<<16|l[z+3>>0]<<24|0)!=(l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24|0))break d;z=z+4|0;e=e+4|0}while(z>>>0<=G>>>0);}while(0);e:do if(z>>>0<F>>>0)do{if((i[b+(e+A)>>0]|0)!=(i[z>>0]|0))break e;z=z+1|0;e=e+1|0}while(z>>>0<F>>>0);while(0);if(e>>>0>=4){if((B|0)==(h|0))y=-1.2;else y=+((ka(d|0)|0)^31|0)*1.2;y=+(e|0)*f-y;if(u<y){u=y;w=e;break}}}}if((x|0)<=(E|0)){y=u;break c}}k[o>>2]=w;k[q>>2]=w;k[r>>2]=d;p[s>>3]=u;if((x|0)>(E|0))t=1;else{t=1;break}}return t|0}else y=u;while(0);if(t){a=1;return a|0}E=a+33619972|0;D=k[E>>2]|0;w=a+33619968|0;A=k[w>>2]|0;if(D>>>0<A>>>7>>>0){a=0;return a|0}z=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>18<<1;g=n+1|0;k[w>>2]=A+1;a=j[1248+(z<<1)>>1]|0;e=a&65535;if(a<<16>>16!=0?(v=e&31,K=e>>>5,v>>>0<=m>>>0):0){t=(k[190800+(v<<2)>>2]|0)+(ia(v,K)|0)|0;d=66784+t|0;x=66784+(t+v)|0;t=66784+(v+-4+t)|0;f:do if(v>>>0<4)e=0;else{e=0;do{a=b+(e+M)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break f;d=d+4|0;e=e+4|0}while(d>>>0<=t>>>0);}while(0);g:do if(d>>>0<x>>>0)do{if((i[b+(e+M)>>0]|0)!=(i[d>>0]|0))break g;d=d+1|0;e=e+1|0}while(d>>>0<x>>>0);while(0);if((e|0)==(v|0)){t=g+K|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u))L=50}else L=50}else L=50;if((L|0)==50){k[w>>2]=A+2;a=j[1248+((z|1)<<1)>>1]|0;t=a&65535;if(!(a<<16>>16)){a=0;return a|0}v=t&31;x=t>>>5;if(v>>>0>m>>>0){a=0;return a|0}d=(k[190800+(v<<2)>>2]|0)+(ia(v,x)|0)|0;e=66784+d|0;w=66784+(d+v)|0;d=66784+(v+-4+d)|0;h:do if(v>>>0<4)t=0;else{t=0;do{a=b+(t+M)|0;if((l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break h;e=e+4|0;t=t+4|0}while(e>>>0<=d>>>0);}while(0);i:do if(e>>>0<w>>>0)do{if((i[b+(t+M)>>0]|0)!=(i[e>>0]|0))break i;e=e+1|0;t=t+1|0}while(e>>>0<w>>>0);while(0);if((t|0)!=(v|0)){a=0;return a|0}t=g+x|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u)){a=0;return a|0}}k[E>>2]=D+1;k[o>>2]=v;k[q>>2]=v;k[r>>2]=t;p[s>>3]=u;a=1;return a|0}function Oc(a,b,c,d,e,f,g,h,m,n,o,q,r,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;h=h|0;m=m|0;n=n|0;o=o|0;q=q|0;r=r|0;s=s|0;var t=0,u=0.0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;k[q>>2]=0;M=h&c;u=+p[s>>3];B=k[o>>2]|0;k[o>>2]=0;J=b+M|0;F=b+(M+m)|0;H=m+-4|0;G=b+(H+M)|0;H=(H|0)<0;D=0;t=0;while(1){A=(k[800+(D<<2)>>2]|0)+(k[g+(k[736+(D<<2)>>2]<<2)>>2]|0)|0;x=h-A|0;if(((!(A>>>0>n>>>0|x>>>0>=h>>>0)?(C=x&c,z=B+M|0,z>>>0<=c>>>0):0)?(E=C+B|0,E>>>0<=c>>>0):0)?(i[b+z>>0]|0)==(i[b+E>>0]|0):0){a:do if(H){w=0;x=J}else{w=0;x=J;do{e=b+(w+C)|0;if((l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24|0)!=(l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0))break a;x=x+4|0;w=w+4|0}while(x>>>0<=G>>>0);}while(0);b:do if(x>>>0<F>>>0)do{if((i[b+(w+C)>>0]|0)!=(i[x>>0]|0))break b;x=x+1|0;w=w+1|0}while(x>>>0<F>>>0);while(0);if(w>>>0>=4?(y=+(w|0)*f-+p[1120+(D<<3)>>3],u<y):0){k[o>>2]=w;k[q>>2]=w;k[r>>2]=A;p[s>>3]=y;u=y;t=1}else w=B}else w=B;D=D+1|0;if((D|0)==10)break;else B=w}g=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>17;E=j[a+(g<<1)>>1]|0;x=E&65535;E=(E&65535)>128?x+-128|0:0;c:do if((x|0)>(E|0)){while(1){D=w+M|0;C=D>>>0>c>>>0;D=b+D|0;while(1){x=x+-1|0;B=k[a+65536+(g<<9)+((x&127)<<2)>>2]|0;if((B|0)>-1){d=h-B|0;if(d>>>0>n>>>0){y=u;break c}A=B&c;if((!C?(I=A+w|0,I>>>0<=c>>>0):0)?(i[D>>0]|0)==(i[b+I>>0]|0):0){d:do if(H){e=0;z=J}else{e=0;z=J;do{N=b+(e+A)|0;if((l[z>>0]|l[z+1>>0]<<8|l[z+2>>0]<<16|l[z+3>>0]<<24|0)!=(l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24|0))break d;z=z+4|0;e=e+4|0}while(z>>>0<=G>>>0);}while(0);e:do if(z>>>0<F>>>0)do{if((i[b+(e+A)>>0]|0)!=(i[z>>0]|0))break e;z=z+1|0;e=e+1|0}while(z>>>0<F>>>0);while(0);if(e>>>0>=4){if((B|0)==(h|0))y=-1.2;else y=+((ka(d|0)|0)^31|0)*1.2;y=+(e|0)*f-y;if(u<y){u=y;w=e;break}}}}if((x|0)<=(E|0)){y=u;break c}}k[o>>2]=w;k[q>>2]=w;k[r>>2]=d;p[s>>3]=u;if((x|0)>(E|0))t=1;else{t=1;break}}return t|0}else y=u;while(0);if(t){a=1;return a|0}E=a+16842756|0;D=k[E>>2]|0;w=a+16842752|0;A=k[w>>2]|0;if(D>>>0<A>>>7>>>0){a=0;return a|0}z=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>18<<1;g=n+1|0;k[w>>2]=A+1;a=j[1248+(z<<1)>>1]|0;e=a&65535;if(a<<16>>16!=0?(v=e&31,K=e>>>5,v>>>0<=m>>>0):0){t=(k[190800+(v<<2)>>2]|0)+(ia(v,K)|0)|0;d=66784+t|0;x=66784+(t+v)|0;t=66784+(v+-4+t)|0;f:do if(v>>>0<4)e=0;else{e=0;do{a=b+(e+M)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break f;d=d+4|0;e=e+4|0}while(d>>>0<=t>>>0);}while(0);g:do if(d>>>0<x>>>0)do{if((i[b+(e+M)>>0]|0)!=(i[d>>0]|0))break g;d=d+1|0;e=e+1|0}while(d>>>0<x>>>0);while(0);if((e|0)==(v|0)){t=g+K|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u))L=50}else L=50}else L=50;if((L|0)==50){k[w>>2]=A+2;a=j[1248+((z|1)<<1)>>1]|0;t=a&65535;if(!(a<<16>>16)){a=0;return a|0}v=t&31;x=t>>>5;if(v>>>0>m>>>0){a=0;return a|0}d=(k[190800+(v<<2)>>2]|0)+(ia(v,x)|0)|0;e=66784+d|0;w=66784+(d+v)|0;d=66784+(v+-4+d)|0;h:do if(v>>>0<4)t=0;else{t=0;do{a=b+(t+M)|0;if((l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break h;e=e+4|0;t=t+4|0}while(e>>>0<=d>>>0);}while(0);i:do if(e>>>0<w>>>0)do{if((i[b+(t+M)>>0]|0)!=(i[e>>0]|0))break i;e=e+1|0;t=t+1|0}while(e>>>0<w>>>0);while(0);if((t|0)!=(v|0)){a=0;return a|0}t=g+x|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u)){a=0;return a|0}}k[E>>2]=D+1;k[o>>2]=v;k[q>>2]=v;k[r>>2]=t;p[s>>3]=u;a=1;return a|0}function Pc(a,b,c,d,e,f,g,h,m,n,o,q,r,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;h=h|0;m=m|0;n=n|0;o=o|0;q=q|0;r=r|0;s=s|0;var t=0,u=0.0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;k[q>>2]=0;M=h&c;u=+p[s>>3];B=k[o>>2]|0;k[o>>2]=0;J=b+M|0;F=b+(M+m)|0;H=m+-4|0;G=b+(H+M)|0;H=(H|0)<0;D=0;t=0;while(1){A=(k[800+(D<<2)>>2]|0)+(k[g+(k[736+(D<<2)>>2]<<2)>>2]|0)|0;x=h-A|0;if(((!(A>>>0>n>>>0|x>>>0>=h>>>0)?(C=x&c,z=B+M|0,z>>>0<=c>>>0):0)?(E=C+B|0,E>>>0<=c>>>0):0)?(i[b+z>>0]|0)==(i[b+E>>0]|0):0){a:do if(H){w=0;x=J}else{w=0;x=J;do{e=b+(w+C)|0;if((l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24|0)!=(l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0))break a;x=x+4|0;w=w+4|0}while(x>>>0<=G>>>0);}while(0);b:do if(x>>>0<F>>>0)do{if((i[b+(w+C)>>0]|0)!=(i[x>>0]|0))break b;x=x+1|0;w=w+1|0}while(x>>>0<F>>>0);while(0);if(w>>>0>=4?(y=+(w|0)*f-+p[1120+(D<<3)>>3],u<y):0){k[o>>2]=w;k[q>>2]=w;k[r>>2]=A;p[s>>3]=y;u=y;t=1}else w=B}else w=B;D=D+1|0;if((D|0)==10)break;else B=w}g=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>17;E=j[a+(g<<1)>>1]|0;x=E&65535;E=(E&65535)>64?x+-64|0:0;c:do if((x|0)>(E|0)){while(1){D=w+M|0;C=D>>>0>c>>>0;D=b+D|0;while(1){x=x+-1|0;B=k[a+65536+(g<<8)+((x&63)<<2)>>2]|0;if((B|0)>-1){d=h-B|0;if(d>>>0>n>>>0){y=u;break c}A=B&c;if((!C?(I=A+w|0,I>>>0<=c>>>0):0)?(i[D>>0]|0)==(i[b+I>>0]|0):0){d:do if(H){e=0;z=J}else{e=0;z=J;do{N=b+(e+A)|0;if((l[z>>0]|l[z+1>>0]<<8|l[z+2>>0]<<16|l[z+3>>0]<<24|0)!=(l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24|0))break d;z=z+4|0;e=e+4|0}while(z>>>0<=G>>>0);}while(0);e:do if(z>>>0<F>>>0)do{if((i[b+(e+A)>>0]|0)!=(i[z>>0]|0))break e;z=z+1|0;e=e+1|0}while(z>>>0<F>>>0);while(0);if(e>>>0>=4){if((B|0)==(h|0))y=-1.2;else y=+((ka(d|0)|0)^31|0)*1.2;y=+(e|0)*f-y;if(u<y){u=y;w=e;break}}}}if((x|0)<=(E|0)){y=u;break c}}k[o>>2]=w;k[q>>2]=w;k[r>>2]=d;p[s>>3]=u;if((x|0)>(E|0))t=1;else{t=1;break}}return t|0}else y=u;while(0);if(t){a=1;return a|0}E=a+8454148|0;D=k[E>>2]|0;w=a+8454144|0;A=k[w>>2]|0;if(D>>>0<A>>>7>>>0){a=0;return a|0}z=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>18<<1;g=n+1|0;k[w>>2]=A+1;a=j[1248+(z<<1)>>1]|0;e=a&65535;if(a<<16>>16!=0?(v=e&31,K=e>>>5,v>>>0<=m>>>0):0){t=(k[190800+(v<<2)>>2]|0)+(ia(v,K)|0)|0;d=66784+t|0;x=66784+(t+v)|0;t=66784+(v+-4+t)|0;f:do if(v>>>0<4)e=0;else{e=0;do{a=b+(e+M)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break f;d=d+4|0;e=e+4|0}while(d>>>0<=t>>>0);}while(0);g:do if(d>>>0<x>>>0)do{if((i[b+(e+M)>>0]|0)!=(i[d>>0]|0))break g;d=d+1|0;e=e+1|0}while(d>>>0<x>>>0);while(0);if((e|0)==(v|0)){t=g+K|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u))L=50}else L=50}else L=50;if((L|0)==50){k[w>>2]=A+2;a=j[1248+((z|1)<<1)>>1]|0;t=a&65535;if(!(a<<16>>16)){a=0;return a|0}v=t&31;x=t>>>5;if(v>>>0>m>>>0){a=0;return a|0}d=(k[190800+(v<<2)>>2]|0)+(ia(v,x)|0)|0;e=66784+d|0;w=66784+(d+v)|0;d=66784+(v+-4+d)|0;h:do if(v>>>0<4)t=0;else{t=0;do{a=b+(t+M)|0;if((l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break h;e=e+4|0;t=t+4|0}while(e>>>0<=d>>>0);}while(0);i:do if(e>>>0<w>>>0)do{if((i[b+(t+M)>>0]|0)!=(i[e>>0]|0))break i;e=e+1|0;t=t+1|0}while(e>>>0<w>>>0);while(0);if((t|0)!=(v|0)){a=0;return a|0}t=g+x|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u)){a=0;return a|0}}k[E>>2]=D+1;k[o>>2]=v;k[q>>2]=v;k[r>>2]=t;p[s>>3]=u;a=1;return a|0}function Qc(a,b,c,d,e,f,g,h,m,n,o,q,r,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;h=h|0;m=m|0;n=n|0;o=o|0;q=q|0;r=r|0;s=s|0;var t=0,u=0.0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;k[q>>2]=0;M=h&c;u=+p[s>>3];B=k[o>>2]|0;k[o>>2]=0;J=b+M|0;F=b+(M+m)|0;H=m+-4|0;G=b+(H+M)|0;H=(H|0)<0;D=0;t=0;while(1){A=(k[800+(D<<2)>>2]|0)+(k[g+(k[736+(D<<2)>>2]<<2)>>2]|0)|0;x=h-A|0;if(((!(A>>>0>n>>>0|x>>>0>=h>>>0)?(C=x&c,z=B+M|0,z>>>0<=c>>>0):0)?(E=C+B|0,E>>>0<=c>>>0):0)?(i[b+z>>0]|0)==(i[b+E>>0]|0):0){a:do if(H){w=0;x=J}else{w=0;x=J;do{e=b+(w+C)|0;if((l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24|0)!=(l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0))break a;x=x+4|0;w=w+4|0}while(x>>>0<=G>>>0);}while(0);b:do if(x>>>0<F>>>0)do{if((i[b+(w+C)>>0]|0)!=(i[x>>0]|0))break b;x=x+1|0;w=w+1|0}while(x>>>0<F>>>0);while(0);if(w>>>0>=4?(y=+(w|0)*f-+p[1120+(D<<3)>>3],u<y):0){k[o>>2]=w;k[q>>2]=w;k[r>>2]=A;p[s>>3]=y;u=y;t=1}else w=B}else w=B;D=D+1|0;if((D|0)==4)break;else B=w}g=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>18;E=j[a+(g<<1)>>1]|0;x=E&65535;E=(E&65535)>32?x+-32|0:0;c:do if((x|0)>(E|0)){while(1){D=w+M|0;C=D>>>0>c>>>0;D=b+D|0;while(1){x=x+-1|0;B=k[a+32768+(g<<7)+((x&31)<<2)>>2]|0;if((B|0)>-1){d=h-B|0;if(d>>>0>n>>>0){y=u;break c}A=B&c;if((!C?(I=A+w|0,I>>>0<=c>>>0):0)?(i[D>>0]|0)==(i[b+I>>0]|0):0){d:do if(H){e=0;z=J}else{e=0;z=J;do{N=b+(e+A)|0;if((l[z>>0]|l[z+1>>0]<<8|l[z+2>>0]<<16|l[z+3>>0]<<24|0)!=(l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24|0))break d;z=z+4|0;e=e+4|0}while(z>>>0<=G>>>0);}while(0);e:do if(z>>>0<F>>>0)do{if((i[b+(e+A)>>0]|0)!=(i[z>>0]|0))break e;z=z+1|0;e=e+1|0}while(z>>>0<F>>>0);while(0);if(e>>>0>=4){if((B|0)==(h|0))y=-1.2;else y=+((ka(d|0)|0)^31|0)*1.2;y=+(e|0)*f-y;if(u<y){u=y;w=e;break}}}}if((x|0)<=(E|0)){y=u;break c}}k[o>>2]=w;k[q>>2]=w;k[r>>2]=d;p[s>>3]=u;if((x|0)>(E|0))t=1;else{t=1;break}}return t|0}else y=u;while(0);if(t){a=1;return a|0}E=a+2129924|0;D=k[E>>2]|0;w=a+2129920|0;A=k[w>>2]|0;if(D>>>0<A>>>7>>>0){a=0;return a|0}z=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>18<<1;g=n+1|0;k[w>>2]=A+1;a=j[1248+(z<<1)>>1]|0;e=a&65535;if(a<<16>>16!=0?(v=e&31,K=e>>>5,v>>>0<=m>>>0):0){t=(k[190800+(v<<2)>>2]|0)+(ia(v,K)|0)|0;d=66784+t|0;x=66784+(t+v)|0;t=66784+(v+-4+t)|0;f:do if(v>>>0<4)e=0;else{e=0;do{a=b+(e+M)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break f;d=d+4|0;e=e+4|0}while(d>>>0<=t>>>0);}while(0);g:do if(d>>>0<x>>>0)do{if((i[b+(e+M)>>0]|0)!=(i[d>>0]|0))break g;d=d+1|0;e=e+1|0}while(d>>>0<x>>>0);while(0);if((e|0)==(v|0)){t=g+K|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u))L=50}else L=50}else L=50;if((L|0)==50){k[w>>2]=A+2;a=j[1248+((z|1)<<1)>>1]|0;t=a&65535;if(!(a<<16>>16)){a=0;return a|0}v=t&31;x=t>>>5;if(v>>>0>m>>>0){a=0;return a|0}d=(k[190800+(v<<2)>>2]|0)+(ia(v,x)|0)|0;e=66784+d|0;w=66784+(d+v)|0;d=66784+(v+-4+d)|0;h:do if(v>>>0<4)t=0;else{t=0;do{a=b+(t+M)|0;if((l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break h;e=e+4|0;t=t+4|0}while(e>>>0<=d>>>0);}while(0);i:do if(e>>>0<w>>>0)do{if((i[b+(t+M)>>0]|0)!=(i[e>>0]|0))break i;e=e+1|0;t=t+1|0}while(e>>>0<w>>>0);while(0);if((t|0)!=(v|0)){a=0;return a|0}t=g+x|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u)){a=0;return a|0}}k[E>>2]=D+1;k[o>>2]=v;k[q>>2]=v;k[r>>2]=t;p[s>>3]=u;a=1;return a|0}function Rc(a,b,c,d,e,f,g,h,m,n,o,q,r,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;h=h|0;m=m|0;n=n|0;o=o|0;q=q|0;r=r|0;s=s|0;var t=0,u=0.0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;k[q>>2]=0;M=h&c;u=+p[s>>3];B=k[o>>2]|0;k[o>>2]=0;J=b+M|0;F=b+(M+m)|0;H=m+-4|0;G=b+(H+M)|0;H=(H|0)<0;D=0;t=0;while(1){A=(k[800+(D<<2)>>2]|0)+(k[g+(k[736+(D<<2)>>2]<<2)>>2]|0)|0;x=h-A|0;if(((!(A>>>0>n>>>0|x>>>0>=h>>>0)?(C=x&c,z=B+M|0,z>>>0<=c>>>0):0)?(E=C+B|0,E>>>0<=c>>>0):0)?(i[b+z>>0]|0)==(i[b+E>>0]|0):0){a:do if(H){w=0;x=J}else{w=0;x=J;do{e=b+(w+C)|0;if((l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24|0)!=(l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0))break a;x=x+4|0;w=w+4|0}while(x>>>0<=G>>>0);}while(0);b:do if(x>>>0<F>>>0)do{if((i[b+(w+C)>>0]|0)!=(i[x>>0]|0))break b;x=x+1|0;w=w+1|0}while(x>>>0<F>>>0);while(0);if(w>>>0>=4?(y=+(w|0)*f-+p[1120+(D<<3)>>3],u<y):0){k[o>>2]=w;k[q>>2]=w;k[r>>2]=A;p[s>>3]=y;u=y;t=1}else w=B}else w=B;D=D+1|0;if((D|0)==4)break;else B=w}g=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>18;E=j[a+(g<<1)>>1]|0;x=E&65535;E=(E&65535)>16?x+-16|0:0;c:do if((x|0)>(E|0)){while(1){D=w+M|0;C=D>>>0>c>>>0;D=b+D|0;while(1){x=x+-1|0;B=k[a+32768+(g<<6)+((x&15)<<2)>>2]|0;if((B|0)>-1){d=h-B|0;if(d>>>0>n>>>0){y=u;break c}A=B&c;if((!C?(I=A+w|0,I>>>0<=c>>>0):0)?(i[D>>0]|0)==(i[b+I>>0]|0):0){d:do if(H){e=0;z=J}else{e=0;z=J;do{N=b+(e+A)|0;if((l[z>>0]|l[z+1>>0]<<8|l[z+2>>0]<<16|l[z+3>>0]<<24|0)!=(l[N>>0]|l[N+1>>0]<<8|l[N+2>>0]<<16|l[N+3>>0]<<24|0))break d;z=z+4|0;e=e+4|0}while(z>>>0<=G>>>0);}while(0);e:do if(z>>>0<F>>>0)do{if((i[b+(e+A)>>0]|0)!=(i[z>>0]|0))break e;z=z+1|0;e=e+1|0}while(z>>>0<F>>>0);while(0);if(e>>>0>=4){if((B|0)==(h|0))y=-1.2;else y=+((ka(d|0)|0)^31|0)*1.2;y=+(e|0)*f-y;if(u<y){u=y;w=e;break}}}}if((x|0)<=(E|0)){y=u;break c}}k[o>>2]=w;k[q>>2]=w;k[r>>2]=d;p[s>>3]=u;if((x|0)>(E|0))t=1;else{t=1;break}}return t|0}else y=u;while(0);if(t){a=1;return a|0}E=a+1081348|0;D=k[E>>2]|0;w=a+1081344|0;A=k[w>>2]|0;if(D>>>0<A>>>7>>>0){a=0;return a|0}z=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>18<<1;g=n+1|0;k[w>>2]=A+1;a=j[1248+(z<<1)>>1]|0;e=a&65535;if(a<<16>>16!=0?(v=e&31,K=e>>>5,v>>>0<=m>>>0):0){t=(k[190800+(v<<2)>>2]|0)+(ia(v,K)|0)|0;d=66784+t|0;x=66784+(t+v)|0;t=66784+(v+-4+t)|0;f:do if(v>>>0<4)e=0;else{e=0;do{a=b+(e+M)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break f;d=d+4|0;e=e+4|0}while(d>>>0<=t>>>0);}while(0);g:do if(d>>>0<x>>>0)do{if((i[b+(e+M)>>0]|0)!=(i[d>>0]|0))break g;d=d+1|0;e=e+1|0}while(d>>>0<x>>>0);while(0);if((e|0)==(v|0)){t=g+K|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u))L=50}else L=50}else L=50;if((L|0)==50){k[w>>2]=A+2;a=j[1248+((z|1)<<1)>>1]|0;t=a&65535;if(!(a<<16>>16)){a=0;return a|0}v=t&31;x=t>>>5;if(v>>>0>m>>>0){a=0;return a|0}d=(k[190800+(v<<2)>>2]|0)+(ia(v,x)|0)|0;e=66784+d|0;w=66784+(d+v)|0;d=66784+(v+-4+d)|0;h:do if(v>>>0<4)t=0;else{t=0;do{a=b+(t+M)|0;if((l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0)!=(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0))break h;e=e+4|0;t=t+4|0}while(e>>>0<=d>>>0);}while(0);i:do if(e>>>0<w>>>0)do{if((i[b+(t+M)>>0]|0)!=(i[e>>0]|0))break i;e=e+1|0;t=t+1|0}while(e>>>0<w>>>0);while(0);if((t|0)!=(v|0)){a=0;return a|0}t=g+x|0;if(!t)u=-1.2;else u=+((ka(t|0)|0)^31|0)*1.2;u=+(v|0)*f-u;if(!(y<u)){a=0;return a|0}}k[E>>2]=D+1;k[o>>2]=v;k[q>>2]=v;k[r>>2]=t;p[s>>3]=u;a=1;return a|0}function Sc(a,b,c,d,e,f,g,h,m,n,o,q,r,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;h=h|0;m=m|0;n=n|0;o=o|0;q=q|0;r=r|0;s=s|0;var t=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0.0,B=0,C=0,D=0,E=0.0,F=0,G=0;v=k[o>>2]|0;G=h&c;d=i[b+(v+G)>>0]|0;z=d&255;t=+p[s>>3];e=k[g>>2]|0;g=h-e|0;if(g>>>0<h>>>0?(y=g&c,d<<24>>24==(i[b+(y+v)>>0]|0)):0){d=b+G|0;w=b+(G+m)|0;F=m+-4|0;u=b+(F+G)|0;a:do if((F|0)<0)g=0;else{g=0;do{F=b+(g+y)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[F>>0]|l[F+1>>0]<<8|l[F+2>>0]<<16|l[F+3>>0]<<24|0))break a;d=d+4|0;g=g+4|0}while(d>>>0<=u>>>0);}while(0);b:do if(d>>>0<w>>>0)do{if((i[b+(g+y)>>0]|0)!=(i[d>>0]|0))break b;d=d+1|0;g=g+1|0}while(d>>>0<w>>>0);while(0);if((g|0)>3){t=+(g|0)*f+.6;k[o>>2]=g;k[q>>2]=g;k[r>>2]=e;p[s>>3]=t;v=g;d=l[b+(g+G)>>0]|0;e=1}else{d=z;e=0}}else{d=z;e=0}F=b+G|0;w=(ia(l[F>>0]|l[F+1>>0]<<8|l[F+2>>0]<<16|l[F+3>>0]<<24,506832829)|0)>>>15;u=a+(w+1<<2)|0;w=k[a+(w<<2)>>2]|0;g=G+m|0;D=b+g|0;x=m+-4|0;C=b+(x+G)|0;if((x|0)<0){B=(G|0)<(g|0);z=u;x=d;y=0;g=w;while(1){w=h-g|0;d=g&c;if(!(w>>>0>n>>>0|((g|0)==(h|0)?1:(x|0)!=(l[b+(d+v)>>0]|0)))?B:0){u=0;g=F;do{if((i[b+(u+d)>>0]|0)!=(i[g>>0]|0))break;g=g+1|0;u=u+1|0}while(g>>>0<D>>>0);if((u|0)>3?(A=+(u|0)*f-+((ka(w|0)|0)^31|0)*1.2,t<A):0){k[o>>2]=u;k[q>>2]=u;k[r>>2]=w;p[s>>3]=A;v=u;t=A;u=l[b+(u+G)>>0]|0;e=1}else u=x}else u=x;y=y+1|0;g=k[z>>2]|0;if((y|0)==4){A=t;break}else{z=z+4|0;x=u}}}else{z=u;B=0;while(1){y=h-w|0;x=w&c;if(!(y>>>0>n>>>0|((w|0)==(h|0)?1:(d|0)!=(l[b+(x+v)>>0]|0)))){u=0;g=F;do{w=b+(u+x)|0;if((l[g>>0]|l[g+1>>0]<<8|l[g+2>>0]<<16|l[g+3>>0]<<24|0)!=(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24|0))break;g=g+4|0;u=u+4|0}while(g>>>0<=C>>>0);c:do if(g>>>0<D>>>0)do{if((i[b+(u+x)>>0]|0)!=(i[g>>0]|0))break c;g=g+1|0;u=u+1|0}while(g>>>0<D>>>0);while(0);if((u|0)>3?(E=+(u|0)*f-+((ka(y|0)|0)^31|0)*1.2,t<E):0){k[o>>2]=u;k[q>>2]=u;k[r>>2]=y;p[s>>3]=E;v=u;t=E;u=l[b+(u+G)>>0]|0;e=1}else u=d}else u=d;B=B+1|0;w=k[z>>2]|0;if((B|0)==4){A=t;break}else{z=z+4|0;d=u}}}if(e){n=1;return n|0}x=a+524308|0;y=k[x>>2]|0;e=a+524304|0;d=k[e>>2]|0;if(y>>>0<d>>>7>>>0){n=0;return n|0}k[e>>2]=d+1;a=1248+((ia(l[F>>0]|l[F+1>>0]<<8|l[F+2>>0]<<16|l[F+3>>0]<<24,506832829)|0)>>>18<<1<<1)|0;a=j[a>>1]|0;e=a&65535;if(!(a<<16>>16)){n=0;return n|0}w=e&31;v=e>>>5;if(w>>>0>m>>>0){n=0;return n|0}g=(k[190800+(w<<2)>>2]|0)+(ia(w,v)|0)|0;d=66784+g|0;u=66784+(g+w)|0;g=66784+(w+-4+g)|0;d:do if(w>>>0<4)e=0;else{e=0;do{m=b+(e+G)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[m>>0]|l[m+1>>0]<<8|l[m+2>>0]<<16|l[m+3>>0]<<24|0))break d;d=d+4|0;e=e+4|0}while(d>>>0<=g>>>0);}while(0);e:do if(d>>>0<u>>>0)do{if((i[b+(e+G)>>0]|0)!=(i[d>>0]|0))break e;d=d+1|0;e=e+1|0}while(d>>>0<u>>>0);while(0);if((e|0)!=(w|0)){n=0;return n|0}e=n+1+v|0;if(!e)t=-1.2;else t=+((ka(e|0)|0)^31|0)*1.2;t=+(w|0)*f-t;if(!(A<t)){n=0;return n|0}k[x>>2]=y+1;k[o>>2]=w;k[q>>2]=w;k[r>>2]=e;p[s>>3]=t;n=1;return n|0}function Tc(a,b,c,d,e,f,g,h,j,m,n,o,q,r){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;h=h|0;j=j|0;m=m|0;n=n|0;o=o|0;q=q|0;r=r|0;var s=0,t=0,u=0,v=0,w=0,x=0,y=0;v=k[n>>2]|0;x=h&c;w=i[b+(v+x)>>0]|0;u=k[g>>2]|0;g=h-u|0;if(g>>>0<h>>>0?(t=g&c,w<<24>>24==(i[b+(t+v)>>0]|0)):0){d=b+x|0;s=b+(x+j)|0;g=j+-4|0;e=b+(g+x)|0;a:do if((g|0)<0)g=0;else{g=0;do{y=b+(g+t)|0;if((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)!=(l[y>>0]|l[y+1>>0]<<8|l[y+2>>0]<<16|l[y+3>>0]<<24|0))break a;d=d+4|0;g=g+4|0}while(d>>>0<=e>>>0);}while(0);b:do if(d>>>0<s>>>0)do{if((i[b+(g+t)>>0]|0)!=(i[d>>0]|0))break b;d=d+1|0;g=g+1|0}while(d>>>0<s>>>0);while(0);if((g|0)>3){k[n>>2]=g;k[o>>2]=g;k[q>>2]=u;p[r>>3]=+(g|0)*f+.6;x=1;return x|0}}d=b+x|0;e=l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24;g=a+((ia(e,506832829)|0)>>>16<<2)|0;g=k[g>>2]|0;u=h-g|0;t=g&c;if(w<<24>>24!=(i[b+(t+v)>>0]|0)){x=0;return x|0}if((g|0)==(h|0)|u>>>0>m>>>0){x=0;return x|0}s=b+(x+j)|0;w=j+-4|0;g=b+(w+x)|0;c:do if((w|0)>=0?(x=b+t|0,(e|0)==(l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24|0)):0){e=0;do{d=d+4|0;e=e+4|0;if(d>>>0>g>>>0)break c;x=b+(e+t)|0}while((l[d>>0]|l[d+1>>0]<<8|l[d+2>>0]<<16|l[d+3>>0]<<24|0)==(l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24|0));}else e=0;while(0);d:do if(d>>>0<s>>>0)do{if((i[b+(e+t)>>0]|0)!=(i[d>>0]|0))break d;d=d+1|0;e=e+1|0}while(d>>>0<s>>>0);while(0);if((e|0)<=3){x=0;return x|0}k[n>>2]=e;k[o>>2]=e;k[q>>2]=u;f=+(e|0)*f-+((ka(u|0)|0)^31|0)*1.2;p[r>>3]=f;x=1;return x|0}function Uc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;if(!b)return;t=c+4|0;u=c+8|0;v=d+4|0;w=d+8|0;x=0;a:while(1){o=a+(x<<5)+8|0;f=k[t>>2]|0;if((f|0)==(k[u>>2]|0)){l=k[c>>2]|0;n=l;r=f-n|0;e=(r>>1)+1|0;if((r|0)<-2){y=6;break}r=l;h=f-r|0;h=h>>1>>>0<1073741823?(h>>>0<e>>>0?e:h):2147483647;f=f-r|0;e=f>>1;if(!h)g=0;else g=Af(h<<1)|0;j[g+(e<<1)>>1]=j[o>>1]|0;Kg(g|0,l|0,f|0)|0;k[c>>2]=g;k[t>>2]=g+(e+1<<1);k[u>>2]=g+(h<<1);if(n)Df(n);}else{j[f>>1]=j[o>>1]|0;k[t>>2]=f+2}do if((k[a+(x<<5)+4>>2]|0)>0?(m[o>>1]|0)>127:0){p=j[a+(x<<5)+10>>1]&255;e=k[v>>2]|0;if((e|0)!=(k[w>>2]|0)){i[e>>0]=p;k[v>>2]=(k[v>>2]|0)+1;break}q=k[d>>2]|0;r=q;g=e-r+1|0;if((g|0)<0){y=16;break a}s=q;f=e-s|0;if(f>>>0<1073741823){h=f<<1;g=h>>>0<g>>>0?g:h;h=k[v>>2]|0;o=h-s|0;if(!g){l=0;n=0}else y=20}else{o=k[v>>2]|0;g=2147483647;h=o;o=o-s|0;y=20}if((y|0)==20){y=0;l=g;n=Af(g)|0}i[n+o>>0]=p;h=h-s|0;p=n+(o-h)|0;Kg(p|0,q|0,h|0)|0;k[d>>2]=p;k[v>>2]=n+(o+1);k[w>>2]=n+l;if(r)Df(r);}while(0);x=x+1|0;if((x|0)==(b|0)){y=24;break}}if((y|0)==6)yf(c);else if((y|0)==16)yf(d);else if((y|0)==24)return}function Vc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0;v=r;r=r+16|0;t=v+12|0;u=v;q=u+4|0;k[q>>2]=0;s=u+8|0;k[s>>2]=0;d=u+4|0;k[u>>2]=d;o=(b|0)==0;if(!o){m=d;f=0;e=0;c=0;while(1){n=a+e|0;if(f){j=i[n>>0]|0;g=d;h=f;a:do{while(1){if((l[h+13>>0]|0)>=(j&255)){g=h;break}h=k[h+4>>2]|0;if(!h)break a}h=k[g>>2]|0}while((h|0)!=0);if(!((g|0)!=(d|0)?(j&255)>=(l[g+13>>0]|0):0))p=14}else p=14;if((p|0)==14){do if(f){j=i[n>>0]|0;while(1){g=i[f+13>>0]|0;if((j&255)<(g&255)){g=k[f>>2]|0;if(!g){g=f;h=f;p=18;break}else f=g}else{if((g&255)>=(j&255)){p=24;break}g=f+4|0;h=k[g>>2]|0;if(!h){p=22;break}else f=h}}if((p|0)==18){k[t>>2]=h;j=g;p=25;break}else if((p|0)==22){k[t>>2]=f;j=g;h=f;p=25;break}else if((p|0)==24){p=0;k[t>>2]=f;if(!f){j=t;h=f;p=25;break}else break}}else{k[t>>2]=d;j=d;h=m;p=25}while(0);if((p|0)==25){p=0;f=Af(16)|0;i[f+13>>0]=i[n>>0]|0;i[f+14>>0]=0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=h;k[j>>2]=f;g=k[k[u>>2]>>2]|0;if(!g)g=f;else{k[u>>2]=g;g=k[j>>2]|0}Tb(k[q>>2]|0,g);k[s>>2]=(k[s>>2]|0)+1}i[f+14>>0]=c;c=c+1|0}e=e+1|0;if(e>>>0>=b>>>0)break;f=k[d>>2]|0}if(!o){j=d;n=0;do{m=a+n|0;e=k[d>>2]|0;do if(e){h=i[m>>0]|0;while(1){g=i[e+13>>0]|0;if((h&255)<(g&255)){g=k[e>>2]|0;if(!g){g=e;p=35;break}else e=g}else{if((g&255)>=(h&255)){p=41;break}g=e+4|0;f=k[g>>2]|0;if(!f){p=39;break}else e=f}}if((p|0)==35){k[t>>2]=e;f=g;p=42;break}else if((p|0)==39){k[t>>2]=e;f=g;p=42;break}else if((p|0)==41){p=0;k[t>>2]=e;if(!e){f=t;p=42;break}else break}}else{k[t>>2]=d;f=d;e=j;p=42}while(0);if((p|0)==42){h=Af(16)|0;i[h+13>>0]=i[m>>0]|0;i[h+14>>0]=0;k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=e;k[f>>2]=h;g=k[k[u>>2]>>2]|0;if(!g)e=h;else{k[u>>2]=g;e=k[f>>2]|0}Tb(k[q>>2]|0,e);k[s>>2]=(k[s>>2]|0)+1;e=h}i[m>>0]=i[e+14>>0]|0;n=n+1|0}while(n>>>0<b>>>0);o=k[d>>2]|0;Yc(u,o);r=v;return c|0}}else c=0;n=d;o=c;n=k[n>>2]|0;Yc(u,n);r=v;return o|0}function Wc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0;u=r;r=r+16|0;s=u+4|0;t=u;e=k[a>>2]|0;f=l[e>>0]|0;k[s>>2]=f;k[t>>2]=1;k[b>>2]=-1;o=a+4|0;d=k[o>>2]|0;q=b+8|0;p=b+12|0;if((d-e|0)>>>0>1){i=b+4|0;j=b+20|0;m=b+24|0;n=b+16|0;g=e;c=f;e=1;h=1;do{if((l[g+h>>0]|0|0)!=(c|0)){d=k[q>>2]|0;if((d|0)==(k[p>>2]|0))Zc(i,s);else{k[d>>2]=c;k[q>>2]=d+4}d=k[j>>2]|0;if((d|0)==(k[m>>2]|0))Zc(n,t);else{k[d>>2]=e;k[j>>2]=d+4}g=k[b>>2]|0;k[b>>2]=(g|0)<(f|0)?f:g;g=k[a>>2]|0;c=l[g+h>>0]|0;k[s>>2]=c;k[t>>2]=0;e=0;d=k[o>>2]|0;f=c}e=e+1|0;k[t>>2]=e;h=h+1|0}while(h>>>0<(d-g|0)>>>0);}else e=1;d=k[q>>2]|0;if((d|0)==(k[p>>2]|0))Zc(b+4|0,s);else{k[d>>2]=f;k[q>>2]=d+4}c=b+20|0;d=k[c>>2]|0;if((d|0)==(k[b+24>>2]|0)){Zc(b+16|0,t);n=k[b>>2]|0;m=(n|0)<(f|0);n=m?f:n;n=n+1|0;k[b>>2]=n;r=u;return}else{k[d>>2]=e;k[c>>2]=d+4;n=k[b>>2]|0;m=(n|0)<(f|0);n=m?f:n;n=n+1|0;k[b>>2]=n;r=u;return}}function Xc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+48|0;p=s+24|0;o=s+12|0;n=s;k[p>>2]=0;q=p+4|0;k[q>>2]=0;k[p+8>>2]=0;if(b){h=0;i=0;do{i=(k[a+(h<<5)>>2]|0)+i|0;h=h+1|0}while((h|0)!=(b|0));if(i){Fb(p,i);g=0;l=0;m=0;while(1){j=a+(l<<5)|0;Kg((k[p>>2]|0)+m|0,c+g|0,k[j>>2]|0)|0;j=k[j>>2]|0;m=j+m|0;h=l+1|0;if(!(h>>>0<b>>>0&m>>>0<i>>>0))break;else{g=j+g+(k[a+(l<<5)+4>>2]|0)|0;l=h}}}}k[o>>2]=0;j=o+4|0;k[j>>2]=0;k[o+8>>2]=0;k[n>>2]=0;i=n+4|0;k[i>>2]=0;k[n+8>>2]=0;Uc(a,b,o,n);_c(p,544,100,70,28.1,d);$c(o,530,50,40,13.5,e);ad(n,544,50,40,14.6,f);g=k[n>>2]|0;if(g){if((k[i>>2]|0)!=(g|0))k[i>>2]=g;Df(g);}g=k[o>>2]|0;h=g;if(g){i=k[j>>2]|0;if((i|0)!=(g|0))k[j>>2]=i+(~((i+-2-h|0)>>>1)<<1);Df(g);}g=k[p>>2]|0;if(!g){r=s;return}if((k[q>>2]|0)!=(g|0))k[q>>2]=g;Df(g);r=s;return}function Yc(a,b){a=a|0;b=b|0;if(!b)return;else{Yc(a,k[b>>2]|0);Yc(a,k[b+4>>2]|0);Df(b);return}}function Zc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;g=a+4|0;h=k[a>>2]|0;i=h;d=((k[g>>2]|0)-i>>2)+1|0;if(d>>>0>1073741823)yf(a);j=a+8|0;e=h;c=(k[j>>2]|0)-e|0;if(c>>2>>>0<536870911){c=c>>1;d=c>>>0<d>>>0?d:c;e=(k[g>>2]|0)-e|0;c=e>>2;if(!d){f=0;d=0}else l=6}else{e=(k[g>>2]|0)-e|0;d=1073741823;c=e>>2;l=6}if((l|0)==6){f=d;d=Af(d<<2)|0}k[d+(c<<2)>>2]=k[b>>2];Kg(d|0,h|0,e|0)|0;k[a>>2]=d;k[g>>2]=d+(c+1<<2);k[j>>2]=d+(f<<2);if(!i)return;Df(i);return}function _c(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+32|0;l=q+28|0;m=q+24|0;p=q+12|0;o=q;g=k[a>>2]|0;n=a+4|0;h=k[n>>2]|0;if((g|0)==(h|0)){k[f>>2]=1;r=q;return}j=h-g|0;if(j>>>0<128){k[f>>2]=1;k[l>>2]=0;b=f+8|0;j=k[b>>2]|0;if((j|0)==(k[f+12>>2]|0)){Zc(f+4|0,l);h=k[n>>2]|0;g=k[a>>2]|0}else{k[j>>2]=0;k[b>>2]=j+4}g=h-g|0;k[m>>2]=g;b=f+20|0;h=k[b>>2]|0;if((h|0)==(k[f+24>>2]|0)){Zc(f+16|0,m);r=q;return}else{k[h>>2]=g;k[b>>2]=h+4;r=q;return}}k[p>>2]=0;l=p+4|0;k[l>>2]=0;k[p+8>>2]=0;Ed(g,j,b,c,d,p);h=k[a>>2]|0;Fd(h,(k[n>>2]|0)-h|0,d,p);h=k[n>>2]|0;d=k[a>>2]|0;j=h-d|0;k[o>>2]=0;m=o+4|0;k[m>>2]=0;k[o+8>>2]=0;if((h|0)==(d|0)){b=h;g=h;h=0}else{if((j|0)<0)yf(o);h=Af(j)|0;k[m>>2]=h;k[o>>2]=h;k[o+8>>2]=h+j;do{i[h>>0]=0;h=(k[m>>2]|0)+1|0;k[m>>2]=h;j=j+-1|0}while((j|0)!=0);b=k[n>>2]|0;g=k[a>>2]|0;h=k[o>>2]|0}j=g;g=b-g|0;b=0;do{Gd(j,g,e,p,h);j=k[a>>2]|0;Hd(j,(k[n>>2]|0)-j|0,k[o>>2]|0,p);b=b+1|0;j=k[a>>2]|0;g=(k[n>>2]|0)-j|0;h=k[o>>2]|0}while((b|0)<10);Id(j,g,h);Wc(o,f);g=k[o>>2]|0;if(g){if((k[m>>2]|0)!=(g|0))k[m>>2]=g;Df(g);}b=k[p>>2]|0;if(!b){r=q;return}g=k[l>>2]|0;if((g|0)!=(b|0))k[l>>2]=g+(~(((g+-1040-b|0)>>>0)/1040|0)*1040|0);Df(b);r=q;return}function $c(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=f|0;var g=0,h=0,j=0,l=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=r;r=r+2864|0;w=B;j=B+2860|0;l=B+2856|0;A=B+2844|0;y=B+2832|0;g=k[a>>2]|0;x=a+4|0;h=k[x>>2]|0;if((g|0)==(h|0)){k[f>>2]=1;r=B;return}v=h-g>>1;if(v>>>0<128){k[f>>2]=1;k[j>>2]=0;c=f+8|0;b=k[c>>2]|0;if((b|0)==(k[f+12>>2]|0)){Zc(f+4|0,j);h=k[x>>2]|0;g=k[a>>2]|0}else{k[b>>2]=0;k[c>>2]=b+4}g=h-g>>1;k[l>>2]=g;c=f+20|0;h=k[c>>2]|0;if((h|0)==(k[f+24>>2]|0)){Zc(f+16|0,l);r=B;return}else{k[h>>2]=g;k[c>>2]=h+4;r=B;return}}k[A>>2]=0;z=A+4|0;k[z>>2]=0;k[A+8>>2]=0;j=((v>>>0)/(b>>>0)|0)+1|0;t=(j|0)>(c|0)?c:j;s=(v>>>0)/(t>>>0)|0;if((t|0)>0){n=v+~d|0;o=w+2816|0;p=(d|0)==0;q=A+8|0;h=(j|0)<(c|0)?j:c;j=7;c=0;do{b=((ia(c,v)|0)>>>0)/(t>>>0)|0;if(c){u=j*16807|0;u=(u|0)==0?1:u;j=u;b=((u>>>0)%(s>>>0)|0)+b|0}Fg(w|0,0,2816)|0;k[o>>2]=d;if(!p){b=g+(((b+d|0)>>>0<v>>>0?b:n)<<1)|0;l=d;while(1){u=w+((m[b>>1]|0)<<2)|0;k[u>>2]=(k[u>>2]|0)+1;l=l+-1|0;if(!l)break;else b=b+2|0}}b=k[z>>2]|0;if((b|0)==(k[q>>2]|0))td(A,w);else{Kg(b|0,w|0,2832)|0;k[z>>2]=b+2832}c=c+1|0}while((c|0)!=(h|0));h=k[x>>2]|0;g=k[a>>2]|0;c=k[z>>2]|0;u=k[A>>2]|0}else{c=0;u=0}v=h-g|0;b=v>>1;s=(c-u|0)/2832|0;n=((v>>>0)/(d>>>0)|0)+99+s|0;n=n-((n>>>0)%(s>>>0)|0)|0;if((n|0)>0){o=b>>>0>d>>>0;p=1-d+b|0;q=w+2816|0;l=7;t=0;do{Fg(w|0,0,2820)|0;if(o){c=l*16807|0;c=(c|0)==0?1:c;j=d;l=c;c=(c>>>0)%(p>>>0)|0}else{j=b;c=0}k[q>>2]=j;if(!j)j=0;else{c=g+(c<<1)|0;while(1){C=w+((m[c>>1]|0)<<2)|0;k[C>>2]=(k[C>>2]|0)+1;j=j+-1|0;if(!j)break;else c=c+2|0}j=k[q>>2]|0}c=(t>>>0)%(s>>>0)|0;C=u+(c*2832|0)+2816|0;k[C>>2]=(k[C>>2]|0)+j;j=0;do{C=u+(c*2832|0)+(j<<2)|0;k[C>>2]=(k[C>>2]|0)+(k[w+(j<<2)>>2]|0);j=j+1|0}while((j|0)!=704);t=t+1|0}while((t|0)<(n|0));}k[y>>2]=0;l=y+4|0;k[l>>2]=0;k[y+8>>2]=0;if(!b)c=0;else{if((v|0)<0)yf(y);h=Af(b)|0;k[l>>2]=h;k[y>>2]=h;k[y+8>>2]=h+b;do{i[h>>0]=0;h=(k[l>>2]|0)+1|0;k[l>>2]=h;b=b+-1|0}while((b|0)!=0);h=k[x>>2]|0;g=k[a>>2]|0;c=k[y>>2]|0}b=g;g=h-g>>1;h=c;c=0;do{ud(b,g,e,A,h);b=k[a>>2]|0;vd(b,(k[x>>2]|0)-b>>1,k[y>>2]|0,A);c=c+1|0;b=k[a>>2]|0;g=(k[x>>2]|0)-b>>1;h=k[y>>2]|0}while((c|0)<10);wd(b,g,h);Wc(y,f);g=k[y>>2]|0;if(g){if((k[l>>2]|0)!=(g|0))k[l>>2]=g;Df(g);}c=k[A>>2]|0;if(!c){r=B;return}g=k[z>>2]|0;if((g|0)!=(c|0))k[z>>2]=g+(~(((g+-2832-c|0)>>>0)/2832|0)*2832|0);Df(c);r=B;return}function ad(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=f|0;var g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;A=r;r=r+2128|0;v=A;j=A+2124|0;m=A+2120|0;z=A+2108|0;x=A+2096|0;g=k[a>>2]|0;w=a+4|0;h=k[w>>2]|0;if((g|0)==(h|0)){k[f>>2]=1;r=A;return}s=h-g|0;if(s>>>0<128){k[f>>2]=1;k[j>>2]=0;c=f+8|0;b=k[c>>2]|0;if((b|0)==(k[f+12>>2]|0)){Zc(f+4|0,j);h=k[w>>2]|0;g=k[a>>2]|0}else{k[b>>2]=0;k[c>>2]=b+4}g=h-g|0;k[m>>2]=g;c=f+20|0;h=k[c>>2]|0;if((h|0)==(k[f+24>>2]|0)){Zc(f+16|0,m);r=A;return}else{k[h>>2]=g;k[c>>2]=h+4;r=A;return}}k[z>>2]=0;y=z+4|0;k[y>>2]=0;k[z+8>>2]=0;j=((s>>>0)/(b>>>0)|0)+1|0;u=(j|0)>(c|0)?c:j;t=(s>>>0)/(u>>>0)|0;if((u|0)>0){n=s+~d|0;o=v+2080|0;p=(d|0)==0;q=z+8|0;h=(j|0)<(c|0)?j:c;j=7;c=0;do{b=((ia(c,s)|0)>>>0)/(u>>>0)|0;if(c){m=j*16807|0;m=(m|0)==0?1:m;j=m;b=((m>>>0)%(t>>>0)|0)+b|0}Fg(v|0,0,2080)|0;k[o>>2]=d;if(!p){b=g+((b+d|0)>>>0<s>>>0?b:n)|0;m=d;while(1){B=v+((l[b>>0]|0)<<2)|0;k[B>>2]=(k[B>>2]|0)+1;m=m+-1|0;if(!m)break;else b=b+1|0}}b=k[y>>2]|0;if((b|0)==(k[q>>2]|0))bd(z,v);else{Kg(b|0,v|0,2096)|0;k[y>>2]=b+2096}c=c+1|0}while((c|0)!=(h|0));h=k[w>>2]|0;g=k[a>>2]|0;c=k[y>>2]|0;u=k[z>>2]|0}else{c=0;u=0}b=h-g|0;q=(c-u|0)/2096|0;p=((b<<1>>>0)/(d>>>0)|0)+99+q|0;p=p-((p>>>0)%(q>>>0)|0)|0;if((p|0)>0){o=b>>>0>d>>>0;n=1-d+b|0;s=v+2080|0;j=7;t=0;do{Fg(v|0,0,2084)|0;if(o){c=j*16807|0;c=(c|0)==0?1:c;m=d;j=c;c=(c>>>0)%(n>>>0)|0}else{m=b;c=0}k[s>>2]=m;if(!m)m=0;else{c=g+c|0;while(1){B=v+((l[c>>0]|0)<<2)|0;k[B>>2]=(k[B>>2]|0)+1;m=m+-1|0;if(!m)break;else c=c+1|0}m=k[s>>2]|0}c=(t>>>0)%(q>>>0)|0;B=u+(c*2096|0)+2080|0;k[B>>2]=(k[B>>2]|0)+m;m=0;do{B=u+(c*2096|0)+(m<<2)|0;k[B>>2]=(k[B>>2]|0)+(k[v+(m<<2)>>2]|0);m=m+1|0}while((m|0)!=520);t=t+1|0}while((t|0)<(p|0));}k[x>>2]=0;m=x+4|0;k[m>>2]=0;k[x+8>>2]=0;if((h|0)==(g|0)){c=h;g=h;h=0}else{if((b|0)<0)yf(x);h=Af(b)|0;k[m>>2]=h;k[x>>2]=h;k[x+8>>2]=h+b;do{i[h>>0]=0;h=(k[m>>2]|0)+1|0;k[m>>2]=h;b=b+-1|0}while((b|0)!=0);c=k[w>>2]|0;g=k[a>>2]|0;h=k[x>>2]|0}b=g;g=c-g|0;c=0;do{cd(b,g,e,z,h);b=k[a>>2]|0;dd(b,(k[w>>2]|0)-b|0,k[x>>2]|0,z);c=c+1|0;b=k[a>>2]|0;g=(k[w>>2]|0)-b|0;h=k[x>>2]|0}while((c|0)<10);ed(b,g,h);Wc(x,f);g=k[x>>2]|0;if(g){if((k[m>>2]|0)!=(g|0))k[m>>2]=g;Df(g);}c=k[z>>2]|0;if(!c){r=A;return}g=k[y>>2]|0;if((g|0)!=(c|0))k[y>>2]=g+(~(((g+-2096-c|0)>>>0)/2096|0)*2096|0);Df(c);r=A;return}function bd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;g=a+4|0;h=k[a>>2]|0;i=h;d=(((k[g>>2]|0)-i|0)/2096|0)+1|0;if(d>>>0>2049125)yf(a);j=a+8|0;e=h;c=((k[j>>2]|0)-e|0)/2096|0;if(c>>>0<1024562){c=c<<1;d=c>>>0<d>>>0?d:c;e=(k[g>>2]|0)-e|0;c=(e|0)/2096|0;if(!d){f=0;d=0}else l=6}else{e=(k[g>>2]|0)-e|0;d=2049125;c=(e|0)/2096|0;l=6}if((l|0)==6){f=d;d=Af(d*2096|0)|0}Kg(d+(c*2096|0)|0,b|0,2096)|0;b=d+((((e|0)/-2096|0)+c|0)*2096|0)|0;Kg(b|0,h|0,e|0)|0;k[a>>2]=b;k[g>>2]=d+((c+1|0)*2096|0);k[j>>2]=d+(f*2096|0);if(!i)return;Df(i);return}function cd(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0.0,n=0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0.0;r=k[d>>2]|0;d=(k[d+4>>2]|0)-r|0;v=(d|0)/2096|0;if(v>>>0<2){if(!b)return;Fg(e|0,0,b|0)|0;return}u=v*520|0;u=Cf(u>>>0>536870911?-1:u<<3)|0;Fg(u|0,0,v*4160|0)|0;d=(d|0)>0;g=0;do{if(d){h=ia(g,v)|0;f=0;do{n=k[r+(f*2096|0)+2080>>2]|0;j=k[r+(f*2096|0)+(g<<2)>>2]|0;if((n|0)<256)q=+o[316384+(n<<2)>>2];else q=+kg(+(n|0));if(!j)m=q+2.0;else{if((j|0)<256)m=+o[316384+(j<<2)>>2];else m=+kg(+(j|0));m=q-m}p[u+(f+h<<3)>>3]=m;f=f+1|0}while((f|0)<(v|0));}g=g+1|0}while((g|0)!=520);s=Cf(v>>>0>536870911?-1:v<<3)|0;Fg(s|0,0,v<<3|0)|0;r=ia(v,b)|0;t=Cf(r)|0;Fg(t|0,0,r|0)|0;if(b){g=0;do{r=ia(g,v)|0;n=ia(l[a+g>>0]|0,v)|0;if(d){j=e+g|0;h=0;m=1.e+99;do{f=s+(h<<3)|0;q=+p[u+(h+n<<3)>>3]+ +p[f>>3];p[f>>3]=q;if(q<m){i[j>>0]=h;m=q}h=h+1|0}while((h|0)<(v|0));}else m=1.e+99;if(g>>>0<2e3)q=(+(g>>>0)*.07/2.0e3+.77)*c;else q=c;if(d){j=0;do{n=s+(j<<3)|0;w=+p[n>>3]-m;p[n>>3]=w;if(w>=q){p[n>>3]=q;i[t+(j+r)>>0]=1}j=j+1|0}while((j|0)<(v|0));}g=g+1|0}while((g|0)!=(b|0));d=b+-1|0;if((d|0)>0){n=d;h=l[e+d>>0]|0;j=ia(v,d)|0;while(1){g=n;n=n+-1|0;j=j-v|0;f=e+n|0;if(!(i[t+(j+h)>>0]|0))d=h;else d=l[f>>0]|0;i[f>>0]=d;if((g|0)<=1)break;else h=d}}}Ef(u);Ef(s);Ef(t);return}function dd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,m=0;h=Vc(c,b)|0;i=k[d>>2]|0;m=d+4|0;f=k[m>>2]|0;e=i;if((f|0)==(i|0))g=i;else{g=f+(~(((f+-2096-e|0)>>>0)/2096|0)*2096|0)|0;k[m>>2]=g}f=(g-e|0)/2096|0;if(h>>>0<=f>>>0){if(h>>>0<f>>>0?(j=i+(h*2096|0)|0,(g|0)!=(j|0)):0)k[m>>2]=g+(~(((g+-2096-j|0)>>>0)/2096|0)*2096|0);}else gd(d,h-f|0);if(!b)return;e=k[d>>2]|0;f=0;do{d=l[c+f>>0]|0;m=e+(d*2096|0)+((l[a+f>>0]|0)<<2)|0;k[m>>2]=(k[m>>2]|0)+1;d=e+(d*2096|0)+2080|0;k[d>>2]=(k[d>>2]|0)+1;f=f+1|0}while((f|0)!=(b|0));return}function ed(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;w=r;r=r+2144|0;u=w+2132|0;s=w+2120|0;m=w;q=w+2108|0;o=w+2096|0;k[u>>2]=0;v=u+4|0;k[v>>2]=0;k[u+8>>2]=0;k[s>>2]=0;t=s+4|0;k[t>>2]=0;k[s+8>>2]=0;n=(b|0)==0;do if(!n)if(b>>>0>1073741823)yf(s);else{h=b<<2;f=Af(h)|0;k[s>>2]=f;j=f+(b<<2)|0;k[s+8>>2]=j;Fg(f|0,0,h|0)|0;k[t>>2]=j;break}else f=0;while(0);Fg(m|0,0,2084)|0;g=m+2080|0;j=u+8|0;h=0;e=0;a:while(1){while(1){if(e>>>0>=b>>>0)break a;d=e+1|0;if((d|0)==(b|0)){p=10;break}x=(i[c+e>>0]|0)==(i[c+d>>0]|0);k[f+(e<<2)>>2]=h;e=m+(l[a+e>>0]<<2)|0;k[e>>2]=(k[e>>2]|0)+1;k[g>>2]=(k[g>>2]|0)+1;if(x)e=d;else{e=d;break}}if((p|0)==10){p=0;k[f+(e<<2)>>2]=h;e=m+(l[a+e>>0]<<2)|0;k[e>>2]=(k[e>>2]|0)+1;k[g>>2]=(k[g>>2]|0)+1;e=b}d=k[v>>2]|0;if((d|0)==(k[j>>2]|0)){bd(u,m);f=k[s>>2]|0}else{Kg(d|0,m|0,2096)|0;k[v>>2]=d+2096}Fg(m|0,0,2084)|0;h=h+1|0}k[q>>2]=0;h=q+4|0;k[h>>2]=0;k[q+8>>2]=0;k[o>>2]=0;g=o+4|0;k[g>>2]=0;k[o+8>>2]=0;fd(u,1,((k[v>>2]|0)-(k[u>>2]|0)|0)/2096|0,256,q,o);if(n){f=k[o>>2]|0;if(f)p=19}else{d=k[s>>2]|0;f=k[o>>2]|0;e=0;do{i[c+e>>0]=k[f+(k[d+(e<<2)>>2]<<2)>>2];e=e+1|0}while((e|0)!=(b|0));p=19}if((p|0)==19){e=k[g>>2]|0;if((e|0)!=(f|0))k[g>>2]=e+(~((e+-4-f|0)>>>2)<<2);Df(f);}f=k[q>>2]|0;e=f;if(f){d=k[h>>2]|0;if((d|0)!=(f|0))k[h>>2]=d+(~(((d+-2096-e|0)>>>0)/2096|0)*2096|0);Df(f);}e=k[s>>2]|0;d=e;if(e){f=k[t>>2]|0;if((f|0)!=(e|0))k[t>>2]=f+(~((f+-4-d|0)>>>2)<<2);Df(e);}d=k[u>>2]|0;if(!d){r=w;return}e=k[v>>2]|0;if((e|0)!=(d|0))k[v>>2]=e+(~(((e+-2096-d|0)>>>0)/2096|0)*2096|0);Df(d);r=w;return}function fd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0.0,j=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0;v=r;r=r+544|0;q=v+16|0;t=v;s=ia(c,b)|0;k[t>>2]=0;u=t+4|0;k[u>>2]=0;k[t+8>>2]=0;if(s){if(s>>>0>1073741823)yf(t);j=Af(s<<2)|0;k[u>>2]=j;k[t>>2]=j;m=j+(s<<2)|0;k[t+8>>2]=m;h=s;while(1){k[j>>2]=1;h=h+-1|0;if(!h)break;else j=j+4|0}k[u>>2]=m}m=e+4|0;j=k[m>>2]|0;h=k[e>>2]|0;g=(j-h|0)/2096|0;if(s>>>0<=g>>>0){if(s>>>0<g>>>0?(n=h+(s*2096|0)|0,(j|0)!=(n|0)):0)k[m>>2]=j+(~(((j+-2096-n|0)>>>0)/2096|0)*2096|0);}else gd(e,s-g|0);h=f+4|0;g=k[h>>2]|0;j=k[f>>2]|0;m=g-j>>2;if(s>>>0<=m>>>0){if(s>>>0<m>>>0?(o=j+(s<<2)|0,(g|0)!=(o|0)):0)k[h>>2]=g+(~((g+-4-o|0)>>>2)<<2);}else hd(f,s-m|0);if((s|0)>0){h=k[e>>2]|0;o=0;do{Kg(h+(o*2096|0)|0,(k[a>>2]|0)+(o*2096|0)|0,2096)|0;n=k[a>>2]|0;j=k[n+(o*2096|0)+2080>>2]|0;do if(!j)i=12.0;else{h=0;m=0;do{h=((k[n+(o*2096|0)+(m<<2)>>2]|0)>0&1)+h|0;m=m+1|0}while((m|0)<520&(h|0)<5);g=h;if((g|0)==1){i=12.0;break}else if((g|0)==2){i=+(j+20|0);break}Fg(q|0,0,520)|0;Oe(n+(o*2096|0)|0,520,15,q);h=0;m=0;do{h=(ia(l[q+m>>0]|0,k[n+(o*2096|0)+(m<<2)>>2]|0)|0)+h|0;m=m+1|0}while((m|0)!=520);if((g|0)==4)h=h+37|0;else if((g|0)==3)h=h+28|0;else h=(id(q,520)|0)+h|0;i=+(h|0);}while(0);h=k[e>>2]|0;p[h+(o*2096|0)+2088>>3]=i;k[(k[f>>2]|0)+(o<<2)>>2]=o;o=o+1|0}while((o|0)<(s|0));}if((b|0)>1&(c|0)>0){h=0;do{q=ia(h,b)|0;jd(k[e>>2]|0,k[t>>2]|0,(k[f>>2]|0)+(q<<2)|0,b,d);h=h+1|0}while((h|0)<(c|0));}jd(k[e>>2]|0,k[t>>2]|0,k[f>>2]|0,s,d);kd(k[a>>2]|0,s,k[e>>2]|0,k[f>>2]|0);ld(e,f);h=k[t>>2]|0;if(!h){r=v;return}g=k[u>>2]|0;if((g|0)!=(h|0))k[u>>2]=g+(~((g+-4-h|0)>>>2)<<2);Df(h);r=v;return}function gd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;i=a+8|0;f=k[i>>2]|0;j=a+4|0;c=k[j>>2]|0;d=c;if(((f-d|0)/2096|0)>>>0>=b>>>0){do{Fg(c|0,0,2084)|0;c=(k[j>>2]|0)+2096|0;k[j>>2]=c;b=b+-1|0}while((b|0)!=0);return}c=k[a>>2]|0;e=((d-c|0)/2096|0)+b|0;if(e>>>0>2049125)yf(a);d=c;c=(f-d|0)/2096|0;if(c>>>0<1024562){c=c<<1;c=c>>>0<e>>>0?e:c;d=((k[j>>2]|0)-d|0)/2096|0;if(!c){e=0;g=0}else h=8}else{c=2049125;d=((k[j>>2]|0)-d|0)/2096|0;h=8}if((h|0)==8){e=c;g=Af(c*2096|0)|0}c=g+(d*2096|0)|0;f=g+(e*2096|0)|0;e=c;do{Fg(e|0,0,2084)|0;e=c+2096|0;c=e;b=b+-1|0}while((b|0)!=0);b=c;c=k[a>>2]|0;e=(k[j>>2]|0)-c|0;d=g+((((e|0)/-2096|0)+d|0)*2096|0)|0;Kg(d|0,c|0,e|0)|0;k[a>>2]=d;k[j>>2]=b;k[i>>2]=f;if(!c)return;Df(c);return}function hd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;j=a+8|0;e=k[j>>2]|0;l=a+4|0;c=k[l>>2]|0;d=c;if(e-d>>2>>>0>=b>>>0){Fg(c|0,0,b<<2|0)|0;k[l>>2]=c+(b<<2);return}h=k[a>>2]|0;i=h;d=(d-i>>2)+b|0;if(d>>>0>1073741823)yf(a);f=h;c=e-f|0;if(c>>2>>>0<536870911){e=c>>1;d=e>>>0<d>>>0?d:e;e=(k[l>>2]|0)-f|0;f=e>>2;if(!d){g=0;c=0;d=e}else m=8}else{e=(k[l>>2]|0)-f|0;d=1073741823;f=e>>2;m=8}if((m|0)==8){g=d;c=Af(d<<2)|0;d=e}Fg(c+(f<<2)|0,0,b<<2|0)|0;Kg(c|0,h|0,d|0)|0;k[a>>2]=c;k[l>>2]=c+(f+b<<2);k[j>>2]=c+(g<<2);if(!i)return;Df(i);return}function id(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+96|0;p=q;o=q+72|0;e=p;f=e+72|0;do{k[e>>2]=0;e=e+4|0}while((e|0)<(f|0));a:do if((b|0)>0){d=p+68|0;g=p+64|0;f=0;c=1;n=8;while(1){m=f;while(1){h=i[a+m>>0]|0;j=h&255;c=(j|0)>(c|0)?j:c;f=m+1|0;b:do if((f|0)<(b|0)){e=1;do{if((i[a+f>>0]|0)!=h<<24>>24)break b;e=e+1|0;f=f+1|0}while((f|0)<(b|0));}else e=1;while(0);m=e+m|0;f=h<<24>>24==0;if(f&(m|0)==(b|0))break a;if(!f){h=m;f=e;break}if((e|0)<3)k[p>>2]=(k[p>>2]|0)+e;else{f=k[d>>2]|0;e=e+-2|0;do{f=f+1|0;e=e>>3}while((e|0)>0);k[d>>2]=f}if((m|0)>=(b|0))break a}if((j|0)==(n|0))e=f;else{e=p+(j<<2)|0;k[e>>2]=(k[e>>2]|0)+1;e=f+-1|0}if((e|0)<3){n=p+(j<<2)|0;k[n>>2]=(k[n>>2]|0)+e}else{f=k[g>>2]|0;e=e+-2|0;do{f=f+1|0;e=e>>2}while((e|0)>0);k[g>>2]=f}if((h|0)<(b|0)){f=h;n=j}else break}}else{g=p+64|0;d=p+68|0;c=1}while(0);e=o;f=e+18|0;do{i[e>>0]=0;e=e+1|0}while((e|0)<(f|0));Oe(p,18,7,o);m=o+16|0;i[m>>0]=(l[m>>0]|0)+2;n=o+17|0;i[n>>0]=(l[n>>0]|0)+3;a=(ia(l[o>>0]|0,k[p>>2]|0)|0)+((c<<1)+18)|0;a=(ia(l[o+1>>0]|0,k[p+4>>2]|0)|0)+a|0;a=(ia(l[o+2>>0]|0,k[p+8>>2]|0)|0)+a|0;a=(ia(l[o+3>>0]|0,k[p+12>>2]|0)|0)+a|0;a=(ia(l[o+4>>0]|0,k[p+16>>2]|0)|0)+a|0;a=(ia(l[o+5>>0]|0,k[p+20>>2]|0)|0)+a|0;a=(ia(l[o+6>>0]|0,k[p+24>>2]|0)|0)+a|0;a=(ia(l[o+7>>0]|0,k[p+28>>2]|0)|0)+a|0;a=(ia(l[o+8>>0]|0,k[p+32>>2]|0)|0)+a|0;a=(ia(l[o+9>>0]|0,k[p+36>>2]|0)|0)+a|0;a=(ia(l[o+10>>0]|0,k[p+40>>2]|0)|0)+a|0;a=(ia(l[o+11>>0]|0,k[p+44>>2]|0)|0)+a|0;a=(ia(l[o+12>>0]|0,k[p+48>>2]|0)|0)+a|0;a=(ia(l[o+13>>0]|0,k[p+52>>2]|0)|0)+a|0;a=(ia(l[o+14>>0]|0,k[p+56>>2]|0)|0)+a|0;a=(ia(l[o+15>>0]|0,k[p+60>>2]|0)|0)+a|0;a=(ia(l[m>>0]|0,k[g>>2]|0)|0)+a|0;a=(ia(l[n>>0]|0,k[d>>2]|0)|0)+a|0;r=q;return a|0}function jd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0.0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;I=r;r=r+96|0;x=I+8|0;w=I+92|0;v=I+88|0;y=I+84|0;z=I+80|0;A=I+76|0;B=I;H=I+64|0;E=I+52|0;D=I+40|0;s=H+4|0;k[s>>2]=0;t=H+8|0;k[t>>2]=0;F=H+4|0;k[H>>2]=F;k[E>>2]=0;G=E+4|0;k[G>>2]=0;k[E+8>>2]=0;C=(d|0)>0;if(C){o=F;q=E+8|0;g=0;j=0;while(1){f=c+(j<<2)|0;if(g){m=k[f>>2]|0;h=F;l=g;a:do{while(1){if((k[l+16>>2]|0)>=(m|0)){h=l;break}l=k[l+4>>2]|0;if(!l)break a}l=k[h>>2]|0}while((l|0)!=0);if(!((h|0)!=(F|0)?(m|0)>=(k[h+16>>2]|0):0))n=11}else n=11;do if((n|0)==11){n=0;do if(g){m=k[f>>2]|0;l=g;while(1){h=k[l+16>>2]|0;if((m|0)<(h|0)){h=k[l>>2]|0;if(!h){h=l;g=l;n=15;break}}else{if((h|0)>=(m|0)){h=l;n=20;break}g=l+4|0;h=k[g>>2]|0;if(!h){h=g;g=l;n=19;break}}l=h}if((n|0)==15){n=0;k[x>>2]=g;m=h;break}else if((n|0)==19){n=0;k[x>>2]=g;m=h;break}else if((n|0)==20){n=0;k[x>>2]=h;m=x;g=h;break}}else{k[x>>2]=F;m=F;g=o}while(0);if(!(k[m>>2]|0)){h=Af(20)|0;k[h+16>>2]=k[f>>2];k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=g;k[m>>2]=h;g=k[k[H>>2]>>2]|0;if(g){k[H>>2]=g;h=k[m>>2]|0}Tb(k[s>>2]|0,h);k[t>>2]=(k[t>>2]|0)+1}h=k[G>>2]|0;if((h|0)==(k[q>>2]|0)){Zc(E,f);break}else{k[h>>2]=k[f>>2];k[G>>2]=h+4;break}}while(0);j=j+1|0;if((j|0)>=(d|0))break;g=k[F>>2]|0}j=k[G>>2]|0;f=k[E>>2]|0}else{j=0;f=0}k[D>>2]=0;o=D+4|0;k[o>>2]=0;k[D+8>>2]=0;if((j|0)==(f|0))j=f;else{m=0;do{g=m;m=m+1|0;if(m>>>0<j-f>>2>>>0){h=m;do{pd(a,b,k[f+(g<<2)>>2]|0,k[f+(h<<2)>>2]|0,D);h=h+1|0;j=k[G>>2]|0;f=k[E>>2]|0}while(h>>>0<j-f>>2>>>0);}}while(m>>>0<j-f>>2>>>0);}b:do if(j-f>>2>>>0>1){u=0.0;t=1;while(1){while(1){h=k[D>>2]|0;if(+p[h+24>>3]>=u)break;q=k[h>>2]|0;n=k[h+4>>2]|0;g=a+(q*2096|0)+2080|0;k[g>>2]=(k[g>>2]|0)+(k[a+(n*2096|0)+2080>>2]|0);g=0;do{l=a+(q*2096|0)+(g<<2)|0;k[l>>2]=(k[l>>2]|0)+(k[a+(n*2096|0)+(g<<2)>>2]|0);g=g+1|0}while((g|0)!=520);p[a+(q*2096|0)+2088>>3]=+p[h+16>>3];g=b+(q<<2)|0;k[g>>2]=(k[g>>2]|0)+(k[b+(n<<2)>>2]|0);if(C){l=0;do{g=c+(l<<2)|0;if((k[g>>2]|0)==(n|0))k[g>>2]=q;l=l+1|0}while((l|0)!=(d|0));}m=j-f>>2;if(m>>>0>1){g=1;l=0;while(1){l=f+(l<<2)|0;if((k[l>>2]|0)>=(n|0))k[l>>2]=k[f+(g<<2)>>2];l=g+1|0;if(l>>>0<m>>>0){s=g;g=l;l=s}else break}}k[G>>2]=j+-4;j=k[o>>2]|0;l=(j|0)==(h|0);c:do if(!l){g=j-h>>5;m=0;do{f=k[h+(m<<5)>>2]|0;if(!((f|0)!=(q|0)?(s=k[h+(m<<5)+4>>2]|0,!((s|0)==(n|0)|((f|0)==(n|0)|(s|0)==(q|0)))):0))i[h+(m<<5)+8>>0]=0;m=m+1|0}while(m>>>0<g>>>0);if(!l)do{if(i[h+8>>0]|0)break c;g=h;f=j-g|0;if((f|0)>32){j=j+-32|0;k[x>>2]=k[h>>2];k[x+4>>2]=k[h+4>>2];k[x+8>>2]=k[h+8>>2];k[x+12>>2]=k[h+12>>2];k[x+16>>2]=k[h+16>>2];k[x+20>>2]=k[h+20>>2];k[x+24>>2]=k[h+24>>2];k[x+28>>2]=k[h+28>>2];k[h>>2]=k[j>>2];k[h+4>>2]=k[j+4>>2];k[h+8>>2]=k[j+8>>2];k[h+12>>2]=k[j+12>>2];k[h+16>>2]=k[j+16>>2];k[h+20>>2]=k[j+20>>2];k[h+24>>2]=k[j+24>>2];k[h+28>>2]=k[j+28>>2];k[j>>2]=k[x>>2];k[j+4>>2]=k[x+4>>2];k[j+8>>2]=k[x+8>>2];k[j+12>>2]=k[x+12>>2];k[j+16>>2]=k[x+16>>2];k[j+20>>2]=k[x+20>>2];k[j+24>>2]=k[x+24>>2];k[j+28>>2]=k[x+28>>2];k[y>>2]=g;k[z>>2]=j;k[A>>2]=g;k[v>>2]=k[y>>2];k[w>>2]=k[z>>2];k[x>>2]=k[A>>2];qd(v,w,B,(f>>5)+-1|0,x);j=k[o>>2]|0;h=k[D>>2]|0}j=j+-32|0;k[o>>2]=j}while((h|0)!=(j|0));}while(0);h=k[G>>2]|0;f=k[E>>2]|0;if((h|0)==(f|0)){j=h;f=h}else{h=0;do{pd(a,b,q,k[f+(h<<2)>>2]|0,D);h=h+1|0;j=k[G>>2]|0;f=k[E>>2]|0}while(h>>>0<j-f>>2>>>0);}if(j-f>>2>>>0<=t>>>0)break b}if(j-f>>2>>>0>e>>>0){u=1.e+99;t=e}else break}}while(0);h=k[D>>2]|0;j=h;if(h){g=k[o>>2]|0;if((g|0)!=(h|0))k[o>>2]=g+(~((g+-32-j|0)>>>5)<<5);Df(h);f=k[E>>2]|0}if(!f){a=k[F>>2]|0;od(H,a);r=I;return}g=k[G>>2]|0;if((g|0)!=(f|0))k[G>>2]=g+(~((g+-4-f|0)>>>2)<<2);Df(f);a=k[F>>2]|0;od(H,a);r=I;return}function kd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0.0,i=0.0,j=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;D=r;r=r+2640|0;y=D+2112|0;z=D;C=D+2096|0;e=C+4|0;k[e>>2]=0;q=C+8|0;k[q>>2]=0;B=C+4|0;k[C>>2]=B;A=(b|0)>0;if(A){s=B;f=0;o=0;while(1){n=d+(o<<2)|0;do if(f){m=k[n>>2]|0;j=f;while(1){g=k[j+16>>2]|0;if((m|0)<(g|0)){g=k[j>>2]|0;if(!g){g=j;f=j;x=10;break}}else{if((g|0)>=(m|0)){g=j;x=15;break}f=j+4|0;g=k[f>>2]|0;if(!g){g=f;f=j;x=14;break}}j=g}if((x|0)==10){x=0;k[y>>2]=f;j=g;break}else if((x|0)==14){x=0;k[y>>2]=f;j=g;break}else if((x|0)==15){x=0;k[y>>2]=g;j=y;f=g;break}}else{k[y>>2]=B;j=B;f=s}while(0);if(!(k[j>>2]|0)){g=Af(20)|0;k[g+16>>2]=k[n>>2];k[g>>2]=0;k[g+4>>2]=0;k[g+8>>2]=f;k[j>>2]=g;f=k[k[C>>2]>>2]|0;if(f){k[C>>2]=f;g=k[j>>2]|0}Tb(k[e>>2]|0,g);k[q>>2]=(k[q>>2]|0)+1}g=o+1|0;if((g|0)>=(b|0))break;f=k[B>>2]|0;o=g}if(A){u=z+2080|0;v=z+2080|0;w=0;do{g=k[((w|0)==0?d:d+(w+-1<<2)|0)>>2]|0;q=a+(w*2096|0)|0;t=a+(w*2096|0)+2080|0;if(!(k[t>>2]|0))h=0.0;else{Kg(z|0,q|0,2096)|0;k[v>>2]=(k[v>>2]|0)+(k[c+(g*2096|0)+2080>>2]|0);f=0;do{e=z+(f<<2)|0;k[e>>2]=(k[e>>2]|0)+(k[c+(g*2096|0)+(f<<2)>>2]|0);f=f+1|0}while((f|0)!=520);j=k[v>>2]|0;do if(!j)h=12.0;else{f=0;e=0;do{f=((k[z+(e<<2)>>2]|0)>0&1)+f|0;e=e+1|0}while((e|0)<520&(f|0)<5);m=f;if((m|0)==2){h=+(j+20|0);break}else if((m|0)==1){h=12.0;break}Fg(y|0,0,520)|0;Oe(z,520,15,y);f=0;e=0;do{f=(ia(l[y+e>>0]|0,k[z+(e<<2)>>2]|0)|0)+f|0;e=e+1|0}while((e|0)!=520);if((m|0)==3)f=f+28|0;else if((m|0)==4)f=f+37|0;else f=(id(y,520)|0)+f|0;h=+(f|0);}while(0);h=h-+p[c+(g*2096|0)+2088>>3]}f=k[C>>2]|0;if((f|0)!=(B|0))do{s=f+16|0;o=k[s>>2]|0;if(!(k[t>>2]|0))i=0.0;else{Kg(z|0,q|0,2096)|0;k[u>>2]=(k[u>>2]|0)+(k[c+(o*2096|0)+2080>>2]|0);j=0;do{e=z+(j<<2)|0;k[e>>2]=(k[e>>2]|0)+(k[c+(o*2096|0)+(j<<2)>>2]|0);j=j+1|0}while((j|0)!=520);e=k[u>>2]|0;do if(!e)i=12.0;else{m=0;j=0;do{m=((k[z+(j<<2)>>2]|0)>0&1)+m|0;j=j+1|0}while((j|0)<520&(m|0)<5);n=m;if((n|0)==1){i=12.0;break}else if((n|0)==2){i=+(e+20|0);break}Fg(y|0,0,520)|0;Oe(z,520,15,y);m=0;j=0;do{m=(ia(l[y+j>>0]|0,k[z+(j<<2)>>2]|0)|0)+m|0;j=j+1|0}while((j|0)!=520);if((n|0)==4)j=m+37|0;else if((n|0)==3)j=m+28|0;else j=(id(y,520)|0)+m|0;i=+(j|0);}while(0);i=i-+p[c+(o*2096|0)+2088>>3]}if(i<h){h=i;g=k[s>>2]|0}e=k[f+4>>2]|0;if(!e)while(1){e=k[f+8>>2]|0;if((k[e>>2]|0)==(f|0)){f=e;break}else f=e}else{f=e;while(1){e=k[f>>2]|0;if(!e)break;else f=e}}}while((f|0)!=(B|0));k[d+(w<<2)>>2]=g;w=w+1|0}while((w|0)<(b|0));f=B;g=C}else x=4}else x=4;if((x|0)==4){f=B;g=C}e=k[g>>2]|0;if((e|0)!=(f|0))do{Fg(c+((k[e+16>>2]|0)*2096|0)|0,0,2084)|0;f=k[e+4>>2]|0;if(!f)while(1){f=k[e+8>>2]|0;if((k[f>>2]|0)==(e|0)){e=f;break}else e=f}else{e=f;while(1){f=k[e>>2]|0;if(!f)break;else e=f}}}while((e|0)!=(B|0));if(A)g=0;else{b=k[B>>2]|0;od(C,b);r=D;return}do{f=k[d+(g<<2)>>2]|0;e=c+(f*2096|0)+2080|0;k[e>>2]=(k[e>>2]|0)+(k[a+(g*2096|0)+2080>>2]|0);e=0;do{A=c+(f*2096|0)+(e<<2)|0;k[A>>2]=(k[A>>2]|0)+(k[a+(g*2096|0)+(e<<2)>>2]|0);e=e+1|0}while((e|0)!=520);g=g+1|0}while((g|0)!=(b|0));b=k[B>>2]|0;od(C,b);r=D;return}function ld(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;x=r;r=r+32|0;u=x+24|0;w=x+12|0;v=x;md(w,a);q=v+4|0;k[q>>2]=0;s=v+8|0;k[s>>2]=0;c=v+4|0;k[v>>2]=c;t=b+4|0;e=k[t>>2]|0;d=k[b>>2]|0;a:do if((e|0)==(d|0)){h=a;d=e;j=0}else{n=c;g=0;l=0;j=0;while(1){m=d+(l<<2)|0;if(g){f=k[m>>2]|0;i=c;h=g;b:do{while(1){if((k[h+16>>2]|0)>=(f|0)){i=h;break}h=k[h+4>>2]|0;if(!h)break b}h=k[i>>2]|0}while((h|0)!=0);if(!((i|0)!=(c|0)?(f|0)>=(k[i+16>>2]|0):0))p=12}else p=12;if((p|0)==12){do if(g){f=k[m>>2]|0;while(1){h=k[g+16>>2]|0;if((f|0)<(h|0)){h=k[g>>2]|0;if(!h){h=g;i=g;p=16;break}else g=h}else{if((h|0)>=(f|0)){p=22;break}h=g+4|0;i=k[h>>2]|0;if(!i){p=20;break}else g=i}}if((p|0)==16){k[u>>2]=i;f=h;h=i;p=23;break}else if((p|0)==20){k[u>>2]=g;f=h;h=g;p=23;break}else if((p|0)==22){p=0;k[u>>2]=g;if(!g){f=u;h=g;p=23;break}else break}}else{k[u>>2]=c;f=c;h=n;p=23}while(0);if((p|0)==23){p=0;g=Af(24)|0;k[g+16>>2]=k[m>>2];k[g+20>>2]=0;k[g>>2]=0;k[g+4>>2]=0;k[g+8>>2]=h;k[f>>2]=g;h=k[k[v>>2]>>2]|0;if(!h)f=g;else{k[v>>2]=h;f=k[f>>2]|0}Tb(k[q>>2]|0,f);k[s>>2]=(k[s>>2]|0)+1;d=k[b>>2]|0}k[g+20>>2]=j;Kg((k[a>>2]|0)+(j*2096|0)|0,(k[w>>2]|0)+((k[d+(l<<2)>>2]|0)*2096|0)|0,2096)|0;e=k[t>>2]|0;d=k[b>>2]|0;j=j+1|0}i=l+1|0;if(i>>>0>=e-d>>2>>>0){h=a;break a}g=k[c>>2]|0;l=i}}while(0);f=a+4|0;i=k[f>>2]|0;h=k[h>>2]|0;g=(i-h|0)/2096|0;if(j>>>0<=g>>>0){if(j>>>0<g>>>0?(o=h+(j*2096|0)|0,(i|0)!=(o|0)):0)k[f>>2]=i+(~(((i+-2096-o|0)>>>0)/2096|0)*2096|0);}else{gd(a,j-g|0);e=k[t>>2]|0;d=k[b>>2]|0}if((e|0)!=(d|0)){m=c;l=0;do{i=d+(l<<2)|0;f=k[c>>2]|0;do if(f){j=k[i>>2]|0;while(1){g=k[f+16>>2]|0;if((j|0)<(g|0)){g=k[f>>2]|0;if(!g){e=f;p=41;break}else f=g}else{if((g|0)>=(j|0)){p=47;break}g=f+4|0;h=k[g>>2]|0;if(!h){e=g;p=45;break}else f=h}}if((p|0)==41){k[u>>2]=f;j=e;e=f;p=48;break}else if((p|0)==45){k[u>>2]=f;j=e;e=f;p=48;break}else if((p|0)==47){p=0;k[u>>2]=f;if(!f){j=u;e=f;p=48;break}else break}}else{k[u>>2]=c;j=c;e=m;p=48}while(0);if((p|0)==48){f=Af(24)|0;k[f+16>>2]=k[i>>2];k[f+20>>2]=0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=e;k[j>>2]=f;e=k[k[v>>2]>>2]|0;if(!e)e=f;else{k[v>>2]=e;e=k[j>>2]|0}Tb(k[q>>2]|0,e);k[s>>2]=(k[s>>2]|0)+1;d=k[b>>2]|0;e=k[t>>2]|0}k[d+(l<<2)>>2]=k[f+20>>2];l=l+1|0}while(l>>>0<e-d>>2>>>0);}nd(v,k[c>>2]|0);e=k[w>>2]|0;if(!e){r=x;return}c=w+4|0;d=k[c>>2]|0;if((d|0)!=(e|0))k[c>>2]=d+(~(((d+-2096-e|0)>>>0)/2096|0)*2096|0);Df(e);r=x;return}function md(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;k[a>>2]=0;g=a+4|0;k[g>>2]=0;k[a+8>>2]=0;f=b+4|0;h=k[f>>2]|0;c=k[b>>2]|0;e=h-c|0;d=(e|0)/2096|0;if((h|0)==(c|0))return;if(d>>>0>2049125)yf(a);c=Af(e)|0;k[g>>2]=c;k[a>>2]=c;k[a+8>>2]=c+(d*2096|0);d=k[b>>2]|0;e=k[f>>2]|0;if((d|0)==(e|0))return;do{Kg(c|0,d|0,2096)|0;c=(k[g>>2]|0)+2096|0;k[g>>2]=c;d=d+2096|0}while((d|0)!=(e|0));return}function nd(a,b){a=a|0;b=b|0;if(!b)return;else{nd(a,k[b>>2]|0);nd(a,k[b+4>>2]|0);Df(b);return}}function od(a,b){a=a|0;b=b|0;if(!b)return;else{od(a,k[b>>2]|0);od(a,k[b+4>>2]|0);Df(b);return}}function pd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0.0,g=0,h=0.0,j=0.0,m=0.0,n=0.0,q=0.0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=r;r=r+2672|0;y=C+2144|0;x=C+40|0;z=C+2140|0;A=C+2136|0;B=C+32|0;w=C;if((c|0)==(d|0)){r=C;return}g=(d|0)<(c|0);u=g?c:d;d=g?d:c;k[w>>2]=d;k[w+4>>2]=u;i[w+8>>0]=1;c=k[b+(d<<2)>>2]|0;g=k[b+(u<<2)>>2]|0;b=g+c|0;t=+(c|0);if((c|0)<256)q=+o[316384+(c<<2)>>2];else q=+kg(t);s=+(g|0);if((g|0)<256)j=+o[316384+(g<<2)>>2];else j=+kg(s);m=+(b|0);if((b|0)<256)h=+o[316384+(b<<2)>>2];else h=+kg(m);v=w+24|0;b=a+(d*2096|0)|0;f=+p[a+(d*2096|0)+2088>>3];n=+p[a+(u*2096|0)+2088>>3];s=(t*q+s*j-m*h)*.5-f-n;p[v>>3]=s;do if(!(k[a+(d*2096|0)+2080>>2]|0)){p[w+16>>3]=n;f=n}else{g=k[a+(u*2096|0)+2080>>2]|0;if(!g){p[w+16>>3]=f;break}c=k[e>>2]|0;if((c|0)==(k[e+4>>2]|0))t=1.e+99;else{t=+p[c+24>>3];t=t>0.0?t:0.0}Kg(x|0,b|0,2096)|0;c=x+2080|0;k[c>>2]=(k[c>>2]|0)+g;b=0;do{g=x+(b<<2)|0;k[g>>2]=(k[g>>2]|0)+(k[a+(u*2096|0)+(b<<2)>>2]|0);b=b+1|0}while((b|0)!=520);d=k[c>>2]|0;do if(!d)f=12.0;else{c=0;b=0;do{c=((k[x+(b<<2)>>2]|0)>0&1)+c|0;b=b+1|0}while((b|0)<520&(c|0)<5);g=c;if((g|0)==1){f=12.0;break}else if((g|0)==2){f=+(d+20|0);break}Fg(y|0,0,520)|0;Oe(x,520,15,y);c=0;b=0;do{c=(ia(l[y+b>>0]|0,k[x+(b<<2)>>2]|0)|0)+c|0;b=b+1|0}while((b|0)!=520);if((g|0)==4)c=c+37|0;else if((g|0)==3)c=c+28|0;else c=(id(y,520)|0)+c|0;f=+(c|0);}while(0);if(f<t-s){p[w+16>>3]=f;break}r=C;return}while(0);p[v>>3]=f+s;d=e+4|0;c=k[d>>2]|0;if((c|0)==(k[e+8>>2]|0)){rd(e,w);d=k[d>>2]|0}else{k[c>>2]=k[w>>2];k[c+4>>2]=k[w+4>>2];k[c+8>>2]=k[w+8>>2];k[c+12>>2]=k[w+12>>2];k[c+16>>2]=k[w+16>>2];k[c+20>>2]=k[w+20>>2];k[c+24>>2]=k[w+24>>2];k[c+28>>2]=k[w+28>>2];a=(k[d>>2]|0)+32|0;k[d>>2]=a;d=a}w=d;a=k[e>>2]|0;k[z>>2]=a;k[A>>2]=w;k[x>>2]=k[z>>2];k[y>>2]=k[A>>2];sd(x,y,B,w-a>>5);r=C;return}function qd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0.0,g=0.0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0.0,s=0,t=0,u=0,v=0,w=0;v=r;r=r+16|0;u=v;m=k[e>>2]|0;s=k[a>>2]|0;b=m-s|0;if((d|0)<2){r=v;return}t=(d+-2|0)/2|0;if((t|0)<(b>>5|0)){r=v;return}h=b>>4|1;a=s+(h<<5)|0;b=a;i=h+1|0;do if((i|0)<(d|0)){c=s+(i<<5)|0;f=+p[s+(h<<5)+24>>3];g=+p[s+(i<<5)+24>>3];if(f!=g){if(!(f>g)){c=b;i=h;break}}else{l=(k[a>>2]|0)-(k[s+(h<<5)+4>>2]|0)|0;n=(k[c>>2]|0)-(k[s+(i<<5)+4>>2]|0)|0;if((((l|0)>-1?l:0-l|0)|0)<=(((n|0)>-1?n:0-n|0)|0)){c=b;i=h;break}}}else{c=b;i=h}while(0);b=c;f=+p[b+24>>3];q=+p[m+24>>3];do if(f!=q)if(f>q){r=v;return}else{a=k[m+4>>2]|0;h=k[m>>2]|0;break}else{l=(k[b>>2]|0)-(k[b+4>>2]|0)|0;h=k[m>>2]|0;a=k[m+4>>2]|0;n=h-a|0;if((((l|0)>-1?l:0-l|0)|0)>(((n|0)>-1?n:0-n|0)|0)){r=v;return}}while(0);j=m+8|0;k[u>>2]=k[j>>2];k[u+4>>2]=k[j+4>>2];k[u+8>>2]=k[j+8>>2];k[u+12>>2]=k[j+12>>2];j=c;k[m>>2]=k[j>>2];k[m+4>>2]=k[j+4>>2];k[m+8>>2]=k[j+8>>2];k[m+12>>2]=k[j+12>>2];k[m+16>>2]=k[j+16>>2];k[m+20>>2]=k[j+20>>2];k[m+24>>2]=k[j+24>>2];k[m+28>>2]=k[j+28>>2];k[e>>2]=c;a:do if((t|0)>=(i|0)){o=h-a|0;o=(o|0)>-1?o:0-o|0;n=b;b=i;while(1){m=b<<1|1;b=s+(m<<5)|0;l=b;i=m+1|0;do if((i|0)<(d|0)){c=s+(i<<5)|0;g=+p[s+(m<<5)+24>>3];f=+p[s+(i<<5)+24>>3];if(g!=f){if(!(g>f)){c=l;i=m;break}}else{w=(k[b>>2]|0)-(k[s+(m<<5)+4>>2]|0)|0;b=(k[c>>2]|0)-(k[s+(i<<5)+4>>2]|0)|0;if((((w|0)>-1?w:0-w|0)|0)<=(((b|0)>-1?b:0-b|0)|0)){c=l;i=m;break}}}else{c=l;i=m}while(0);b=c;g=+p[b+24>>3];if(g!=q){if(g>q){b=n;break a}}else{m=(k[b>>2]|0)-(k[b+4>>2]|0)|0;if((((m|0)>-1?m:0-m|0)|0)>(o|0)){b=n;break a}}n=j;j=c;k[n>>2]=k[j>>2];k[n+4>>2]=k[j+4>>2];k[n+8>>2]=k[j+8>>2];k[n+12>>2]=k[j+12>>2];k[n+16>>2]=k[j+16>>2];k[n+20>>2]=k[j+20>>2];k[n+24>>2]=k[j+24>>2];k[n+28>>2]=k[j+28>>2];k[e>>2]=c;if((t|0)<(i|0))break;else{n=b;b=i}}}while(0);k[b>>2]=h;k[b+4>>2]=a;n=b+8|0;k[n>>2]=k[u>>2];k[n+4>>2]=k[u+4>>2];k[n+8>>2]=k[u+8>>2];k[n+12>>2]=k[u+12>>2];p[b+24>>3]=q;r=v;return}function rd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;g=a+4|0;h=k[a>>2]|0;i=h;d=((k[g>>2]|0)-i>>5)+1|0;if(d>>>0>134217727)yf(a);j=a+8|0;e=h;c=(k[j>>2]|0)-e|0;if(c>>5>>>0<67108863){c=c>>4;d=c>>>0<d>>>0?d:c;e=(k[g>>2]|0)-e|0;c=e>>5;if(!d){f=0;d=0}else l=6}else{e=(k[g>>2]|0)-e|0;d=134217727;c=e>>5;l=6}if((l|0)==6){f=d;d=Af(d<<5)|0}l=d+(c<<5)|0;k[l>>2]=k[b>>2];k[l+4>>2]=k[b+4>>2];k[l+8>>2]=k[b+8>>2];k[l+12>>2]=k[b+12>>2];k[l+16>>2]=k[b+16>>2];k[l+20>>2]=k[b+20>>2];k[l+24>>2]=k[b+24>>2];k[l+28>>2]=k[b+28>>2];Kg(d|0,h|0,e|0)|0;k[a>>2]=d;k[g>>2]=d+(c+1<<5);k[j>>2]=d+(f<<5);if(!i)return;Df(i);return}function sd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0.0,o=0,q=0,s=0;q=r;r=r+16|0;o=q;if((d|0)<=1){r=q;return}i=(d+-2|0)/2|0;m=k[a>>2]|0;c=m+(i<<5)|0;j=c;h=k[b>>2]|0;g=h+-32|0;k[b>>2]=g;e=+p[m+(i<<5)+24>>3];n=+p[h+-8>>3];do if(e!=n)if(e>n){a=k[h+-28>>2]|0;l=k[g>>2]|0;break}else{r=q;return}else{s=(k[c>>2]|0)-(k[m+(i<<5)+4>>2]|0)|0;f=k[g>>2]|0;a=k[h+-28>>2]|0;l=f-a|0;if((((s|0)>-1?s:0-s|0)|0)>(((l|0)>-1?l:0-l|0)|0))l=f;else{r=q;return}}while(0);h=h+-24|0;k[o>>2]=k[h>>2];k[o+4>>2]=k[h+4>>2];k[o+8>>2]=k[h+8>>2];k[o+12>>2]=k[h+12>>2];k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];k[g+28>>2]=k[c+28>>2];k[b>>2]=j;a:do if((d+-1|0)>>>0>=3){j=l-a|0;j=(j|0)>-1?j:0-j|0;while(1){f=i;i=(i+-1|0)/2|0;g=m+(i<<5)|0;h=g;e=+p[m+(i<<5)+24>>3];if(e!=n){if(!(e>n))break a}else{d=(k[g>>2]|0)-(k[m+(i<<5)+4>>2]|0)|0;if((((d|0)>-1?d:0-d|0)|0)<=(j|0))break a};k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];k[c+24>>2]=k[g+24>>2];k[c+28>>2]=k[g+28>>2];k[b>>2]=h;if(f>>>0<3){c=g;break}else c=g}}while(0);k[c>>2]=l;k[c+4>>2]=a;m=c+8|0;k[m>>2]=k[o>>2];k[m+4>>2]=k[o+4>>2];k[m+8>>2]=k[o+8>>2];k[m+12>>2]=k[o+12>>2];p[c+24>>3]=n;r=q;return}function td(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;g=a+4|0;h=k[a>>2]|0;i=h;d=(((k[g>>2]|0)-i|0)/2832|0)+1|0;if(d>>>0>1516584)yf(a);j=a+8|0;e=h;c=((k[j>>2]|0)-e|0)/2832|0;if(c>>>0<758292){c=c<<1;d=c>>>0<d>>>0?d:c;e=(k[g>>2]|0)-e|0;c=(e|0)/2832|0;if(!d){f=0;d=0}else l=6}else{e=(k[g>>2]|0)-e|0;d=1516584;c=(e|0)/2832|0;l=6}if((l|0)==6){f=d;d=Af(d*2832|0)|0}Kg(d+(c*2832|0)|0,b|0,2832)|0;b=d+((((e|0)/-2832|0)+c|0)*2832|0)|0;Kg(b|0,h|0,e|0)|0;k[a>>2]=b;k[g>>2]=d+((c+1|0)*2832|0);k[j>>2]=d+(f*2832|0);if(!i)return;Df(i);return}function ud(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,n=0.0,q=0,r=0.0,s=0,t=0,u=0,v=0,w=0,x=0.0;s=k[d>>2]|0;d=(k[d+4>>2]|0)-s|0;w=(d|0)/2832|0;if(w>>>0<2){if(!b)return;Fg(e|0,0,b|0)|0;return}v=w*704|0;v=Cf(v>>>0>536870911?-1:v<<3)|0;Fg(v|0,0,w*5632|0)|0;d=(d|0)>0;g=0;do{if(d){h=ia(g,w)|0;f=0;do{q=k[s+(f*2832|0)+2816>>2]|0;j=k[s+(f*2832|0)+(g<<2)>>2]|0;if((q|0)<256)r=+o[316384+(q<<2)>>2];else r=+kg(+(q|0));if(!j)n=r+2.0;else{if((j|0)<256)n=+o[316384+(j<<2)>>2];else n=+kg(+(j|0));n=r-n}p[v+(f+h<<3)>>3]=n;f=f+1|0}while((f|0)<(w|0));}g=g+1|0}while((g|0)!=704);t=Cf(w>>>0>536870911?-1:w<<3)|0;Fg(t|0,0,w<<3|0)|0;s=ia(w,b)|0;u=Cf(s)|0;Fg(u|0,0,s|0)|0;if(b){g=0;do{s=ia(g,w)|0;q=ia(m[a+(g<<1)>>1]|0,w)|0;if(d){j=e+g|0;h=0;n=1.e+99;do{f=t+(h<<3)|0;r=+p[v+(h+q<<3)>>3]+ +p[f>>3];p[f>>3]=r;if(r<n){i[j>>0]=h;n=r}h=h+1|0}while((h|0)<(w|0));}else n=1.e+99;if(g>>>0<2e3)r=(+(g>>>0)*.07/2.0e3+.77)*c;else r=c;if(d){j=0;do{q=t+(j<<3)|0;x=+p[q>>3]-n;p[q>>3]=x;if(x>=r){p[q>>3]=r;i[u+(j+s)>>0]=1}j=j+1|0}while((j|0)<(w|0));}g=g+1|0}while((g|0)!=(b|0));d=b+-1|0;if((d|0)>0){q=d;h=l[e+d>>0]|0;j=ia(w,d)|0;while(1){g=q;q=q+-1|0;j=j-w|0;f=e+q|0;if(!(i[u+(j+h)>>0]|0))d=h;else d=l[f>>0]|0;i[f>>0]=d;if((g|0)<=1)break;else h=d}}}Ef(v);Ef(t);Ef(u);return}function vd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,n=0;h=Vc(c,b)|0;i=k[d>>2]|0;n=d+4|0;f=k[n>>2]|0;e=i;if((f|0)==(i|0))g=i;else{g=f+(~(((f+-2832-e|0)>>>0)/2832|0)*2832|0)|0;k[n>>2]=g}f=(g-e|0)/2832|0;if(h>>>0<=f>>>0){if(h>>>0<f>>>0?(j=i+(h*2832|0)|0,(g|0)!=(j|0)):0)k[n>>2]=g+(~(((g+-2832-j|0)>>>0)/2832|0)*2832|0);}else yd(d,h-f|0);if(!b)return;e=k[d>>2]|0;f=0;do{d=l[c+f>>0]|0;n=e+(d*2832|0)+((m[a+(f<<1)>>1]|0)<<2)|0;k[n>>2]=(k[n>>2]|0)+1;d=e+(d*2832|0)+2816|0;k[d>>2]=(k[d>>2]|0)+1;f=f+1|0}while((f|0)!=(b|0));return}function wd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;w=r;r=r+2880|0;u=w+2868|0;s=w+2856|0;l=w;q=w+2844|0;o=w+2832|0;k[u>>2]=0;v=u+4|0;k[v>>2]=0;k[u+8>>2]=0;k[s>>2]=0;t=s+4|0;k[t>>2]=0;k[s+8>>2]=0;n=(b|0)==0;do if(!n)if(b>>>0>1073741823)yf(s);else{h=b<<2;f=Af(h)|0;k[s>>2]=f;j=f+(b<<2)|0;k[s+8>>2]=j;Fg(f|0,0,h|0)|0;k[t>>2]=j;break}else f=0;while(0);Fg(l|0,0,2820)|0;g=l+2816|0;j=u+8|0;h=0;e=0;a:while(1){while(1){if(e>>>0>=b>>>0)break a;d=e+1|0;if((d|0)==(b|0)){p=10;break}x=(i[c+e>>0]|0)==(i[c+d>>0]|0);k[f+(e<<2)>>2]=h;e=l+(m[a+(e<<1)>>1]<<2)|0;k[e>>2]=(k[e>>2]|0)+1;k[g>>2]=(k[g>>2]|0)+1;if(x)e=d;else{e=d;break}}if((p|0)==10){p=0;k[f+(e<<2)>>2]=h;e=l+(m[a+(e<<1)>>1]<<2)|0;k[e>>2]=(k[e>>2]|0)+1;k[g>>2]=(k[g>>2]|0)+1;e=b}d=k[v>>2]|0;if((d|0)==(k[j>>2]|0)){td(u,l);f=k[s>>2]|0}else{Kg(d|0,l|0,2832)|0;k[v>>2]=d+2832}Fg(l|0,0,2820)|0;h=h+1|0}k[q>>2]=0;h=q+4|0;k[h>>2]=0;k[q+8>>2]=0;k[o>>2]=0;g=o+4|0;k[g>>2]=0;k[o+8>>2]=0;xd(u,1,((k[v>>2]|0)-(k[u>>2]|0)|0)/2832|0,256,q,o);if(n){f=k[o>>2]|0;if(f)p=19}else{d=k[s>>2]|0;f=k[o>>2]|0;e=0;do{i[c+e>>0]=k[f+(k[d+(e<<2)>>2]<<2)>>2];e=e+1|0}while((e|0)!=(b|0));p=19}if((p|0)==19){e=k[g>>2]|0;if((e|0)!=(f|0))k[g>>2]=e+(~((e+-4-f|0)>>>2)<<2);Df(f);}f=k[q>>2]|0;e=f;if(f){d=k[h>>2]|0;if((d|0)!=(f|0))k[h>>2]=d+(~(((d+-2832-e|0)>>>0)/2832|0)*2832|0);Df(f);}e=k[s>>2]|0;d=e;if(e){f=k[t>>2]|0;if((f|0)!=(e|0))k[t>>2]=f+(~((f+-4-d|0)>>>2)<<2);Df(e);}d=k[u>>2]|0;if(!d){r=w;return}e=k[v>>2]|0;if((e|0)!=(d|0))k[v>>2]=e+(~(((e+-2832-d|0)>>>0)/2832|0)*2832|0);Df(d);r=w;return}function xd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0.0,j=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0;v=r;r=r+720|0;q=v+16|0;t=v;s=ia(c,b)|0;k[t>>2]=0;u=t+4|0;k[u>>2]=0;k[t+8>>2]=0;if(s){if(s>>>0>1073741823)yf(t);j=Af(s<<2)|0;k[u>>2]=j;k[t>>2]=j;m=j+(s<<2)|0;k[t+8>>2]=m;h=s;while(1){k[j>>2]=1;h=h+-1|0;if(!h)break;else j=j+4|0}k[u>>2]=m}m=e+4|0;j=k[m>>2]|0;h=k[e>>2]|0;g=(j-h|0)/2832|0;if(s>>>0<=g>>>0){if(s>>>0<g>>>0?(n=h+(s*2832|0)|0,(j|0)!=(n|0)):0)k[m>>2]=j+(~(((j+-2832-n|0)>>>0)/2832|0)*2832|0);}else yd(e,s-g|0);h=f+4|0;g=k[h>>2]|0;j=k[f>>2]|0;m=g-j>>2;if(s>>>0<=m>>>0){if(s>>>0<m>>>0?(o=j+(s<<2)|0,(g|0)!=(o|0)):0)k[h>>2]=g+(~((g+-4-o|0)>>>2)<<2);}else hd(f,s-m|0);if((s|0)>0){h=k[e>>2]|0;o=0;do{Kg(h+(o*2832|0)|0,(k[a>>2]|0)+(o*2832|0)|0,2832)|0;n=k[a>>2]|0;j=k[n+(o*2832|0)+2816>>2]|0;do if(!j)i=12.0;else{h=0;m=0;do{h=((k[n+(o*2832|0)+(m<<2)>>2]|0)>0&1)+h|0;m=m+1|0}while((m|0)<704&(h|0)<5);g=h;if((g|0)==1){i=12.0;break}else if((g|0)==2){i=+(j+20|0);break}Fg(q|0,0,704)|0;Oe(n+(o*2832|0)|0,704,15,q);h=0;m=0;do{h=(ia(l[q+m>>0]|0,k[n+(o*2832|0)+(m<<2)>>2]|0)|0)+h|0;m=m+1|0}while((m|0)!=704);if((g|0)==4)h=h+37|0;else if((g|0)==3)h=h+28|0;else h=(id(q,704)|0)+h|0;i=+(h|0);}while(0);h=k[e>>2]|0;p[h+(o*2832|0)+2824>>3]=i;k[(k[f>>2]|0)+(o<<2)>>2]=o;o=o+1|0}while((o|0)<(s|0));}if((b|0)>1&(c|0)>0){h=0;do{q=ia(h,b)|0;zd(k[e>>2]|0,k[t>>2]|0,(k[f>>2]|0)+(q<<2)|0,b,d);h=h+1|0}while((h|0)<(c|0));}zd(k[e>>2]|0,k[t>>2]|0,k[f>>2]|0,s,d);Ad(k[a>>2]|0,s,k[e>>2]|0,k[f>>2]|0);Bd(e,f);h=k[t>>2]|0;if(!h){r=v;return}g=k[u>>2]|0;if((g|0)!=(h|0))k[u>>2]=g+(~((g+-4-h|0)>>>2)<<2);Df(h);r=v;return}function yd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;i=a+8|0;f=k[i>>2]|0;j=a+4|0;c=k[j>>2]|0;d=c;if(((f-d|0)/2832|0)>>>0>=b>>>0){do{Fg(c|0,0,2820)|0;c=(k[j>>2]|0)+2832|0;k[j>>2]=c;b=b+-1|0}while((b|0)!=0);return}c=k[a>>2]|0;e=((d-c|0)/2832|0)+b|0;if(e>>>0>1516584)yf(a);d=c;c=(f-d|0)/2832|0;if(c>>>0<758292){c=c<<1;c=c>>>0<e>>>0?e:c;d=((k[j>>2]|0)-d|0)/2832|0;if(!c){e=0;g=0}else h=8}else{c=1516584;d=((k[j>>2]|0)-d|0)/2832|0;h=8}if((h|0)==8){e=c;g=Af(c*2832|0)|0}c=g+(d*2832|0)|0;f=g+(e*2832|0)|0;e=c;do{Fg(e|0,0,2820)|0;e=c+2832|0;c=e;b=b+-1|0}while((b|0)!=0);b=c;c=k[a>>2]|0;e=(k[j>>2]|0)-c|0;d=g+((((e|0)/-2832|0)+d|0)*2832|0)|0;Kg(d|0,c|0,e|0)|0;k[a>>2]=d;k[j>>2]=b;k[i>>2]=f;if(!c)return;Df(c);return}function zd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0.0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;I=r;r=r+96|0;x=I+8|0;w=I+92|0;v=I+88|0;y=I+84|0;z=I+80|0;A=I+76|0;B=I;H=I+64|0;E=I+52|0;D=I+40|0;s=H+4|0;k[s>>2]=0;t=H+8|0;k[t>>2]=0;F=H+4|0;k[H>>2]=F;k[E>>2]=0;G=E+4|0;k[G>>2]=0;k[E+8>>2]=0;C=(d|0)>0;if(C){o=F;q=E+8|0;g=0;j=0;while(1){f=c+(j<<2)|0;if(g){m=k[f>>2]|0;h=F;l=g;a:do{while(1){if((k[l+16>>2]|0)>=(m|0)){h=l;break}l=k[l+4>>2]|0;if(!l)break a}l=k[h>>2]|0}while((l|0)!=0);if(!((h|0)!=(F|0)?(m|0)>=(k[h+16>>2]|0):0))n=11}else n=11;do if((n|0)==11){n=0;do if(g){m=k[f>>2]|0;l=g;while(1){h=k[l+16>>2]|0;if((m|0)<(h|0)){h=k[l>>2]|0;if(!h){h=l;g=l;n=15;break}}else{if((h|0)>=(m|0)){h=l;n=20;break}g=l+4|0;h=k[g>>2]|0;if(!h){h=g;g=l;n=19;break}}l=h}if((n|0)==15){n=0;k[x>>2]=g;m=h;break}else if((n|0)==19){n=0;k[x>>2]=g;m=h;break}else if((n|0)==20){n=0;k[x>>2]=h;m=x;g=h;break}}else{k[x>>2]=F;m=F;g=o}while(0);if(!(k[m>>2]|0)){h=Af(20)|0;k[h+16>>2]=k[f>>2];k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=g;k[m>>2]=h;g=k[k[H>>2]>>2]|0;if(g){k[H>>2]=g;h=k[m>>2]|0}Tb(k[s>>2]|0,h);k[t>>2]=(k[t>>2]|0)+1}h=k[G>>2]|0;if((h|0)==(k[q>>2]|0)){Zc(E,f);break}else{k[h>>2]=k[f>>2];k[G>>2]=h+4;break}}while(0);j=j+1|0;if((j|0)>=(d|0))break;g=k[F>>2]|0}j=k[G>>2]|0;f=k[E>>2]|0}else{j=0;f=0}k[D>>2]=0;o=D+4|0;k[o>>2]=0;k[D+8>>2]=0;if((j|0)==(f|0))j=f;else{m=0;do{g=m;m=m+1|0;if(m>>>0<j-f>>2>>>0){h=m;do{Dd(a,b,k[f+(g<<2)>>2]|0,k[f+(h<<2)>>2]|0,D);h=h+1|0;j=k[G>>2]|0;f=k[E>>2]|0}while(h>>>0<j-f>>2>>>0);}}while(m>>>0<j-f>>2>>>0);}b:do if(j-f>>2>>>0>1){u=0.0;t=1;while(1){while(1){h=k[D>>2]|0;if(+p[h+24>>3]>=u)break;q=k[h>>2]|0;n=k[h+4>>2]|0;g=a+(q*2832|0)+2816|0;k[g>>2]=(k[g>>2]|0)+(k[a+(n*2832|0)+2816>>2]|0);g=0;do{l=a+(q*2832|0)+(g<<2)|0;k[l>>2]=(k[l>>2]|0)+(k[a+(n*2832|0)+(g<<2)>>2]|0);g=g+1|0}while((g|0)!=704);p[a+(q*2832|0)+2824>>3]=+p[h+16>>3];g=b+(q<<2)|0;k[g>>2]=(k[g>>2]|0)+(k[b+(n<<2)>>2]|0);if(C){l=0;do{g=c+(l<<2)|0;if((k[g>>2]|0)==(n|0))k[g>>2]=q;l=l+1|0}while((l|0)!=(d|0));}m=j-f>>2;if(m>>>0>1){g=1;l=0;while(1){l=f+(l<<2)|0;if((k[l>>2]|0)>=(n|0))k[l>>2]=k[f+(g<<2)>>2];l=g+1|0;if(l>>>0<m>>>0){s=g;g=l;l=s}else break}}k[G>>2]=j+-4;j=k[o>>2]|0;l=(j|0)==(h|0);c:do if(!l){g=j-h>>5;m=0;do{f=k[h+(m<<5)>>2]|0;if(!((f|0)!=(q|0)?(s=k[h+(m<<5)+4>>2]|0,!((s|0)==(n|0)|((f|0)==(n|0)|(s|0)==(q|0)))):0))i[h+(m<<5)+8>>0]=0;m=m+1|0}while(m>>>0<g>>>0);if(!l)do{if(i[h+8>>0]|0)break c;g=h;f=j-g|0;if((f|0)>32){j=j+-32|0;k[x>>2]=k[h>>2];k[x+4>>2]=k[h+4>>2];k[x+8>>2]=k[h+8>>2];k[x+12>>2]=k[h+12>>2];k[x+16>>2]=k[h+16>>2];k[x+20>>2]=k[h+20>>2];k[x+24>>2]=k[h+24>>2];k[x+28>>2]=k[h+28>>2];k[h>>2]=k[j>>2];k[h+4>>2]=k[j+4>>2];k[h+8>>2]=k[j+8>>2];k[h+12>>2]=k[j+12>>2];k[h+16>>2]=k[j+16>>2];k[h+20>>2]=k[j+20>>2];k[h+24>>2]=k[j+24>>2];k[h+28>>2]=k[j+28>>2];k[j>>2]=k[x>>2];k[j+4>>2]=k[x+4>>2];k[j+8>>2]=k[x+8>>2];k[j+12>>2]=k[x+12>>2];k[j+16>>2]=k[x+16>>2];k[j+20>>2]=k[x+20>>2];k[j+24>>2]=k[x+24>>2];k[j+28>>2]=k[x+28>>2];k[y>>2]=g;k[z>>2]=j;k[A>>2]=g;k[v>>2]=k[y>>2];k[w>>2]=k[z>>2];k[x>>2]=k[A>>2];qd(v,w,B,(f>>5)+-1|0,x);j=k[o>>2]|0;h=k[D>>2]|0}j=j+-32|0;k[o>>2]=j}while((h|0)!=(j|0));}while(0);h=k[G>>2]|0;f=k[E>>2]|0;if((h|0)==(f|0)){j=h;f=h}else{h=0;do{Dd(a,b,q,k[f+(h<<2)>>2]|0,D);h=h+1|0;j=k[G>>2]|0;f=k[E>>2]|0}while(h>>>0<j-f>>2>>>0);}if(j-f>>2>>>0<=t>>>0)break b}if(j-f>>2>>>0>e>>>0){u=1.e+99;t=e}else break}}while(0);h=k[D>>2]|0;j=h;if(h){g=k[o>>2]|0;if((g|0)!=(h|0))k[o>>2]=g+(~((g+-32-j|0)>>>5)<<5);Df(h);f=k[E>>2]|0}if(!f){a=k[F>>2]|0;od(H,a);r=I;return}g=k[G>>2]|0;if((g|0)!=(f|0))k[G>>2]=g+(~((g+-4-f|0)>>>2)<<2);Df(f);a=k[F>>2]|0;od(H,a);r=I;return}
function pb(a){a=a|0;var b=0;b=r;r=r+a|0;r=r+15&-16;return b|0}function qb(){return r|0}function rb(a){a=a|0;r=a}function sb(a,b){a=a|0;b=b|0;r=a;s=b}function tb(a,b){a=a|0;b=b|0;if(!x){x=a;y=b}}function ub(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0]}function vb(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0];i[t+4>>0]=i[a+4>>0];i[t+5>>0]=i[a+5>>0];i[t+6>>0]=i[a+6>>0];i[t+7>>0]=i[a+7>>0]}function wb(a){a=a|0;M=a}function xb(){return M|0}function yb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=r;r=r+16|0;f=e;d=sc(a,b)|0;k[f>>2]=d;d=mg(d)|0;tc(a,b,d,f)|0;k[c>>2]=k[f>>2];r=e;return d|0}function zb(a){a=a|0;ng(a);return}function Ab(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;K=r;r=r+16|0;J=K;if(b>>>0<2){c=0;r=K;return c|0}p=Ra(l[a>>0]|l[a+1>>0]<<8|0)|0;if(!(p<<16>>16)){c=1;r=K;return c|0}if(b>>>0<4){c=0;r=K;return c|0}v=a+2|0;v=Ra(l[v>>0]|l[v+1>>0]<<8|0)|0;j[c>>1]=v;if(b>>>0<6){c=0;r=K;return c|0}v=a+4|0;v=Ra(l[v>>0]|l[v+1>>0]<<8|0)|0;j[c+4>>1]=v;if(b>>>0<8){c=0;r=K;return c|0}v=a+6|0;v=Ra(l[v>>0]|l[v+1>>0]<<8|0)|0;j[c+2>>1]=v;if(b>>>0<10){c=0;r=K;return c|0}v=a+8|0;v=Ra(l[v>>0]|l[v+1>>0]<<8|0)|0;j[c+6>>1]=v;if(p<<16>>16<=0){if(p<<16>>16!=-1){c=0;r=K;return c|0}h=c+36|0;i[h>>0]=0;k[c+28>>2]=a+10;o=10;n=0;while(1){m=o+2|0;if(m>>>0>b>>>0){z=0;x=143;break}s=a+o|0;s=Ra(l[s>>0]|l[s+1>>0]<<8|0)|0;n=(s&65535)>>>8&1|n&255;e=n&255;i[h>>0]=e;v=(s&1)<<1;u=v|4;t=s&65535;do if(!(t&8))if(!(t&64)){v=(t&128|0)==0?u:v|12;break}else{v=u+4|0;break}else v=u+2|0;while(0);if(v>>>0>1073741824){z=0;x=143;break}o=v+m|0;if(o>>>0>b>>>0|m>>>0>(b-v|0)>>>0){z=0;x=143;break}if(!(s&32)){q=e;w=o;x=85;break}}if((x|0)==85){k[c+32>>2]=w+-10;g=c+8|0;if(!(q<<24>>24)){j[g>>1]=0;c=1;r=K;return c|0}f=w+2|0;if(f>>>0>b>>>0){c=0;r=K;return c|0}else{C=a+w|0;C=Ra(l[C>>0]|l[C+1>>0]<<8|0)|0;j[g>>1]=C;k[c+12>>2]=a+f;c=C&65535;r=K;return f>>>0<=(b-c|0)>>>0&(c+f|0)>>>0<=b>>>0|0}}else if((x|0)==143){r=K;return z|0}}G=p<<16>>16;E=c+16|0;t=c+20|0;o=k[t>>2]|0;n=k[E>>2]|0;m=(o-n|0)/12|0;if(G>>>0<=m>>>0)if(G>>>0<m>>>0?(y=n+(G*12|0)|0,(o|0)!=(y|0)):0){do{n=o+-12|0;k[t>>2]=n;v=k[n>>2]|0;u=v;if(!v)o=n;else{o=o+-8|0;n=k[o>>2]|0;if((n|0)!=(v|0))k[o>>2]=n+(~(((n+-12-u|0)>>>0)/12|0)*12|0);Df(v);o=k[t>>2]|0}}while((o|0)!=(y|0));u=10;o=0;p=0}else{u=10;o=0;p=0}else{Cb(E,G-m|0);u=10;o=0;p=0}while(1){v=u+2|0;if(v>>>0>b>>>0){z=0;x=143;break}e=a+u|0;s=p;p=Ra(l[e>>0]|l[e+1>>0]<<8|0)|0;e=k[E>>2]|0;t=e+(o*12|0)|0;s=((o|0)==0&1)-(s&65535)+(p&65535)&65535;e=e+(o*12|0)+4|0;h=k[e>>2]|0;m=k[t>>2]|0;n=(h-m|0)/12|0;if(s>>>0<=n>>>0){if(s>>>0<n>>>0?(B=m+(s*12|0)|0,(h|0)!=(B|0)):0)k[e>>2]=h+(~(((h+-12-B|0)>>>0)/12|0)*12|0);}else Db(t,s-n|0);o=o+1|0;if((o|0)>=(G|0)){A=u;C=v;break}else u=v}if((x|0)==143){r=K;return z|0}h=A+4|0;if(h>>>0>b>>>0){c=0;r=K;return c|0}e=a+C|0;e=Ra(l[e>>0]|l[e+1>>0]<<8|0)|0;j[c+8>>1]=e;k[c+12>>2]=a+h;c=e&65535;e=c+h|0;if(e>>>0>b>>>0|h>>>0>(b-c|0)>>>0){c=0;r=K;return c|0}Eb(J,G);h=k[E>>2]|0;m=0;w=0;x=0;a:while(1){q=k[J>>2]|0;v=q+(x*12|0)|0;o=k[h+(x*12|0)+4>>2]|0;n=k[h+(x*12|0)>>2]|0;p=(o-n|0)/12|0;q=q+(x*12|0)+4|0;s=k[q>>2]|0;t=k[v>>2]|0;u=s-t|0;if(p>>>0<=u>>>0){if(p>>>0<u>>>0?(D=t+p|0,(s|0)!=(D|0)):0)k[q>>2]=D}else{Fb(v,p-u|0);h=k[E>>2]|0;o=k[h+(x*12|0)+4>>2]|0;n=k[h+(x*12|0)>>2]|0}if((o|0)==(n|0))o=w;else{h=w;p=0;while(1){if(!(m<<24>>24)){n=e+1|0;if(n>>>0>b>>>0){x=89;break a}h=i[a+e>>0]|0;if(!(h&8)){o=h;e=n;m=0}else{e=e+2|0;if(e>>>0>b>>>0){x=98;break a}o=h;m=i[a+n>>0]|0}}else{o=h;m=m+-1<<24>>24}i[(k[(k[J>>2]|0)+(x*12|0)>>2]|0)+p>>0]=o;h=k[E>>2]|0;c=k[h+(x*12|0)>>2]|0;i[c+(p*12|0)+8>>0]=o&1;p=p+1|0;if(p>>>0>=(((k[h+(x*12|0)+4>>2]|0)-c|0)/12|0)>>>0)break;else h=o}}x=x+1|0;if((x|0)>=(G|0)){f=e;x=27;break}else w=o}if((x|0)==27){q=k[E>>2]|0;p=0;h=0;b:while(1){e=k[q+(p*12|0)+4>>2]|0;m=k[q+(p*12|0)>>2]|0;if((e|0)!=(m|0)){t=k[J>>2]|0;s=k[t+(p*12|0)>>2]|0;u=(e-m|0)/12|0;v=0;do{o=l[s+v>>0]|0;if(!(o&2)){if(!(o&16)){o=f+2|0;if(o>>>0>b>>>0){F=t;x=116;break b}n=a+f|0;n=Ra(l[n>>0]|l[n+1>>0]<<8|0)|0;f=o}else n=0;h=(n<<16>>16)+h|0;k[m+(v*12|0)>>2]=h}else{n=f+1|0;if(n>>>0>b>>>0){d=t;x=107;break b}h=(ia(l[a+f>>0]|0,(o>>>3&2)+-1|0)|0)+h|0;k[m+(v*12|0)>>2]=h;f=n}v=v+1|0}while(v>>>0<u>>>0);}p=p+1|0;if((p|0)>=(G|0)){g=f;x=44;break}}if((x|0)==44){t=k[E>>2]|0;v=0;h=0;c:while(1){f=k[t+(v*12|0)+4>>2]|0;u=k[t+(v*12|0)>>2]|0;if((f|0)!=(u|0)){p=k[J>>2]|0;e=k[p+(v*12|0)>>2]|0;m=(f-u|0)/12|0;o=g;n=0;while(1){f=l[e+n>>0]|0;if(!(f&4)){if(!(f&32)){g=o+2|0;if(g>>>0>b>>>0){I=p;x=134;break c}f=a+o|0;f=Ra(l[f>>0]|l[f+1>>0]<<8|0)|0}else{f=0;g=o}h=(f<<16>>16)+h|0;k[u+(n*12|0)+4>>2]=h}else{g=o+1|0;if(g>>>0>b>>>0){H=p;x=125;break c}h=(ia(l[a+o>>0]|0,(f>>>4&2)+-1|0)|0)+h|0;k[u+(n*12|0)+4>>2]=h}n=n+1|0;if(n>>>0>=m>>>0)break;else o=g}}v=v+1|0;if((v|0)>=(G|0)){x=65;break}}if((x|0)==65){d=k[J>>2]|0;if(!d){c=1;r=K;return c|0}h=J+4|0;e=k[h>>2]|0;if((e|0)!=(d|0)){do{f=e+-12|0;k[h>>2]=f;g=k[f>>2]|0;if(!g)e=f;else{e=e+-8|0;if((k[e>>2]|0)!=(g|0))k[e>>2]=g;Df(g);e=k[h>>2]|0}}while((e|0)!=(d|0));d=k[J>>2]|0}Df(d);c=1;r=K;return c|0}else if((x|0)==125){if(!H){c=0;r=K;return c|0}h=J+4|0;e=k[h>>2]|0;if((e|0)==(H|0))d=H;else{do{f=e+-12|0;k[h>>2]=f;g=k[f>>2]|0;if(!g)e=f;else{e=e+-8|0;if((k[e>>2]|0)!=(g|0))k[e>>2]=g;Df(g);e=k[h>>2]|0}}while((e|0)!=(H|0));d=k[J>>2]|0}Df(d);c=0;r=K;return c|0}else if((x|0)==134){if(!I){c=0;r=K;return c|0}h=J+4|0;e=k[h>>2]|0;if((e|0)==(I|0))d=I;else{do{f=e+-12|0;k[h>>2]=f;g=k[f>>2]|0;if(!g)e=f;else{e=e+-8|0;if((k[e>>2]|0)!=(g|0))k[e>>2]=g;Df(g);e=k[h>>2]|0}}while((e|0)!=(I|0));d=k[J>>2]|0}Df(d);c=0;r=K;return c|0}}else if((x|0)==107){if(!d){c=0;r=K;return c|0}h=J+4|0;e=k[h>>2]|0;if((e|0)!=(d|0)){do{f=e+-12|0;k[h>>2]=f;g=k[f>>2]|0;if(!g)e=f;else{e=e+-8|0;if((k[e>>2]|0)!=(g|0))k[e>>2]=g;Df(g);e=k[h>>2]|0}}while((e|0)!=(d|0));d=k[J>>2]|0}Df(d);c=0;r=K;return c|0}else if((x|0)==116){if(!F){c=0;r=K;return c|0}h=J+4|0;e=k[h>>2]|0;if((e|0)==(F|0))d=F;else{do{f=e+-12|0;k[h>>2]=f;g=k[f>>2]|0;if(!g)e=f;else{e=e+-8|0;if((k[e>>2]|0)!=(g|0))k[e>>2]=g;Df(g);e=k[h>>2]|0}}while((e|0)!=(F|0));d=k[J>>2]|0}Df(d);c=0;r=K;return c|0}}else if((x|0)==89){d=k[J>>2]|0;if(!d){c=0;r=K;return c|0}h=J+4|0;e=k[h>>2]|0;if((e|0)!=(d|0)){do{f=e+-12|0;k[h>>2]=f;g=k[f>>2]|0;if(!g)e=f;else{e=e+-8|0;if((k[e>>2]|0)!=(g|0))k[e>>2]=g;Df(g);e=k[h>>2]|0}}while((e|0)!=(d|0));d=k[J>>2]|0}Df(d);c=0;r=K;return c|0}else if((x|0)==98){d=k[J>>2]|0;if(!d){c=0;r=K;return c|0}h=J+4|0;e=k[h>>2]|0;if((e|0)!=(d|0)){do{f=e+-12|0;k[h>>2]=f;g=k[f>>2]|0;if(!g)e=f;else{e=e+-8|0;if((k[e>>2]|0)!=(g|0))k[e>>2]=g;Df(g);e=k[h>>2]|0}}while((e|0)!=(d|0));d=k[J>>2]|0}Df(d);c=0;r=K;return c|0}return 0}function Bb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;d=a+32|0;e=k[d>>2]|0;if(!e){z=a+20|0;p=k[z>>2]|0;y=a+16|0;q=k[y>>2]|0;e=(p-q|0)/12|0;if((p|0)!=(q|0)){if(e>>>0>32767){a=0;return a|0}p=k[c>>2]|0;q=Ig(e<<1|0,0,12,0)|0;n=a+8|0;q=Ig(q|0,M|0,m[n>>1]|0,0)|0;o=M;if(0<o>>>0|0==(o|0)&p>>>0<q>>>0){a=0;return a|0}i[b>>0]=e>>>8;i[b+1>>0]=e;e=j[a>>1]|0;i[b+2>>0]=(e&65535)>>>8;i[b+3>>0]=e;e=j[a+4>>1]|0;i[b+4>>0]=(e&65535)>>>8;i[b+5>>0]=e;e=j[a+2>>1]|0;i[b+6>>0]=(e&65535)>>>8;i[b+7>>0]=e;e=j[a+6>>1]|0;i[b+8>>0]=(e&65535)>>>8;i[b+9>>0]=e;e=k[y>>2]|0;h=k[z>>2]|0;a:do if((e|0)==(h|0))d=10;else{g=10;f=-1;while(1){q=((k[e+4>>2]|0)-(k[e>>2]|0)|0)/12|0;f=q+f|0;if(q>>>0>65535|(f|0)>65535){d=0;break}i[b+g>>0]=f>>>8;d=g+2|0;i[b+(g|1)>>0]=f;e=e+12|0;if((e|0)==(h|0))break a;else g=d}return d|0}while(0);e=j[n>>1]|0;i[b+d>>0]=(e&65535)>>>8;x=d+2|0;i[b+(d+1)>>0]=e;d=m[n>>1]|0;Kg(b+x|0,k[a+12>>2]|0,d|0)|0;d=d+x|0;x=k[c>>2]|0;e=k[y>>2]|0;w=k[z>>2]|0;do if((e|0)!=(w|0)){a=-1;p=0;r=0;h=0;g=0;f=0;b:while(1){q=k[e>>2]|0;v=k[e+4>>2]|0;if((q|0)!=(v|0)){u=a;t=p;while(1){a=l[q+8>>0]|0;A=k[q>>2]|0;p=A-t|0;s=q+4|0;n=k[s>>2]|0;o=n-r|0;do if((A|0)!=(t|0))if((p+255|0)>>>0<511){a=((p|0)>0?18:2)|a;g=g+1|0;break}else{g=g+2|0;break}else a=a|16;while(0);do if((n|0)!=(r|0))if((o+255|0)>>>0<511){a=a|((o|0)>0?36:4);f=f+1|0;break}else{f=f+2|0;break}else a=a|32;while(0);if((h|0)!=255&(a|0)==(u|0)){p=b+(d+-1)|0;i[p>>0]=l[p>>0]|8;h=h+1|0}else{if(h){if(d>>>0>=x>>>0){d=0;n=49;break b}i[b+d>>0]=h;d=d+1|0}if(d>>>0>=x>>>0){d=0;n=49;break b}i[b+d>>0]=a;d=d+1|0;h=0}p=k[q>>2]|0;r=k[s>>2]|0;q=q+12|0;if((q|0)==(v|0))break;else{u=a;t=p}}}e=e+12|0;if((e|0)==(w|0)){n=32;break}}if((n|0)==32){if(!h){q=d;break}if(d>>>0<x>>>0){i[b+d>>0]=h;q=d+1|0;break}else{a=0;return a|0}}else if((n|0)==49)return d|0}else{q=d;g=0;f=0}while(0);d=g+q|0;if((d+f|0)>>>0>x>>>0){a=0;return a|0}e=k[y>>2]|0;s=k[z>>2]|0;if((e|0)!=(s|0)){f=q;h=0;q=0;while(1){g=k[e>>2]|0;r=k[e+4>>2]|0;if((g|0)==(r|0))g=q;else{p=h;while(1){h=k[g>>2]|0;n=h-p|0;a=k[g+4>>2]|0;o=a-q|0;do if((h|0)!=(p|0))if((n+255|0)>>>0<511){i[b+f>>0]=(n|0)>-1?n:0-n|0;f=f+1|0;break}else{i[b+f>>0]=n>>>8;i[b+(f+1)>>0]=n;f=f+2|0;break}while(0);do if((a|0)!=(q|0))if((o+255|0)>>>0<511){i[b+d>>0]=(o|0)>-1?o:0-o|0;d=d+1|0;break}else{i[b+d>>0]=o>>>8;i[b+(d+1)>>0]=o;d=d+2|0;break}while(0);g=g+12|0;if((g|0)==(r|0)){g=a;break}else{p=h;q=a}}}e=e+12|0;if((e|0)==(s|0))break;else q=g}}}else d=0}else{p=k[c>>2]|0;f=a+36|0;q=(i[f>>0]|0)!=0;g=a+8|0;o=m[g>>1]|0;n=Ig(e|0,0,10,0)|0;o=Ig(n|0,M|0,o|0,0)|0;q=Ig(o|0,M|0,(q?2:0)|0,(q?0:0)|0)|0;o=M;if(0<o>>>0|0==(o|0)&p>>>0<q>>>0){a=0;return a|0}i[b>>0]=-1;i[b+1>>0]=-1;e=j[a>>1]|0;i[b+2>>0]=(e&65535)>>>8;i[b+3>>0]=e;e=j[a+4>>1]|0;i[b+4>>0]=(e&65535)>>>8;i[b+5>>0]=e;e=j[a+2>>1]|0;i[b+6>>0]=(e&65535)>>>8;i[b+7>>0]=e;e=j[a+6>>1]|0;i[b+8>>0]=(e&65535)>>>8;i[b+9>>0]=e;e=k[d>>2]|0;Kg(b+10|0,k[a+28>>2]|0,e|0)|0;d=e+10|0;if(i[f>>0]|0){q=j[g>>1]|0;i[b+d>>0]=(q&65535)>>>8;d=e+12|0;i[b+(e+11)>>0]=q;q=m[g>>1]|0;Kg(b+d|0,k[a+12>>2]|0,q|0)|0;d=q+d|0}}k[c>>2]=d;a=1;return a|0}function Cb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;n=a+8|0;f=k[n>>2]|0;o=a+4|0;h=k[o>>2]|0;g=h;if(((f-g|0)/12|0)>>>0>=b>>>0){c=b;d=h;while(1){k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=0;c=c+-1|0;if(!c)break;else d=d+12|0}k[o>>2]=h+(b*12|0);return}m=k[a>>2]|0;h=((g-m|0)/12|0)+b|0;if(h>>>0>357913941)yf(a);i=m;g=(f-i|0)/12|0;if(g>>>0<178956970){g=g<<1;h=g>>>0<h>>>0?h:g;g=k[o>>2]|0;f=(g-i|0)/12|0;if(!h){e=0;l=0;j=f}else d=9}else{g=k[o>>2]|0;h=357913941;f=(g-i|0)/12|0;d=9}if((d|0)==9){e=h;l=Af(h*12|0)|0;j=f}h=l+(j*12|0)|0;c=l+(e*12|0)|0;f=b;e=h;while(1){k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=0;f=f+-1|0;if(!f)break;else e=e+12|0}d=h;f=l+((j+b|0)*12|0)|0;if((g|0)==(m|0))h=a;else{do{g=g+-12|0;Gb(h+-12|0,g);h=d+-12|0;d=h}while((g|0)!=(m|0));h=a;i=k[a>>2]|0}k[h>>2]=d;b=k[o>>2]|0;k[o>>2]=f;k[n>>2]=c;h=i;c=b;if((c|0)!=(h|0))do{d=c;c=c+-12|0;f=k[c>>2]|0;g=f;if(f){d=d+-8|0;e=k[d>>2]|0;if((e|0)!=(f|0))k[d>>2]=e+(~(((e+-12-g|0)>>>0)/12|0)*12|0);Df(f);}}while((c|0)!=(h|0));if(!i)return;Df(i);return}function Db(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;i=a+8|0;f=k[i>>2]|0;j=a+4|0;c=k[j>>2]|0;d=c;if(((f-d|0)/12|0)>>>0>=b>>>0){do{k[c>>2]=0;k[c+4>>2]=0;k[c+8>>2]=0;c=(k[j>>2]|0)+12|0;k[j>>2]=c;b=b+-1|0}while((b|0)!=0);return}c=k[a>>2]|0;e=((d-c|0)/12|0)+b|0;if(e>>>0>357913941)yf(a);d=c;c=(f-d|0)/12|0;if(c>>>0<178956970){c=c<<1;c=c>>>0<e>>>0?e:c;d=((k[j>>2]|0)-d|0)/12|0;if(!c){e=0;g=0}else h=8}else{c=357913941;d=((k[j>>2]|0)-d|0)/12|0;h=8}if((h|0)==8){e=c;g=Af(c*12|0)|0}c=g+(d*12|0)|0;f=g+(e*12|0)|0;e=c;do{k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=0;e=c+12|0;c=e;b=b+-1|0}while((b|0)!=0);b=c;c=k[a>>2]|0;e=(k[j>>2]|0)-c|0;d=g+((((e|0)/-12|0)+d|0)*12|0)|0;Kg(d|0,c|0,e|0)|0;k[a>>2]=d;k[j>>2]=b;k[i>>2]=f;if(!c)return;Df(c);return}function Eb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;k[a>>2]=0;c=a+4|0;k[c>>2]=0;k[a+8>>2]=0;if(!b)return;if(b>>>0>357913941)yf(a);e=Af(b*12|0)|0;k[c>>2]=e;k[a>>2]=e;d=e+(b*12|0)|0;k[a+8>>2]=d;a=e;while(1){k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;b=b+-1|0;if(!b)break;else a=a+12|0}k[c>>2]=d;return}function Fb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0;j=a+8|0;e=k[j>>2]|0;l=a+4|0;c=k[l>>2]|0;d=c;if((e-d|0)>>>0>=b>>>0){do{i[c>>0]=0;c=(k[l>>2]|0)+1|0;k[l>>2]=c;b=b+-1|0}while((b|0)!=0);return}c=k[a>>2]|0;d=d-c+b|0;if((d|0)<0)yf(a);f=c;c=e-f|0;if(c>>>0<1073741823){c=c<<1;c=c>>>0<d>>>0?d:c;d=(k[l>>2]|0)-f|0;if(!c){e=0;g=0}else h=8}else{c=2147483647;d=(k[l>>2]|0)-f|0;h=8}if((h|0)==8){e=c;g=Af(c)|0}c=g+d|0;f=g+e|0;e=c;do{i[e>>0]=0;e=c+1|0;c=e;b=b+-1|0}while((b|0)!=0);b=c;c=k[a>>2]|0;e=(k[l>>2]|0)-c|0;d=g+(d-e)|0;Kg(d|0,c|0,e|0)|0;k[a>>2]=d;k[l>>2]=b;k[j>>2]=f;if(!c)return;Df(c);return}function Gb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;k[a>>2]=0;g=a+4|0;k[g>>2]=0;k[a+8>>2]=0;f=b+4|0;h=k[f>>2]|0;c=k[b>>2]|0;e=h-c|0;d=(e|0)/12|0;if((h|0)==(c|0))return;if(d>>>0>357913941)yf(a);c=Af(e)|0;k[g>>2]=c;k[a>>2]=c;k[a+8>>2]=c+(d*12|0);d=k[b>>2]|0;e=k[f>>2]|0;if((d|0)==(e|0))return;do{k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];c=(k[g>>2]|0)+12|0;k[g>>2]=c;d=d+12|0}while((d|0)!=(e|0));return}function Hb(a,b){a=a|0;b=b|0;var c=0,d=0;d=a+12|0;c=k[d>>2]|0;if(!c)return 0;else a=d;a:do{while(1){if((k[c+16>>2]|0)>>>0>=b>>>0){a=c;break}c=k[c+4>>2]|0;if(!c)break a}c=k[a>>2]|0}while((c|0)!=0);if((a|0)==(d|0))return 0;else return ((k[a+16>>2]|0)>>>0>b>>>0?0:a+20|0)|0;return 0}function Ib(a,b){a=a|0;b=b|0;var c=0,d=0;d=a+12|0;c=k[d>>2]|0;if(!c)return 0;else a=d;a:do{while(1){if((k[c+16>>2]|0)>>>0>=b>>>0){a=c;break}c=k[c+4>>2]|0;if(!c)break a}c=k[a>>2]|0}while((c|0)!=0);if((a|0)==(d|0))return 0;else return ((k[a+16>>2]|0)>>>0>b>>>0?0:a+20|0)|0;return 0}function Jb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;j=r;r=r+16|0;h=j;k[a>>2]=0;i=a+4|0;k[i>>2]=0;k[a+8>>2]=0;c=k[b+8>>2]|0;f=b+12|0;if((c|0)==(f|0)){c=0;b=0;pg(c,b,h);r=j;return}g=a+8|0;b=c;do{e=b+20|0;c=k[e>>2]|0;do if(!(c&-2139062144)){d=k[i>>2]|0;if((d|0)==(k[g>>2]|0)){Sb(a,e);break}else{k[d>>2]=c;k[i>>2]=d+4;break}}while(0);c=k[b+4>>2]|0;if(!c)while(1){c=k[b+8>>2]|0;if((k[c>>2]|0)==(b|0)){b=c;break}else b=c}else{b=c;while(1){c=k[b>>2]|0;if(!c)break;else b=c}}}while((b|0)!=(f|0));c=k[a>>2]|0;b=k[i>>2]|0;pg(c,b,h);r=j;return}function Kb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;P=r;r=r+64|0;M=P+48|0;O=P+36|0;N=P;E=d+4|0;F=a+8|0;h=k[F>>2]|0;g=h+2|0;H=a+4|0;i=k[H>>2]|0;if(g>>>0>i>>>0){C=0;r=P;return C|0}e=(k[a>>2]|0)+h|0;e=Ra(l[e>>0]|l[e+1>>0]<<8|0)|0;j[E>>1]=e;k[F>>2]=g;h=h+8|0;if(h>>>0>i>>>0|g>>>0>(i+-6|0)>>>0){C=0;r=P;return C|0}k[F>>2]=h;B=O+4|0;k[B>>2]=0;C=O+8|0;k[C>>2]=0;f=O+4|0;k[O>>2]=f;D=f;a:do if(e<<16>>16){p=N+20|0;q=N+24|0;s=N+32|0;t=N+4|0;u=N+8|0;v=N+12|0;w=N+16|0;x=d+8|0;y=d+12|0;z=y;A=d+12|0;o=d+16|0;d=h;g=i;n=0;while(1){h=d+4|0;k[p>>2]=0;k[p+4>>2]=0;k[p+8>>2]=0;k[p+12>>2]=0;b:do if(((((h>>>0<=g>>>0?(G=k[a>>2]|0,e=G+d|0,e=Xa(l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0)|0,k[N>>2]=e,k[F>>2]=h,(d+8|0)>>>0<=g>>>0):0)?(I=G+h|0,I=Xa(l[I>>0]|l[I+1>>0]<<8|l[I+2>>0]<<16|l[I+3>>0]<<24|0)|0,k[t>>2]=I,I=d+8|0,k[F>>2]=I,(d+12|0)>>>0<=g>>>0):0)?(J=G+I|0,J=Xa(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24|0)|0,k[u>>2]=J,K=d+12|0,k[F>>2]=K,(d+16|0)>>>0<=g>>>0):0)?(L=G+K|0,L=Xa(l[L>>0]|l[L+1>>0]<<8|l[L+2>>0]<<16|l[L+3>>0]<<24|0)|0,k[v>>2]=L,k[F>>2]=d+16,(J&3|0)==0):0)?!(L>>>0>c>>>0|(c-L|0)>>>0<J>>>0):0){h=k[f>>2]|0;do if(h){while(1){g=k[h+16>>2]|0;if(J>>>0<g>>>0){g=k[h>>2]|0;if(!g){g=h;m=16;break}else h=g}else{if(g>>>0>=J>>>0){m=22;break}g=h+4|0;e=k[g>>2]|0;if(!e){m=20;break}else h=e}}if((m|0)==16){k[M>>2]=h;m=23;break}else if((m|0)==20){k[M>>2]=h;m=23;break}else if((m|0)==22){m=0;k[M>>2]=h;if(!h){g=M;m=23;break}else break}}else{k[M>>2]=f;g=f;h=D;m=23}while(0);if((m|0)==23){m=0;d=Af(24)|0;k[d+16>>2]=J;k[d+20>>2]=0;k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=h;k[g>>2]=d;h=k[k[O>>2]>>2]|0;if(!h)h=d;else{k[O>>2]=h;h=k[g>>2]|0}Tb(k[B>>2]|0,h);k[C>>2]=(k[C>>2]|0)+1;h=d}k[h+20>>2]=L;k[w>>2]=b+(k[u>>2]|0);e=k[y>>2]|0;g=(e|0)==0;do if(!g){i=k[N>>2]|0;h=y;d=e;c:do{while(1){if((k[d+16>>2]|0)>>>0>=i>>>0){h=d;break}d=k[d+4>>2]|0;if(!d)break c}d=k[h>>2]|0}while((d|0)!=0);if((h|0)!=(y|0)?i>>>0>=(k[h+16>>2]|0)>>>0:0){g=1;break b}if(!g){i=k[N>>2]|0;d=e;while(1){h=k[d+16>>2]|0;if(i>>>0<h>>>0){h=k[d>>2]|0;if(!h){h=d;g=d;m=39;break}}else{if(h>>>0>=i>>>0){h=d;m=45;break}g=d+4|0;h=k[g>>2]|0;if(!h){h=g;g=d;m=43;break}}d=h}if((m|0)==39){k[M>>2]=g;i=h;m=46;break}else if((m|0)==43){k[M>>2]=g;i=h;m=46;break}else if((m|0)==45){m=0;k[M>>2]=h;if(!h){i=M;g=h;m=46;break}else break}}else m=44}else m=44;while(0);if((m|0)==44){k[M>>2]=y;i=y;g=z;m=46}if((m|0)==46){m=0;h=Af(56)|0;k[h+16>>2]=k[N>>2];d=h+20|0;e=d+36|0;do{k[d>>2]=0;d=d+4|0}while((d|0)<(e|0));k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=g;k[i>>2]=h;g=k[k[x>>2]>>2]|0;if(!g)g=h;else{k[x>>2]=g;g=k[i>>2]|0}Tb(k[A>>2]|0,g);k[o>>2]=(k[o>>2]|0)+1}e=h+20|0;k[e>>2]=k[N>>2];k[e+4>>2]=k[N+4>>2];k[e+8>>2]=k[N+8>>2];k[e+12>>2]=k[N+12>>2];k[e+16>>2]=k[N+16>>2];if((e|0)!=(N|0))Ub(h+40|0,k[p>>2]|0,k[q>>2]|0);k[h+52>>2]=k[s>>2];g=0}else g=1;while(0);h=k[p>>2]|0;if(h){if((k[q>>2]|0)!=(h|0))k[q>>2]=h;Df(h);}h=n+1<<16>>16;if(g){e=0;break a}g=j[E>>1]|0;if((h&65535)>=(g&65535))break;d=k[F>>2]|0;g=k[H>>2]|0;n=h}e=k[O>>2]|0;if((e|0)!=(f|0)){h=(g&65535)<<4|12;while(1){g=k[e+16>>2]|0;if(g>>>0<h>>>0){e=0;m=66;break a}h=(k[e+20>>2]|0)+g|0;if(h>>>0<g>>>0){e=0;m=66;break a}g=k[e+4>>2]|0;if(!g)while(1){g=k[e+8>>2]|0;if((k[g>>2]|0)==(e|0)){e=g;break}else e=g}else{e=g;while(1){g=k[e>>2]|0;if(!g)break;else e=g}}if((e|0)==(f|0)){e=1;m=66;break}}}else{e=1;m=66}}else{e=1;m=66}while(0);Vb(O,k[f>>2]|0);C=e;r=P;return C|0}function Lb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+16|0;q=s;f=a+8|0;g=k[f>>2]|0;if((g+4|0)>>>0>(k[a+4>>2]|0)>>>0){m=0;r=s;return m|0}m=(k[a>>2]|0)+g|0;m=Xa(l[m>>0]|l[m+1>>0]<<8|l[m+2>>0]<<16|l[m+3>>0]<<24|0)|0;k[d>>2]=m;k[f>>2]=(k[f>>2]|0)+4;if(!(Kb(a,b,c,d)|0)){m=0;r=s;return m|0}f=k[d+8>>2]|0;j=d+12|0;if((f|0)==(j|0)){m=1;r=s;return m|0}m=e+4|0;n=m;o=e+4|0;p=e+8|0;while(1){i=f+28|0;d=k[m>>2]|0;g=(d|0)==0;if(!g){b=k[i>>2]|0;c=m;a=d;a:do{while(1){if((k[a+16>>2]|0)>>>0>=b>>>0){c=a;break}a=k[a+4>>2]|0;if(!a)break a}a=k[c>>2]|0}while((a|0)!=0);if((c|0)!=(m|0)?b>>>0>=(k[c+16>>2]|0)>>>0:0){while(1){c=k[d+16>>2]|0;if(b>>>0<c>>>0){c=k[d>>2]|0;if(!c){c=d;b=38;break}else d=c}else{if(c>>>0>=b>>>0){b=43;break}c=d+4|0;a=k[c>>2]|0;if(!a){b=42;break}else d=a}}if((b|0)==38){k[q>>2]=d;a=c;c=d;b=44}else if((b|0)==42){k[q>>2]=d;a=c;c=d;b=44}else if((b|0)==43){b=0;k[q>>2]=d;if(!d){a=q;c=d;b=44}}if((b|0)==44){b=0;d=Af(24)|0;k[d+16>>2]=k[i>>2];k[d+20>>2]=0;k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=c;k[a>>2]=d;c=k[k[e>>2]>>2]|0;if(!c)c=d;else{k[e>>2]=c;c=k[a>>2]|0}Tb(k[o>>2]|0,c);k[p>>2]=(k[p>>2]|0)+1}k[f+52>>2]=k[d+20>>2]}else b=13}else b=13;if((b|0)==13){b=k[f+20>>2]|0;a=k[j>>2]|0;if(a){c=j;b:do{while(1){if((k[a+16>>2]|0)>>>0>=b>>>0){c=a;break}a=k[a+4>>2]|0;if(!a)break b}a=k[c>>2]|0}while((a|0)!=0);if((c|0)!=(j|0))h=(k[c+16>>2]|0)>>>0>b>>>0?0:c+20|0;else h=0}else h=0;do if(!g){b=k[i>>2]|0;while(1){c=k[d+16>>2]|0;if(b>>>0<c>>>0){c=k[d>>2]|0;if(!c){c=d;b=24;break}else d=c}else{if(c>>>0>=b>>>0){b=30;break}c=d+4|0;a=k[c>>2]|0;if(!a){b=28;break}else d=a}}if((b|0)==24){k[q>>2]=d;b=31;break}else if((b|0)==28){k[q>>2]=d;b=31;break}else if((b|0)==30){b=0;k[q>>2]=d;if(!d){c=q;b=31;break}else break}}else{k[q>>2]=m;c=m;d=n;b=31}while(0);if((b|0)==31){a=Af(24)|0;k[a+16>>2]=k[i>>2];k[a+20>>2]=0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=d;k[c>>2]=a;d=k[k[e>>2]>>2]|0;if(!d)d=a;else{k[e>>2]=d;d=k[c>>2]|0}Tb(k[o>>2]|0,d);k[p>>2]=(k[p>>2]|0)+1;d=a}k[d+20>>2]=h}c=k[f+4>>2]|0;if(!c)while(1){c=k[f+8>>2]|0;if((k[c>>2]|0)==(f|0)){f=c;break}else f=c}else{f=c;while(1){c=k[f>>2]|0;if(!c)break;else f=c}}if((f|0)==(j|0)){f=1;break}}r=s;return f|0}function Mb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;w=r;r=r+32|0;v=w+16|0;o=w+12|0;u=w;s=a+8|0;g=k[s>>2]|0;n=a+4|0;if((g+4|0)>>>0>(k[n>>2]|0)>>>0){p=0;r=w;return p|0}h=k[a>>2]|0;j=h+g|0;j=Xa(l[j>>0]|l[j+1>>0]<<8|l[j+2>>0]<<16|l[j+3>>0]<<24|0)|0;k[d>>2]=j;j=k[s>>2]|0;i=j+4|0;k[s>>2]=i;g=j+8|0;f=k[n>>2]|0;if(g>>>0>f>>>0){p=0;r=w;return p|0}e=h+i|0;e=Xa(l[e>>0]|l[e+1>>0]<<8|l[e+2>>0]<<16|l[e+3>>0]<<24|0)|0;k[s>>2]=g;k[v>>2]=0;t=v+4|0;k[t>>2]=0;k[v+8>>2]=0;a:do if(e){m=v+8|0;i=j+12|0;if(i>>>0>f>>>0)g=0;else{h=g;j=0;while(1){h=(k[a>>2]|0)+h|0;h=Xa(l[h>>0]|l[h+1>>0]<<8|l[h+2>>0]<<16|l[h+3>>0]<<24|0)|0;k[o>>2]=h;k[s>>2]=i;i=k[t>>2]|0;if((i|0)==(k[m>>2]|0))Sb(v,o);else{k[i>>2]=h;k[t>>2]=i+4}j=j+1|0;if(j>>>0>=e>>>0)break;h=k[s>>2]|0;i=h+4|0;if(i>>>0>(k[n>>2]|0)>>>0){g=0;break a}}g=k[v>>2]|0;f=k[t>>2]|0;p=11}}else{g=0;f=0;p=11}while(0);if((p|0)==11){j=d+16|0;h=f-g>>2;i=d+20|0;g=k[i>>2]|0;f=k[j>>2]|0;e=(g-f|0)/20|0;if(h>>>0<=e>>>0){if(h>>>0<e>>>0?(q=f+(h*20|0)|0,(g|0)!=(q|0)):0)do{k[i>>2]=g+-20;Xb(g+-12|0,k[g+-8>>2]|0);g=k[i>>2]|0}while((g|0)!=(q|0));}else Wb(j,h-e|0);g=k[j>>2]|0;k[u+4>>2]=0;k[u+8>>2]=0;h=u+4|0;k[u>>2]=h;f=k[v>>2]|0;e=k[t>>2]|0;b:do if((f|0)==(e|0))f=1;else while(1){k[s>>2]=k[f>>2];f=f+4|0;if(!(Lb(a,b,c,g,u)|0)){f=0;break b}if((f|0)==(e|0)){f=1;break}else g=g+20|0}while(0);Yb(u,k[h>>2]|0);g=f}e=k[v>>2]|0;if(!e){p=g;r=w;return p|0}f=k[t>>2]|0;if((f|0)!=(e|0))k[t>>2]=f+(~((f+-4-e|0)>>>2)<<2);Df(e);p=g;r=w;return p|0}function Nb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,m=0;m=r;r=r+16|0;j=m;k[j>>2]=a;k[j+4>>2]=b;d=j+8|0;k[d>>2]=0;if(b>>>0<4){b=0;r=m;return b|0}i=Xa(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0)|0;k[d>>2]=4;if((i|0)==1953784678){b=Mb(j,a,b,c)|0;r=m;return b|0}g=c+16|0;f=c+20|0;d=k[f>>2]|0;e=k[g>>2]|0;c=(d-e|0)/20|0;if((d|0)!=(e|0)){if(c>>>0>1?(h=e+20|0,(d|0)!=(h|0)):0)do{k[f>>2]=d+-20;Xb(d+-12|0,k[d+-8>>2]|0);d=k[f>>2]|0}while((d|0)!=(h|0));}else Wb(g,1-c|0);h=k[g>>2]|0;k[h>>2]=i;b=Kb(j,a,b,h)|0;r=m;return b|0}function Ob(a){a=a|0;return (k[a+32>>2]|0)!=0|0}function Pb(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;f=a+12|0;e=k[f>>2]|0;if(!e){a=0;return a|0}else{a=f;b=e}a:do{while(1){if((k[b+16>>2]|0)>>>0>=1751474532){a=b;break}b=k[b+4>>2]|0;if(!b)break a}b=k[a>>2]|0}while((b|0)!=0);if((a|0)==(f|0))c=0;else c=(k[a+16>>2]|0)>>>0>1751474532?0:a+20|0;a=f;b=e;b:do{while(1){if((k[b+16>>2]|0)>>>0>=1819239265){a=b;break}b=k[b+4>>2]|0;if(!b)break b}b=k[a>>2]|0}while((b|0)!=0);if((a|0)==(f|0)){a=0;return a|0}b=(k[a+16>>2]|0)>>>0>1819239265;d=b?0:a+20|0;if((c|0)==0|b){a=0;return a|0}if((k[c+12>>2]|0)>>>0<52){a=0;return a|0}else{a=f;b=e}c:do{while(1){if((k[b+16>>2]|0)>>>0>=1751474532){a=b;break}b=k[b+4>>2]|0;if(!b)break c}b=k[a>>2]|0}while((b|0)!=0);if((a|0)!=(f|0)?(k[a+16>>2]|0)>>>0<=1751474532:0)a=(i[(k[a+36>>2]|0)+51>>0]|0)==0?1:2;else a=1;a=((k[d+12>>2]|0)>>>a)+-1|0;return a|0}function Qb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0;if((b|0)<0){o=0;return o|0}n=a+12|0;h=k[n>>2]|0;if(!h){o=0;return o|0}else{a=n;e=h}a:do{while(1){if((k[e+16>>2]|0)>>>0>=1751474532){a=e;break}e=k[e+4>>2]|0;if(!e)break a}e=k[a>>2]|0}while((e|0)!=0);if((a|0)==(n|0))j=0;else j=(k[a+16>>2]|0)>>>0>1751474532?0:a+20|0;e=n;a=h;b:do{while(1){if((k[a+16>>2]|0)>>>0>=1819239265){e=a;break}a=k[a+4>>2]|0;if(!a)break b}a=k[e>>2]|0}while((a|0)!=0);if((e|0)==(n|0))f=0;else f=(k[e+16>>2]|0)>>>0>1819239265?0:e+20|0;e=n;a=h;c:do{while(1){if((k[a+16>>2]|0)>>>0>=1735162214){e=a;break}a=k[a+4>>2]|0;if(!a)break c}a=k[e>>2]|0}while((a|0)!=0);if((e|0)==(n|0)){o=0;return o|0}g=(k[e+16>>2]|0)>>>0>1735162214;m=g?0:e+20|0;if((j|0)==0|(f|0)==0|g){o=0;return o|0}if((k[j+12>>2]|0)>>>0<52){o=0;return o|0}else{g=n;a=h}d:while(1){e=a;while(1){if((k[e+16>>2]|0)>>>0>=1751474532)break;e=k[e+4>>2]|0;if(!e){e=g;break d}}a=k[e>>2]|0;if(!a)break;else g=e}do if((e|0)!=(n|0)?(k[e+16>>2]|0)>>>0<=1751474532:0){j=k[f+16>>2]|0;g=k[f+12>>2]|0;if(i[(k[e+36>>2]|0)+51>>0]|0){e=b<<2;if(e>>>0>1073741824|e>>>0>g>>>0){o=0;return o|0}a=e+4|0;if(a>>>0>g>>>0){o=0;return o|0}f=j+e|0;f=Xa(l[f>>0]|l[f+1>>0]<<8|l[f+2>>0]<<16|l[f+3>>0]<<24|0)|0;if((e+8|0)>>>0>g>>>0){o=0;return o|0}a=j+a|0;a=Xa(l[a>>0]|l[a+1>>0]<<8|l[a+2>>0]<<16|l[a+3>>0]<<24|0)|0;if(a>>>0<f>>>0){o=0;return o|0}if(a>>>0>(k[m+12>>2]|0)>>>0){o=0;return o|0}else{k[c>>2]=(k[m+16>>2]|0)+f;a=a-f|0;break}}else{h=g;f=j;o=32}}else o=30;while(0);if((o|0)==30){h=k[f+12>>2]|0;f=k[f+16>>2]|0;o=32}do if((o|0)==32){e=b<<1;if(e>>>0>1073741824|e>>>0>h>>>0){o=0;return o|0}a=e+2|0;if(a>>>0>h>>>0){o=0;return o|0}g=f+e|0;g=Ra(l[g>>0]|l[g+1>>0]<<8|0)|0;if((e+4|0)>>>0>h>>>0){o=0;return o|0}a=f+a|0;a=Ra(l[a>>0]|l[a+1>>0]<<8|0)|0;e=g&65535;if((a&65535)<(g&65535)){o=0;return o|0}a=a&65535;if(a<<1>>>0>(k[m+12>>2]|0)>>>0){o=0;return o|0}else{k[c>>2]=(k[m+16>>2]|0)+(e<<1);a=a-e<<1;break}}while(0);k[d>>2]=a;o=1;return o|0}function Rb(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0;g=a+8|0;e=a+12|0;h=k[e>>2]|0;if(!h)return 1;else{d=e;b=h}a:while(1){c=b;while(1){if((k[c+16>>2]|0)>>>0>=1146308935)break;c=k[c+4>>2]|0;if(!c){f=d;break a}}b=k[c>>2]|0;if(!b){f=c;break}else d=c}if((f|0)==(e|0))return 1;if((f|0)==(e|0)?1:(k[f+16>>2]|0)>>>0>1146308935)return 1;b=k[f+4>>2]|0;if(!b){c=f;while(1){b=k[c+8>>2]|0;if((k[b>>2]|0)==(c|0))break;else c=b}}else while(1){c=k[b>>2]|0;if(!c)break;else b=c}if((k[g>>2]|0)==(f|0))k[g>>2]=b;d=a+16|0;k[d>>2]=(k[d>>2]|0)+-1;Zb(h,f);b=k[f+40>>2]|0;if(b){c=f+44|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Df(b);}Df(f);j[a+4>>1]=k[d>>2];return 1}function Sb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;g=a+4|0;h=k[a>>2]|0;i=h;d=((k[g>>2]|0)-i>>2)+1|0;if(d>>>0>1073741823)yf(a);j=a+8|0;e=h;c=(k[j>>2]|0)-e|0;if(c>>2>>>0<536870911){c=c>>1;d=c>>>0<d>>>0?d:c;e=(k[g>>2]|0)-e|0;c=e>>2;if(!d){f=0;d=0}else l=6}else{e=(k[g>>2]|0)-e|0;d=1073741823;c=e>>2;l=6}if((l|0)==6){f=d;d=Af(d<<2)|0}k[d+(c<<2)>>2]=k[b>>2];Kg(d|0,h|0,e|0)|0;k[a>>2]=d;k[g>>2]=d+(c+1<<2);k[j>>2]=d+(f<<2);if(!i)return;Df(i);return}function Tb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;c=(b|0)==(a|0);i[b+12>>0]=c&1;if(c)return;while(1){g=k[b+8>>2]|0;c=g+12|0;if(i[c>>0]|0){b=37;break}j=g+8|0;d=b;b=k[j>>2]|0;e=k[b>>2]|0;if((e|0)==(g|0)){e=k[b+4>>2]|0;if(!e){e=d;h=j;a=j;c=b;f=b;b=7;break}e=e+12|0;if(i[e>>0]|0){e=d;h=j;a=j;c=b;f=b;b=7;break}i[c>>0]=1;i[b+12>>0]=(b|0)==(a|0)&1;i[e>>0]=1}else{if(!e){f=d;h=j;a=j;d=b;e=b;b=24;break}f=e+12|0;if(i[f>>0]|0){f=d;h=j;a=j;d=b;e=b;b=24;break}i[c>>0]=1;i[b+12>>0]=(b|0)==(a|0)&1;i[f>>0]=1}if((b|0)==(a|0)){b=37;break}}if((b|0)==7){if((k[g>>2]|0)==(e|0))b=g;else{e=g+4|0;b=k[e>>2]|0;d=k[b>>2]|0;k[e>>2]=d;if(!d)d=c;else{k[d+8>>2]=g;d=k[h>>2]|0}f=b+8|0;k[f>>2]=d;c=k[a>>2]|0;if((k[c>>2]|0)==(g|0))k[c>>2]=b;else k[c+4>>2]=b;k[b>>2]=g;k[h>>2]=b;f=k[f>>2]|0}i[b+12>>0]=1;i[f+12>>0]=0;d=k[f>>2]|0;e=d+4|0;b=k[e>>2]|0;k[f>>2]=b;if(b)k[b+8>>2]=f;c=f+8|0;k[d+8>>2]=k[c>>2];b=k[c>>2]|0;if((k[b>>2]|0)==(f|0))k[b>>2]=d;else k[b+4>>2]=d;k[e>>2]=f;k[c>>2]=d;return}else if((b|0)==24){if((k[g>>2]|0)==(f|0)){b=k[g>>2]|0;c=b+4|0;f=k[c>>2]|0;k[g>>2]=f;if(!f)f=d;else{k[f+8>>2]=g;f=k[h>>2]|0}d=b+8|0;k[d>>2]=f;e=k[a>>2]|0;if((k[e>>2]|0)==(g|0))k[e>>2]=b;else k[e+4>>2]=b;k[c>>2]=g;k[h>>2]=b;e=k[d>>2]|0}else b=g;i[b+12>>0]=1;i[e+12>>0]=0;c=e+4|0;d=k[c>>2]|0;b=k[d>>2]|0;k[c>>2]=b;if(b)k[b+8>>2]=e;b=e+8|0;k[d+8>>2]=k[b>>2];c=k[b>>2]|0;if((k[c>>2]|0)==(e|0))k[c>>2]=d;else k[c+4>>2]=d;k[d>>2]=e;k[b>>2]=d;return}else if((b|0)==37)return}function Ub(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;l=c-b|0;m=a+8|0;e=k[m>>2]|0;h=k[a>>2]|0;f=h;if(l>>>0<=(e-f|0)>>>0){g=a+4|0;e=(k[g>>2]|0)-f|0;if(l>>>0<=e>>>0){Lg(h|0,b|0,l|0)|0;d=h+l|0;if((k[g>>2]|0)==(d|0))return;k[g>>2]=d;return}d=b+e|0;Lg(h|0,b|0,e|0)|0;if((d|0)==(c|0))return;e=k[g>>2]|0;do{i[e>>0]=i[d>>0]|0;e=(k[g>>2]|0)+1|0;k[g>>2]=e;d=d+1|0}while((d|0)!=(c|0));return}if(h){e=a+4|0;if((k[e>>2]|0)!=(h|0))k[e>>2]=h;Df(h);k[m>>2]=0;k[e>>2]=0;k[a>>2]=0;e=0}g=(l|0)<0;if(g)yf(a);e=e-0|0;if(e>>>0<1073741823){d=e<<1;e=d>>>0>=l>>>0;if(e|g^1)j=e?d:l;else yf(a);}else j=2147483647;e=Af(j)|0;f=a+4|0;k[f>>2]=e;k[a>>2]=e;k[m>>2]=e+j;if((b|0)==(c|0))return;else d=b;do{i[e>>0]=i[d>>0]|0;e=(k[f>>2]|0)+1|0;k[f>>2]=e;d=d+1|0}while((d|0)!=(c|0));return}function Vb(a,b){a=a|0;b=b|0;if(!b)return;else{Vb(a,k[b>>2]|0);Vb(a,k[b+4>>2]|0);Df(b);return}}function Wb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;j=a+8|0;e=k[j>>2]|0;l=a+4|0;c=k[l>>2]|0;d=c;if(((e-d|0)/20|0)>>>0>=b>>>0){do{k[c>>2]=0;k[c+4>>2]=0;k[c+8>>2]=0;k[c+12>>2]=0;k[c+16>>2]=0;k[c+8>>2]=c+12;c=(k[l>>2]|0)+20|0;k[l>>2]=c;b=b+-1|0}while((b|0)!=0);return}c=k[a>>2]|0;d=((d-c|0)/20|0)+b|0;if(d>>>0>214748364)yf(a);f=c;c=(e-f|0)/20|0;if(c>>>0<107374182){c=c<<1;c=c>>>0<d>>>0?d:c;d=((k[l>>2]|0)-f|0)/20|0;if(!c){g=0;e=0;c=d}else h=8}else{c=214748364;d=((k[l>>2]|0)-f|0)/20|0;h=8}if((h|0)==8){g=c;e=Af(c*20|0)|0;c=d}f=e+(c*20|0)|0;i=f;e=e+(g*20|0)|0;d=f;c=i;do{k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=0;k[d+12>>2]=0;k[d+16>>2]=0;k[d+8>>2]=d+12;d=c+20|0;c=d;b=b+-1|0}while((b|0)!=0);h=c;g=k[a>>2]|0;c=k[l>>2]|0;if((c|0)==(g|0)){f=a;d=l;b=i}else{b=i;do{c=c+-20|0;_b(f+-20|0,c);f=b+-20|0;b=f}while((c|0)!=(g|0));f=a;d=l;g=k[a>>2]|0;c=k[l>>2]|0}k[f>>2]=b;k[d>>2]=h;k[j>>2]=e;b=g;if((c|0)!=(b|0))do{Xb(c+-12|0,k[c+-8>>2]|0);c=c+-20|0}while((c|0)!=(b|0));if(!g)return;Df(g);return}function Xb(a,b){a=a|0;b=b|0;var c=0;if(!b)return;Xb(a,k[b>>2]|0);Xb(a,k[b+4>>2]|0);a=k[b+40>>2]|0;if(a){c=b+44|0;if((k[c>>2]|0)!=(a|0))k[c>>2]=a;Df(a);}Df(b);return}function Yb(a,b){a=a|0;b=b|0;if(!b)return;else{Yb(a,k[b>>2]|0);Yb(a,k[b+4>>2]|0);Df(b);return}}function Zb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0;d=k[b>>2]|0;if(d){c=k[b+4>>2]|0;if(!c)c=b;else while(1){d=k[c>>2]|0;if(!d){d=0;break}else c=d}}else{c=b;d=0}m=c+4|0;j=k[((d|0)==0?m:c)>>2]|0;l=(j|0)==0;g=c+8|0;if(!l)k[j+8>>2]=k[g>>2];f=k[g>>2]|0;e=k[f>>2]|0;if((e|0)==(c|0)){k[f>>2]=j;if((c|0)==(a|0)){a=j;e=0}else e=k[f+4>>2]|0}else k[f+4>>2]=j;d=c+12|0;h=(i[d>>0]|0)==0;if((c|0)!=(b|0)){n=b+8|0;f=k[n>>2]|0;k[g>>2]=f;if((k[k[n>>2]>>2]|0)==(b|0))k[f>>2]=c;else k[f+4>>2]=c;f=k[b>>2]|0;k[c>>2]=f;k[f+8>>2]=c;f=k[b+4>>2]|0;k[m>>2]=f;if(f)k[f+8>>2]=c;i[d>>0]=i[b+12>>0]|0;a=(a|0)==(b|0)?c:a}if(h|(a|0)==0)return;if(l)m=e;else{i[j+12>>0]=1;return}while(1){h=k[m+8>>2]|0;d=m+12|0;c=(i[d>>0]|0)!=0;if((k[h>>2]|0)==(m|0)){if(c)e=m;else{i[d>>0]=1;i[h+12>>0]=0;c=k[h>>2]|0;f=c+4|0;d=k[f>>2]|0;k[h>>2]=d;if(d)k[d+8>>2]=h;e=h+8|0;k[c+8>>2]=k[e>>2];d=k[e>>2]|0;if((k[d>>2]|0)==(h|0))k[d>>2]=c;else k[d+4>>2]=c;k[f>>2]=h;k[e>>2]=c;e=k[m+4>>2]|0;a=(a|0)==(e|0)?m:a;e=k[e>>2]|0}d=k[e>>2]|0;c=(d|0)==0;if(!c?(i[d+12>>0]|0)==0:0){a=e;b=66;break}m=k[e+4>>2]|0;if((m|0)!=0?(i[m+12>>0]|0)==0:0){b=65;break}i[e+12>>0]=0;d=k[e+8>>2]|0;c=d+12|0;if((d|0)==(a|0)|(i[c>>0]|0)==0){b=62;break}c=k[d+8>>2]|0;c=(k[c>>2]|0)==(d|0)?c+4|0:c}else{if(c)f=m;else{i[d>>0]=1;i[h+12>>0]=0;l=h+4|0;c=k[l>>2]|0;d=k[c>>2]|0;k[l>>2]=d;if(d)k[d+8>>2]=h;e=h+8|0;k[c+8>>2]=k[e>>2];d=k[e>>2]|0;if((k[d>>2]|0)==(h|0))k[d>>2]=c;else k[d+4>>2]=c;k[c>>2]=h;k[e>>2]=c;f=k[m>>2]|0;a=(a|0)==(f|0)?m:a;f=k[f+4>>2]|0}d=k[f>>2]|0;if((d|0)!=0?(i[d+12>>0]|0)==0:0){e=f;b=36;break}e=k[f+4>>2]|0;if((e|0)!=0?(i[e+12>>0]|0)==0:0){c=f;a=e;b=37;break}i[f+12>>0]=0;c=k[f+8>>2]|0;if((c|0)==(a|0)){c=a;b=34;break}if(!(i[c+12>>0]|0)){b=34;break}m=k[c+8>>2]|0;c=(k[m>>2]|0)==(c|0)?m+4|0:m}m=k[c>>2]|0}if((b|0)==34){i[c+12>>0]=1;return}else if((b|0)==36){a=k[f+4>>2]|0;if(!a){c=e;b=38}else{c=e;b=37}}else if((b|0)==62){i[c>>0]=1;return}else if((b|0)==65)if(c){d=e;b=67}else{a=e;b=66}if((b|0)==37)if(!(i[a+12>>0]|0)){d=f;b=44}else b=38;else if((b|0)==66)if(!(i[d+12>>0]|0))b=73;else{d=a;b=67}if((b|0)==38){i[d+12>>0]=1;i[f+12>>0]=0;e=d+4|0;a=k[e>>2]|0;k[c>>2]=a;if(a)k[a+8>>2]=f;a=f+8|0;k[d+8>>2]=k[a>>2];c=k[a>>2]|0;if((k[c>>2]|0)==(f|0))k[c>>2]=d;else k[c+4>>2]=d;k[e>>2]=f;k[a>>2]=d;a=f;b=44}else if((b|0)==67){m=d+4|0;e=k[m>>2]|0;i[e+12>>0]=1;i[d+12>>0]=0;c=k[e>>2]|0;k[m>>2]=c;if(c)k[c+8>>2]=d;a=d+8|0;k[e+8>>2]=k[a>>2];c=k[a>>2]|0;if((k[c>>2]|0)==(d|0))k[c>>2]=e;else k[c+4>>2]=e;k[e>>2]=d;k[a>>2]=e;a=e;b=73}if((b|0)==44){e=k[d+8>>2]|0;m=e+12|0;i[d+12>>0]=i[m>>0]|0;i[m>>0]=1;i[a+12>>0]=1;m=e+4|0;d=k[m>>2]|0;c=k[d>>2]|0;k[m>>2]=c;if(c)k[c+8>>2]=e;a=e+8|0;k[d+8>>2]=k[a>>2];c=k[a>>2]|0;if((k[c>>2]|0)==(e|0))k[c>>2]=d;else k[c+4>>2]=d;k[d>>2]=e;k[a>>2]=d;return}else if((b|0)==73){f=k[a+8>>2]|0;e=f+12|0;i[a+12>>0]=i[e>>0]|0;i[e>>0]=1;i[d+12>>0]=1;e=k[f>>2]|0;c=e+4|0;d=k[c>>2]|0;k[f>>2]=d;if(d)k[d+8>>2]=f;d=f+8|0;k[e+8>>2]=k[d>>2];a=k[d>>2]|0;if((k[a>>2]|0)==(f|0))k[a>>2]=e;else k[a+4>>2]=e;k[c>>2]=f;k[d>>2]=e;return}}function _b(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;C=r;r=r+64|0;u=C+60|0;B=C+56|0;v=C+52|0;w=C+40|0;x=C;k[a>>2]=k[b>>2];j[a+4>>1]=j[b+4>>1]|0;y=a+8|0;z=a+12|0;k[z>>2]=0;A=a+16|0;k[A>>2]=0;a=a+12|0;k[y>>2]=a;e=k[b+8>>2]|0;s=b+12|0;if((e|0)==(s|0)){r=C;return}l=x+4|0;t=x+24|0;m=x+28|0;n=x+32|0;o=x+36|0;p=x+24|0;q=x+32|0;h=e;c=e;while(1){g=h+16|0;k[x>>2]=k[g>>2];f=h+20|0;k[l>>2]=k[f>>2];k[l+4>>2]=k[f+4>>2];k[l+8>>2]=k[f+8>>2];k[l+12>>2]=k[f+12>>2];k[l+16>>2]=k[f+16>>2];k[t>>2]=0;k[m>>2]=0;k[n>>2]=0;f=h+44|0;D=k[f>>2]|0;d=h+40|0;e=k[d>>2]|0;b=D-e|0;if((D|0)!=(e|0)){if((b|0)<0){a=5;break}e=Af(b)|0;k[m>>2]=e;k[t>>2]=e;k[q>>2]=e+b;d=k[d>>2]|0;f=k[f>>2]|0;if((d|0)!=(f|0))do{i[e>>0]=i[d>>0]|0;e=(k[m>>2]|0)+1|0;k[m>>2]=e;d=d+1|0}while((d|0)!=(f|0));}k[o>>2]=k[h+52>>2];k[x>>2]=k[g>>2];k[v>>2]=a;k[u>>2]=k[v>>2];d=$b(y,u,B,x)|0;if(!(k[d>>2]|0)){ac(w,y,x);b=k[w>>2]|0;k[w>>2]=0;e=k[B>>2]|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=e;k[d>>2]=b;e=k[k[y>>2]>>2]|0;if(e){k[y>>2]=e;b=k[d>>2]|0}Tb(k[z>>2]|0,b);k[A>>2]=(k[A>>2]|0)+1}b=k[p>>2]|0;if(b){if((k[m>>2]|0)!=(b|0))k[m>>2]=b;Df(b);}b=k[c+4>>2]|0;if(!b)while(1){b=k[c+8>>2]|0;if((k[b>>2]|0)==(c|0))break;else c=b}else while(1){c=k[b>>2]|0;if(!c)break;else b=c}if((b|0)==(s|0)){a=20;break}else{h=b;c=b}}if((a|0)==5)yf(t);else if((a|0)==20){r=C;return}}function $b(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=a+4|0;h=k[b>>2]|0;e=h;if((h|0)!=(i|0)?(g=k[d>>2]|0,f=k[h+16>>2]|0,g>>>0>=f>>>0):0){if(f>>>0>=g>>>0){k[c>>2]=e;e=c;return e|0}a=h+4|0;b=k[a>>2]|0;f=(b|0)==0;if(f){e=h;while(1){b=k[e+8>>2]|0;if((k[b>>2]|0)==(e|0))break;else e=b}}else while(1){e=k[b>>2]|0;if(!e)break;else b=e}if((b|0)!=(i|0)?g>>>0>=(k[b+16>>2]|0)>>>0:0){e=k[i>>2]|0;if(!e){k[c>>2]=i;e=i;return e|0}else f=e;while(1){e=k[f+16>>2]|0;if(g>>>0<e>>>0){e=k[f>>2]|0;if(!e){b=f;e=f;d=33;break}}else{if(e>>>0>=g>>>0){e=f;d=38;break}b=f+4|0;e=k[b>>2]|0;if(!e){e=f;d=37;break}}f=e}if((d|0)==33){k[c>>2]=e;e=b;return e|0}else if((d|0)==37){k[c>>2]=e;e=b;return e|0}else if((d|0)==38){k[c>>2]=e;e=c;return e|0}}if(f){k[c>>2]=h;e=a;return e|0}else{k[c>>2]=b;e=b;return e|0}}if((h|0)!=(k[a>>2]|0)){e=k[h>>2]|0;if(!e){b=h;while(1){e=k[b+8>>2]|0;if((k[e>>2]|0)==(b|0))b=e;else break}}else while(1){b=k[e+4>>2]|0;if(!b)break;else e=b}a=k[d>>2]|0;if((k[e+16>>2]|0)>>>0>=a>>>0){e=k[i>>2]|0;if(!e){k[c>>2]=i;e=i;return e|0}else f=e;while(1){e=k[f+16>>2]|0;if(a>>>0<e>>>0){e=k[f>>2]|0;if(!e){b=f;e=f;d=14;break}}else{if(e>>>0>=a>>>0){e=f;d=19;break}b=f+4|0;e=k[b>>2]|0;if(!e){e=f;d=18;break}}f=e}if((d|0)==14){k[c>>2]=e;e=b;return e|0}else if((d|0)==18){k[c>>2]=e;e=b;return e|0}else if((d|0)==19){k[c>>2]=e;e=c;return e|0}}}if(!(k[h>>2]|0)){k[c>>2]=h;e=h;return e|0}else{k[c>>2]=e;e=e+4|0;return e|0}return 0}function ac(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;n=Af(56)|0;j=b+4|0;l=n+16|0;k[l>>2]=k[c>>2];f=n+20|0;m=c+4|0;k[f>>2]=k[m>>2];k[f+4>>2]=k[m+4>>2];k[f+8>>2]=k[m+8>>2];k[f+12>>2]=k[m+12>>2];k[f+16>>2]=k[m+16>>2];f=n+40|0;k[f>>2]=0;m=n+44|0;k[m>>2]=0;g=n+48|0;k[g>>2]=0;h=c+28|0;o=k[h>>2]|0;e=c+24|0;b=k[e>>2]|0;d=o-b|0;if((o|0)!=(b|0)){if((d|0)<0)yf(f);b=Af(d)|0;k[m>>2]=b;k[f>>2]=b;k[g>>2]=b+d;d=k[e>>2]|0;e=k[h>>2]|0;if((d|0)!=(e|0))do{i[b>>0]=i[d>>0]|0;b=(k[m>>2]|0)+1|0;k[m>>2]=b;d=d+1|0}while((d|0)!=(e|0));}k[n+52>>2]=k[c+36>>2];k[l>>2]=k[c>>2];k[a>>2]=n;n=a+4|0;k[n>>2]=j;k[n+4>>2]=1;return}function bc(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;b=Hb(a,1128678944)|0;n=Hb(a,1751474532)|0;j=Hb(a,1735162214)|0;c=Hb(a,1819239265)|0;if(!n){m=0;return m|0}d=(c|0)==0;e=(j|0)==0;if(e&((b|0)!=0&d)){m=1;return m|0}if(e|d){m=0;return m|0}m=Ob(c)|0;if(m^(Ob(j)|0)){m=0;return m|0}if(Ob(c)|0){m=1;return m|0}f=i[(k[n+16>>2]|0)+51>>0]|0;g=f&255;h=Pb(a)|0;l=~~(+(h<<1|0)+ +((k[j+12>>2]|0)>>>0)*1.1)>>>0;m=j+20|0;e=j+24|0;d=k[e>>2]|0;c=k[m>>2]|0;b=d-c|0;if(l>>>0<=b>>>0){if(l>>>0<b>>>0?(o=c+l|0,(d|0)!=(o|0)):0)k[e>>2]=o}else Fb(m,l-b|0);if(gc(g,h,a)|0){m=1;return m|0}if(f<<24>>24){m=0;return m|0}if(!(gc(1,h,a)|0)){m=0;return m|0}i[(k[n+20>>2]|0)+51>>0]=1;m=1;return m|0}function cc(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+16|0;q=t+12|0;i=t;c=j[a+4>>1]|0;Jb(i,a);b=k[i>>2]|0;s=i+4|0;p=k[s>>2]|0;if((b|0)!=(p|0)){l=a+8|0;m=a+12|0;n=m;o=a+12|0;h=a+16|0;g=(c&65535)<<4|12;while(1){e=k[b>>2]|0;c=k[m>>2]|0;do if(c){while(1){a=k[c+16>>2]|0;if(e>>>0<a>>>0){a=k[c>>2]|0;if(!a){a=c;f=12;break}else c=a}else{if(a>>>0>=e>>>0){f=18;break}a=c+4|0;d=k[a>>2]|0;if(!d){f=16;break}else c=d}}if((f|0)==12){k[q>>2]=c;f=19;break}else if((f|0)==16){k[q>>2]=c;f=19;break}else if((f|0)==18){f=0;k[q>>2]=c;if(!c){a=q;f=19;break}else break}}else{k[q>>2]=m;a=m;c=n;f=19}while(0);if((f|0)==19){f=Af(56)|0;k[f+16>>2]=e;d=f+20|0;e=d+36|0;do{k[d>>2]=0;d=d+4|0}while((d|0)<(e|0));k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=c;k[a>>2]=f;c=k[k[l>>2]>>2]|0;if(!c)c=f;else{k[l>>2]=c;c=k[a>>2]|0}Tb(k[o>>2]|0,c);k[h>>2]=(k[h>>2]|0)+1;c=f}k[c+28>>2]=g;a=k[c+32>>2]|0;b=b+4|0;if((b|0)==(p|0))break;else g=(a>>>0>4294967292?a:a+3&-4)+g|0}b=k[i>>2]|0}if(!b){r=t;return 1}a=k[s>>2]|0;if((a|0)!=(b|0))k[s>>2]=a+(~((a+-4-b|0)>>>2)<<2);Df(b);r=t;return 1}function dc(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0;b=Hb(a,1751474532)|0;if(!b){m=0;return m|0}m=k[b+32>>2]|0;b=(m|0)==0?b:m;if((k[b+12>>2]|0)>>>0<12){m=0;return m|0}o=k[b+20>>2]|0;l=o+8|0;m=o+9|0;n=o+10|0;o=o+11|0;f=a+8|0;i[l>>0]=0;i[l+1>>0]=0;i[l+2>>0]=0;i[l+3>>0]=0;c=k[f>>2]|0;h=a+12|0;if((c|0)==(h|0))g=0;else{d=0;do{g=c+20|0;b=Ob(g)|0;g=b?k[c+52>>2]|0:g;b=qc(k[g+16>>2]|0,k[g+12>>2]|0)|0;k[g+4>>2]=b;d=b+d|0;b=k[c+4>>2]|0;if(!b)while(1){b=k[c+8>>2]|0;if((k[b>>2]|0)==(c|0)){c=b;break}else c=b}else{c=b;while(1){b=k[c>>2]|0;if(!b)break;else c=b}}}while((c|0)!=(h|0));g=d}e=k[a>>2]|0;c=j[a+4>>1]|0;if(c<<16>>16){d=c&65535;a=ka(d|0)|0;c=a^31;if((a|0)==31){b=0;c=0}else{b=1<<c+4&65535;c=c<<16}}else{d=0;b=0;c=0}b=(b|d<<16)+e+((d<<4)-b&65535|c)|0;c=k[f>>2]|0;if((c|0)!=(h|0))do{d=c+20|0;f=Ob(d)|0;d=f?k[c+52>>2]|0:d;b=(k[d>>2]|0)+b+(k[d+4>>2]|0)+(k[d+8>>2]|0)+(k[d+12>>2]|0)|0;d=k[c+4>>2]|0;if(!d)while(1){d=k[c+8>>2]|0;if((k[d>>2]|0)==(c|0)){c=d;break}else c=d}else{c=d;while(1){d=k[c>>2]|0;if(!d)break;else c=d}}}while((c|0)!=(h|0));h=-1313820742-g-b|0;i[l>>0]=h>>>24;i[m>>0]=h>>>16;i[n>>0]=h>>>8;i[o>>0]=h;m=1;return m|0}function ec(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0;j=Hb(a,1751474532)|0;if(!j){b=0;return b|0}if(!(Ob(j)|0)){h=k[j+12>>2]|0;h=h>>>0>4294967292?h:h+3&-4;f=j+20|0;g=j+24|0;c=k[g>>2]|0;b=k[f>>2]|0;d=c-b|0;if(h>>>0<=d>>>0){if(h>>>0<d>>>0?(e=b+h|0,(c|0)!=(e|0)):0)k[g>>2]=e}else{Fb(f,h-d|0);b=k[f>>2]|0}c=j+16|0;Kg(b|0,k[c>>2]|0,h|0)|0;k[c>>2]=b}if(!(Rb(a)|0)){b=0;return b|0}b=Hb(a,1751474532)|0;if(!b){b=0;return b|0}c=k[b+32>>2]|0;b=(c|0)==0?b:c;if((k[b+12>>2]|0)>>>0<17){b=0;return b|0}i[(k[b+20>>2]|0)+16>>0]=l[(k[b+16>>2]|0)+16>>0]|0|8;if(!(bc(a)|0)){b=0;return b|0}cc(a)|0;b=1;return b|0}function fc(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,x=0,y=0,z=0;z=r;r=r+16|0;x=z+12|0;u=z;y=a+20|0;v=a+16|0;c=k[v>>2]|0;b=(k[y>>2]|0)-c|0;if((b|0)==20){if(!(ec(c)|0)){j=0;r=z;return j|0}j=dc(c)|0;r=z;return j|0}b=rc(k[a>>2]|0,(b|0)/20|0)|0;c=k[v>>2]|0;a=k[y>>2]|0;if((c|0)==(a|0)){j=1;r=z;return j|0}do{if(!(ec(c)|0)){t=6;break}b=((m[c+4>>1]|0)<<4|12)+b|0;c=c+20|0}while((c|0)!=(a|0));if((t|0)==6){cb(8,27,1,k[w>>2]|0)|0;j=0;r=z;return j|0}a=k[v>>2]|0;q=k[y>>2]|0;if((a|0)==(q|0)){j=1;r=z;return j|0}s=u+4|0;do{Jb(u,a);e=k[u>>2]|0;i=k[s>>2]|0;if((e|0)!=(i|0)){j=a+8|0;l=a+12|0;n=l;o=a+12|0;p=a+16|0;do{g=k[e>>2]|0;d=k[l>>2]|0;do if(d){while(1){c=k[d+16>>2]|0;if(g>>>0<c>>>0){c=k[d>>2]|0;if(!c){c=d;t=21;break}else d=c}else{if(c>>>0>=g>>>0){t=27;break}c=d+4|0;f=k[c>>2]|0;if(!f){t=25;break}else d=f}}if((t|0)==21){k[x>>2]=d;t=28;break}else if((t|0)==25){k[x>>2]=d;t=28;break}else if((t|0)==27){t=0;k[x>>2]=d;if(!d){c=x;t=28;break}else break}}else{k[x>>2]=l;c=l;d=n;t=28}while(0);if((t|0)==28){t=0;h=Af(56)|0;k[h+16>>2]=g;f=h+20|0;g=f+36|0;do{k[f>>2]=0;f=f+4|0}while((f|0)<(g|0));k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=d;k[c>>2]=h;f=k[k[j>>2]>>2]|0;if(!f)d=h;else{k[j>>2]=f;d=k[c>>2]|0}Tb(k[o>>2]|0,d);k[p>>2]=(k[p>>2]|0)+1;d=h}if(Ob(d+20|0)|0)f=k[(k[d+52>>2]|0)+8>>2]|0;else{h=k[d+32>>2]|0;f=b;b=(h>>>0>4294967292?h:h+3&-4)+b|0}k[d+28>>2]=f;e=e+4|0}while((e|0)!=(i|0));e=k[u>>2]|0}c=e;if(e){d=k[s>>2]|0;if((d|0)!=(e|0))k[s>>2]=d+(~((d+-4-c|0)>>>2)<<2);Df(e);}a=a+20|0}while((a|0)!=(q|0));b=k[v>>2]|0;c=k[y>>2]|0;if((b|0)==(c|0)){j=1;r=z;return j|0}while(1){if(!(dc(b)|0))break;b=b+20|0;if((b|0)==(c|0)){b=1;t=39;break}}if((t|0)==39){r=z;return b|0}cb(40,24,1,k[w>>2]|0)|0;j=0;r=z;return j|0}function gc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;J=r;r=r+64|0;A=J+16|0;B=J+8|0;C=J+4|0;z=J;H=Hb(c,1735162214)|0;I=Hb(c,1819239265)|0;D=(a|0)==0;l=D?2:4;G=I+20|0;m=b+1|0;h=ia((2147483646-b|0)<3?m:b+4&-4,l)|0;a=I+24|0;g=k[a>>2]|0;f=k[G>>2]|0;e=g-f|0;if(h>>>0<=e>>>0){if(h>>>0<e>>>0?(d=f+h|0,(g|0)!=(d|0)):0)k[a>>2]=d}else{Fb(G,h-e|0);f=k[G>>2]|0}y=ia(m,l)|0;k[I+12>>2]=y;y=H+20|0;o=k[y>>2]|0;if((b|0)<=0){A=0;r=J;return A|0}p=A+8|0;q=A+16|0;s=A+20|0;t=A+24|0;u=A+32|0;v=H+24|0;w=A+16|0;d=0;h=0;x=0;do{if(D){i[f+d>>0]=h>>>9;i[f+(d+1)>>0]=h>>>1;d=d+2|0}else{i[f+d>>0]=h>>>24;i[f+(d+1)>>0]=h>>>16;i[f+(d+2)>>0]=h>>>8;i[f+(d+3)>>0]=h;d=d+4|0}j[p>>1]=0;k[q>>2]=0;k[s>>2]=0;k[t>>2]=0;k[u>>2]=0;do if(Qb(c,x,B,C)|0){m=k[C>>2]|0;if((m|0)!=0?!(Ab(k[B>>2]|0,m,A)|0):0){n=0;break}k[z>>2]=(k[v>>2]|0)-h-(k[y>>2]|0);if(Bb(A,o+h|0,z)|0){e=k[z>>2]|0;e=e>>>0>4294967292?e:e+3&-4;k[z>>2]=e;e=e+h|0;g=e>>>0<h>>>0|D&e>>>0>131071;n=g^1;h=g?h:e}else n=0}else n=0;while(0);m=k[w>>2]|0;if(m){l=k[s>>2]|0;if((l|0)!=(m|0)){do{a=l+-12|0;k[s>>2]=a;g=k[a>>2]|0;e=g;if(!g)l=a;else{l=l+-8|0;a=k[l>>2]|0;if((a|0)!=(g|0))k[l>>2]=a+(~(((a+-12-e|0)>>>0)/12|0)*12|0);Df(g);l=k[s>>2]|0}}while((l|0)!=(m|0));m=k[w>>2]|0}Df(m);}x=x+1|0;if(!n){d=0;E=37;break}}while((x|0)<(b|0));if((E|0)==37){r=J;return d|0}if(!h){A=0;r=J;return A|0}if(D){i[f+d>>0]=h>>>9;i[f+(d+1)>>0]=h>>>1}else{i[f+d>>0]=h>>>24;i[f+(d+1)>>0]=h>>>16;i[f+(d+2)>>0]=h>>>8;i[f+(d+3)>>0]=h}e=H+24|0;f=k[e>>2]|0;g=k[y>>2]|0;d=g;a=f-d|0;if(h>>>0<=a>>>0){if(h>>>0<a>>>0?(F=g+h|0,(f|0)!=(F|0)):0)k[e>>2]=F}else{Fb(y,h-a|0);d=k[y>>2]|0}k[H+16>>2]=d;k[H+12>>2]=h;k[I+16>>2]=k[G>>2];A=1;r=J;return A|0}function hc(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0;ua=r;r=r+160|0;ta=ua+48|0;pa=ua+8|0;qa=ua+4|0;ra=ua;b=Hb(a,1735162214)|0;c=Hb(a,1819239265)|0;if((c|0)==0&((b|0)==0&(Hb(a,1128678944)|0)!=0)){_=1;r=ua;return _|0}_=Ob(b)|0;if(_^(Ob(c)|0)){_=0;r=ua;return _|0}if(Ob(b)|0){_=1;r=ua;return _|0}n=a+8|0;f=a+12|0;e=k[f>>2]|0;do if(e){d=e;while(1){c=k[d+16>>2]|0;if(c>>>0>3891067366){c=k[d>>2]|0;if(!c){c=d;b=d;la=7;break}}else{if(c>>>0>=3891067366){b=d;la=13;break}b=d+4|0;c=k[b>>2]|0;if(!c){c=b;b=d;la=11;break}}d=c}if((la|0)==7){k[ta>>2]=b;e=c;la=14;break}else if((la|0)==11){k[ta>>2]=b;e=c;la=14;break}else if((la|0)==13){k[ta>>2]=b;if(!b){e=ta;la=14;break}else{c=e;ka=b;break}}}else{k[ta>>2]=f;e=f;b=f;la=14}while(0);if((la|0)==14){d=Af(56)|0;k[d+16>>2]=-403899930;g=d+20|0;h=g+36|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(h|0));k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=b;k[e>>2]=d;c=k[k[n>>2]>>2]|0;if(!c)c=d;else{k[n>>2]=c;c=k[e>>2]|0}Tb(k[a+12>>2]|0,c);c=a+16|0;k[c>>2]=(k[c>>2]|0)+1;c=k[f>>2]|0;ka=d}do if(c){d=c;while(1){c=k[d+16>>2]|0;if(c>>>0>3975144417){c=k[d>>2]|0;if(!c){b=d;c=d;la=20;break}}else{if(c>>>0>=3975144417){c=d;la=26;break}b=d+4|0;c=k[b>>2]|0;if(!c){c=d;la=24;break}}d=c}if((la|0)==20){k[ta>>2]=c;la=27;break}else if((la|0)==24){k[ta>>2]=c;la=27;break}else if((la|0)==26){k[ta>>2]=c;if(!c){b=ta;la=27;break}else break}}else{k[ta>>2]=f;b=f;c=f;la=27}while(0);if((la|0)==27){d=Af(56)|0;k[d+16>>2]=-319822879;g=d+20|0;h=g+36|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(h|0));k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=c;k[b>>2]=d;c=k[k[n>>2]>>2]|0;if(!c)c=d;else{k[n>>2]=c;c=k[b>>2]|0}Tb(k[a+12>>2]|0,c);c=a+16|0;k[c>>2]=(k[c>>2]|0)+1;c=d}V=Pb(a)|0;ja=ta+4|0;ga=ta+12|0;ia=ta+16|0;ea=ta+24|0;ha=ta+28|0;ca=ta+36|0;fa=ta+40|0;W=ta+48|0;da=ta+52|0;$=ta+60|0;ba=ta+64|0;Z=ta+72|0;aa=ta+76|0;Y=ta+84|0;_=ta+88|0;X=ta+96|0;g=ta;h=g+96|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(h|0));k[X>>2]=V;e=V+31>>5;if(e)Fb(W,e<<2);a:do if((V|0)>0){S=pa+8|0;T=pa+16|0;z=pa+20|0;A=pa+24|0;B=pa+32|0;C=pa+4|0;D=pa+2|0;E=pa+6|0;F=ta+12|0;G=ta+24|0;H=ta+32|0;I=ta+72|0;J=ta+80|0;K=ta+84|0;L=pa+12|0;M=ta+48|0;N=ta+60|0;O=ta+36|0;P=pa+28|0;Q=pa+36|0;R=pa+16|0;U=0;b:while(1){j[S>>1]=0;k[T>>2]=0;k[z>>2]=0;k[A>>2]=0;k[B>>2]=0;do if(Qb(a,U,qa,ra)|0){n=k[ra>>2]|0;if((n|0)!=0?!(Ab(k[qa>>2]|0,n,pa)|0):0){d=1;break}if(k[B>>2]|0){ic(ta,-1);f=(k[M>>2]|0)+(U>>3)|0;i[f>>0]=l[f>>0]|128>>>(U&7);ic(N,j[pa>>1]|0);ic(N,j[C>>1]|0);ic(N,j[D>>1]|0);ic(N,j[E>>1]|0);f=k[P>>2]|0;e=k[B>>2]|0;if(e){h=k[fa>>2]|0;n=k[O>>2]|0;d=h-n|0;g=d+e|0;if(d>>>0>=g>>>0){if(d>>>0>g>>>0?(ma=n+g|0,(h|0)!=(ma|0)):0)k[fa>>2]=ma}else{Fb(O,e);n=k[O>>2]|0}Kg(n+d|0,f|0,e|0)|0}if(!(i[Q>>0]|0)){d=0;break}mc(I,m[S>>1]|0);f=k[L>>2]|0;p=j[S>>1]|0;e=p&65535;if(!(p<<16>>16)){d=0;break}g=k[_>>2]|0;n=k[K>>2]|0;d=g-n|0;h=d+e|0;do if(d>>>0>=h>>>0){if(d>>>0>h>>>0){h=n+h|0;if((g|0)==(h|0))break;k[_>>2]=h}}else{Fb(K,e);n=k[K>>2]|0}while(0);Kg(n+d|0,f|0,e|0)|0;d=0;break}n=k[z>>2]|0;h=k[T>>2]|0;if((n|0)==(h|0)){ic(ta,0);d=0;break}u=n-h|0;y=(u|0)/12|0;ic(ta,y);n=k[T>>2]|0;s=k[z>>2]|0;if((n|0)!=(s|0)?(na=k[n>>2]|0,oa=k[n+4>>2]|0,(na|0)!=(oa|0)):0){f=k[na>>2]&65535;h=k[na+4>>2]&65535;b=na;q=oa;e=f;g=h;while(1){if((b|0)!=(q|0))do{p=k[b>>2]|0;o=p&65535;f=(p|0)<(f<<16>>16|0)?o:f;e=(p|0)>(e<<16>>16|0)?o:e;o=k[b+4>>2]|0;p=o&65535;h=(o|0)<(h<<16>>16|0)?p:h;g=(o|0)>(g<<16>>16|0)?p:g;b=b+12|0}while((b|0)!=(q|0));d=n+12|0;if((d|0)==(s|0))break;b=k[d>>2]|0;q=k[n+16>>2]|0;n=d}n=k[pa>>2]|0;if(!((n&65535)<<16>>16==f<<16>>16?(p=k[C>>2]|0,((p&65535)<<16>>16==h<<16>>16?(n>>>16&65535)<<16>>16==e<<16>>16:0)&(p>>>16&65535)<<16>>16==g<<16>>16):0))la=66}else{n=k[pa>>2]|0;if(!((n&65535)<<16>>16==0?(p=k[C>>2]|0,(n|p)>>>0<65536&(p&65535)<<16>>16==0):0))la=66}if((la|0)==66){la=0;p=(k[M>>2]|0)+(U>>3)|0;i[p>>0]=l[p>>0]|128>>>(U&7);ic(N,j[pa>>1]|0);ic(N,j[C>>1]|0);ic(N,j[D>>1]|0);ic(N,j[E>>1]|0);}if((u|0)>0){n=0;do{p=k[T>>2]|0;mc(F,((k[p+(n*12|0)+4>>2]|0)-(k[p+(n*12|0)>>2]|0)|0)/12|0);n=n+1|0}while((n|0)<(y|0));x=0;f=0;n=0;while(1){p=k[T>>2]|0;h=k[p+(x*12|0)>>2]|0;p=(k[p+(x*12|0)+4>>2]|0)-h|0;w=(p|0)/12|0;c:do if((p|0)>0){g=0;d=n;while(1){v=k[h+(g*12|0)>>2]|0;n=k[h+(g*12|0)+4>>2]|0;o=v-f|0;e=n-d|0;u=(o|0)>-1?o:0-o|0;t=(e|0)>-1?e:0-e|0;b=(i[h+(g*12|0)+8>>0]|0)!=0?0:128;h=o>>>31^1;e=e>>>31^1;o=e<<1|h;do if((v|0)==(f|0)&(t|0)<1280){s=(e|b|t>>>7&30)&255;h=k[ha>>2]|0;do if((h|0)==(k[H>>2]|0)){q=k[G>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=74;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[ha>>2]|0;f=e-p|0;if(!h){d=0;o=0;h=e}else la=78}else{f=k[ha>>2]|0;h=2147483647;e=f;f=f-p|0;la=78}if((la|0)==78){la=0;d=h;o=Af(h)|0;h=e}i[o+f>>0]=s;h=h-p|0;p=o+(f-h)|0;Kg(p|0,q|0,h|0)|0;k[G>>2]=p;k[ha>>2]=o+(f+1);k[H>>2]=o+d;if(!b)break;Df(b);}else{i[h>>0]=s;k[ha>>2]=(k[ha>>2]|0)+1}while(0);s=t&255;h=k[aa>>2]|0;if((h|0)!=(k[J>>2]|0)){i[h>>0]=s;k[aa>>2]=(k[aa>>2]|0)+1;break}q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=84;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0;h=e}else la=88}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=88}if((la|0)==88){la=0;d=h;o=Af(h)|0;h=e}i[o+f>>0]=s;h=h-p|0;p=o+(f-h)|0;Kg(p|0,q|0,h|0)|0;k[I>>2]=p;k[aa>>2]=o+(f+1);k[J>>2]=o+d;if(!b)break;Df(b);}else{if((n|0)==(d|0)&(u|0)<1280){s=((u>>>7&30)+(b|10)|h)&255;h=k[ha>>2]|0;do if((h|0)==(k[H>>2]|0)){q=k[G>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=95;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[ha>>2]|0;f=e-p|0;if(!h){d=0;o=0;h=e}else la=99}else{f=k[ha>>2]|0;h=2147483647;e=f;f=f-p|0;la=99}if((la|0)==99){la=0;d=h;o=Af(h)|0;h=e}i[o+f>>0]=s;h=h-p|0;p=o+(f-h)|0;Kg(p|0,q|0,h|0)|0;k[G>>2]=p;k[ha>>2]=o+(f+1);k[H>>2]=o+d;if(!b)break;Df(b);}else{i[h>>0]=s;k[ha>>2]=(k[ha>>2]|0)+1}while(0);s=u&255;h=k[aa>>2]|0;if((h|0)!=(k[J>>2]|0)){i[h>>0]=s;k[aa>>2]=(k[aa>>2]|0)+1;break}q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=105;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0;h=e}else la=109}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=109}if((la|0)==109){la=0;d=h;o=Af(h)|0;h=e}i[o+f>>0]=s;h=h-p|0;p=o+(f-h)|0;Kg(p|0,q|0,h|0)|0;k[I>>2]=p;k[aa>>2]=o+(f+1);k[J>>2]=o+d;if(!b)break;Df(b);break}if((u|0)<65&(t|0)<65){u=u+-1|0;t=t+-1|0;s=((u&48)+(b|20)+(t>>>2&12)|o)&255;h=k[ha>>2]|0;do if((h|0)==(k[H>>2]|0)){q=k[G>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=116;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;o=k[ha>>2]|0;f=o-p|0;if(!h){d=0;e=0;h=o}else la=120}else{f=k[ha>>2]|0;h=2147483647;o=f;f=f-p|0;la=120}if((la|0)==120){la=0;d=h;e=Af(h)|0;h=o}i[e+f>>0]=s;o=h-p|0;p=e+(f-o)|0;Kg(p|0,q|0,o|0)|0;k[G>>2]=p;k[ha>>2]=e+(f+1);k[H>>2]=e+d;if(!b)break;Df(b);}else{i[h>>0]=s;k[ha>>2]=(k[ha>>2]|0)+1}while(0);s=(t&15|u<<4)&255;h=k[aa>>2]|0;if((h|0)!=(k[J>>2]|0)){i[h>>0]=s;k[aa>>2]=(k[aa>>2]|0)+1;break}q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=126;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0;h=e}else la=130}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=130}if((la|0)==130){la=0;d=h;o=Af(h)|0;h=e}i[o+f>>0]=s;h=h-p|0;p=o+(f-h)|0;Kg(p|0,q|0,h|0)|0;k[I>>2]=p;k[aa>>2]=o+(f+1);k[J>>2]=o+d;if(!b)break;Df(b);break}if((u|0)<769&(t|0)<769){u=u+-1|0;t=t+-1|0;s=(((u>>>8&3)*12|0)+(b|84)+(t>>>6&12)|o)&255;h=k[ha>>2]|0;do if((h|0)==(k[H>>2]|0)){q=k[G>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=137;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;o=k[ha>>2]|0;f=o-p|0;if(!h){d=0;e=0;h=o}else la=141}else{f=k[ha>>2]|0;h=2147483647;o=f;f=f-p|0;la=141}if((la|0)==141){la=0;d=h;e=Af(h)|0;h=o}i[e+f>>0]=s;o=h-p|0;p=e+(f-o)|0;Kg(p|0,q|0,o|0)|0;k[G>>2]=p;k[ha>>2]=e+(f+1);k[H>>2]=e+d;if(!b)break;Df(b);}else{i[h>>0]=s;k[ha>>2]=(k[ha>>2]|0)+1}while(0);s=u&255;h=k[aa>>2]|0;do if((h|0)==(k[J>>2]|0)){q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=147;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0}else la=151}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=151}if((la|0)==151){la=0;d=h;o=Af(h)|0}i[o+f>>0]=s;h=o+(f+1)|0;e=e-p|0;p=o+(f-e)|0;Kg(p|0,q|0,e|0)|0;k[I>>2]=p;k[aa>>2]=h;k[J>>2]=o+d;if(!b)break;Df(b);h=k[aa>>2]|0}else{i[h>>0]=s;h=(k[aa>>2]|0)+1|0;k[aa>>2]=h}while(0);s=t&255;if((h|0)!=(k[J>>2]|0)){i[h>>0]=s;k[aa>>2]=(k[aa>>2]|0)+1;break}q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=157;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0;h=e}else la=161}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=161}if((la|0)==161){la=0;d=h;o=Af(h)|0;h=e}i[o+f>>0]=s;h=h-p|0;p=o+(f-h)|0;Kg(p|0,q|0,h|0)|0;k[I>>2]=p;k[aa>>2]=o+(f+1);k[J>>2]=o+d;if(!b)break;Df(b);break}h=o|b;if((u|0)<4096&(t|0)<4096){s=(h|120)&255;h=k[ha>>2]|0;do if((h|0)==(k[H>>2]|0)){q=k[G>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=168;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;o=k[ha>>2]|0;f=o-p|0;if(!h){d=0;e=0;h=o}else la=172}else{f=k[ha>>2]|0;h=2147483647;o=f;f=f-p|0;la=172}if((la|0)==172){la=0;d=h;e=Af(h)|0;h=o}i[e+f>>0]=s;o=h-p|0;p=e+(f-o)|0;Kg(p|0,q|0,o|0)|0;k[G>>2]=p;k[ha>>2]=e+(f+1);k[H>>2]=e+d;if(!b)break;Df(b);}else{i[h>>0]=s;k[ha>>2]=(k[ha>>2]|0)+1}while(0);s=u>>>4&255;h=k[aa>>2]|0;do if((h|0)==(k[J>>2]|0)){q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=178;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0}else la=182}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=182}if((la|0)==182){la=0;d=h;o=Af(h)|0}i[o+f>>0]=s;h=o+(f+1)|0;e=e-p|0;p=o+(f-e)|0;Kg(p|0,q|0,e|0)|0;k[I>>2]=p;k[aa>>2]=h;k[J>>2]=o+d;if(!b)break;Df(b);h=k[aa>>2]|0}else{i[h>>0]=s;h=(k[aa>>2]|0)+1|0;k[aa>>2]=h}while(0);s=(t>>>8|u<<4)&255;do if((h|0)==(k[J>>2]|0)){q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=188;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0}else la=192}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=192}if((la|0)==192){la=0;d=h;o=Af(h)|0}i[o+f>>0]=s;h=o+(f+1)|0;e=e-p|0;p=o+(f-e)|0;Kg(p|0,q|0,e|0)|0;k[I>>2]=p;k[aa>>2]=h;k[J>>2]=o+d;if(!b)break;Df(b);h=k[aa>>2]|0}else{i[h>>0]=s;h=(k[aa>>2]|0)+1|0;k[aa>>2]=h}while(0);s=t&255;if((h|0)!=(k[J>>2]|0)){i[h>>0]=s;k[aa>>2]=(k[aa>>2]|0)+1;break}q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=198;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0;h=e}else la=202}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=202}if((la|0)==202){la=0;d=h;o=Af(h)|0;h=e}i[o+f>>0]=s;h=h-p|0;p=o+(f-h)|0;Kg(p|0,q|0,h|0)|0;k[I>>2]=p;k[aa>>2]=o+(f+1);k[J>>2]=o+d;if(!b)break;Df(b);break}s=(h|124)&255;h=k[ha>>2]|0;do if((h|0)==(k[H>>2]|0)){q=k[G>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=208;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;o=k[ha>>2]|0;f=o-p|0;if(!h){d=0;e=0;h=o}else la=212}else{f=k[ha>>2]|0;h=2147483647;o=f;f=f-p|0;la=212}if((la|0)==212){la=0;d=h;e=Af(h)|0;h=o}i[e+f>>0]=s;o=h-p|0;p=e+(f-o)|0;Kg(p|0,q|0,o|0)|0;k[G>>2]=p;k[ha>>2]=e+(f+1);k[H>>2]=e+d;if(!b)break;Df(b);}else{i[h>>0]=s;k[ha>>2]=(k[ha>>2]|0)+1}while(0);s=u>>>8&255;h=k[aa>>2]|0;do if((h|0)==(k[J>>2]|0)){q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=218;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0}else la=222}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=222}if((la|0)==222){la=0;d=h;o=Af(h)|0}i[o+f>>0]=s;h=o+(f+1)|0;e=e-p|0;p=o+(f-e)|0;Kg(p|0,q|0,e|0)|0;k[I>>2]=p;k[aa>>2]=h;k[J>>2]=o+d;if(!b)break;Df(b);h=k[aa>>2]|0}else{i[h>>0]=s;h=(k[aa>>2]|0)+1|0;k[aa>>2]=h}while(0);s=u&255;do if((h|0)==(k[J>>2]|0)){q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=228;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-p|0;if(!h){d=0;o=0}else la=232}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-p|0;la=232}if((la|0)==232){la=0;d=h;o=Af(h)|0}i[o+f>>0]=s;h=o+(f+1)|0;e=e-p|0;p=o+(f-e)|0;Kg(p|0,q|0,e|0)|0;k[I>>2]=p;k[aa>>2]=h;k[J>>2]=o+d;if(!b)break;Df(b);h=k[aa>>2]|0}else{i[h>>0]=s;h=(k[aa>>2]|0)+1|0;k[aa>>2]=h}while(0);s=t>>>8&255;do if((h|0)==(k[J>>2]|0)){q=k[I>>2]|0;b=q;f=h-b+1|0;if((f|0)<0){la=238;break b}p=q;h=h-p|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;f=k[aa>>2]|0;e=f-p|0;if(!h){d=0;o=0}else la=242}else{e=k[aa>>2]|0;h=2147483647;f=e;e=e-p|0;la=242}if((la|0)==242){la=0;d=h;o=Af(h)|0}i[o+e>>0]=s;h=o+(e+1)|0;f=f-p|0;p=o+(e-f)|0;Kg(p|0,q|0,f|0)|0;k[I>>2]=p;k[aa>>2]=h;k[J>>2]=o+d;if(!b)break;Df(b);h=k[aa>>2]|0}else{i[h>>0]=s;h=(k[aa>>2]|0)+1|0;k[aa>>2]=h}while(0);b=t&255;if((h|0)!=(k[J>>2]|0)){i[h>>0]=b;k[aa>>2]=(k[aa>>2]|0)+1;break}p=k[I>>2]|0;q=p;f=h-q+1|0;if((f|0)<0){la=248;break b}s=p;h=h-s|0;if(h>>>0<1073741823){h=h<<1;h=h>>>0<f>>>0?f:h;e=k[aa>>2]|0;f=e-s|0;if(!h){o=0;d=0;h=e}else la=252}else{f=k[aa>>2]|0;h=2147483647;e=f;f=f-s|0;la=252}if((la|0)==252){la=0;o=h;d=Af(h)|0;h=e}i[d+f>>0]=b;e=h-s|0;h=d+(f-e)|0;Kg(h|0,p|0,e|0)|0;k[I>>2]=h;k[aa>>2]=d+(f+1);k[J>>2]=d+o;if(!q)break;Df(q);}while(0);g=g+1|0;if((g|0)>=(w|0)){h=v;break c}h=k[(k[T>>2]|0)+(x*12|0)>>2]|0;f=v;d=n}}else h=f;while(0);x=x+1|0;if((x|0)>=(y|0))break;else f=h}mc(I,m[S>>1]|0);f=k[L>>2]|0;p=j[S>>1]|0;e=p&65535;if(p<<16>>16){g=k[_>>2]|0;n=k[K>>2]|0;d=g-n|0;h=d+e|0;do if(d>>>0>=h>>>0){if(d>>>0>h>>>0){h=n+h|0;if((g|0)==(h|0))break;k[_>>2]=h}}else{Fb(K,e);n=k[K>>2]|0}while(0);Kg(n+d|0,f|0,e|0)|0;d=0}else d=0}else d=0}else d=1;while(0);n=k[R>>2]|0;if(n){h=k[z>>2]|0;if((h|0)!=(n|0)){do{g=h+-12|0;k[z>>2]=g;f=k[g>>2]|0;e=f;if(!f)h=g;else{h=h+-8|0;g=k[h>>2]|0;if((g|0)!=(f|0))k[h>>2]=g+(~(((g+-12-e|0)>>>0)/12|0)*12|0);Df(f);h=k[z>>2]|0}}while((h|0)!=(n|0));n=k[R>>2]|0}Df(n);}U=U+1|0;if(d){sa=0;break a}if((U|0)>=(V|0)){la=276;break a}}switch(la|0){case 74:{yf(G);break}case 84:{yf(I);break}case 95:{yf(G);break}case 105:{yf(I);break}case 116:{yf(G);break}case 126:{yf(I);break}case 137:{yf(G);break}case 147:{yf(I);break}case 157:{yf(I);break}case 168:{yf(G);break}case 178:{yf(I);break}case 188:{yf(I);break}case 198:{yf(I);break}case 208:{yf(G);break}case 218:{yf(I);break}case 228:{yf(I);break}case 238:{yf(I);break}case 248:{yf(I);break}}}else la=276;while(0);if((la|0)==276){e=ka+40|0;jc(e,0);ic(e,k[X>>2]|0);ic(e,0);jc(e,(k[ja>>2]|0)-(k[ta>>2]|0)|0);S=ta+12|0;jc(e,(k[ia>>2]|0)-(k[S>>2]|0)|0);T=ta+24|0;jc(e,(k[ha>>2]|0)-(k[T>>2]|0)|0);U=ta+72|0;jc(e,(k[aa>>2]|0)-(k[U>>2]|0)|0);V=ta+36|0;jc(e,(k[fa>>2]|0)-(k[V>>2]|0)|0);X=ta+60|0;jc(e,(k[da>>2]|0)-(k[W>>2]|0)+(k[ba>>2]|0)-(k[X>>2]|0)|0);d=ta+84|0;jc(e,(k[_>>2]|0)-(k[d>>2]|0)|0);kc(e,ta);kc(e,S);kc(e,T);kc(e,U);kc(e,V);kc(e,W);kc(e,X);kc(e,d);d=Hb(a,1751474532)|0;if((d|0)!=0?(k[d+12>>2]|0)>>>0>=52:0){i[(k[e>>2]|0)+7>>0]=i[(k[d+16>>2]|0)+51>>0]|0;k[ka+20>>2]=-403899930;sa=k[e>>2]|0;k[ka+32>>2]=(k[ka+44>>2]|0)-sa;k[ka+36>>2]=sa;k[c+20>>2]=-319822879;k[c+32>>2]=0;k[c+36>>2]=0;sa=1}else sa=0}c=k[Y>>2]|0;if(c){if((k[_>>2]|0)!=(c|0))k[_>>2]=c;Df(c);}c=k[Z>>2]|0;if(c){if((k[aa>>2]|0)!=(c|0))k[aa>>2]=c;Df(c);}c=k[$>>2]|0;if(c){if((k[ba>>2]|0)!=(c|0))k[ba>>2]=c;Df(c);}c=k[ta+48>>2]|0;if(c){if((k[da>>2]|0)!=(c|0))k[da>>2]=c;Df(c);}b=k[ca>>2]|0;if(b){if((k[fa>>2]|0)!=(b|0))k[fa>>2]=b;Df(b);}b=k[ea>>2]|0;if(b){if((k[ha>>2]|0)!=(b|0))k[ha>>2]=b;Df(b);}b=k[ga>>2]|0;if(b){if((k[ia>>2]|0)!=(b|0))k[ia>>2]=b;Df(b);}b=k[ta>>2]|0;if(b){if((k[ja>>2]|0)!=(b|0))k[ja>>2]=b;Df(b);}_=sa;r=ua;return _|0}function ic(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;m=b>>>8&255;o=a+4|0;c=k[o>>2]|0;p=a+8|0;if((c|0)==(k[p>>2]|0)){n=k[a>>2]|0;l=n;d=c-l+1|0;if((d|0)<0)yf(a);j=n;c=c-j|0;if(c>>>0<1073741823){e=c<<1;d=e>>>0<d>>>0?d:e;e=k[o>>2]|0;c=e-j|0;if(!d){h=0;g=0;f=c;d=e}else q=8}else{c=k[o>>2]|0;d=2147483647;e=c;c=c-j|0;q=8}if((q|0)==8){h=d;g=Af(d)|0;f=c;d=e}i[g+f>>0]=m;c=g+(f+1)|0;j=d-j|0;m=g+(f-j)|0;Kg(m|0,n|0,j|0)|0;k[a>>2]=m;k[o>>2]=c;k[p>>2]=g+h;if(l){Df(l);c=k[o>>2]|0}}else{i[c>>0]=m;c=(k[o>>2]|0)+1|0;k[o>>2]=c}h=b&255;if((c|0)!=(k[p>>2]|0)){i[c>>0]=h;k[o>>2]=(k[o>>2]|0)+1;return}j=k[a>>2]|0;l=j;d=c-l+1|0;if((d|0)<0)yf(a);m=j;c=c-m|0;if(c>>>0<1073741823){e=c<<1;d=e>>>0<d>>>0?d:e;e=k[o>>2]|0;c=e-m|0;if(!d){g=0;f=0;d=e}else q=18}else{c=k[o>>2]|0;d=2147483647;e=c;c=c-m|0;q=18}if((q|0)==18){g=d;f=Af(d)|0;d=e}i[f+c>>0]=h;m=d-m|0;n=f+(c-m)|0;Kg(n|0,j|0,m|0)|0;k[a>>2]=n;k[o>>2]=f+(c+1);k[p>>2]=f+g;if(!l)return;Df(l);return}function jc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;m=b>>>24&255;n=a+4|0;d=k[n>>2]|0;o=a+8|0;if((d|0)==(k[o>>2]|0)){h=k[a>>2]|0;l=h;c=d-l+1|0;if((c|0)<0)yf(a);j=h;d=d-j|0;if(d>>>0<1073741823){d=d<<1;d=d>>>0<c>>>0?c:d;c=k[n>>2]|0;e=c-j|0;if(!d){f=0;g=0}else p=8}else{e=k[n>>2]|0;d=2147483647;c=e;e=e-j|0;p=8}if((p|0)==8){f=d;g=Af(d)|0}i[g+e>>0]=m;d=g+(e+1)|0;j=c-j|0;m=g+(e-j)|0;Kg(m|0,h|0,j|0)|0;k[a>>2]=m;k[n>>2]=d;k[o>>2]=g+f;if(l){Df(l);d=k[n>>2]|0}}else{i[d>>0]=m;d=(k[n>>2]|0)+1|0;k[n>>2]=d}m=b>>>16&255;if((d|0)==(k[o>>2]|0)){l=k[a>>2]|0;j=l;c=d-j+1|0;if((c|0)<0)yf(a);h=l;d=d-h|0;if(d>>>0<1073741823){d=d<<1;d=d>>>0<c>>>0?c:d;c=k[n>>2]|0;e=c-h|0;if(!d){f=0;g=0}else p=18}else{e=k[n>>2]|0;d=2147483647;c=e;e=e-h|0;p=18}if((p|0)==18){f=d;g=Af(d)|0}i[g+e>>0]=m;d=g+(e+1)|0;h=c-h|0;m=g+(e-h)|0;Kg(m|0,l|0,h|0)|0;k[a>>2]=m;k[n>>2]=d;k[o>>2]=g+f;if(j){Df(j);d=k[n>>2]|0}}else{i[d>>0]=m;d=(k[n>>2]|0)+1|0;k[n>>2]=d}m=b>>>8&255;if((d|0)==(k[o>>2]|0)){j=k[a>>2]|0;h=j;e=d-h+1|0;if((e|0)<0)yf(a);l=j;c=d-l|0;if(c>>>0<1073741823){d=c<<1;d=d>>>0<e>>>0?e:d;e=k[n>>2]|0;c=e-l|0;if(!d){f=0;g=0;d=c}else p=28}else{c=k[n>>2]|0;d=2147483647;e=c;c=c-l|0;p=28}if((p|0)==28){f=d;g=Af(d)|0;d=c}i[g+d>>0]=m;c=g+(d+1)|0;l=e-l|0;m=g+(d-l)|0;Kg(m|0,j|0,l|0)|0;k[a>>2]=m;k[n>>2]=c;k[o>>2]=g+f;if(h){Df(h);c=k[n>>2]|0}}else{i[d>>0]=m;c=(k[n>>2]|0)+1|0;k[n>>2]=c}h=b&255;if((c|0)!=(k[o>>2]|0)){i[c>>0]=h;k[n>>2]=(k[n>>2]|0)+1;return}j=k[a>>2]|0;l=j;d=c-l+1|0;if((d|0)<0)yf(a);m=j;c=c-m|0;if(c>>>0<1073741823){c=c<<1;d=c>>>0<d>>>0?d:c;c=k[n>>2]|0;e=c-m|0;if(!d){g=0;f=0;d=c}else p=38}else{e=k[n>>2]|0;d=2147483647;c=e;e=e-m|0;p=38}if((p|0)==38){g=d;f=Af(d)|0;d=c}i[f+e>>0]=h;m=d-m|0;b=f+(e-m)|0;Kg(b|0,j|0,m|0)|0;k[a>>2]=b;k[n>>2]=f+(e+1);k[o>>2]=f+g;if(!l)return;Df(l);return}function kc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;o=b+4|0;c=k[b>>2]|0;if((k[o>>2]|0)==(c|0))return;p=a+4|0;q=a+8|0;n=0;while(1){m=c+n|0;c=k[p>>2]|0;if((c|0)==(k[q>>2]|0)){h=k[a>>2]|0;j=h;d=c-j+1|0;if((d|0)<0){r=6;break}l=h;c=c-l|0;if(c>>>0<1073741823){e=c<<1;d=e>>>0<d>>>0?d:e;e=k[p>>2]|0;c=e-l|0;if(!d){g=0;f=0;d=e}else r=10}else{c=k[p>>2]|0;d=2147483647;e=c;c=c-l|0;r=10}if((r|0)==10){r=0;g=d;f=Af(d)|0;d=e}i[f+c>>0]=i[m>>0]|0;l=d-l|0;m=f+(c-l)|0;Kg(m|0,h|0,l|0)|0;k[a>>2]=m;k[p>>2]=f+(c+1);k[q>>2]=f+g;if(j)Df(j);}else{i[c>>0]=i[m>>0]|0;k[p>>2]=(k[p>>2]|0)+1}n=n+1|0;c=k[b>>2]|0;if(n>>>0>=((k[o>>2]|0)-c|0)>>>0){r=14;break}}if((r|0)==6)yf(a);else if((r|0)==14)return}function lc(a){a=a|0;return ((a&65535)<253?1:(a&65535)<762?2:3)|0}function mc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;if((b|0)<253){h=b&255;m=a+4|0;c=k[m>>2]|0;b=a+8|0;if((c|0)!=(k[b>>2]|0)){i[c>>0]=h;k[m>>2]=(k[m>>2]|0)+1;return}n=k[a>>2]|0;j=n;d=c-j+1|0;if((d|0)<0)yf(a);l=n;c=c-l|0;if(c>>>0<1073741823){e=c<<1;e=e>>>0<d>>>0?d:e;f=k[m>>2]|0;d=f-l|0;if(!e){g=0;c=0;e=f}else q=9}else{d=k[m>>2]|0;e=2147483647;f=d;d=d-l|0;q=9}if((q|0)==9){g=e;c=Af(e)|0;e=f}i[c+d>>0]=h;h=e-l|0;l=c+(d-h)|0;Kg(l|0,n|0,h|0)|0;k[a>>2]=l;k[m>>2]=c+(d+1);k[b>>2]=c+g;if(!j)return;Df(j);return}if((b|0)<506){l=a+4|0;c=k[l>>2]|0;m=a+8|0;if((c|0)==(k[m>>2]|0)){n=k[a>>2]|0;h=n;e=c-h+1|0;if((e|0)<0)yf(a);j=n;c=c-j|0;if(c>>>0<1073741823){c=c<<1;e=c>>>0<e>>>0?e:c;c=k[l>>2]|0;d=c-j|0;if(!e){f=0;g=0}else q=20}else{d=k[l>>2]|0;e=2147483647;c=d;d=d-j|0;q=20}if((q|0)==20){f=e;g=Af(e)|0}i[g+d>>0]=-1;e=g+(d+1)|0;c=c-j|0;j=g+(d-c)|0;Kg(j|0,n|0,c|0)|0;k[a>>2]=j;k[l>>2]=e;k[m>>2]=g+f;if(h){Df(h);e=k[l>>2]|0}}else{i[c>>0]=-1;e=(k[l>>2]|0)+1|0;k[l>>2]=e}b=b+3&255;if((e|0)!=(k[m>>2]|0)){i[e>>0]=b;k[l>>2]=(k[l>>2]|0)+1;return}n=k[a>>2]|0;j=n;d=e-j+1|0;if((d|0)<0)yf(a);h=n;c=e-h|0;if(c>>>0<1073741823){c=c<<1;c=c>>>0<d>>>0?d:c;e=k[l>>2]|0;d=e-h|0;if(!c){g=0;f=0}else q=30}else{d=k[l>>2]|0;c=2147483647;e=d;d=d-h|0;q=30}if((q|0)==30){g=c;f=Af(c)|0}i[f+d>>0]=b;h=e-h|0;b=f+(d-h)|0;Kg(b|0,n|0,h|0)|0;k[a>>2]=b;k[l>>2]=f+(d+1);k[m>>2]=f+g;if(!j)return;Df(j);return}o=a+4|0;f=k[o>>2]|0;p=a+8|0;c=(f|0)==(k[p>>2]|0);if((b|0)<762){if(c){n=k[a>>2]|0;h=n;d=f-h+1|0;if((d|0)<0)yf(a);j=n;c=f-j|0;if(c>>>0<1073741823){e=c<<1;d=e>>>0<d>>>0?d:e;e=k[o>>2]|0;c=e-j|0;if(!d){f=0;g=0}else q=41}else{c=k[o>>2]|0;d=2147483647;e=c;c=c-j|0;q=41}if((q|0)==41){f=d;g=Af(d)|0}i[g+c>>0]=-2;d=g+(c+1)|0;l=e-j|0;m=g+(c-l)|0;Kg(m|0,n|0,l|0)|0;k[a>>2]=m;k[o>>2]=d;k[p>>2]=g+f;if(h){Df(h);d=k[o>>2]|0}}else{i[f>>0]=-2;d=(k[o>>2]|0)+1|0;k[o>>2]=d}l=b+6&255;if((d|0)!=(k[p>>2]|0)){i[d>>0]=l;k[o>>2]=(k[o>>2]|0)+1;return}j=k[a>>2]|0;h=j;e=d-h+1|0;if((e|0)<0)yf(a);m=j;c=d-m|0;if(c>>>0<1073741823){f=c<<1;e=f>>>0<e>>>0?e:f;f=k[o>>2]|0;d=f-m|0;if(!e){g=0;c=0;e=f}else q=51}else{d=k[o>>2]|0;e=2147483647;f=d;d=d-m|0;q=51}if((q|0)==51){g=e;c=Af(e)|0;e=f}i[c+d>>0]=l;m=e-m|0;b=c+(d-m)|0;Kg(b|0,j|0,m|0)|0;k[a>>2]=b;k[o>>2]=c+(d+1);k[p>>2]=c+g;if(!h)return;Df(h);return}if(c){n=k[a>>2]|0;h=n;e=f-h+1|0;if((e|0)<0)yf(a);j=n;c=f-j|0;if(c>>>0<1073741823){d=c<<1;e=d>>>0<e>>>0?e:d;d=k[o>>2]|0;c=d-j|0;if(!e){f=0;g=0}else q=61}else{c=k[o>>2]|0;e=2147483647;d=c;c=c-j|0;q=61}if((q|0)==61){f=e;g=Af(e)|0}i[g+c>>0]=-3;e=g+(c+1)|0;l=d-j|0;m=g+(c-l)|0;Kg(m|0,n|0,l|0)|0;k[a>>2]=m;k[o>>2]=e;k[p>>2]=g+f;if(h){Df(h);e=k[o>>2]|0}}else{i[f>>0]=-3;e=(k[o>>2]|0)+1|0;k[o>>2]=e}n=b>>>8&255;if((e|0)==(k[p>>2]|0)){h=k[a>>2]|0;j=h;d=e-j+1|0;if((d|0)<0)yf(a);l=h;e=e-l|0;if(e>>>0<1073741823){e=e<<1;e=e>>>0<d>>>0?d:e;d=k[o>>2]|0;c=d-l|0;if(!e){f=0;g=0}else q=71}else{c=k[o>>2]|0;e=2147483647;d=c;c=c-l|0;q=71}if((q|0)==71){f=e;g=Af(e)|0}i[g+c>>0]=n;e=g+(c+1)|0;l=d-l|0;m=g+(c-l)|0;Kg(m|0,h|0,l|0)|0;k[a>>2]=m;k[o>>2]=e;k[p>>2]=g+f;if(j){Df(j);e=k[o>>2]|0}}else{i[e>>0]=n;e=(k[o>>2]|0)+1|0;k[o>>2]=e}m=b&255;if((e|0)!=(k[p>>2]|0)){i[e>>0]=m;k[o>>2]=(k[o>>2]|0)+1;return}l=k[a>>2]|0;j=l;d=e-j+1|0;if((d|0)<0)yf(a);h=l;c=e-h|0;if(c>>>0<1073741823){e=c<<1;e=e>>>0<d>>>0?d:e;f=k[o>>2]|0;d=f-h|0;if(!e){g=0;c=0;e=f}else q=81}else{d=k[o>>2]|0;e=2147483647;f=d;d=d-h|0;q=81}if((q|0)==81){g=e;c=Af(e)|0;e=f}i[c+d>>0]=m;m=e-h|0;b=c+(d-m)|0;Kg(b|0,l|0,m|0)|0;k[a>>2]=b;k[o>>2]=c+(d+1);k[p>>2]=c+g;if(!j)return;Df(j);return}function nc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0;h=r;r=r+16|0;d=h;k[d>>2]=0;g=d+4|0;k[g>>2]=0;k[d+8>>2]=0;mc(d,a);a=k[d>>2]|0;d=k[g>>2]|0;e=(a|0)==(d|0);if(!e){f=a;do{l=i[f>>0]|0;j=k[b>>2]|0;k[b>>2]=j+1;i[c+j>>0]=l;f=f+1|0}while((f|0)!=(d|0));}if(!a){r=h;return}if(!e)k[g>>2]=a;Df(a);r=h;return}function oc(a){a=a|0;var b=0;if(a>>>0>127){b=1;while(1){b=b+1|0;if(a>>>0>16383)a=a>>>7;else{a=b;break}}}else a=1;return a|0}function pc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;if(a>>>0>127){e=a;d=1;while(1){d=d+1|0;if(e>>>0>16383)e=e>>>7;else break}if(!d)return}else d=1;e=d+-1|0;f=0;do{h=a>>>(((d-f|0)*7|0)+-7|0);g=k[b>>2]|0;k[b>>2]=g+1;i[c+g>>0]=f>>>0<e>>>0?h|128:h&127;f=f+1|0}while((f|0)!=(d|0));return}function qc(a,b){a=a|0;b=b|0;var c=0,d=0;if(!b){c=0;return c|0}else{c=0;d=0}do{c=((l[a+(d|1)>>0]|0)<<16|(l[a+d>>0]|0)<<24|(l[a+(d|2)>>0]|0)<<8|(l[a+(d|3)>>0]|0))+c|0;d=d+4|0}while(d>>>0<b>>>0);return c|0}function rc(a,b){a=a|0;b=b|0;var c=0;c=(a|0)==131072?12:0;if(!((a|0)==65536|(a|0)==131072))return c|0;c=(b<<2)+12+c|0;return c|0}function sc(a,b){a=a|0;b=b|0;var c=0,d=0;c=r;r=r+16|0;d=c;Ag(d,315144,0);a=i[d>>0]|0;a=b+1024+((a&1)==0?(a&255)>>>1:k[d+4>>2]|0)|0;Bg(d);r=c;return a|0}function tc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=r;r=r+16|0;f=e;Ag(f,315144,0);a=uc(a,b,c,d,f)|0;Bg(f);r=e;return a|0}function uc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0;ja=r;r=r+224|0;Z=ja+204|0;aa=ja+24|0;_=ja+16|0;P=ja+8|0;K=ja+200|0;I=ja+180|0;J=ja;ia=ja+152|0;fa=ja+140|0;ea=ja+128|0;da=ja+116|0;ca=ja+104|0;ba=ja+92|0;G=ja+80|0;H=ja+48|0;O=ja+36|0;$=ja+32|0;k[ia+8>>2]=0;k[ia+12>>2]=0;ha=ia+8|0;k[ia+4>>2]=ha;T=ia+16|0;k[T>>2]=0;ga=ia+20|0;k[ga>>2]=0;k[ia+24>>2]=0;do if(Nb(a,b,ia)|0)if(fc(ia)|0){a=k[T>>2]|0;b=k[ga>>2]|0;if((a|0)!=(b|0)){do{if(!(hc(a)|0)){L=7;break}a=a+20|0}while((a|0)!=(b|0));if((L|0)==7){cb(368,28,1,k[w>>2]|0)|0;a=0;break}a=k[T>>2]|0;o=k[ga>>2]|0;if((a|0)!=(o|0)){b=0;do{g=k[a+8>>2]|0;n=a+12|0;if((g|0)==(n|0))g=0;else{f=g;g=0;do{h=f+20|0;do if(!(Ob(h)|0)){h=k[h>>2]|0;if((h&-2139062144|0)==0?(Ib(a,h^-2139062144)|0)!=0:0)break;g=(k[f+32>>2]|0)+g|0}while(0);h=k[f+4>>2]|0;if(!h)while(1){h=k[f+8>>2]|0;if((k[h>>2]|0)==(f|0)){f=h;break}else f=h}else{f=h;while(1){h=k[f>>2]|0;if(!h)break;else f=h}}}while((f|0)!=(n|0));}b=g+b|0;a=a+20|0}while((a|0)!=(o|0));}else b=0}else b=0;q=~~(+(b>>>0)*1.2+10240.0)>>>0;k[fa>>2]=0;Y=fa+4|0;k[Y>>2]=0;k[fa+8>>2]=0;if(q){if((q|0)<0)yf(fa);g=Af(q)|0;k[Y>>2]=g;k[fa>>2]=g;k[fa+8>>2]=g+q;a=q;do{i[g>>0]=0;g=(k[Y>>2]|0)+1|0;k[Y>>2]=g;a=a+-1|0}while((a|0)!=0);}k[ea>>2]=0;X=ea+4|0;k[X>>2]=0;k[ea+8>>2]=0;if(b){if((b|0)<0)yf(ea);g=Af(b)|0;k[X>>2]=g;k[ea>>2]=g;k[ea+8>>2]=g+b;a=b;do{i[g>>0]=0;g=(k[X>>2]|0)+1|0;k[X>>2]=g;a=a+-1|0}while((a|0)!=0);}a=k[T>>2]|0;p=k[ga>>2]|0;if((a|0)!=(p|0)){g=0;do{h=k[a+8>>2]|0;o=a+12|0;if((h|0)!=(o|0))do{f=h+20|0;n=Ib(a,k[f>>2]^-2139062144)|0;if(!(Ob(f)|0)?(k[f>>2]&-2139062144|0)==0:0){V=(n|0)==0?f:n;W=k[V+12>>2]|0;Kg((k[ea>>2]|0)+g|0,k[V+16>>2]|0,W|0)|0;g=W+g|0}f=k[h+4>>2]|0;if(!f)while(1){f=k[h+8>>2]|0;if((k[f>>2]|0)==(h|0)){h=f;break}else h=f}else{h=f;while(1){f=k[h>>2]|0;if(!f)break;else h=f}}}while((h|0)!=(o|0));a=a+20|0}while((a|0)!=(p|0));}V=k[ea>>2]|0;W=k[fa>>2]|0;k[K>>2]=q;k[I>>2]=1;k[I+4>>2]=11;k[I+8>>2]=22;k[I+12>>2]=0;i[I+16>>0]=1;i[I+17>>0]=0;i[I+18>>0]=0;i[I+19>>0]=1;k[Z>>2]=k[I>>2];k[Z+4>>2]=k[I+4>>2];k[Z+8>>2]=k[I+8>>2];k[Z+12>>2]=k[I+12>>2];k[Z+16>>2]=k[I+16>>2];if(we(Z,b,V,K,W)|0){M=k[K>>2]|0;h=i[e>>0]|0;N=e+4|0;a=k[N>>2]|0;n=~~(+(((h&1)==0?(h&255)>>>1:a)>>>0)*1.2+10240.0)>>>0;k[da>>2]=0;W=da+4|0;k[W>>2]=0;k[da+8>>2]=0;if(n){if((n|0)<0)yf(da);a=Af(n)|0;k[W>>2]=a;k[da>>2]=a;k[da+8>>2]=a+n;h=n;do{i[a>>0]=0;a=(k[W>>2]|0)+1|0;k[W>>2]=a;h=h+-1|0}while((h|0)!=0);h=i[e>>0]|0;a=k[N>>2]|0}b=(h&1)==0;h=b?(h&255)>>>1:a;do if(h){U=b?e+1|0:k[e+8>>2]|0;V=k[da>>2]|0;k[K>>2]=n;k[I>>2]=0;k[I+4>>2]=11;k[I+8>>2]=22;k[I+12>>2]=0;i[I+16>>0]=1;i[I+17>>0]=0;i[I+18>>0]=0;i[I+19>>0]=1;k[Z>>2]=k[I>>2];k[Z+4>>2]=k[I+4>>2];k[Z+8>>2]=k[I+8>>2];k[Z+12>>2]=k[I+12>>2];k[Z+16>>2]=k[I+16>>2];if(!(we(Z,h,U,K,V)|0)){cb(440,41,1,k[w>>2]|0)|0;a=0;break}else{S=k[K>>2]|0;L=55;break}}else{S=0;L=55}while(0);if((L|0)==55){k[ca>>2]=0;V=ca+4|0;k[V>>2]=0;k[ca+8>>2]=0;Q=ba+4|0;k[Q>>2]=0;R=ba+8|0;k[R>>2]=0;U=ba+4|0;k[ba>>2]=U;o=k[T>>2]|0;x=k[ga>>2]|0;y=U;a:do if((o|0)!=(x|0)){z=G+4|0;A=H+4|0;B=H+12|0;C=H+16|0;D=H+24|0;E=H+28|0;F=ca+8|0;b:while(1){Jb(G,o);p=k[G>>2]|0;u=k[z>>2]|0;if((p|0)==(u|0))n=10;else{v=o+12|0;c:while(1){q=k[p>>2]|0;n=k[v>>2]|0;if(!n){L=68;break b}while(1){h=k[n+16>>2]|0;if(q>>>0<h>>>0){n=k[n>>2]|0;if(!n){L=68;break b}}else{if(h>>>0>=q>>>0)break;n=k[n+4>>2]|0;if(!n){L=68;break b}}}if(!n){L=68;break b}s=n+20|0;do if(!(Ob(s)|0)){t=n+28|0;q=k[U>>2]|0;g=(q|0)==0;do if(!g){b=k[t>>2]|0;h=U;a=q;d:do{while(1){if((k[a+16>>2]|0)>>>0>=b>>>0){h=a;break}a=k[a+4>>2]|0;if(!a)break d}a=k[h>>2]|0}while((a|0)!=0);if((h|0)==(U|0))break;if(b>>>0>=(k[h+16>>2]|0)>>>0){n=1;break c}}while(0);f=((k[V>>2]|0)-(k[ca>>2]|0)|0)>>>5;do if(!g){b=k[t>>2]|0;while(1){h=k[q+16>>2]|0;if(b>>>0<h>>>0){h=k[q>>2]|0;if(!h){h=q;L=82;break}else q=h}else{if(h>>>0>=b>>>0){L=88;break}h=q+4|0;a=k[h>>2]|0;if(!a){L=86;break}else q=a}}if((L|0)==82){k[Z>>2]=q;a=h;h=q;L=89;break}else if((L|0)==86){k[Z>>2]=q;a=h;h=q;L=89;break}else if((L|0)==88){L=0;k[Z>>2]=q;if(!q){a=Z;h=q;L=89;break}else break}}else{k[Z>>2]=U;a=U;h=y;L=89}while(0);if((L|0)==89){L=0;q=Af(24)|0;k[q+16>>2]=k[t>>2];j[q+20>>1]=0;k[q>>2]=0;k[q+4>>2]=0;k[q+8>>2]=h;k[a>>2]=q;h=k[k[ba>>2]>>2]|0;if(!h)h=q;else{k[ba>>2]=h;h=k[a>>2]|0}Tb(k[Q>>2]|0,h);k[R>>2]=(k[R>>2]|0)+1}j[q+20>>1]=f;s=k[s>>2]|0;k[H>>2]=s;k[A>>2]=0;n=k[n+32>>2]|0;k[B>>2]=n;k[C>>2]=n;n=Ib(o,s^-2139062144)|0;if(!n)h=16;else{k[A>>2]=32;k[C>>2]=k[n+12>>2];h=48}n=k[V>>2]|0;if((k[ca>>2]|0)==(n|0)){k[D>>2]=M;k[E>>2]=k[fa>>2]}else{k[D>>2]=0;k[E>>2]=0;k[A>>2]=h}if((n|0)==(k[F>>2]|0)){wc(ca,H);break}else{k[n>>2]=k[H>>2];k[n+4>>2]=k[H+4>>2];k[n+8>>2]=k[H+8>>2];k[n+12>>2]=k[H+12>>2];k[n+16>>2]=k[H+16>>2];k[n+20>>2]=k[H+20>>2];k[n+24>>2]=k[H+24>>2];k[n+28>>2]=k[H+28>>2];k[V>>2]=n+32;break}}while(0);p=p+4|0;if((p|0)==(u|0)){n=10;break}}p=k[G>>2]|0}h=p;if(p){a=k[z>>2]|0;if((a|0)!=(p|0))k[z>>2]=a+(~((a+-4-h|0)>>>2)<<2);Df(p);}o=o+20|0;if((n|0)!=10){a=0;break a}if((o|0)==(x|0)){L=107;break}}if((L|0)==68){$=Ca(8)|0;vg($,488);k[$>>2]=317760;ab($|0,317800,7);}else if((L|0)==107){H=U;n=k[ba>>2]|0;L=108;break}}else{H=U;n=U;L=108}while(0);e:do if((L|0)==108){F=O+4|0;k[F>>2]=0;E=O+8|0;k[E>>2]=0;D=O+4|0;k[O>>2]=D;if((n|0)!=(H|0)){q=D;a=n;h=n;while(1){b=a+16|0;a=k[b>>2]|0;b=k[b+4>>2]|0;g=J;k[g>>2]=a;k[g+4>>2]=b;k[I>>2]=q;k[Z>>2]=k[I>>2];g=xc(O,Z,K,J)|0;if(!(k[g>>2]|0)){n=Af(24)|0;L=n+16|0;k[L>>2]=a;k[L+4>>2]=b;a=k[K>>2]|0;k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=a;k[g>>2]=n;a=k[k[O>>2]>>2]|0;if(a){k[O>>2]=a;n=k[g>>2]|0}Tb(k[F>>2]|0,n);k[E>>2]=(k[E>>2]|0)+1}n=k[h+4>>2]|0;if(!n)while(1){n=k[h+8>>2]|0;if((k[n>>2]|0)==(h|0))break;else h=n}else while(1){h=k[n>>2]|0;if(!h)break;else n=h}if((n|0)==(U|0))break;else{a=n;h=n}}}h=k[ca>>2]|0;g=k[V>>2]|0;if((h|0)==(g|0))h=48;else{b=h;h=48;do{a=k[b>>2]|0;n=0;while(1){if((k[72+(n<<2)>>2]|0)==(a|0))break;n=n+1|0;if((n|0)>=63){n=63;break}}L=oc(k[b+12>>2]|0)|0;n=((n&63|0)!=63?1:5)+L|0;if(k[b+4>>2]&32)n=(oc(k[b+16>>2]|0)|0)+n|0;h=n+h|0;b=b+32|0}while((b|0)!=(g|0));}a=((k[ga>>2]|0)-(k[T>>2]|0)|0)/20|0;if(a>>>0>1){h=h+4+(lc(a&65535)|0)|0;s=k[ga>>2]|0;n=k[T>>2]|0;h=h+(((s-n|0)/20|0)<<2)|0;if((n|0)!=(s|0)){t=D;do{h=(lc(k[n+16>>2]&65535)|0)+h|0;a=k[n+8>>2]|0;f=n+12|0;if((a|0)!=(f|0))do{if(!(k[a+20>>2]&-2139062144)){q=a+28|0;b=k[D>>2]|0;do if(b){p=k[q>>2]|0;while(1){g=k[b+16>>2]|0;if(p>>>0<g>>>0){g=k[b>>2]|0;if(!g){g=b;L=135;break}else b=g}else{if(g>>>0>=p>>>0){L=141;break}g=b+4|0;o=k[g>>2]|0;if(!o){L=139;break}else b=o}}if((L|0)==135){k[Z>>2]=b;L=142;break}else if((L|0)==139){k[Z>>2]=b;L=142;break}else if((L|0)==141){L=0;k[Z>>2]=b;if(!b){g=Z;L=142;break}else break}}else{k[Z>>2]=D;g=D;b=t;L=142}while(0);if((L|0)==142){o=Af(24)|0;k[o+16>>2]=k[q>>2];j[o+20>>1]=0;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=b;k[g>>2]=o;b=k[k[O>>2]>>2]|0;if(!b)b=o;else{k[O>>2]=b;b=k[g>>2]|0}Tb(k[F>>2]|0,b);k[E>>2]=(k[E>>2]|0)+1;b=o}h=(lc(j[b+20>>1]|0)|0)+h|0}b=k[a+4>>2]|0;if(!b)while(1){b=k[a+8>>2]|0;if((k[b>>2]|0)==(a|0)){a=b;break}else a=b}else{a=b;while(1){b=k[a>>2]|0;if(!b)break;else a=b}}}while((a|0)!=(f|0));n=n+20|0}while((n|0)!=(s|0));}}a=k[ca>>2]|0;n=k[V>>2]|0;if((a|0)==(n|0))t=h;else{do{h=(k[a+24>>2]|0)+h|0;h=h>>>0>4294967292?h:h+3&-4;a=a+32|0}while((a|0)!=(n|0));t=h}n=t+S|0;yc(O,k[D>>2]|0);h=k[d>>2]|0;if(n>>>0>h>>>0){a=k[w>>2]|0;k[P>>2]=h;k[P+4>>2]=n;eb(a|0,512,P|0)|0;a=0;break}k[d>>2]=n;q=k[T>>2]|0;i[c>>0]=119;i[c+1>>0]=79;i[c+2>>0]=70;k[$>>2]=4;i[c+3>>0]=50;h=(k[ga>>2]|0)-q|0;a=(h|0)==20;if(a){P=k[q>>2]|0;i[c+4>>0]=P>>>24;i[c+5>>0]=P>>>16;i[c+6>>0]=P>>>8;k[$>>2]=8;i[c+7>>0]=P}else{i[c+4>>0]=116;i[c+5>>0]=116;i[c+6>>0]=99;k[$>>2]=8;i[c+7>>0]=102}i[c+8>>0]=n>>>24;i[c+9>>0]=n>>>16;i[c+10>>0]=n>>>8;i[c+11>>0]=n;P=(k[V>>2]|0)-(k[ca>>2]|0)>>5;i[c+12>>0]=P>>>8;i[c+13>>0]=P;i[c+14>>0]=0;k[$>>2]=16;i[c+15>>0]=0;do if(a){a=(m[q+4>>1]|0)<<4|12;h=k[q+8>>2]|0;n=q+12|0;if((h|0)==(n|0))break;do{b=h+20|0;do if(!(k[b>>2]&-2139062144)){if(Ob(b)|0)break;P=k[h+32>>2]|0;a=(P>>>0>4294967292?P:P+3&-4)+a|0}while(0);b=k[h+4>>2]|0;if(!b)while(1){b=k[h+8>>2]|0;if((k[b>>2]|0)==(h|0)){h=b;break}else h=b}else{h=b;while(1){b=k[h>>2]|0;if(!b)break;else h=b}}}while((h|0)!=(n|0));}else{a=rc(k[ia>>2]|0,(h|0)/20|0)|0;h=k[T>>2]|0;p=k[ga>>2]|0;if((h|0)==(p|0))break;do{b=(m[h+4>>1]|0)<<4|12;g=k[h+8>>2]|0;o=h+12|0;if((g|0)!=(o|0))do{n=g+20|0;do if(!(k[n>>2]&-2139062144)){if(Ob(n)|0)break;P=k[g+32>>2]|0;b=(P>>>0>4294967292?P:P+3&-4)+b|0}while(0);n=k[g+4>>2]|0;if(!n)while(1){n=k[g+8>>2]|0;if((k[n>>2]|0)==(g|0)){g=n;break}else g=n}else{g=n;while(1){n=k[g>>2]|0;if(!n)break;else g=n}}}while((g|0)!=(o|0));a=b+a|0;h=h+20|0}while((h|0)!=(p|0));}while(0);P=k[$>>2]|0;i[c+P>>0]=a>>>24;i[c+(P+1)>>0]=a>>>16;i[c+(P+2)>>0]=a>>>8;i[c+(P+3)>>0]=a;i[c+(P+4)>>0]=M>>>24;i[c+(P+5)>>0]=M>>>16;i[c+(P+6)>>0]=M>>>8;k[$>>2]=P+8;i[c+(P+7)>>0]=M;P=(Ib(q,1751474532)|0)+16|0;P=(k[P>>2]|0)+4|0;a=k[$>>2]|0;b=c+a|0;P=l[P>>0]|l[P+1>>0]<<8|l[P+2>>0]<<16|l[P+3>>0]<<24;i[b>>0]=P;i[b+1>>0]=P>>8;i[b+2>>0]=P>>16;i[b+3>>0]=P>>24;b=a+4|0;k[$>>2]=b;if(!S){i[c+b>>0]=0;i[c+(a+5)>>0]=0;i[c+(a+6)>>0]=0;i[c+(a+7)>>0]=0;i[c+(a+8)>>0]=0;i[c+(a+9)>>0]=0;i[c+(a+10)>>0]=0;i[c+(a+11)>>0]=0;i[c+(a+12)>>0]=0;i[c+(a+13)>>0]=0;i[c+(a+14)>>0]=0;e=a+16|0;k[$>>2]=e;i[c+(a+15)>>0]=0;a=e}else{i[c+b>>0]=t>>>24;i[c+(a+5)>>0]=t>>>16;i[c+(a+6)>>0]=t>>>8;i[c+(a+7)>>0]=t;i[c+(a+8)>>0]=S>>>24;i[c+(a+9)>>0]=S>>>16;i[c+(a+10)>>0]=S>>>8;i[c+(a+11)>>0]=S;P=i[e>>0]|0;P=(P&1)==0?(P&255)>>>1:k[N>>2]|0;i[c+(a+12)>>0]=P>>>24;i[c+(a+13)>>0]=P>>>16;i[c+(a+14)>>0]=P>>>8;e=a+16|0;k[$>>2]=e;i[c+(a+15)>>0]=P;a=e}i[c+a>>0]=0;i[c+(a+1)>>0]=0;i[c+(a+2)>>0]=0;i[c+(a+3)>>0]=0;i[c+(a+4)>>0]=0;i[c+(a+5)>>0]=0;i[c+(a+6)>>0]=0;k[$>>2]=a+8;i[c+(a+7)>>0]=0;a=k[ca>>2]|0;h=k[V>>2]|0;if((a|0)!=(h|0))do{b=k[a>>2]|0;g=0;while(1){if((k[72+(g<<2)>>2]|0)==(b|0))break;g=g+1|0;if((g|0)>=63){g=63;break}}b=k[$>>2]|0;f=b+1|0;k[$>>2]=f;i[c+b>>0]=g;if((g&63|0)==63){e=k[a>>2]|0;i[c+f>>0]=e>>>24;i[c+(b+2)>>0]=e>>>16;i[c+(b+3)>>0]=e>>>8;k[$>>2]=b+5;i[c+(b+4)>>0]=e}pc(k[a+12>>2]|0,$,c);if(k[a+4>>2]&32)pc(k[a+16>>2]|0,$,c);a=a+32|0}while((a|0)!=(h|0));a=((k[ga>>2]|0)-(k[T>>2]|0)|0)/20|0;f:do if(a>>>0>1){e=k[ia>>2]|0;p=k[$>>2]|0;i[c+p>>0]=e>>>24;i[c+(p+1)>>0]=e>>>16;i[c+(p+2)>>0]=e>>>8;k[$>>2]=p+4;i[c+(p+3)>>0]=e;nc(a,$,c);a=k[T>>2]|0;p=k[ga>>2]|0;if((a|0)==(p|0))break;t=a;g:while(1){n=t+8|0;a=k[n>>2]|0;o=t+12|0;if((a|0)==(o|0))a=0;else{b=0;do{b=((k[a+20>>2]&-2139062144|0)==0&1)+b<<16>>16;g=k[a+4>>2]|0;if(!g){g=a;while(1){a=k[g+8>>2]|0;if((k[a>>2]|0)==(g|0))break;else g=a}}else{a=g;while(1){g=k[a>>2]|0;if(!g)break;else a=g}}}while((a|0)!=(o|0));a=b}nc(a&65535,$,c);T=k[t>>2]|0;a=k[$>>2]|0;i[c+a>>0]=T>>>24;i[c+(a+1)>>0]=T>>>16;i[c+(a+2)>>0]=T>>>8;k[$>>2]=a+4;i[c+(a+3)>>0]=T;a=k[n>>2]|0;if((a|0)!=(o|0)){b=a;while(1){a=b+20|0;if(!(k[a>>2]&-2139062144)){a=Ob(a)|0;a=k[(a?(k[b+52>>2]|0)+8|0:b+28|0)>>2]|0;h=k[U>>2]|0;if(!h)break g;else{g=H;f=h}h:do{while(1){if((k[f+16>>2]|0)>>>0>=a>>>0){g=f;break}f=k[f+4>>2]|0;if(!f)break h}f=k[g>>2]|0}while((f|0)!=0);if((g|0)==(H|0))break g;if(a>>>0<(k[g+16>>2]|0)>>>0)break g;n=h;while(1){g=k[n+16>>2]|0;if(a>>>0<g>>>0){g=k[n>>2]|0;if(!g){h=n;g=n;L=218;break}}else{if(g>>>0>=a>>>0){g=n;L=223;break}h=n+4|0;g=k[h>>2]|0;if(!g){g=n;L=222;break}}n=g}if((L|0)==218){k[Z>>2]=g;L=224}else if((L|0)==222){k[Z>>2]=g;L=224}else if((L|0)==223){L=0;k[Z>>2]=g;if(!g){h=Z;L=224}else a=g}if((L|0)==224){f=Af(24)|0;k[f+16>>2]=a;j[f+20>>1]=0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=g;k[h>>2]=f;a=k[k[ba>>2]>>2]|0;if(!a)a=f;else{k[ba>>2]=a;a=k[h>>2]|0}Tb(k[Q>>2]|0,a);k[R>>2]=(k[R>>2]|0)+1;a=f}nc(m[a+20>>1]|0,$,c);}a=k[b+4>>2]|0;if(!a)while(1){a=k[b+8>>2]|0;if((k[a>>2]|0)==(b|0))break;else b=a}else while(1){b=k[a>>2]|0;if(!b)break;else a=b}if((a|0)==(o|0))break;else b=a}}t=t+20|0;if((t|0)==(p|0))break f}$=k[w>>2]|0;k[_>>2]=a;eb($|0,568,_|0)|0;a=0;break e}while(0);a=k[ca>>2]|0;g=k[V>>2]|0;if((a|0)==(g|0))a=k[$>>2]|0;else{b=a;do{a=k[b+24>>2]|0;_=k[$>>2]|0;Kg(c+_|0,k[b+28>>2]|0,a|0)|0;a=_+a|0;a=a>>>0>4294967292?a:a+3&-4;k[$>>2]=a;b=b+32|0}while((b|0)!=(g|0));}Kg(c+a|0,k[da>>2]|0,S|0)|0;b=a+S|0;k[$>>2]=b;a=k[d>>2]|0;if((a|0)==(b|0)){a=1;break}$=k[w>>2]|0;k[aa>>2]=a;k[aa+4>>2]=b;eb($|0,608,aa|0)|0;a=0}while(0);yc(ba,k[U>>2]|0);b=k[ca>>2]|0;g=b;if(b){f=k[V>>2]|0;if((f|0)!=(b|0))k[V>>2]=f+(~((f+-32-g|0)>>>5)<<5);Df(b);}}b=k[da>>2]|0;if(b){if((k[W>>2]|0)!=(b|0))k[W>>2]=b;Df(b);}}else{cb(400,38,1,k[w>>2]|0)|0;a=0}g=k[ea>>2]|0;if(g){if((k[X>>2]|0)!=(g|0))k[X>>2]=g;Df(g);}f=k[fa>>2]|0;if(f){if((k[Y>>2]|0)!=(f|0))k[Y>>2]=f;Df(f);}}else a=0;else{cb(328,34,1,k[w>>2]|0)|0;a=0}while(0);b=ia+16|0;f=k[b>>2]|0;if(!f){c=ia+4|0;$=k[ha>>2]|0;Yb(c,$);r=ja;return a|0}g=k[ga>>2]|0;if((g|0)!=(f|0)){do{k[ga>>2]=g+-20;Xb(g+-12|0,k[g+-8>>2]|0);g=k[ga>>2]|0}while((g|0)!=(f|0));f=k[b>>2]|0}Df(f);c=ia+4|0;$=k[ha>>2]|0;Yb(c,$);r=ja;return a|0}function vc(a){a=a|0;Ka(a|0)|0;Jf();}function wc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;g=a+4|0;h=k[a>>2]|0;i=h;d=((k[g>>2]|0)-i>>5)+1|0;if(d>>>0>134217727)yf(a);j=a+8|0;e=h;c=(k[j>>2]|0)-e|0;if(c>>5>>>0<67108863){c=c>>4;d=c>>>0<d>>>0?d:c;e=(k[g>>2]|0)-e|0;c=e>>5;if(!d){f=0;d=0}else l=6}else{e=(k[g>>2]|0)-e|0;d=134217727;c=e>>5;l=6}if((l|0)==6){f=d;d=Af(d<<5)|0}l=d+(c<<5)|0;k[l>>2]=k[b>>2];k[l+4>>2]=k[b+4>>2];k[l+8>>2]=k[b+8>>2];k[l+12>>2]=k[b+12>>2];k[l+16>>2]=k[b+16>>2];k[l+20>>2]=k[b+20>>2];k[l+24>>2]=k[b+24>>2];k[l+28>>2]=k[b+28>>2];Kg(d|0,h|0,e|0)|0;k[a>>2]=d;k[g>>2]=d+(c+1<<5);k[j>>2]=d+(f<<5);if(!i)return;Df(i);return}function xc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=a+4|0;h=k[b>>2]|0;e=h;if((h|0)!=(i|0)?(g=k[d>>2]|0,f=k[h+16>>2]|0,g>>>0>=f>>>0):0){if(f>>>0>=g>>>0){k[c>>2]=e;e=c;return e|0}a=h+4|0;b=k[a>>2]|0;f=(b|0)==0;if(f){e=h;while(1){b=k[e+8>>2]|0;if((k[b>>2]|0)==(e|0))break;else e=b}}else while(1){e=k[b>>2]|0;if(!e)break;else b=e}if((b|0)!=(i|0)?g>>>0>=(k[b+16>>2]|0)>>>0:0){e=k[i>>2]|0;if(!e){k[c>>2]=i;e=i;return e|0}else f=e;while(1){e=k[f+16>>2]|0;if(g>>>0<e>>>0){e=k[f>>2]|0;if(!e){b=f;e=f;d=33;break}}else{if(e>>>0>=g>>>0){e=f;d=38;break}b=f+4|0;e=k[b>>2]|0;if(!e){e=f;d=37;break}}f=e}if((d|0)==33){k[c>>2]=e;e=b;return e|0}else if((d|0)==37){k[c>>2]=e;e=b;return e|0}else if((d|0)==38){k[c>>2]=e;e=c;return e|0}}if(f){k[c>>2]=h;e=a;return e|0}else{k[c>>2]=b;e=b;return e|0}}if((h|0)!=(k[a>>2]|0)){e=k[h>>2]|0;if(!e){b=h;while(1){e=k[b+8>>2]|0;if((k[e>>2]|0)==(b|0))b=e;else break}}else while(1){b=k[e+4>>2]|0;if(!b)break;else e=b}a=k[d>>2]|0;if((k[e+16>>2]|0)>>>0>=a>>>0){e=k[i>>2]|0;if(!e){k[c>>2]=i;e=i;return e|0}else f=e;while(1){e=k[f+16>>2]|0;if(a>>>0<e>>>0){e=k[f>>2]|0;if(!e){b=f;e=f;d=14;break}}else{if(e>>>0>=a>>>0){e=f;d=19;break}b=f+4|0;e=k[b>>2]|0;if(!e){e=f;d=18;break}}f=e}if((d|0)==14){k[c>>2]=e;e=b;return e|0}else if((d|0)==18){k[c>>2]=e;e=b;return e|0}else if((d|0)==19){k[c>>2]=e;e=c;return e|0}}}if(!(k[h>>2]|0)){k[c>>2]=h;e=h;return e|0}else{k[c>>2]=e;e=e+4|0;return e|0}return 0}function yc(a,b){a=a|0;b=b|0;if(!b)return;else{yc(a,k[b>>2]|0);yc(a,k[b+4>>2]|0);Df(b);return}}function zc(a,b,c,d,e,f,g,h,i,j,l,m,n,o,p){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;j=j|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;do switch(l|0){case 6:{Fc(a,b,c,d,e,f,g,h,i,k[j+20>>2]|0,m,n,o,p);return}case 9:{Ic(a,b,c,d,e,f,g,h,i,k[j+32>>2]|0,m,n,o,p);return}case 3:{Cc(a,b,c,d,e,f,g,h,i,k[j+8>>2]|0,m,n,o,p);return}case 4:{Dc(a,b,c,d,e,f,g,h,i,k[j+12>>2]|0,m,n,o,p);return}case 7:{Gc(a,b,c,d,e,f,g,h,i,k[j+24>>2]|0,m,n,o,p);return}case 8:{Hc(a,b,c,d,e,f,g,h,i,k[j+28>>2]|0,m,n,o,p);return}case 2:{Bc(a,b,c,d,e,f,g,h,i,k[j+4>>2]|0,m,n,o,p);return}case 1:{Ac(a,b,c,d,e,f,g,h,i,k[j>>2]|0,m,n,o,p);return}case 5:{Ec(a,b,c,d,e,f,g,h,i,k[j+16>>2]|0,m,n,o,p);return}default:return}while(0);}function Ac(a,b,c,d,e,f,g,h,i,j,m,n,o,q){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;j=j|0;m=m|0;n=n|0;o=o|0;q=q|0;var s=0,t=0,u=0.0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;W=r;r=r+80|0;P=W+68|0;R=W+64|0;N=W+60|0;T=W+40|0;Q=W+56|0;S=W+52|0;O=W+48|0;U=W+32|0;V=W;if(a>>>0>2&b>>>0>2){K=b+-3|0;L=c+(K&d)|0;L=j+((ia(l[L>>0]|l[L+1>>0]<<8|l[L+2>>0]<<16|l[L+3>>0]<<24,506832829)|0)>>>16<<2)|0;k[L>>2]=K;L=b+-2|0;K=c+(L&d)|0;K=j+((ia(l[K>>0]|l[K+1>>0]<<8|l[K+2>>0]<<16|l[K+3>>0]<<24,506832829)|0)>>>16<<2)|0;k[K>>2]=L;K=b+-1|0;L=c+(K&d)|0;L=j+((ia(l[L>>0]|l[L+1>>0]<<8|l[L+2>>0]<<16|l[L+3>>0]<<24,506832829)|0)>>>16<<2)|0;k[L>>2]=K}s=k[n>>2]|0;t=d&b;D=b-t|0;E=t+a|0;F=(i|0)<9?64:512;if((t+3|0)>>>0>=E>>>0){K=o;L=a;J=s;L=J+L|0;k[n>>2]=L;L=o;L=K-L|0;L=L>>5;K=k[q>>2]|0;L=K+L|0;k[q>>2]=L;r=W;return}G=F<<2;H=E+-4|0;I=E+-3|0;J=(i|0)<4;K=m+4|0;L=m+8|0;M=m+12|0;C=(i|0)>1;B=o;A=F+t|0;a:while(1){z=A+G|0;while(1){b=t+D|0;k[P>>2]=0;k[R>>2]=0;k[N>>2]=0;p[T>>3]=h;if(Tc(j,c,d,e,f,5.4,m,b,a,b>>>0>g>>>0?g:b,P,R,N,T)|0){b=t;break}s=s+1|0;i=c+t|0;i=j+((ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>16<<2)|0;k[i>>2]=b;b=t+1|0;do if(b>>>0>A>>>0)if(b>>>0>z>>>0){t=t+17|0;t=H>>>0<t>>>0?H:t;if(b>>>0>=t>>>0)break;do{i=c+b|0;i=j+((ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>16<<2)|0;k[i>>2]=b+D;s=s+4|0;b=b+4|0}while(b>>>0<t>>>0);}else{t=t+9|0;t=I>>>0<t>>>0?I:t;if(b>>>0>=t>>>0)break;do{i=c+b|0;i=j+((ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>16<<2)|0;k[i>>2]=b+D;s=s+2|0;b=b+2|0}while(b>>>0<t>>>0);}while(0);a=E-b|0;if((b+3|0)>>>0<E>>>0)t=b;else{b=B;i=36;break a}}b:do if(J){t=0;while(1){a=a+-1|0;v=(k[P>>2]|0)+-1|0;k[Q>>2]=(a|0)<(v|0)?a:v;k[S>>2]=0;k[O>>2]=0;p[U>>3]=h;v=b+D|0;A=v+1|0;i=c+b|0;i=j+((ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>16<<2)|0;k[i>>2]=v;if(!(Tc(j,c,d,e,f,5.4,m,A,a,A>>>0>g>>>0?g:A,Q,S,O,U)|0)){z=b;break b}u=+p[U>>3];if(!(u>=+p[T>>3]+7.0)){z=b;break b}b=b+1|0;s=s+1|0;k[P>>2]=k[Q>>2];k[R>>2]=k[S>>2];k[N>>2]=k[O>>2];p[T>>3]=u;t=t+1|0;if((t|0)>=4){z=b;break}}}else{t=0;while(1){a=a+-1|0;k[Q>>2]=0;k[S>>2]=0;k[O>>2]=0;p[U>>3]=h;v=b+D|0;A=v+1|0;i=c+b|0;i=j+((ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>16<<2)|0;k[i>>2]=v;if(!(Tc(j,c,d,e,f,5.4,m,A,a,A>>>0>g>>>0?g:A,Q,S,O,U)|0)){z=b;break b}u=+p[U>>3];if(!(u>=+p[T>>3]+7.0)){z=b;break b}b=b+1|0;s=s+1|0;k[P>>2]=k[Q>>2];k[R>>2]=k[S>>2];k[N>>2]=k[O>>2];p[T>>3]=u;t=t+1|0;if((t|0)>=4){z=b;break}}}while(0);y=k[P>>2]|0;A=z+F+(y<<1)|0;x=z+D|0;i=k[N>>2]|0;b=i+16|0;do if(i>>>0<=(x>>>0>g>>>0?g:x)>>>0){v=k[m>>2]|0;if((i|0)==(v|0))b=1;else{w=k[K>>2]|0;a=k[L>>2]|0;if((i|0)!=(w|0))if((i|0)!=(a|0))if((i|0)!=(k[M>>2]|0)){c:do if(C&(i|0)>5){t=4;while(1){if((i|0)==((k[800+(t<<2)>>2]|0)+(k[m+(k[736+(t<<2)>>2]<<2)>>2]|0)|0)?(i|0)>=(k[190016+(t<<2)>>2]|0):0)break;t=t+1|0;if((t|0)>=16)break c}b=t+1|0}while(0);if((b|0)>1)t=a;else break}else{t=a;b=4}else{t=i;b=3}else{t=a;b=2}k[M>>2]=t;k[L>>2]=w;k[K>>2]=v;k[m>>2]=i}}while(0);Kc(V,s,y,k[R>>2]|0,b);b=B+32|0;k[B>>2]=k[V>>2];k[B+4>>2]=k[V+4>>2];k[B+8>>2]=k[V+8>>2];k[B+12>>2]=k[V+12>>2];k[B+16>>2]=k[V+16>>2];k[B+20>>2]=k[V+20>>2];k[B+24>>2]=k[V+24>>2];if((y|0)>1){a=1;do{B=c+(a+z)|0;B=j+((ia(l[B>>0]|l[B+1>>0]<<8|l[B+2>>0]<<16|l[B+3>>0]<<24,506832829)|0)>>>16<<2)|0;k[B>>2]=a+x;a=a+1|0}while((a|0)<(y|0));}t=y+z|0;a=E-t|0;if((t+3|0)>>>0>=E>>>0){s=0;i=36;break}else{B=b;s=0}}if((i|0)==36){K=s+a|0;k[n>>2]=K;K=b;L=o;L=K-L|0;L=L>>5;K=k[q>>2]|0;L=K+L|0;k[q>>2]=L;r=W;return}}function Bc(a,b,c,d,e,f,g,h,i,j,m,n,o,q){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;j=j|0;m=m|0;n=n|0;o=o|0;q=q|0;var s=0,t=0,u=0.0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;W=r;r=r+80|0;P=W+68|0;R=W+64|0;N=W+60|0;T=W+40|0;Q=W+56|0;S=W+52|0;O=W+48|0;U=W+32|0;V=W;if(a>>>0>2&b>>>0>2){K=b+-3|0;L=c+(K&d)|0;L=j+(((ia(l[L>>0]|l[L+1>>0]<<8|l[L+2>>0]<<16|l[L+3>>0]<<24,506832829)|0)>>>15)+(K>>>3&3)<<2)|0;k[L>>2]=K;L=b+-2|0;K=c+(L&d)|0;K=j+(((ia(l[K>>0]|l[K+1>>0]<<8|l[K+2>>0]<<16|l[K+3>>0]<<24,506832829)|0)>>>15)+(L>>>3&3)<<2)|0;k[K>>2]=L;K=b+-1|0;L=c+(K&d)|0;L=j+(((ia(l[L>>0]|l[L+1>>0]<<8|l[L+2>>0]<<16|l[L+3>>0]<<24,506832829)|0)>>>15)+(K>>>3&3)<<2)|0;k[L>>2]=K}s=k[n>>2]|0;t=d&b;D=b-t|0;E=t+a|0;F=(i|0)<9?64:512;if((t+3|0)>>>0>=E>>>0){K=o;L=a;J=s;L=J+L|0;k[n>>2]=L;L=o;L=K-L|0;L=L>>5;K=k[q>>2]|0;L=K+L|0;k[q>>2]=L;r=W;return}G=F<<2;H=E+-4|0;I=E+-3|0;J=(i|0)<4;K=m+4|0;L=m+8|0;M=m+12|0;C=(i|0)>1;B=o;A=F+t|0;a:while(1){z=A+G|0;while(1){b=t+D|0;k[P>>2]=0;k[R>>2]=0;k[N>>2]=0;p[T>>3]=h;if(Sc(j,c,d,e,f,5.4,m,b,a,b>>>0>g>>>0?g:b,P,R,N,T)|0){i=0;break}s=s+1|0;i=c+t|0;i=j+(((ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>15)+(b>>>3&3)<<2)|0;k[i>>2]=b;b=t+1|0;do if(b>>>0>A>>>0)if(b>>>0>z>>>0){t=t+17|0;t=H>>>0<t>>>0?H:t;if(b>>>0>=t>>>0)break;do{i=c+b|0;a=b+D|0;i=j+(((ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>15)+(a>>>3&3)<<2)|0;k[i>>2]=a;s=s+4|0;b=b+4|0}while(b>>>0<t>>>0);}else{t=t+9|0;t=I>>>0<t>>>0?I:t;if(b>>>0>=t>>>0)break;do{i=c+b|0;a=b+D|0;i=j+(((ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>15)+(a>>>3&3)<<2)|0;k[i>>2]=a;s=s+2|0;b=b+2|0}while(b>>>0<t>>>0);}while(0);a=E-b|0;if((b+3|0)>>>0<E>>>0)t=b;else{b=B;i=34;break a}}while(1){a=a+-1|0;if(J){b=(k[P>>2]|0)+-1|0;b=(a|0)<(b|0)?a:b}else b=0;k[Q>>2]=b;k[S>>2]=0;k[O>>2]=0;p[U>>3]=h;v=t+D|0;A=v+1|0;b=c+t|0;b=j+(((ia(l[b>>0]|l[b+1>>0]<<8|l[b+2>>0]<<16|l[b+3>>0]<<24,506832829)|0)>>>15)+(v>>>3&3)<<2)|0;k[b>>2]=v;if(!(Sc(j,c,d,e,f,5.4,m,A,a,A>>>0>g>>>0?g:A,Q,S,O,U)|0))break;u=+p[U>>3];if(!(u>=+p[T>>3]+7.0))break;b=t+1|0;s=s+1|0;k[P>>2]=k[Q>>2];k[R>>2]=k[S>>2];k[N>>2]=k[O>>2];p[T>>3]=u;i=i+1|0;if((i|0)>=4){t=b;break}else t=b}y=k[P>>2]|0;A=t+F+(y<<1)|0;z=t+D|0;v=k[N>>2]|0;b=v+16|0;do if(v>>>0<=(z>>>0>g>>>0?g:z)>>>0){w=k[m>>2]|0;if((v|0)==(w|0))b=1;else{x=k[K>>2]|0;a=k[L>>2]|0;if((v|0)!=(x|0))if((v|0)!=(a|0))if((v|0)!=(k[M>>2]|0)){b:do if(C&(v|0)>5){i=4;while(1){if((v|0)==((k[800+(i<<2)>>2]|0)+(k[m+(k[736+(i<<2)>>2]<<2)>>2]|0)|0)?(v|0)>=(k[189952+(i<<2)>>2]|0):0){b=i;break}i=i+1|0;if((i|0)>=16)break b}b=b+1|0}while(0);if((b|0)<=1)break}else b=4;else{a=v;b=3}else b=2;k[M>>2]=a;k[L>>2]=x;k[K>>2]=w;k[m>>2]=v}}while(0);Kc(V,s,y,k[R>>2]|0,b);b=B+32|0;k[B>>2]=k[V>>2];k[B+4>>2]=k[V+4>>2];k[B+8>>2]=k[V+8>>2];k[B+12>>2]=k[V+12>>2];k[B+16>>2]=k[V+16>>2];k[B+20>>2]=k[V+20>>2];k[B+24>>2]=k[V+24>>2];if((y|0)>1){a=1;do{B=c+(a+t)|0;s=a+z|0;B=j+(((ia(l[B>>0]|l[B+1>>0]<<8|l[B+2>>0]<<16|l[B+3>>0]<<24,506832829)|0)>>>15)+(s>>>3&3)<<2)|0;k[B>>2]=s;a=a+1|0}while((a|0)<(y|0));}t=y+t|0;a=E-t|0;if((t+3|0)>>>0>=E>>>0){s=0;i=34;break}else{B=b;s=0}}if((i|0)==34){K=s+a|0;k[n>>2]=K;K=b;L=o;L=K-L|0;L=L>>5;K=k[q>>2]|0;L=K+L|0;k[q>>2]=L;r=W;return}}function Cc(a,b,c,d,e,f,g,h,i,m,n,o,q,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;m=m|0;n=n|0;o=o|0;q=q|0;s=s|0;var t=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;X=r;r=r+80|0;Q=X+68|0;S=X+64|0;O=X+60|0;U=X+40|0;R=X+56|0;T=X+52|0;P=X+48|0;V=X+32|0;W=X;if(a>>>0>2&b>>>0>2){K=b+-3|0;J=c+(K&d)|0;J=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>18;L=m+(J<<1)|0;M=j[L>>1]|0;k[m+32768+(J<<6)+((M&15)<<2)>>2]=K;j[L>>1]=M+1<<16>>16;L=b+-2|0;M=c+(L&d)|0;M=(ia(l[M>>0]|l[M+1>>0]<<8|l[M+2>>0]<<16|l[M+3>>0]<<24,506832829)|0)>>>18;J=m+(M<<1)|0;K=j[J>>1]|0;k[m+32768+(M<<6)+((K&15)<<2)>>2]=L;j[J>>1]=K+1<<16>>16;J=b+-1|0;K=c+(J&d)|0;K=(ia(l[K>>0]|l[K+1>>0]<<8|l[K+2>>0]<<16|l[K+3>>0]<<24,506832829)|0)>>>18;M=m+(K<<1)|0;L=j[M>>1]|0;k[m+32768+(K<<6)+((L&15)<<2)>>2]=J;j[M>>1]=L+1<<16>>16}t=k[o>>2]|0;u=d&b;E=b-u|0;F=u+a|0;G=(i|0)<9?64:512;if((u+3|0)>>>0>=F>>>0){L=q;M=a;K=t;M=K+M|0;k[o>>2]=M;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}H=G<<2;I=F+-4|0;J=F+-3|0;K=(i|0)<4;L=n+4|0;M=n+8|0;N=n+12|0;D=(i|0)>1;C=q;B=G+u|0;a:while(1){A=B+H|0;while(1){b=u+E|0;k[Q>>2]=0;k[S>>2]=0;k[O>>2]=0;p[U>>3]=h;if(Rc(m,c,d,e,f,5.4,n,b,a,b>>>0>g>>>0?g:b,Q,S,O,U)|0){i=0;break}t=t+1|0;w=c+u|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>18;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+32768+(w<<6)+((a&15)<<2)>>2]=b;j[i>>1]=a+1<<16>>16;b=u+1|0;do if(b>>>0>B>>>0)if(b>>>0>A>>>0){u=u+17|0;u=I>>>0<u>>>0?I:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>18;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+32768+(w<<6)+((a&15)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+4|0;b=b+4|0}while(b>>>0<u>>>0);}else{u=u+9|0;u=J>>>0<u>>>0?J:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>18;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+32768+(w<<6)+((a&15)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+2|0;b=b+2|0}while(b>>>0<u>>>0);}while(0);a=F-b|0;if((b+3|0)>>>0<F>>>0)u=b;else{b=C;i=34;break a}}while(1){a=a+-1|0;if(K){b=(k[Q>>2]|0)+-1|0;b=(a|0)<(b|0)?a:b}else b=0;k[R>>2]=b;k[T>>2]=0;k[P>>2]=0;p[V>>3]=h;y=u+E|0;B=y+1|0;x=c+u|0;x=(ia(l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24,506832829)|0)>>>18;b=m+(x<<1)|0;w=j[b>>1]|0;k[m+32768+(x<<6)+((w&15)<<2)>>2]=y;j[b>>1]=w+1<<16>>16;if(!(Rc(m,c,d,e,f,5.4,n,B,a,B>>>0>g>>>0?g:B,R,T,P,V)|0))break;v=+p[V>>3];if(!(v>=+p[U>>3]+7.0))break;b=u+1|0;t=t+1|0;k[Q>>2]=k[R>>2];k[S>>2]=k[T>>2];k[O>>2]=k[P>>2];p[U>>3]=v;i=i+1|0;if((i|0)>=4){u=b;break}else u=b}z=k[Q>>2]|0;B=u+G+(z<<1)|0;A=u+E|0;w=k[O>>2]|0;b=w+16|0;do if(w>>>0<=(A>>>0>g>>>0?g:A)>>>0){x=k[n>>2]|0;if((w|0)==(x|0))b=1;else{y=k[L>>2]|0;a=k[M>>2]|0;if((w|0)!=(y|0))if((w|0)!=(a|0))if((w|0)!=(k[N>>2]|0)){b:do if(D&(w|0)>5){i=4;while(1){if((w|0)==((k[800+(i<<2)>>2]|0)+(k[n+(k[736+(i<<2)>>2]<<2)>>2]|0)|0)?(w|0)>=(k[189888+(i<<2)>>2]|0):0){b=i;break}i=i+1|0;if((i|0)>=16)break b}b=b+1|0}while(0);if((b|0)<=1)break}else b=4;else{a=w;b=3}else b=2;k[N>>2]=a;k[M>>2]=y;k[L>>2]=x;k[n>>2]=w}}while(0);Kc(W,t,z,k[S>>2]|0,b);b=C+32|0;k[C>>2]=k[W>>2];k[C+4>>2]=k[W+4>>2];k[C+8>>2]=k[W+8>>2];k[C+12>>2]=k[W+12>>2];k[C+16>>2]=k[W+16>>2];k[C+20>>2]=k[W+20>>2];k[C+24>>2]=k[W+24>>2];if((z|0)>1){a=1;do{i=c+(a+u)|0;i=(ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>18;C=m+(i<<1)|0;t=j[C>>1]|0;k[m+32768+(i<<6)+((t&15)<<2)>>2]=a+A;j[C>>1]=t+1<<16>>16;a=a+1|0}while((a|0)<(z|0));}u=z+u|0;a=F-u|0;if((u+3|0)>>>0>=F>>>0){t=0;i=34;break}else{C=b;t=0}}if((i|0)==34){L=t+a|0;k[o>>2]=L;L=b;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}}function Dc(a,b,c,d,e,f,g,h,i,m,n,o,q,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;i=i|0;m=m|0;n=n|0;o=o|0;q=q|0;s=s|0;var t=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;X=r;r=r+80|0;Q=X+68|0;S=X+64|0;O=X+60|0;U=X+40|0;R=X+56|0;T=X+52|0;P=X+48|0;V=X+32|0;W=X;if(a>>>0>2&b>>>0>2){K=b+-3|0;J=c+(K&d)|0;J=(ia(l[J>>0]|l[J+1>>0]<<8|l[J+2>>0]<<16|l[J+3>>0]<<24,506832829)|0)>>>18;L=m+(J<<1)|0;M=j[L>>1]|0;k[m+32768+(J<<7)+((M&31)<<2)>>2]=K;j[L>>1]=M+1<<16>>16;L=b+-2|0;M=c+(L&d)|0;M=(ia(l[M>>0]|l[M+1>>0]<<8|l[M+2>>0]<<16|l[M+3>>0]<<24,506832829)|0)>>>18;J=m+(M<<1)|0;K=j[J>>1]|0;k[m+32768+(M<<7)+((K&31)<<2)>>2]=L;j[J>>1]=K+1<<16>>16;J=b+-1|0;K=c+(J&d)|0;K=(ia(l[K>>0]|l[K+1>>0]<<8|l[K+2>>0]<<16|l[K+3>>0]<<24,506832829)|0)>>>18;M=m+(K<<1)|0;L=j[M>>1]|0;k[m+32768+(K<<7)+((L&31)<<2)>>2]=J;j[M>>1]=L+1<<16>>16}t=k[o>>2]|0;u=d&b;E=b-u|0;F=u+a|0;G=(i|0)<9?64:512;if((u+3|0)>>>0>=F>>>0){L=q;M=a;K=t;M=K+M|0;k[o>>2]=M;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}H=G<<2;I=F+-4|0;J=F+-3|0;K=(i|0)<4;L=n+4|0;M=n+8|0;N=n+12|0;D=(i|0)>1;C=q;B=G+u|0;a:while(1){A=B+H|0;while(1){b=u+E|0;k[Q>>2]=0;k[S>>2]=0;k[O>>2]=0;p[U>>3]=h;if(Qc(m,c,d,e,f,5.4,n,b,a,b>>>0>g>>>0?g:b,Q,S,O,U)|0){i=0;break}t=t+1|0;w=c+u|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>18;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+32768+(w<<7)+((a&31)<<2)>>2]=b;j[i>>1]=a+1<<16>>16;b=u+1|0;do if(b>>>0>B>>>0)if(b>>>0>A>>>0){u=u+17|0;u=I>>>0<u>>>0?I:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>18;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+32768+(w<<7)+((a&31)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+4|0;b=b+4|0}while(b>>>0<u>>>0);}else{u=u+9|0;u=J>>>0<u>>>0?J:u;if(b>>>0>=u>>>0)break;do{w=c+b|0;w=(ia(l[w>>0]|l[w+1>>0]<<8|l[w+2>>0]<<16|l[w+3>>0]<<24,506832829)|0)>>>18;i=m+(w<<1)|0;a=j[i>>1]|0;k[m+32768+(w<<7)+((a&31)<<2)>>2]=b+E;j[i>>1]=a+1<<16>>16;t=t+2|0;b=b+2|0}while(b>>>0<u>>>0);}while(0);a=F-b|0;if((b+3|0)>>>0<F>>>0)u=b;else{b=C;i=34;break a}}while(1){a=a+-1|0;if(K){b=(k[Q>>2]|0)+-1|0;b=(a|0)<(b|0)?a:b}else b=0;k[R>>2]=b;k[T>>2]=0;k[P>>2]=0;p[V>>3]=h;y=u+E|0;B=y+1|0;x=c+u|0;x=(ia(l[x>>0]|l[x+1>>0]<<8|l[x+2>>0]<<16|l[x+3>>0]<<24,506832829)|0)>>>18;b=m+(x<<1)|0;w=j[b>>1]|0;k[m+32768+(x<<7)+((w&31)<<2)>>2]=y;j[b>>1]=w+1<<16>>16;if(!(Qc(m,c,d,e,f,5.4,n,B,a,B>>>0>g>>>0?g:B,R,T,P,V)|0))break;v=+p[V>>3];if(!(v>=+p[U>>3]+7.0))break;b=u+1|0;t=t+1|0;k[Q>>2]=k[R>>2];k[S>>2]=k[T>>2];k[O>>2]=k[P>>2];p[U>>3]=v;i=i+1|0;if((i|0)>=4){u=b;break}else u=b}z=k[Q>>2]|0;B=u+G+(z<<1)|0;A=u+E|0;w=k[O>>2]|0;b=w+16|0;do if(w>>>0<=(A>>>0>g>>>0?g:A)>>>0){x=k[n>>2]|0;if((w|0)==(x|0))b=1;else{y=k[L>>2]|0;a=k[M>>2]|0;if((w|0)!=(y|0))if((w|0)!=(a|0))if((w|0)!=(k[N>>2]|0)){b:do if(D&(w|0)>5){i=4;while(1){if((w|0)==((k[800+(i<<2)>>2]|0)+(k[n+(k[736+(i<<2)>>2]<<2)>>2]|0)|0)?(w|0)>=(k[189824+(i<<2)>>2]|0):0){b=i;break}i=i+1|0;if((i|0)>=16)break b}b=b+1|0}while(0);if((b|0)<=1)break}else b=4;else{a=w;b=3}else b=2;k[N>>2]=a;k[M>>2]=y;k[L>>2]=x;k[n>>2]=w}}while(0);Kc(W,t,z,k[S>>2]|0,b);b=C+32|0;k[C>>2]=k[W>>2];k[C+4>>2]=k[W+4>>2];k[C+8>>2]=k[W+8>>2];k[C+12>>2]=k[W+12>>2];k[C+16>>2]=k[W+16>>2];k[C+20>>2]=k[W+20>>2];k[C+24>>2]=k[W+24>>2];if((z|0)>1){a=1;do{i=c+(a+u)|0;i=(ia(l[i>>0]|l[i+1>>0]<<8|l[i+2>>0]<<16|l[i+3>>0]<<24,506832829)|0)>>>18;C=m+(i<<1)|0;t=j[C>>1]|0;k[m+32768+(i<<7)+((t&31)<<2)>>2]=a+A;j[C>>1]=t+1<<16>>16;a=a+1|0}while((a|0)<(z|0));}u=z+u|0;a=F-u|0;if((u+3|0)>>>0>=F>>>0){t=0;i=34;break}else{C=b;t=0}}if((i|0)==34){L=t+a|0;k[o>>2]=L;L=b;M=q;M=L-M|0;M=M>>5;L=k[s>>2]|0;M=L+M|0;k[s>>2]=M;r=X;return}}
function Xe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;if((d|0)==2){d=b+-8|0;if(nb[k[c>>2]&1](d,a)|0){g=d;d=k[g+4>>2]|0;f=e;k[f>>2]=k[g>>2];k[f+4>>2]=d;f=a;d=k[f+4>>2]|0;a=e+8|0;k[a>>2]=k[f>>2];k[a+4>>2]=d;return}else{g=a;a=k[g+4>>2]|0;f=e;k[f>>2]=k[g>>2];k[f+4>>2]=a;f=d;d=k[f+4>>2]|0;a=e+8|0;k[a>>2]=k[f>>2];k[a+4>>2]=d;return}}else if((d|0)==1){f=a;d=k[f+4>>2]|0;a=e;k[a>>2]=k[f>>2];k[a+4>>2]=d;return}else if(!d)return;else{if((d|0)<9){if((a|0)==(b|0))return;g=a;f=k[g+4>>2]|0;d=e;k[d>>2]=k[g>>2];k[d+4>>2]=f;d=a+8|0;if((d|0)==(b|0))return;else g=e;do{a=g;g=g+8|0;if(nb[k[c>>2]&1](d,a)|0){i=a;h=k[i+4>>2]|0;f=g;k[f>>2]=k[i>>2];k[f+4>>2]=h;a:do if((a|0)==(e|0))a=e;else while(1){f=a;a=a+-8|0;if(!(nb[k[c>>2]&1](d,a)|0)){a=f;break a}i=a;h=k[i+4>>2]|0;k[f>>2]=k[i>>2];k[f+4>>2]=h;if((a|0)==(e|0)){a=e;break}}while(0);h=d;f=k[h+4>>2]|0;k[a>>2]=k[h>>2];k[a+4>>2]=f}else{h=d;f=k[h+4>>2]|0;a=g;k[a>>2]=k[h>>2];k[a+4>>2]=f}d=d+8|0}while((d|0)!=(b|0));return}h=(d|0)/2|0;g=a+(h<<3)|0;Ve(a,g,c,h,e,h);f=d-h|0;Ve(g,b,c,f,e+(h<<3)|0,f);b:do if((d+1|0)>>>0<3)a=g;else{d=g;while(1){if((d|0)==(b|0))break;if(nb[k[c>>2]&1](d,a)|0){i=d;h=k[i+4>>2]|0;f=e;k[f>>2]=k[i>>2];k[f+4>>2]=h;d=d+8|0}else{i=a;h=k[i+4>>2]|0;f=e;k[f>>2]=k[i>>2];k[f+4>>2]=h;a=a+8|0}e=e+8|0;if((a|0)==(g|0)){a=d;break b}}if((a|0)==(g|0))return;while(1){c=a;f=k[c+4>>2]|0;d=e;k[d>>2]=k[c>>2];k[d+4>>2]=f;a=a+8|0;if((a|0)==(g|0))break;else e=e+8|0}return}while(0);if((a|0)==(b|0))return;while(1){g=a;f=k[g+4>>2]|0;d=e;k[d>>2]=k[g>>2];k[d+4>>2]=f;a=a+8|0;if((a|0)==(b|0))break;else e=e+8|0}return}}function Ye(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;if((f|0)==0|(e|0)==0)return;a:while(1){l=e;o=a;while(1){p=b;a=l;e=o;while(1){i=e;if(nb[k[d>>2]&1](p,i)|0){z=e;break}a=a+-1|0;if(!a){e=69;break a}else e=i+8|0}if(!((f|0)>(h|0)&(a|0)>(h|0))){j=z;e=8;break a}if((a|0)<(f|0)){l=(f|0)/2|0;o=p+(l<<3)|0;m=i;j=b-z>>3;b:while(1){while(1){if(!j){j=m;break b}e=(j|0)/2|0;if(nb[k[d>>2]&1](o,m+(e<<3)|0)|0)j=e;else break}m=m+(e+1<<3)|0;j=j+-1-e|0}n=j;y=o;e=j-z>>3;j=l}else{if((a|0)==1){i=z;e=44;break a}e=(a|0)/2|0;n=i+(e<<3)|0;m=p;j=c-b>>3;c:while(1){while(1){if(!j){l=m;break c}l=(j|0)/2|0;if(nb[k[d>>2]&1](m+(l<<3)|0,n)|0)break;else j=l}m=m+(l+1<<3)|0;j=j+-1-l|0}y=l;j=l-b>>3}o=b;b=y;x=n;l=a-e|0;w=f;f=f-j|0;m=o;d:do if((n|0)!=(p|0))if((p|0)==(y|0))p=n;else{if((n+8|0)==(p|0)){u=n;t=k[u>>2]|0;u=k[u+4>>2]|0;p=b-o|0;Lg(n|0,m|0,p|0)|0;p=n+(p>>3<<3)|0;v=p;k[v>>2]=t;k[v+4>>2]=u;break}if((p+8|0)==(y|0)){v=y+-8|0;u=v;t=k[u>>2]|0;u=k[u+4>>2]|0;v=v-x|0;p=y+(0-(v>>3)<<3)|0;Lg(p|0,n|0,v|0)|0;v=n;k[v>>2]=t;k[v+4>>2]=u;break}v=o-x>>3;u=b-o>>3;if((v|0)==(u|0)){m=n;o=p;while(1){u=m;t=k[u>>2]|0;u=k[u+4>>2]|0;r=o;s=k[r+4>>2]|0;v=m;k[v>>2]=k[r>>2];k[v+4>>2]=s;v=o;k[v>>2]=t;k[v+4>>2]=u;m=m+8|0;if((m|0)==(p|0))break d;else o=o+8|0}}else{o=v;m=u}while(1){o=(o|0)%(m|0)|0;if(!o){o=m;break}else{t=m;m=o;o=t}}if(o){t=v+-1|0;q=n+(o<<3)|0;do{o=q;q=q+-8|0;s=q;r=k[s>>2]|0;s=k[s+4>>2]|0;o=o+(t<<3)|0;m=q;while(1){B=o;A=k[B+4>>2]|0;p=m;m=o;k[p>>2]=k[B>>2];k[p+4>>2]=A;p=b-m>>3;p=(v|0)<(p|0)?o+(v<<3)|0:n+(v-p<<3)|0;if((p|0)==(q|0))break;else o=p}p=o;k[p>>2]=r;k[p+4>>2]=s}while((q|0)!=(n|0));}p=n+(u<<3)|0}else p=y;while(0);o=p;if((e+j|0)>=(l+f|0)){m=y;a=z;b=x;i=p;break}Ye(i,n,p,d,e,j,g,h);if((w|0)==(j|0)|(a|0)==(e|0)){e=69;break a}}Ye(i,m,c,d,l,f,g,h);if((j|0)==0|(e|0)==0){e=69;break}else{f=j;c=o}}if((e|0)==8){v=c;if((a|0)<=(f|0)){e:do if((i|0)!=(p|0)){f=(p+-8-j|0)>>>3;e=i;c=g;while(1){x=e;y=k[x+4>>2]|0;z=c;k[z>>2]=k[x>>2];k[z+4>>2]=y;e=e+8|0;if((e|0)==(p|0))break;else c=c+8|0}o=g+(f+1<<3)|0;if((o|0)!=(g|0)){e=b;f=b;a=p;l=g;b=g;while(1){if((a|0)==(v|0))break;if(nb[k[d>>2]&1](a,l)|0){z=e;f=k[z+4>>2]|0;e=i;k[e>>2]=k[z>>2];k[e+4>>2]=f;a=a+8|0;e=a;f=a}else{y=b;z=k[y+4>>2]|0;b=i;k[b>>2]=k[y>>2];k[b+4>>2]=z;b=l+8|0}i=i+8|0;l=b;if((l|0)==(o|0)){b=f;break e}}Lg(i|0,b|0,o-b|0)|0;return}}else i=p;while(0);if((b|0)==(v|0))return;while(1){x=b;y=k[x+4>>2]|0;z=i;k[z>>2]=k[x>>2];k[z+4>>2]=y;b=b+8|0;if((b|0)==(v|0))break;else i=i+8|0}return}if((p|0)==(v|0))f=g;else{f=(v+-8-b|0)>>>3;e=p;a=g;while(1){x=e;y=k[x+4>>2]|0;z=a;k[z>>2]=k[x>>2];k[z+4>>2]=y;e=e+8|0;if((e|0)==(v|0))break;else a=a+8|0}f=g+(f+1<<3)|0}f:do if((p|0)!=(i|0)){j=p;while(1){e=f;if((e|0)==(g|0))break;e=e+-8|0;c=c+-8|0;if(nb[k[d>>2]&1](e,j+-8|0)|0){b=b+-8|0;x=b;y=k[x+4>>2]|0;z=c;k[z>>2]=k[x>>2];k[z+4>>2]=y}else{y=e;z=k[y+4>>2]|0;f=c;k[f>>2]=k[y>>2];k[f+4>>2]=z;f=e}j=b;if((j|0)==(i|0))break f}f=b;if((f|0)==(i|0))return;while(1){c=c+-8|0;x=f+-8|0;y=k[x+4>>2]|0;z=c;k[z>>2]=k[x>>2];k[z+4>>2]=y;b=b+-8|0;if((b|0)==(i|0))break;else f=b}return}while(0);i=f;if((i|0)==(g|0))return;while(1){c=c+-8|0;x=i+-8|0;y=k[x+4>>2]|0;z=c;k[z>>2]=k[x>>2];k[z+4>>2]=y;f=f+-8|0;if((f|0)==(g|0))break;else i=f}return}else if((e|0)==44){w=i;y=w;x=k[y>>2]|0;y=k[y+4>>2]|0;z=b;u=z;v=k[u+4>>2]|0;k[w>>2]=k[u>>2];k[w+4>>2]=v;k[z>>2]=x;k[z+4>>2]=y;return}else if((e|0)==69)return}function Ze(a,b,c,d,e,f,g,h,n,o,p,q,r,s){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;n=n|0;o=o|0;p=p|0;q=q|0;r=r|0;s=s|0;var t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;J=k[c+16>>2]|0;if((J|0)==(k[c+20>>2]|0))u=0;else u=k[J>>2]|0;L=k[d+16>>2]|0;if((L|0)==(k[d+20>>2]|0))w=0;else w=k[L>>2]|0;K=k[e+16>>2]|0;if((K|0)==(k[e+20>>2]|0))t=0;else t=k[K>>2]|0;if(!b)return;I=d+4|0;H=e+4|0;G=c+4|0;d=0;v=0;x=0;A=0;y=0;e=w;c=0;F=0;while(1){if(!e){E=c+1|0;c=E;e=k[L+(E<<2)>>2]|0;E=k[(k[I>>2]|0)+(E<<2)>>2]|0}else E=x;e=e+-1|0;B=k[r>>2]|0;C=j[a+(F<<5)+8>>1]|0;D=C&65535;z=B+(E*2832|0)+(D<<2)|0;k[z>>2]=(k[z>>2]|0)+1;B=B+(E*2832|0)+2816|0;k[B>>2]=(k[B>>2]|0)+1;B=a+(F<<5)|0;if((k[B>>2]|0)>0){x=y;w=A;z=0;while(1){if(!u){y=w+1|0;A=y;u=k[J+(y<<2)>>2]|0;y=k[(k[G>>2]|0)+(y<<2)>>2]|0}else{A=w;y=x}u=u+-1|0;x=y<<6;w=k[(k[p>>2]|0)+(y<<2)>>2]|0;if((w|0)==3)o=((l[316128+(n&255)>>0]|0)<<3)+(l[316128+(o&255)>>0]|0)&255;else if((w|0)==1)o=(n&255)>>>2;else if(!w)o=n&63;else if((w|0)==2)o=i[315616+(o&255|256)>>0]|i[315616+(n&255)>>0];else o=0;o=(o&255)+x|0;x=k[q>>2]|0;w=f+(g&h)|0;M=x+(o*1040|0)+((l[w>>0]|0)<<2)|0;k[M>>2]=(k[M>>2]|0)+1;o=x+(o*1040|0)+1024|0;k[o>>2]=(k[o>>2]|0)+1;w=i[w>>0]|0;g=g+1|0;z=z+1|0;if((z|0)>=(k[B>>2]|0)){o=n;n=g;break}else{o=n;n=w;x=y;w=A}}}else{w=n;n=g}B=k[a+(F<<5)+4>>2]|0;g=B+n|0;if((B|0)>0){o=i[f+(g+-2&h)>>0]|0;n=i[f+(g+-1&h)>>0]|0;if((C&65535)>127){if(!t){d=d+1|0;t=k[K+(d<<2)>>2]|0;v=k[(k[H>>2]|0)+(d<<2)>>2]|0}C=D>>>6;D=D&7;D=(D>>>0<3&((C|0)==7|((C|0)==4|(C&1021|0)==0))?D:3)+(v<<2)|0;C=k[s>>2]|0;B=C+(D*2096|0)+((m[a+(F<<5)+10>>1]|0)<<2)|0;k[B>>2]=(k[B>>2]|0)+1;D=C+(D*2096|0)+2080|0;k[D>>2]=(k[D>>2]|0)+1;t=t+-1|0}}else n=w;F=F+1|0;if((F|0)==(b|0))break;else x=E}return}function _e(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,m=0,n=0.0,p=0.0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;x=r;r=r+3088|0;v=x+16|0;w=x;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;t=(b|0)==0;if(t){g=0;h=0}else{j=0;m=0;do{g=i[e+(j+a&c)>>0]|0;if(g<<24>>24<=-1)if((g&255)>191)h=1;else h=m>>>0<224?0:2;else h=0;m=g&255;u=v+(h<<2)|0;k[u>>2]=(k[u>>2]|0)+1;j=j+1|0}while((j|0)!=(b|0));g=k[v+4>>2]|0;h=k[v+8>>2]|0}u=(h+g|0)>24&1;Fg(v|0,0,3072)|0;k[w>>2]=0;k[w+4>>2]=0;k[w+8>>2]=0;if((b|0)>0|b>>>0>494){g=b>>>0<495?b:495;q=0;s=0;m=0;do{j=i[e+(q+a&c)>>0]|0;h=s;s=j&255;y=v+(m<<10)+(s<<2)|0;k[y>>2]=(k[y>>2]|0)+1;m=w+(m<<2)|0;k[m>>2]=(k[m>>2]|0)+1;if(j<<24>>24<=-1)if((j&255)>191)m=u;else m=h>>>0<224?0:u;else m=0;q=q+1|0}while((q|0)!=(g|0));}if(t){r=x;return}t=a+-495|0;q=a+495|0;g=0;do{if((g+-495|0)>-1){if((g|0)>=496){m=g+a|0;j=i[e+(m+-496&c)>>0]|0;if((g|0)<497)m=0;else m=l[e+(m+-497&c)>>0]|0;if(j<<24>>24<=-1)if((j&255)>191)h=u;else h=m>>>0<224?0:u;else h=0}else h=0;s=v+(h<<10)+((l[e+(t+g&c)>>0]|0)<<2)|0;k[s>>2]=(k[s>>2]|0)+-1;s=w+(h<<2)|0;k[s>>2]=(k[s>>2]|0)+-1}if((g+495|0)>>>0<b>>>0){j=g+a|0;m=i[e+(j+494&c)>>0]|0;j=i[e+(j+493&c)>>0]|0;if(m<<24>>24<=-1)if((m&255)>191)h=u;else h=(j&255)<224?0:u;else h=0;s=v+(h<<10)+((l[e+(q+g&c)>>0]|0)<<2)|0;k[s>>2]=(k[s>>2]|0)+1;s=w+(h<<2)|0;k[s>>2]=(k[s>>2]|0)+1}s=g+a|0;if((g|0)>=1){j=i[e+(s+-1&c)>>0]|0;if((g|0)<2)m=0;else m=l[e+(s+-2&c)>>0]|0;if(j<<24>>24<=-1)if((j&255)>191)m=u;else m=m>>>0<224?0:u;else m=0}else m=0;j=k[v+(m<<10)+((l[e+(s&c)>>0]|0)<<2)>>2]|0;j=(j|0)==0?1:j;m=k[w+(m<<2)>>2]|0;if((m|0)<256)p=+o[316384+(m<<2)>>2];else p=+kg(+(m|0));if((j|0)<256)n=+o[316384+(j<<2)>>2];else n=+kg(+(j|0));n=p-n+.02905;n=n<1.0?n*.5+.5:n;if((g|0)<2e3)n=n+(.7-+(2e3-g|0)/2.0e3*.35);o[f+((s&d)<<2)>>2]=n;g=g+1|0}while((g|0)!=(b|0));r=x;return}function $e(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0.0,m=0.0,n=0,p=0,q=0,s=0,t=0;t=r;r=r+1024|0;s=t;Fg(s|0,0,1024)|0;i=b>>>0<2e3?b:2e3;if((i|0)>0){g=b>>>0<2e3?b:2e3;h=0;do{q=s+((l[e+(h+a&c)>>0]|0)<<2)|0;k[q>>2]=(k[q>>2]|0)+1;h=h+1|0}while((h|0)!=(g|0));}if(!b){r=t;return}n=a+-2e3|0;p=a+2e3|0;q=0;h=i;do{if((q+-2e3|0)>-1){i=s+((l[e+(n+q&c)>>0]|0)<<2)|0;k[i>>2]=(k[i>>2]|0)+-1;h=h+-1|0}if((q+2e3|0)>>>0<b>>>0){i=s+((l[e+(p+q&c)>>0]|0)<<2)|0;k[i>>2]=(k[i>>2]|0)+1;h=h+1|0}g=q+a|0;i=k[s+((l[e+(g&c)>>0]|0)<<2)>>2]|0;i=(i|0)==0?1:i;if((h|0)<256)m=+o[316384+(h<<2)>>2];else m=+kg(+(h|0));if((i|0)<256)j=+o[316384+(i<<2)>>2];else j=+kg(+(i|0));j=m-j+.029;o[f+((g&d)<<2)>>2]=j<1.0?j*.5+.5:j;q=q+1|0}while((q|0)!=(b|0));r=t;return}function af(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;B=r;r=r+48|0;z=B+24|0;y=B+12|0;w=B;u=j+28|0;v=j+56|0;Xc(f,g,a+(c&b)|0,j,u,v);n=k[j>>2]|0;k[z>>2]=0;A=z+4|0;k[A>>2]=0;k[z+8>>2]=0;if(!n)h=0;else{if(n>>>0>1073741823)yf(z);m=Af(n<<2)|0;k[A>>2]=m;k[z>>2]=m;l=m+(n<<2)|0;k[z+8>>2]=l;while(1){k[m>>2]=h;n=n+-1|0;if(!n)break;else m=m+4|0}k[A>>2]=l;h=k[j>>2]|0}n=h<<6;q=k[v>>2]|0;t=q<<2;k[y>>2]=0;x=y+4|0;k[x>>2]=0;k[y+8>>2]=0;if(n){if(n>>>0>4129776)yf(y);l=Af(h*66560|0)|0;k[x>>2]=l;k[y>>2]=l;k[y+8>>2]=l+(n*1040|0);o=h<<6;m=l;h=l;while(1){Fg(m|0,0,1028)|0;h=h+1040|0;n=n+-1|0;if(!n)break;else m=h}k[x>>2]=l+(o*1040|0);}p=j+120|0;h=k[u>>2]|0;n=j+124|0;m=k[n>>2]|0;l=k[p>>2]|0;o=(m-l|0)/2832|0;if(h>>>0<=o>>>0){if(h>>>0<o>>>0?(s=l+(h*2832|0)|0,(m|0)!=(s|0)):0)k[n>>2]=m+(~(((m+-2832-s|0)>>>0)/2832|0)*2832|0);}else yd(p,h-o|0);k[w>>2]=0;s=w+4|0;k[s>>2]=0;k[w+8>>2]=0;if(t){if(t>>>0>2049125)yf(w);l=Af(q*8384|0)|0;k[s>>2]=l;k[w>>2]=l;k[w+8>>2]=l+(t*2096|0);o=q<<2;h=t;m=l;n=l;while(1){Fg(m|0,0,2084)|0;n=n+2096|0;h=h+-1|0;if(!h)break;else m=n}k[s>>2]=l+(o*2096|0);}Ze(f,g,j,u,v,a,b,c,d,e,z,y,p,w);n=j+108|0;if((n|0)!=(y|0))df(n,k[y>>2]|0,k[x>>2]|0);m=k[j>>2]|0;l=j+84|0;if(i)Kd(y,64,m,256,n,l);else ef(y,64,m,256,n,l);l=j+132|0;if((l|0)!=(w|0))ff(l,k[w>>2]|0,k[s>>2]|0);m=k[v>>2]|0;n=j+96|0;if(i)fd(w,4,m,256,l,n);else gf(w,4,m,256,l,n);n=k[w>>2]|0;m=n;if(n){l=k[s>>2]|0;if((l|0)!=(n|0))k[s>>2]=l+(~(((l+-2096-m|0)>>>0)/2096|0)*2096|0);Df(n);}m=k[y>>2]|0;l=m;if(m){n=k[x>>2]|0;if((n|0)!=(m|0))k[x>>2]=n+(~(((n+-1040-l|0)>>>0)/1040|0)*1040|0);Df(m);}m=k[z>>2]|0;if(!m){r=B;return}l=k[A>>2]|0;if((l|0)!=(m|0))k[A>>2]=l+(~((l+-4-m|0)>>>2)<<2);Df(m);r=B;return}function bf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;F=r;r=r+224|0;E=F+144|0;C=F+72|0;D=F;i=(e|0)==0;if(i)g=0;else{h=0;g=0;do{g=(k[d+(h<<5)>>2]|0)+g|0;h=h+1|0}while((h|0)!=(e|0));}hf(E,256,512,400.0,g,f,f+108|0);jf(C,704,1024,500.0,e,f+28|0,f+120|0);kf(D,64,512,100.0,e,f+56|0,f+132|0);if(i){mf(E,1);lf(C,1);nf(D,1);r=F;return}p=C+24|0;q=C+36|0;s=C+32|0;t=C+28|0;u=D+24|0;v=D+36|0;w=D+32|0;x=D+28|0;y=E+24|0;z=E+36|0;A=E+32|0;B=E+28|0;f=b;o=0;do{i=k[d+(o<<5)>>2]|0;g=k[d+(o<<5)+4>>2]|0;m=j[d+(o<<5)+8>>1]|0;n=j[d+(o<<5)+10>>1]|0;h=k[q>>2]|0;b=k[k[p>>2]>>2]|0;G=b+(h*2832|0)+((m&65535)<<2)|0;k[G>>2]=(k[G>>2]|0)+1;h=b+(h*2832|0)+2816|0;k[h>>2]=(k[h>>2]|0)+1;h=(k[s>>2]|0)+1|0;k[s>>2]=h;if((h|0)==(k[t>>2]|0))lf(C,0);if((i|0)>0){b=f;h=0;while(1){G=k[z>>2]|0;H=k[k[y>>2]>>2]|0;I=H+(G*1040|0)+((l[a+(b&c)>>0]|0)<<2)|0;k[I>>2]=(k[I>>2]|0)+1;G=H+(G*1040|0)+1024|0;k[G>>2]=(k[G>>2]|0)+1;G=(k[A>>2]|0)+1|0;k[A>>2]=G;if((G|0)==(k[B>>2]|0))mf(E,0);h=h+1|0;if((h|0)==(i|0))break;else b=b+1|0}f=f+i|0}f=f+g|0;if((g|0)>0&(m&65535)>127?(g=k[v>>2]|0,h=k[k[u>>2]>>2]|0,i=h+(g*2096|0)+((n&65535)<<2)|0,k[i>>2]=(k[i>>2]|0)+1,g=h+(g*2096|0)+2080|0,k[g>>2]=(k[g>>2]|0)+1,g=(k[w>>2]|0)+1|0,k[w>>2]=g,(g|0)==(k[x>>2]|0)):0)nf(D,0);o=o+1|0}while((o|0)!=(e|0));mf(E,1);lf(C,1);nf(D,1);r=F;return}function cf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=c+112|0;e=c+108|0;d=k[e>>2]|0;if((k[f>>2]|0)!=(d|0)){g=0;do{Re(256,d+(g*1040|0)|0)|0;g=g+1|0;d=k[e>>2]|0}while(g>>>0<(((k[f>>2]|0)-d|0)/1040|0)>>>0);}f=c+124|0;d=c+120|0;e=k[d>>2]|0;if((k[f>>2]|0)!=(e|0)){g=0;do{Re(704,e+(g*2832|0)|0)|0;g=g+1|0;e=k[d>>2]|0}while(g>>>0<(((k[f>>2]|0)-e|0)/2832|0)>>>0);}f=a+16+(48<<b)|0;g=c+136|0;e=c+132|0;b=k[e>>2]|0;if((k[g>>2]|0)==(b|0))return;else d=0;do{Re(f,b+(d*2096|0)|0)|0;d=d+1|0;b=k[e>>2]|0}while(d>>>0<(((k[g>>2]|0)-b|0)/2096|0)>>>0);return}function df(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;f=b;i=(c-f|0)/1040|0;j=a+8|0;e=k[j>>2]|0;h=k[a>>2]|0;d=h;if(i>>>0<=((e-d|0)/1040|0)>>>0){g=a+4|0;d=((k[g>>2]|0)-d|0)/1040|0;i=i>>>0>d>>>0;d=i?b+(d*1040|0)|0:c;e=d-f|0;Lg(h|0,b|0,e|0)|0;e=h+(((e|0)/1040|0)*1040|0)|0;if(!i){d=k[g>>2]|0;if((d|0)==(e|0))return;k[g>>2]=d+(~(((d+-1040-e|0)>>>0)/1040|0)*1040|0);return}if((d|0)==(c|0))return;e=k[g>>2]|0;do{Kg(e|0,d|0,1040)|0;e=(k[g>>2]|0)+1040|0;k[g>>2]=e;d=d+1040|0}while((d|0)!=(c|0));return}if(h){f=a+4|0;e=k[f>>2]|0;if((e|0)!=(h|0))k[f>>2]=e+(~(((e+-1040-d|0)>>>0)/1040|0)*1040|0);Df(h);k[j>>2]=0;k[f>>2]=0;k[a>>2]=0;e=0}f=i>>>0>4129776;if(f)yf(a);e=(e-0|0)/1040|0;if(e>>>0<2064888){d=e<<1;e=d>>>0>=i>>>0;if(e|f^1)g=e?d:i;else yf(a);}else g=4129776;e=Af(g*1040|0)|0;f=a+4|0;k[f>>2]=e;k[a>>2]=e;k[j>>2]=e+(g*1040|0);if((b|0)==(c|0))return;else d=b;do{Kg(e|0,d|0,1040)|0;e=(k[f>>2]|0)+1040|0;k[f>>2]=e;d=d+1040|0}while((d|0)!=(c|0));return}function ef(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;q=r;r=r+16|0;p=q;d=e+4|0;g=k[d>>2]|0;h=k[e>>2]|0;i=(g-h|0)/1040|0;if(i>>>0>=c>>>0){if(i>>>0>c>>>0?(j=h+(c*1040|0)|0,(g|0)!=(j|0)):0)k[d>>2]=g+(~(((g+-1040-j|0)>>>0)/1040|0)*1040|0);}else Ld(e,c-i|0);k[p>>2]=0;if((c|0)<=0){r=q;return}d=f+4|0;l=f+8|0;if((b|0)>0)m=0;else{d=0;do{Fg((k[e>>2]|0)+(d*1040|0)|0,0,1028)|0;d=d+1|0}while((d|0)<(c|0));k[p>>2]=d;r=q;return}do{Fg((k[e>>2]|0)+(m*1040|0)|0,0,1028)|0;n=ia(m,b)|0;o=0;do{j=k[e>>2]|0;i=n+o|0;h=k[a>>2]|0;g=j+(m*1040|0)+1024|0;k[g>>2]=(k[g>>2]|0)+(k[h+(i*1040|0)+1024>>2]|0);g=0;do{s=j+(m*1040|0)+(g<<2)|0;k[s>>2]=(k[s>>2]|0)+(k[h+(i*1040|0)+(g<<2)>>2]|0);g=g+1|0}while((g|0)!=256);j=k[d>>2]|0;if((j|0)==(k[l>>2]|0))Zc(f,p);else{k[j>>2]=m;k[d>>2]=j+4}o=o+1|0}while((o|0)!=(b|0));m=m+1|0;k[p>>2]=m}while((m|0)<(c|0));r=q;return}function ff(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;f=b;i=(c-f|0)/2096|0;j=a+8|0;e=k[j>>2]|0;h=k[a>>2]|0;d=h;if(i>>>0<=((e-d|0)/2096|0)>>>0){g=a+4|0;d=((k[g>>2]|0)-d|0)/2096|0;i=i>>>0>d>>>0;d=i?b+(d*2096|0)|0:c;e=d-f|0;Lg(h|0,b|0,e|0)|0;e=h+(((e|0)/2096|0)*2096|0)|0;if(!i){d=k[g>>2]|0;if((d|0)==(e|0))return;k[g>>2]=d+(~(((d+-2096-e|0)>>>0)/2096|0)*2096|0);return}if((d|0)==(c|0))return;e=k[g>>2]|0;do{Kg(e|0,d|0,2096)|0;e=(k[g>>2]|0)+2096|0;k[g>>2]=e;d=d+2096|0}while((d|0)!=(c|0));return}if(h){f=a+4|0;e=k[f>>2]|0;if((e|0)!=(h|0))k[f>>2]=e+(~(((e+-2096-d|0)>>>0)/2096|0)*2096|0);Df(h);k[j>>2]=0;k[f>>2]=0;k[a>>2]=0;e=0}f=i>>>0>2049125;if(f)yf(a);e=(e-0|0)/2096|0;if(e>>>0<1024562){d=e<<1;e=d>>>0>=i>>>0;if(e|f^1)g=e?d:i;else yf(a);}else g=2049125;e=Af(g*2096|0)|0;f=a+4|0;k[f>>2]=e;k[a>>2]=e;k[j>>2]=e+(g*2096|0);if((b|0)==(c|0))return;else d=b;do{Kg(e|0,d|0,2096)|0;e=(k[f>>2]|0)+2096|0;k[f>>2]=e;d=d+2096|0}while((d|0)!=(c|0));return}function gf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;q=r;r=r+16|0;p=q;d=e+4|0;g=k[d>>2]|0;h=k[e>>2]|0;i=(g-h|0)/2096|0;if(i>>>0>=c>>>0){if(i>>>0>c>>>0?(j=h+(c*2096|0)|0,(g|0)!=(j|0)):0)k[d>>2]=g+(~(((g+-2096-j|0)>>>0)/2096|0)*2096|0);}else gd(e,c-i|0);k[p>>2]=0;if((c|0)<=0){r=q;return}d=f+4|0;l=f+8|0;if((b|0)>0)m=0;else{d=0;do{Fg((k[e>>2]|0)+(d*2096|0)|0,0,2084)|0;d=d+1|0}while((d|0)<(c|0));k[p>>2]=d;r=q;return}do{Fg((k[e>>2]|0)+(m*2096|0)|0,0,2084)|0;n=ia(m,b)|0;o=0;do{j=k[e>>2]|0;i=n+o|0;h=k[a>>2]|0;g=j+(m*2096|0)+2080|0;k[g>>2]=(k[g>>2]|0)+(k[h+(i*2096|0)+2080>>2]|0);g=0;do{s=j+(m*2096|0)+(g<<2)|0;k[s>>2]=(k[s>>2]|0)+(k[h+(i*2096|0)+(g<<2)>>2]|0);g=g+1|0}while((g|0)!=520);j=k[d>>2]|0;if((j|0)==(k[l>>2]|0))Zc(f,p);else{k[j>>2]=m;k[d>>2]=j+4}o=o+1|0}while((o|0)!=(b|0));m=m+1|0;k[p>>2]=m}while((m|0)<(c|0));r=q;return}function hf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,l=0,m=0,n=0,o=0;k[a>>2]=b;k[a+4>>2]=c;p[a+8>>3]=d;k[a+16>>2]=0;i=a+20|0;k[i>>2]=f;m=a+24|0;k[m>>2]=g;k[a+28>>2]=c;k[a+32>>2]=0;k[a+36>>2]=0;k[a+64>>2]=0;l=((e|0)/(c|0)|0)+1|0;n=(l|0)>257?257:l;g=f+16|0;b=f+20|0;c=k[b>>2]|0;e=k[g>>2]|0;h=c-e>>2;if(l>>>0<=h>>>0){if(l>>>0<h>>>0?(j=e+(l<<2)|0,(c|0)!=(j|0)):0)k[b>>2]=c+(~((c+-4-j|0)>>>2)<<2);}else{hd(g,l-h|0);f=k[i>>2]|0}g=f+4|0;b=f+8|0;c=k[b>>2]|0;e=k[g>>2]|0;h=c-e>>2;if(l>>>0<=h>>>0){if(l>>>0<h>>>0?(o=e+(l<<2)|0,(c|0)!=(o|0)):0)k[b>>2]=c+(~((c+-4-o|0)>>>2)<<2);}else hd(g,l-h|0);f=k[m>>2]|0;c=f+4|0;b=k[c>>2]|0;h=k[f>>2]|0;e=(b-h|0)/1040|0;if(n>>>0>e>>>0){Ld(f,n-e|0);m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}if(n>>>0>=e>>>0){m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}f=h+(n*1040|0)|0;if((b|0)==(f|0)){m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}k[c>>2]=b+(~(((b+-1040-f|0)>>>0)/1040|0)*1040|0);m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}function jf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,l=0,m=0,n=0,o=0;k[a>>2]=b;k[a+4>>2]=c;p[a+8>>3]=d;k[a+16>>2]=0;i=a+20|0;k[i>>2]=f;m=a+24|0;k[m>>2]=g;k[a+28>>2]=c;k[a+32>>2]=0;k[a+36>>2]=0;k[a+64>>2]=0;l=((e|0)/(c|0)|0)+1|0;n=(l|0)>257?257:l;g=f+16|0;b=f+20|0;c=k[b>>2]|0;e=k[g>>2]|0;h=c-e>>2;if(l>>>0<=h>>>0){if(l>>>0<h>>>0?(j=e+(l<<2)|0,(c|0)!=(j|0)):0)k[b>>2]=c+(~((c+-4-j|0)>>>2)<<2);}else{hd(g,l-h|0);f=k[i>>2]|0}g=f+4|0;b=f+8|0;c=k[b>>2]|0;e=k[g>>2]|0;h=c-e>>2;if(l>>>0<=h>>>0){if(l>>>0<h>>>0?(o=e+(l<<2)|0,(c|0)!=(o|0)):0)k[b>>2]=c+(~((c+-4-o|0)>>>2)<<2);}else hd(g,l-h|0);f=k[m>>2]|0;c=f+4|0;b=k[c>>2]|0;h=k[f>>2]|0;e=(b-h|0)/2832|0;if(n>>>0>e>>>0){yd(f,n-e|0);m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}if(n>>>0>=e>>>0){m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}f=h+(n*2832|0)|0;if((b|0)==(f|0)){m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}k[c>>2]=b+(~(((b+-2832-f|0)>>>0)/2832|0)*2832|0);m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}function kf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,l=0,m=0,n=0,o=0;k[a>>2]=b;k[a+4>>2]=c;p[a+8>>3]=d;k[a+16>>2]=0;i=a+20|0;k[i>>2]=f;m=a+24|0;k[m>>2]=g;k[a+28>>2]=c;k[a+32>>2]=0;k[a+36>>2]=0;k[a+64>>2]=0;l=((e|0)/(c|0)|0)+1|0;n=(l|0)>257?257:l;g=f+16|0;b=f+20|0;c=k[b>>2]|0;e=k[g>>2]|0;h=c-e>>2;if(l>>>0<=h>>>0){if(l>>>0<h>>>0?(j=e+(l<<2)|0,(c|0)!=(j|0)):0)k[b>>2]=c+(~((c+-4-j|0)>>>2)<<2);}else{hd(g,l-h|0);f=k[i>>2]|0}g=f+4|0;b=f+8|0;c=k[b>>2]|0;e=k[g>>2]|0;h=c-e>>2;if(l>>>0<=h>>>0){if(l>>>0<h>>>0?(o=e+(l<<2)|0,(c|0)!=(o|0)):0)k[b>>2]=c+(~((c+-4-o|0)>>>2)<<2);}else hd(g,l-h|0);f=k[m>>2]|0;c=f+4|0;b=k[c>>2]|0;h=k[f>>2]|0;e=(b-h|0)/2096|0;if(n>>>0>e>>>0){gd(f,n-e|0);m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}if(n>>>0>=e>>>0){m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}f=h+(n*2096|0)|0;if((b|0)==(f|0)){m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}k[c>>2]=b+(~(((b+-2096-f|0)>>>0)/2096|0)*2096|0);m=a+44|0;k[m>>2]=0;m=a+40|0;k[m>>2]=0;return}function lf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0.0,j=0.0,l=0,m=0.0,n=0,q=0.0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;I=r;r=r+5696|0;A=I+32|0;z=I+16|0;B=I;E=a+32|0;l=k[E>>2]|0;C=a+4|0;h=k[C>>2]|0;if((l|0)<(h|0)){k[E>>2]=h;l=h}G=a+16|0;v=k[G>>2]|0;if(v){if((l|0)>0){x=a+24|0;c=k[x>>2]|0;y=a+36|0;s=k[y>>2]|0;f=k[c>>2]|0;n=f+(s*2832|0)|0;t=k[a>>2]|0;f=f+(s*2832|0)+(t<<2)|0;u=(t&1|0)==0;if(u){m=0.0;g=0}else{i=0.0;g=0;D=27}while(1){if((D|0)==27){D=0;h=k[n>>2]|0;j=+(h|0);if((h|0)<256)m=+o[316384+(h<<2)>>2];else m=+kg(j);n=n+4|0;m=i-j*m;g=h+g|0}if(n>>>0>=f>>>0)break;h=k[n>>2]|0;i=+(h|0);if((h|0)<256)j=+o[316384+(h<<2)>>2];else j=+kg(i);n=n+4|0;i=m-i*j;g=h+g|0;D=27}i=+(g|0);if(g){if((g|0)<256)j=+o[316384+(g<<2)>>2];else j=+kg(i);m=m+i*j}Fg(A|0,0,2820)|0;Fg(A+2832|0,0,2820)|0;q=m<i?i:m;h=k[c>>2]|0;d=0;do{g=k[a+40+(d<<2)>>2]|0;f=A+(d*2832|0)|0;Kg(f|0,h+(s*2832|0)|0,2832)|0;h=k[c>>2]|0;n=A+(d*2832|0)+2816|0;k[n>>2]=(k[n>>2]|0)+(k[h+(g*2832|0)+2816>>2]|0);n=0;do{e=A+(d*2832|0)+(n<<2)|0;k[e>>2]=(k[e>>2]|0)+(k[h+(g*2832|0)+(n<<2)>>2]|0);n=n+1|0}while((n|0)!=704);e=A+(d*2832|0)+(t<<2)|0;if(u){m=0.0;g=0}else{i=0.0;g=0;D=45}while(1){if((D|0)==45){D=0;n=k[f>>2]|0;j=+(n|0);if((n|0)<256)m=+o[316384+(n<<2)>>2];else m=+kg(j);f=f+4|0;m=i-j*m;g=n+g|0}if(f>>>0>=e>>>0)break;n=k[f>>2]|0;i=+(n|0);if((n|0)<256)j=+o[316384+(n<<2)>>2];else j=+kg(i);f=f+4|0;i=m-i*j;g=n+g|0;D=45}i=+(g|0);if(g){if((g|0)<256)j=+o[316384+(g<<2)>>2];else j=+kg(i);m=m+i*j}i=m<i?i:m;p[z+(d<<3)>>3]=i;p[B+(d<<3)>>3]=i-q-+p[a+48+(d<<3)>>3];d=d+1|0}while((d|0)!=2);f=a+20|0;g=k[f>>2]|0;m=+p[B>>3];if(((k[g>>2]|0)<256?(w=+p[a+8>>3],m>w):0)?+p[B+8>>3]>w:0){k[(k[g+16>>2]|0)+(v<<2)>>2]=l;k[(k[g+4>>2]|0)+(k[G>>2]<<2)>>2]=k[g>>2];B=a+40|0;k[a+44>>2]=k[B>>2];k[B>>2]=k[g>>2];B=a+48|0;p[a+56>>3]=+p[B>>3];p[B>>3]=q;k[G>>2]=(k[G>>2]|0)+1;k[g>>2]=(k[g>>2]|0)+1;k[y>>2]=(k[y>>2]|0)+1;k[E>>2]=0;k[a+64>>2]=0;k[a+28>>2]=k[C>>2]}else D=59;do if((D|0)==59){n=g+16|0;if(+p[B+8>>3]<m+-20.0){k[(k[n>>2]|0)+(v<<2)>>2]=l;D=k[G>>2]|0;v=k[g+4>>2]|0;k[v+(D<<2)>>2]=k[v+(D+-2<<2)>>2];D=a+40|0;v=a+44|0;u=k[D>>2]|0;B=k[v>>2]|0;k[D>>2]=B;k[v>>2]=u;Kg(h+(B*2832|0)|0,A+2832|0,2832)|0;B=a+48|0;p[a+56>>3]=+p[B>>3];p[B>>3]=+p[z+8>>3];k[G>>2]=(k[G>>2]|0)+1;k[E>>2]=0;Fg((k[k[x>>2]>>2]|0)+((k[y>>2]|0)*2832|0)|0,0,2820)|0;k[a+64>>2]=0;k[a+28>>2]=k[C>>2];break}B=(k[n>>2]|0)+(v+-1<<2)|0;k[B>>2]=(k[B>>2]|0)+l;Kg(h+((k[a+40>>2]|0)*2832|0)|0,A|0,2832)|0;j=+p[z>>3];p[a+48>>3]=j;if((k[k[f>>2]>>2]|0)==1)p[a+56>>3]=j;k[E>>2]=0;Fg((k[k[x>>2]>>2]|0)+((k[y>>2]|0)*2832|0)|0,0,2820)|0;A=a+64|0;B=k[A>>2]|0;k[A>>2]=B+1;if((B|0)>0){B=a+28|0;k[B>>2]=(k[B>>2]|0)+(k[C>>2]|0);}}while(0);}}else{e=k[a+20>>2]|0;k[k[e+16>>2]>>2]=l;k[k[e+4>>2]>>2]=0;h=k[k[a+24>>2]>>2]|0;C=k[a>>2]|0;f=h+(C<<2)|0;if(!(C&1)){i=0.0;n=0}else{i=0.0;g=0;D=10}while(1){if((D|0)==10){l=k[h>>2]|0;j=+(l|0);if((l|0)<256)m=+o[316384+(l<<2)>>2];else m=+kg(j);h=h+4|0;i=i-j*m;n=l+g|0}if(h>>>0>=f>>>0)break;l=k[h>>2]|0;j=+(l|0);if((l|0)<256)m=+o[316384+(l<<2)>>2];else m=+kg(j);h=h+4|0;i=i-j*m;g=l+n|0;D=10}m=+(n|0);if(n){if((n|0)<256)j=+o[316384+(n<<2)>>2];else j=+kg(m);i=i+m*j}i=i<m?m:i;p[a+48>>3]=i;p[a+56>>3]=i;k[G>>2]=(k[G>>2]|0)+1;k[e>>2]=(k[e>>2]|0)+1;C=a+36|0;k[C>>2]=(k[C>>2]|0)+1;k[E>>2]=0}if(!b){r=I;return}d=k[a+24>>2]|0;n=a+20|0;c=k[n>>2]|0;l=k[c>>2]|0;h=d+4|0;g=k[h>>2]|0;f=k[d>>2]|0;e=(g-f|0)/2832|0;if(l>>>0<=e>>>0){if(l>>>0<e>>>0?(F=f+(l*2832|0)|0,(g|0)!=(F|0)):0)k[h>>2]=g+(~(((g+-2832-F|0)>>>0)/2832|0)*2832|0);}else{yd(d,l-e|0);c=k[n>>2]|0}g=c+4|0;h=k[G>>2]|0;f=c+8|0;e=k[f>>2]|0;d=k[g>>2]|0;l=e-d>>2;if(h>>>0<=l>>>0){if(h>>>0<l>>>0?(H=d+(h<<2)|0,(e|0)!=(H|0)):0)k[f>>2]=e+(~((e+-4-H|0)>>>2)<<2);}else{hd(g,h-l|0);c=k[n>>2]|0;h=k[G>>2]|0}e=c+16|0;f=c+20|0;g=k[f>>2]|0;c=k[e>>2]|0;d=g-c>>2;if(h>>>0>d>>>0){hd(e,h-d|0);r=I;return}if(h>>>0>=d>>>0){r=I;return}c=c+(h<<2)|0;if((g|0)==(c|0)){r=I;return}k[f>>2]=g+(~((g+-4-c|0)>>>2)<<2);r=I;return}function mf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0.0,j=0.0,l=0,m=0.0,n=0,q=0.0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;I=r;r=r+2112|0;A=I+32|0;z=I+16|0;B=I;E=a+32|0;l=k[E>>2]|0;C=a+4|0;h=k[C>>2]|0;if((l|0)<(h|0)){k[E>>2]=h;l=h}G=a+16|0;v=k[G>>2]|0;if(v){if((l|0)>0){x=a+24|0;c=k[x>>2]|0;y=a+36|0;s=k[y>>2]|0;f=k[c>>2]|0;n=f+(s*1040|0)|0;t=k[a>>2]|0;f=f+(s*1040|0)+(t<<2)|0;u=(t&1|0)==0;if(u){m=0.0;g=0}else{i=0.0;g=0;D=27}while(1){if((D|0)==27){D=0;h=k[n>>2]|0;j=+(h|0);if((h|0)<256)m=+o[316384+(h<<2)>>2];else m=+kg(j);n=n+4|0;m=i-j*m;g=h+g|0}if(n>>>0>=f>>>0)break;h=k[n>>2]|0;i=+(h|0);if((h|0)<256)j=+o[316384+(h<<2)>>2];else j=+kg(i);n=n+4|0;i=m-i*j;g=h+g|0;D=27}i=+(g|0);if(g){if((g|0)<256)j=+o[316384+(g<<2)>>2];else j=+kg(i);m=m+i*j}Fg(A|0,0,1028)|0;Fg(A+1040|0,0,1028)|0;q=m<i?i:m;h=k[c>>2]|0;d=0;do{g=k[a+40+(d<<2)>>2]|0;f=A+(d*1040|0)|0;Kg(f|0,h+(s*1040|0)|0,1040)|0;h=k[c>>2]|0;n=A+(d*1040|0)+1024|0;k[n>>2]=(k[n>>2]|0)+(k[h+(g*1040|0)+1024>>2]|0);n=0;do{e=A+(d*1040|0)+(n<<2)|0;k[e>>2]=(k[e>>2]|0)+(k[h+(g*1040|0)+(n<<2)>>2]|0);n=n+1|0}while((n|0)!=256);e=A+(d*1040|0)+(t<<2)|0;if(u){m=0.0;g=0}else{i=0.0;g=0;D=45}while(1){if((D|0)==45){D=0;n=k[f>>2]|0;j=+(n|0);if((n|0)<256)m=+o[316384+(n<<2)>>2];else m=+kg(j);f=f+4|0;m=i-j*m;g=n+g|0}if(f>>>0>=e>>>0)break;n=k[f>>2]|0;i=+(n|0);if((n|0)<256)j=+o[316384+(n<<2)>>2];else j=+kg(i);f=f+4|0;i=m-i*j;g=n+g|0;D=45}i=+(g|0);if(g){if((g|0)<256)j=+o[316384+(g<<2)>>2];else j=+kg(i);m=m+i*j}i=m<i?i:m;p[z+(d<<3)>>3]=i;p[B+(d<<3)>>3]=i-q-+p[a+48+(d<<3)>>3];d=d+1|0}while((d|0)!=2);f=a+20|0;g=k[f>>2]|0;m=+p[B>>3];if(((k[g>>2]|0)<256?(w=+p[a+8>>3],m>w):0)?+p[B+8>>3]>w:0){k[(k[g+16>>2]|0)+(v<<2)>>2]=l;k[(k[g+4>>2]|0)+(k[G>>2]<<2)>>2]=k[g>>2];B=a+40|0;k[a+44>>2]=k[B>>2];k[B>>2]=k[g>>2];B=a+48|0;p[a+56>>3]=+p[B>>3];p[B>>3]=q;k[G>>2]=(k[G>>2]|0)+1;k[g>>2]=(k[g>>2]|0)+1;k[y>>2]=(k[y>>2]|0)+1;k[E>>2]=0;k[a+64>>2]=0;k[a+28>>2]=k[C>>2]}else D=59;do if((D|0)==59){n=g+16|0;if(+p[B+8>>3]<m+-20.0){k[(k[n>>2]|0)+(v<<2)>>2]=l;D=k[G>>2]|0;v=k[g+4>>2]|0;k[v+(D<<2)>>2]=k[v+(D+-2<<2)>>2];D=a+40|0;v=a+44|0;u=k[D>>2]|0;B=k[v>>2]|0;k[D>>2]=B;k[v>>2]=u;Kg(h+(B*1040|0)|0,A+1040|0,1040)|0;B=a+48|0;p[a+56>>3]=+p[B>>3];p[B>>3]=+p[z+8>>3];k[G>>2]=(k[G>>2]|0)+1;k[E>>2]=0;Fg((k[k[x>>2]>>2]|0)+((k[y>>2]|0)*1040|0)|0,0,1028)|0;k[a+64>>2]=0;k[a+28>>2]=k[C>>2];break}B=(k[n>>2]|0)+(v+-1<<2)|0;k[B>>2]=(k[B>>2]|0)+l;Kg(h+((k[a+40>>2]|0)*1040|0)|0,A|0,1040)|0;j=+p[z>>3];p[a+48>>3]=j;if((k[k[f>>2]>>2]|0)==1)p[a+56>>3]=j;k[E>>2]=0;Fg((k[k[x>>2]>>2]|0)+((k[y>>2]|0)*1040|0)|0,0,1028)|0;A=a+64|0;B=k[A>>2]|0;k[A>>2]=B+1;if((B|0)>0){B=a+28|0;k[B>>2]=(k[B>>2]|0)+(k[C>>2]|0);}}while(0);}}else{e=k[a+20>>2]|0;k[k[e+16>>2]>>2]=l;k[k[e+4>>2]>>2]=0;h=k[k[a+24>>2]>>2]|0;C=k[a>>2]|0;f=h+(C<<2)|0;if(!(C&1)){i=0.0;n=0}else{i=0.0;g=0;D=10}while(1){if((D|0)==10){l=k[h>>2]|0;j=+(l|0);if((l|0)<256)m=+o[316384+(l<<2)>>2];else m=+kg(j);h=h+4|0;i=i-j*m;n=l+g|0}if(h>>>0>=f>>>0)break;l=k[h>>2]|0;j=+(l|0);if((l|0)<256)m=+o[316384+(l<<2)>>2];else m=+kg(j);h=h+4|0;i=i-j*m;g=l+n|0;D=10}m=+(n|0);if(n){if((n|0)<256)j=+o[316384+(n<<2)>>2];else j=+kg(m);i=i+m*j}i=i<m?m:i;p[a+48>>3]=i;p[a+56>>3]=i;k[G>>2]=(k[G>>2]|0)+1;k[e>>2]=(k[e>>2]|0)+1;C=a+36|0;k[C>>2]=(k[C>>2]|0)+1;k[E>>2]=0}if(!b){r=I;return}d=k[a+24>>2]|0;n=a+20|0;c=k[n>>2]|0;l=k[c>>2]|0;h=d+4|0;g=k[h>>2]|0;f=k[d>>2]|0;e=(g-f|0)/1040|0;if(l>>>0<=e>>>0){if(l>>>0<e>>>0?(F=f+(l*1040|0)|0,(g|0)!=(F|0)):0)k[h>>2]=g+(~(((g+-1040-F|0)>>>0)/1040|0)*1040|0);}else{Ld(d,l-e|0);c=k[n>>2]|0}g=c+4|0;h=k[G>>2]|0;f=c+8|0;e=k[f>>2]|0;d=k[g>>2]|0;l=e-d>>2;if(h>>>0<=l>>>0){if(h>>>0<l>>>0?(H=d+(h<<2)|0,(e|0)!=(H|0)):0)k[f>>2]=e+(~((e+-4-H|0)>>>2)<<2);}else{hd(g,h-l|0);c=k[n>>2]|0;h=k[G>>2]|0}e=c+16|0;f=c+20|0;g=k[f>>2]|0;c=k[e>>2]|0;d=g-c>>2;if(h>>>0>d>>>0){hd(e,h-d|0);r=I;return}if(h>>>0>=d>>>0){r=I;return}c=c+(h<<2)|0;if((g|0)==(c|0)){r=I;return}k[f>>2]=g+(~((g+-4-c|0)>>>2)<<2);r=I;return}function nf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0.0,j=0.0,l=0,m=0.0,n=0,q=0.0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;I=r;r=r+4224|0;A=I+32|0;z=I+16|0;B=I;E=a+32|0;l=k[E>>2]|0;C=a+4|0;h=k[C>>2]|0;if((l|0)<(h|0)){k[E>>2]=h;l=h}G=a+16|0;v=k[G>>2]|0;if(v){if((l|0)>0){x=a+24|0;c=k[x>>2]|0;y=a+36|0;s=k[y>>2]|0;f=k[c>>2]|0;n=f+(s*2096|0)|0;t=k[a>>2]|0;f=f+(s*2096|0)+(t<<2)|0;u=(t&1|0)==0;if(u){m=0.0;g=0}else{i=0.0;g=0;D=27}while(1){if((D|0)==27){D=0;h=k[n>>2]|0;j=+(h|0);if((h|0)<256)m=+o[316384+(h<<2)>>2];else m=+kg(j);n=n+4|0;m=i-j*m;g=h+g|0}if(n>>>0>=f>>>0)break;h=k[n>>2]|0;i=+(h|0);if((h|0)<256)j=+o[316384+(h<<2)>>2];else j=+kg(i);n=n+4|0;i=m-i*j;g=h+g|0;D=27}i=+(g|0);if(g){if((g|0)<256)j=+o[316384+(g<<2)>>2];else j=+kg(i);m=m+i*j}Fg(A|0,0,2084)|0;Fg(A+2096|0,0,2084)|0;q=m<i?i:m;h=k[c>>2]|0;d=0;do{g=k[a+40+(d<<2)>>2]|0;f=A+(d*2096|0)|0;Kg(f|0,h+(s*2096|0)|0,2096)|0;h=k[c>>2]|0;n=A+(d*2096|0)+2080|0;k[n>>2]=(k[n>>2]|0)+(k[h+(g*2096|0)+2080>>2]|0);n=0;do{e=A+(d*2096|0)+(n<<2)|0;k[e>>2]=(k[e>>2]|0)+(k[h+(g*2096|0)+(n<<2)>>2]|0);n=n+1|0}while((n|0)!=520);e=A+(d*2096|0)+(t<<2)|0;if(u){m=0.0;g=0}else{i=0.0;g=0;D=45}while(1){if((D|0)==45){D=0;n=k[f>>2]|0;j=+(n|0);if((n|0)<256)m=+o[316384+(n<<2)>>2];else m=+kg(j);f=f+4|0;m=i-j*m;g=n+g|0}if(f>>>0>=e>>>0)break;n=k[f>>2]|0;i=+(n|0);if((n|0)<256)j=+o[316384+(n<<2)>>2];else j=+kg(i);f=f+4|0;i=m-i*j;g=n+g|0;D=45}i=+(g|0);if(g){if((g|0)<256)j=+o[316384+(g<<2)>>2];else j=+kg(i);m=m+i*j}i=m<i?i:m;p[z+(d<<3)>>3]=i;p[B+(d<<3)>>3]=i-q-+p[a+48+(d<<3)>>3];d=d+1|0}while((d|0)!=2);f=a+20|0;g=k[f>>2]|0;m=+p[B>>3];if(((k[g>>2]|0)<256?(w=+p[a+8>>3],m>w):0)?+p[B+8>>3]>w:0){k[(k[g+16>>2]|0)+(v<<2)>>2]=l;k[(k[g+4>>2]|0)+(k[G>>2]<<2)>>2]=k[g>>2];B=a+40|0;k[a+44>>2]=k[B>>2];k[B>>2]=k[g>>2];B=a+48|0;p[a+56>>3]=+p[B>>3];p[B>>3]=q;k[G>>2]=(k[G>>2]|0)+1;k[g>>2]=(k[g>>2]|0)+1;k[y>>2]=(k[y>>2]|0)+1;k[E>>2]=0;k[a+64>>2]=0;k[a+28>>2]=k[C>>2]}else D=59;do if((D|0)==59){n=g+16|0;if(+p[B+8>>3]<m+-20.0){k[(k[n>>2]|0)+(v<<2)>>2]=l;D=k[G>>2]|0;v=k[g+4>>2]|0;k[v+(D<<2)>>2]=k[v+(D+-2<<2)>>2];D=a+40|0;v=a+44|0;u=k[D>>2]|0;B=k[v>>2]|0;k[D>>2]=B;k[v>>2]=u;Kg(h+(B*2096|0)|0,A+2096|0,2096)|0;B=a+48|0;p[a+56>>3]=+p[B>>3];p[B>>3]=+p[z+8>>3];k[G>>2]=(k[G>>2]|0)+1;k[E>>2]=0;Fg((k[k[x>>2]>>2]|0)+((k[y>>2]|0)*2096|0)|0,0,2084)|0;k[a+64>>2]=0;k[a+28>>2]=k[C>>2];break}B=(k[n>>2]|0)+(v+-1<<2)|0;k[B>>2]=(k[B>>2]|0)+l;Kg(h+((k[a+40>>2]|0)*2096|0)|0,A|0,2096)|0;j=+p[z>>3];p[a+48>>3]=j;if((k[k[f>>2]>>2]|0)==1)p[a+56>>3]=j;k[E>>2]=0;Fg((k[k[x>>2]>>2]|0)+((k[y>>2]|0)*2096|0)|0,0,2084)|0;A=a+64|0;B=k[A>>2]|0;k[A>>2]=B+1;if((B|0)>0){B=a+28|0;k[B>>2]=(k[B>>2]|0)+(k[C>>2]|0);}}while(0);}}else{e=k[a+20>>2]|0;k[k[e+16>>2]>>2]=l;k[k[e+4>>2]>>2]=0;h=k[k[a+24>>2]>>2]|0;C=k[a>>2]|0;f=h+(C<<2)|0;if(!(C&1)){i=0.0;n=0}else{i=0.0;g=0;D=10}while(1){if((D|0)==10){l=k[h>>2]|0;j=+(l|0);if((l|0)<256)m=+o[316384+(l<<2)>>2];else m=+kg(j);h=h+4|0;i=i-j*m;n=l+g|0}if(h>>>0>=f>>>0)break;l=k[h>>2]|0;j=+(l|0);if((l|0)<256)m=+o[316384+(l<<2)>>2];else m=+kg(j);h=h+4|0;i=i-j*m;g=l+n|0;D=10}m=+(n|0);if(n){if((n|0)<256)j=+o[316384+(n<<2)>>2];else j=+kg(m);i=i+m*j}i=i<m?m:i;p[a+48>>3]=i;p[a+56>>3]=i;k[G>>2]=(k[G>>2]|0)+1;k[e>>2]=(k[e>>2]|0)+1;C=a+36|0;k[C>>2]=(k[C>>2]|0)+1;k[E>>2]=0}if(!b){r=I;return}d=k[a+24>>2]|0;n=a+20|0;c=k[n>>2]|0;l=k[c>>2]|0;h=d+4|0;g=k[h>>2]|0;f=k[d>>2]|0;e=(g-f|0)/2096|0;if(l>>>0<=e>>>0){if(l>>>0<e>>>0?(F=f+(l*2096|0)|0,(g|0)!=(F|0)):0)k[h>>2]=g+(~(((g+-2096-F|0)>>>0)/2096|0)*2096|0);}else{gd(d,l-e|0);c=k[n>>2]|0}g=c+4|0;h=k[G>>2]|0;f=c+8|0;e=k[f>>2]|0;d=k[g>>2]|0;l=e-d>>2;if(h>>>0<=l>>>0){if(h>>>0<l>>>0?(H=d+(h<<2)|0,(e|0)!=(H|0)):0)k[f>>2]=e+(~((e+-4-H|0)>>>2)<<2);}else{hd(g,h-l|0);c=k[n>>2]|0;h=k[G>>2]|0}e=c+16|0;f=c+20|0;g=k[f>>2]|0;c=k[e>>2]|0;d=g-c>>2;if(h>>>0>d>>>0){hd(e,h-d|0);r=I;return}if(h>>>0>=d>>>0){r=I;return}c=c+(h<<2)|0;if((g|0)==(c|0)){r=I;return}k[f>>2]=g+(~((g+-4-c|0)>>>2)<<2);r=I;return}function of(a,b,c){a=a|0;b=b|0;c=c|0;k[a>>2]=317416;k[a+4>>2]=b;k[a+8>>2]=c;k[a+12>>2]=0;return}function pf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=a+12|0;e=k[d>>2]|0;if((e+c|0)>>>0>(k[a+8>>2]|0)>>>0){d=0;return d|0}Kg((k[a+4>>2]|0)+e|0,b|0,c|0)|0;k[d>>2]=(k[d>>2]|0)+c;d=1;return d|0}function qf(a,b,c){a=a|0;b=b|0;c=c|0;k[a>>2]=317440;k[a+4>>2]=b;k[a+8>>2]=c;k[a+12>>2]=0;return}function rf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=a+12|0;e=k[d>>2]|0;f=k[a+8>>2]|0;if((f|0)==(e|0)){d=0;return d|0}f=f-e|0;b=f>>>0<b>>>0?f:b;f=(k[a+4>>2]|0)+e|0;k[d>>2]=b+e;k[c>>2]=b;d=f;return d|0}function sf(a){a=a|0;return}function tf(a){a=a|0;Df(a);return}function uf(a){a=a|0;return}function vf(a){a=a|0;Df(a);return}function wf(a,b){a=a|0;b=b|0;var c=0;c=r;r=r+16|0;k[c>>2]=b;b=k[w>>2]|0;za(b|0,a|0,c|0)|0;$a(10,b|0)|0;bb();}function xf(a){a=a|0;Aa(318208,318240,1164,318328);}function yf(a){a=a|0;Aa(318352,318376,303,318328);}function zf(){var a=0,b=0;a=r;r=r+16|0;if(!(Ta(318472,2)|0)){b=Qa(k[79616]|0)|0;r=a;return b|0}else wf(318480,a);return 0}function Af(a){a=a|0;var b=0;b=(a|0)==0?1:a;a=mg(b)|0;a:do if(!a){while(1){a=Kf()|0;if(!a)break;lb[a&3]();a=mg(b)|0;if(a)break a}a=Ca(4)|0;k[a>>2]=317616;ab(a|0,317648,5);}while(0);return a|0}function Bf(a,b){a=a|0;b=b|0;return Af(a)|0}function Cf(a){a=a|0;return Af(a)|0}function Df(a){a=a|0;ng(a);return}function Ef(a){a=a|0;Df(a);return}function Ff(a){a=a|0;return}function Gf(a){a=a|0;Df(a);return}function Hf(a){a=a|0;return 318536}function If(a){a=a|0;var b=0;b=r;r=r+16|0;lb[a&3]();wf(318552,b);}function Jf(){var a=0,b=0;a=zf()|0;if(((a|0)!=0?(b=k[a>>2]|0,(b|0)!=0):0)?(a=b+48|0,(k[a>>2]&-256|0)==1126902528?(k[a+4>>2]|0)==1129074247:0):0)If(k[b+12>>2]|0);a=k[79400]|0;k[79400]=a+0;If(a);}function Kf(){var a=0;a=k[79416]|0;k[79416]=a+0;return a|0}function Lf(a){a=a|0;return}function Mf(a){a=a|0;k[a>>2]=317704;ig(a+4|0);return}function Nf(a){a=a|0;Mf(a);Df(a);return}function Of(a){a=a|0;return k[a+4>>2]|0}function Pf(a){a=a|0;Mf(a);Df(a);return}function Qf(a){a=a|0;return}function Rf(a){a=a|0;return}function Sf(a){a=a|0;return}function Tf(a){a=a|0;return}function Uf(a){a=a|0;Df(a);return}function Vf(a){a=a|0;Df(a);return}function Wf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;g=r;r=r+64|0;f=g;if((a|0)!=(b|0))if((b|0)!=0?(e=_f(b,317880,317936,0)|0,(e|0)!=0):0){b=f;d=b+56|0;do{k[b>>2]=0;b=b+4|0}while((b|0)<(d|0));k[f>>2]=e;k[f+8>>2]=a;k[f+12>>2]=-1;k[f+48>>2]=1;ob[k[(k[e>>2]|0)+28>>2]&3](e,f,k[c>>2]|0,1);if((k[f+24>>2]|0)==1){k[c>>2]=k[f+16>>2];b=1}else b=0}else b=0;else b=1;r=g;return b|0}function Xf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;a=b+16|0;e=k[a>>2]|0;do if(e){if((e|0)!=(c|0)){a=b+36|0;k[a>>2]=(k[a>>2]|0)+1;k[b+24>>2]=2;i[b+54>>0]=1;break}a=b+24|0;if((k[a>>2]|0)==2)k[a>>2]=d}else{k[a>>2]=c;k[b+24>>2]=d;k[b+36>>2]=1}while(0);return}function Yf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if((a|0)==(k[b+8>>2]|0))Xf(0,b,c,d);return}function Zf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if((a|0)==(k[b+8>>2]|0))Xf(0,b,c,d);else{a=k[a+8>>2]|0;ob[k[(k[a>>2]|0)+28>>2]&3](a,b,c,d);}return}function _f(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+64|0;p=q;o=k[a>>2]|0;n=a+(k[o+-8>>2]|0)|0;o=k[o+-4>>2]|0;k[p>>2]=c;k[p+4>>2]=a;k[p+8>>2]=b;k[p+12>>2]=d;e=p+16|0;f=p+20|0;g=p+24|0;h=p+28|0;l=p+32|0;m=p+40|0;b=(o|0)==(c|0);a=e;d=a+36|0;do{k[a>>2]=0;a=a+4|0}while((a|0)<(d|0));j[e+36>>1]=0;i[e+38>>0]=0;do if(b){k[p+48>>2]=1;mb[k[(k[c>>2]|0)+20>>2]&3](c,p,n,n,1,0);d=(k[g>>2]|0)==1?n:0}else{ib[k[(k[o>>2]|0)+24>>2]&3](o,p,n,1,0);d=k[p+36>>2]|0;if(!d){d=(k[m>>2]|0)==1&(k[h>>2]|0)==1&(k[l>>2]|0)==1?k[f>>2]|0:0;break}else if((d|0)!=1){d=0;break}if((k[g>>2]|0)!=1?!((k[m>>2]|0)==0&(k[h>>2]|0)==1&(k[l>>2]|0)==1):0){d=0;break}d=k[e>>2]|0}while(0);r=q;return d|0}function $f(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;i[b+53>>0]=1;do if((k[b+4>>2]|0)==(d|0)){i[b+52>>0]=1;d=b+16|0;a=k[d>>2]|0;if(!a){k[d>>2]=c;k[b+24>>2]=e;k[b+36>>2]=1;if(!((e|0)==1?(k[b+48>>2]|0)==1:0))break;i[b+54>>0]=1;break}if((a|0)!=(c|0)){a=b+36|0;k[a>>2]=(k[a>>2]|0)+1;i[b+54>>0]=1;break}d=b+24|0;a=k[d>>2]|0;if((a|0)==2){k[d>>2]=e;a=e}if((a|0)==1?(k[b+48>>2]|0)==1:0)i[b+54>>0]=1}while(0);return}function ag(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;a:do if((a|0)==(k[b+8>>2]|0)){if((k[b+4>>2]|0)==(c|0)?(f=b+28|0,(k[f>>2]|0)!=1):0)k[f>>2]=d}else{if((a|0)!=(k[b>>2]|0)){f=k[a+8>>2]|0;ib[k[(k[f>>2]|0)+24>>2]&3](f,b,c,d,e);break}if((k[b+16>>2]|0)!=(c|0)?(g=b+20|0,(k[g>>2]|0)!=(c|0)):0){k[b+32>>2]=d;d=b+44|0;if((k[d>>2]|0)==4)break;f=b+52|0;i[f>>0]=0;j=b+53|0;i[j>>0]=0;a=k[a+8>>2]|0;mb[k[(k[a>>2]|0)+20>>2]&3](a,b,c,c,1,e);if(i[j>>0]|0){if(!(i[f>>0]|0)){f=1;h=13}}else{f=0;h=13}do if((h|0)==13){k[g>>2]=c;a=b+40|0;k[a>>2]=(k[a>>2]|0)+1;if((k[b+36>>2]|0)==1?(k[b+24>>2]|0)==2:0){i[b+54>>0]=1;if(f)break}else h=16;if((h|0)==16?f:0)break;k[d>>2]=4;break a}while(0);k[d>>2]=3;break}if((d|0)==1)k[b+32>>2]=1}while(0);return}function bg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;do if((a|0)==(k[b+8>>2]|0)){if((k[b+4>>2]|0)==(c|0)?(g=b+28|0,(k[g>>2]|0)!=1):0)k[g>>2]=d}else if((a|0)==(k[b>>2]|0)){if((k[b+16>>2]|0)!=(c|0)?(f=b+20|0,(k[f>>2]|0)!=(c|0)):0){k[b+32>>2]=d;k[f>>2]=c;f=b+40|0;k[f>>2]=(k[f>>2]|0)+1;if((k[b+36>>2]|0)==1?(k[b+24>>2]|0)==2:0)i[b+54>>0]=1;k[b+44>>2]=4;break}if((d|0)==1)k[b+32>>2]=1}while(0);return}function cg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if((a|0)==(k[b+8>>2]|0))$f(0,b,c,d,e);else{a=k[a+8>>2]|0;mb[k[(k[a>>2]|0)+20>>2]&3](a,b,c,d,e,f);}return}function dg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if((a|0)==(k[b+8>>2]|0))$f(0,b,c,d,e);return}function eg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+16|0;d=e;k[d>>2]=k[c>>2];a=hb[k[(k[a>>2]|0)+16>>2]&3](a,b,d)|0;if(a)k[c>>2]=k[d>>2];r=e;return a&1|0}function fg(a){a=a|0;if(!a)a=0;else a=(_f(a,317880,318048,0)|0)!=0;return a&1|0}function gg(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0;e=r;r=r+48|0;g=e+32|0;c=e+24|0;h=e+16|0;f=e;e=e+36|0;a=zf()|0;if((a|0)!=0?(d=k[a>>2]|0,(d|0)!=0):0){a=d+48|0;b=k[a>>2]|0;a=k[a+4>>2]|0;if(!((b&-256|0)==1126902528&(a|0)==1129074247)){k[c>>2]=k[79676];wf(318808,c);}if((b|0)==1126902529&(a|0)==1129074247)a=k[d+44>>2]|0;else a=d+80|0;k[e>>2]=a;b=k[d>>2]|0;a=k[b+4>>2]|0;if(hb[k[(k[317688>>2]|0)+16>>2]&3](317688,b,e)|0){b=k[e>>2]|0;c=k[79676]|0;b=kb[k[(k[b>>2]|0)+8>>2]&3](b)|0;k[f>>2]=c;k[f+4>>2]=a;k[f+8>>2]=b;wf(318712,f);}else{k[h>>2]=k[79676];k[h+4>>2]=a;wf(318760,h);}}wf(318848,g);}function hg(){var a=0;a=r;r=r+16|0;if(!(wa(318464,15)|0)){r=a;return}else wf(318592,a);}function ig(a){a=a|0;var b=0,c=0;c=(k[a>>2]|0)+-4|0;b=k[c>>2]|0;k[c>>2]=b+-1;if((b+-1|0)<0)Df((k[a>>2]|0)+-12|0);return}function jg(a){a=a|0;var b=0;b=r;r=r+16|0;ng(a);if(!(_a(k[79616]|0,0)|0)){r=b;return}else wf(318648,b);}function kg(a){a=+a;var b=0,c=0,d=0,e=0.0,f=0.0,g=0.0,h=0.0,i=0.0;p[t>>3]=a;c=k[t>>2]|0;b=k[t+4>>2]|0;d=(b|0)<0;do if(!(d|b>>>0<1048576)){if(b>>>0>2146435071)return +a;if((c|0)==0&0==0&(b|0)==1072693248){a=0.0;return +a}else{d=c;c=-1023}}else{if((c|0)==0&(b&2147483647|0)==0){a=-1.0/(a*a);return +a}if(!d){p[t>>3]=a*18014398509481984.0;b=k[t+4>>2]|0;d=k[t>>2]|0;c=-1077;break}a=(a-a)/0.0;return +a}while(0);b=b+614242|0;k[t>>2]=d;k[t+4>>2]=(b&1048575)+1072079006;h=+p[t>>3]+-1.0;a=h*(h*.5);i=h/(h+2.0);f=i*i;g=f*f;p[t>>3]=h-a;d=k[t+4>>2]|0;k[t>>2]=0;k[t+4>>2]=d;e=+p[t>>3];a=i*(a+(g*(g*(g*.15313837699209373+.22222198432149784)+.3999999999940942)+f*(g*(g*(g*.14798198605116586+.1818357216161805)+.2857142874366239)+.6666666666666735)))+(h-e-a);h=e*1.4426950407214463;g=+(c+(b>>>20)|0);f=g+h;a=f+(h+(g-f)+(a*1.4426950407214463+(e+a)*1.6751713164886512e-10));return +a}function lg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;if(!c){a=0;return a|0}else{e=c;d=a}while(1){c=i[d>>0]|0;a=i[b>>0]|0;if(c<<24>>24!=a<<24>>24)break;e=e+-1|0;if(!e){a=0;f=5;break}else{d=d+1|0;b=b+1|0}}if((f|0)==5)return a|0;a=(c&255)-(a&255)|0;return a|0}function mg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;do if(a>>>0<245){q=a>>>0<11?16:a+11&-8;a=q>>>3;l=k[79720]|0;i=l>>>a;if(i&3){d=(i&1^1)+a|0;e=d<<1;b=318920+(e<<2)|0;e=318920+(e+2<<2)|0;f=k[e>>2]|0;g=f+8|0;h=k[g>>2]|0;do if((b|0)!=(h|0)){if(h>>>0<(k[79724]|0)>>>0)bb();c=h+12|0;if((k[c>>2]|0)==(f|0)){k[c>>2]=b;k[e>>2]=h;break}else bb();}else k[79720]=l&~(1<<d);while(0);w=d<<3;k[f+4>>2]=w|3;w=f+(w|4)|0;k[w>>2]=k[w>>2]|1;w=g;return w|0}b=k[79722]|0;if(q>>>0>b>>>0){if(i){e=2<<a;e=i<<a&(e|0-e);e=(e&0-e)+-1|0;a=e>>>12&16;e=e>>>a;d=e>>>5&8;e=e>>>d;c=e>>>2&4;e=e>>>c;f=e>>>1&2;e=e>>>f;g=e>>>1&1;g=(d|a|c|f|g)+(e>>>g)|0;e=g<<1;f=318920+(e<<2)|0;e=318920+(e+2<<2)|0;c=k[e>>2]|0;a=c+8|0;d=k[a>>2]|0;do if((f|0)!=(d|0)){if(d>>>0<(k[79724]|0)>>>0)bb();h=d+12|0;if((k[h>>2]|0)==(c|0)){k[h>>2]=f;k[e>>2]=d;j=k[79722]|0;break}else bb();}else{k[79720]=l&~(1<<g);j=b}while(0);w=g<<3;b=w-q|0;k[c+4>>2]=q|3;i=c+q|0;k[c+(q|4)>>2]=b|1;k[c+w>>2]=b;if(j){d=k[79725]|0;f=j>>>3;h=f<<1;e=318920+(h<<2)|0;g=k[79720]|0;f=1<<f;if(g&f){g=318920+(h+2<<2)|0;h=k[g>>2]|0;if(h>>>0<(k[79724]|0)>>>0)bb();else{m=g;n=h}}else{k[79720]=g|f;m=318920+(h+2<<2)|0;n=e}k[m>>2]=d;k[n+12>>2]=d;k[d+8>>2]=n;k[d+12>>2]=e}k[79722]=b;k[79725]=i;w=a;return w|0}a=k[79721]|0;if(a){g=(a&0-a)+-1|0;v=g>>>12&16;g=g>>>v;u=g>>>5&8;g=g>>>u;w=g>>>2&4;g=g>>>w;h=g>>>1&2;g=g>>>h;f=g>>>1&1;f=k[319184+((u|v|w|h|f)+(g>>>f)<<2)>>2]|0;g=(k[f+4>>2]&-8)-q|0;h=f;while(1){c=k[h+16>>2]|0;if(!c){c=k[h+20>>2]|0;if(!c){l=g;j=f;break}}h=(k[c+4>>2]&-8)-q|0;w=h>>>0<g>>>0;g=w?h:g;h=c;f=w?c:f}a=k[79724]|0;if(j>>>0<a>>>0)bb();b=j+q|0;if(j>>>0>=b>>>0)bb();i=k[j+24>>2]|0;f=k[j+12>>2]|0;do if((f|0)==(j|0)){g=j+20|0;h=k[g>>2]|0;if(!h){g=j+16|0;h=k[g>>2]|0;if(!h){d=0;break}}while(1){f=h+20|0;e=k[f>>2]|0;if(e){h=e;g=f;continue}f=h+16|0;e=k[f>>2]|0;if(!e)break;else{h=e;g=f}}if(g>>>0<a>>>0)bb();else{k[g>>2]=0;d=h;break}}else{e=k[j+8>>2]|0;if(e>>>0<a>>>0)bb();h=e+12|0;if((k[h>>2]|0)!=(j|0))bb();g=f+8|0;if((k[g>>2]|0)==(j|0)){k[h>>2]=f;k[g>>2]=e;d=f;break}else bb();}while(0);do if(i){h=k[j+28>>2]|0;g=319184+(h<<2)|0;if((j|0)==(k[g>>2]|0)){k[g>>2]=d;if(!d){k[79721]=k[79721]&~(1<<h);break}}else{if(i>>>0<(k[79724]|0)>>>0)bb();h=i+16|0;if((k[h>>2]|0)==(j|0))k[h>>2]=d;else k[i+20>>2]=d;if(!d)break}g=k[79724]|0;if(d>>>0<g>>>0)bb();k[d+24>>2]=i;h=k[j+16>>2]|0;do if(h)if(h>>>0<g>>>0)bb();else{k[d+16>>2]=h;k[h+24>>2]=d;break}while(0);h=k[j+20>>2]|0;if(h)if(h>>>0<(k[79724]|0)>>>0)bb();else{k[d+20>>2]=h;k[h+24>>2]=d;break}}while(0);if(l>>>0<16){w=l+q|0;k[j+4>>2]=w|3;w=j+(w+4)|0;k[w>>2]=k[w>>2]|1}else{k[j+4>>2]=q|3;k[j+(q|4)>>2]=l|1;k[j+(l+q)>>2]=l;c=k[79722]|0;if(c){d=k[79725]|0;f=c>>>3;h=f<<1;e=318920+(h<<2)|0;g=k[79720]|0;f=1<<f;if(g&f){h=318920+(h+2<<2)|0;g=k[h>>2]|0;if(g>>>0<(k[79724]|0)>>>0)bb();else{p=h;o=g}}else{k[79720]=g|f;p=318920+(h+2<<2)|0;o=e}k[p>>2]=d;k[o+12>>2]=d;k[d+8>>2]=o;k[d+12>>2]=e}k[79722]=l;k[79725]=b}w=j+8|0;return w|0}else z=q}else z=q}else if(a>>>0<=4294967231){a=a+11|0;p=a&-8;j=k[79721]|0;if(j){i=0-p|0;a=a>>>8;if(a)if(p>>>0>16777215)l=31;else{q=(a+1048320|0)>>>16&8;w=a<<q;o=(w+520192|0)>>>16&4;w=w<<o;l=(w+245760|0)>>>16&2;l=14-(o|q|l)+(w<<l>>>15)|0;l=p>>>(l+7|0)&1|l<<1}else l=0;a=k[319184+(l<<2)>>2]|0;a:do if(!a){g=0;a=0;w=86}else{d=i;g=0;c=p<<((l|0)==31?0:25-(l>>>1)|0);b=a;a=0;while(1){f=k[b+4>>2]&-8;i=f-p|0;if(i>>>0<d>>>0)if((f|0)==(p|0)){f=b;a=b;w=90;break a}else a=b;else i=d;w=k[b+20>>2]|0;b=k[b+16+(c>>>31<<2)>>2]|0;g=(w|0)==0|(w|0)==(b|0)?g:w;if(!b){w=86;break}else{d=i;c=c<<1}}}while(0);if((w|0)==86){if((g|0)==0&(a|0)==0){a=2<<l;a=j&(a|0-a);if(!a){z=p;break}a=(a&0-a)+-1|0;n=a>>>12&16;a=a>>>n;m=a>>>5&8;a=a>>>m;o=a>>>2&4;a=a>>>o;q=a>>>1&2;a=a>>>q;g=a>>>1&1;g=k[319184+((m|n|o|q|g)+(a>>>g)<<2)>>2]|0;a=0}if(!g){n=i;q=a}else{f=g;w=90}}if((w|0)==90)while(1){w=0;q=(k[f+4>>2]&-8)-p|0;g=q>>>0<i>>>0;i=g?q:i;a=g?f:a;g=k[f+16>>2]|0;if(g){f=g;w=90;continue}f=k[f+20>>2]|0;if(!f){n=i;q=a;break}else w=90}if((q|0)!=0?n>>>0<((k[79722]|0)-p|0)>>>0:0){a=k[79724]|0;if(q>>>0<a>>>0)bb();m=q+p|0;if(q>>>0>=m>>>0)bb();i=k[q+24>>2]|0;f=k[q+12>>2]|0;do if((f|0)==(q|0)){g=q+20|0;h=k[g>>2]|0;if(!h){g=q+16|0;h=k[g>>2]|0;if(!h){s=0;break}}while(1){f=h+20|0;e=k[f>>2]|0;if(e){h=e;g=f;continue}f=h+16|0;e=k[f>>2]|0;if(!e)break;else{h=e;g=f}}if(g>>>0<a>>>0)bb();else{k[g>>2]=0;s=h;break}}else{e=k[q+8>>2]|0;if(e>>>0<a>>>0)bb();h=e+12|0;if((k[h>>2]|0)!=(q|0))bb();g=f+8|0;if((k[g>>2]|0)==(q|0)){k[h>>2]=f;k[g>>2]=e;s=f;break}else bb();}while(0);do if(i){h=k[q+28>>2]|0;g=319184+(h<<2)|0;if((q|0)==(k[g>>2]|0)){k[g>>2]=s;if(!s){k[79721]=k[79721]&~(1<<h);break}}else{if(i>>>0<(k[79724]|0)>>>0)bb();h=i+16|0;if((k[h>>2]|0)==(q|0))k[h>>2]=s;else k[i+20>>2]=s;if(!s)break}g=k[79724]|0;if(s>>>0<g>>>0)bb();k[s+24>>2]=i;h=k[q+16>>2]|0;do if(h)if(h>>>0<g>>>0)bb();else{k[s+16>>2]=h;k[h+24>>2]=s;break}while(0);h=k[q+20>>2]|0;if(h)if(h>>>0<(k[79724]|0)>>>0)bb();else{k[s+20>>2]=h;k[h+24>>2]=s;break}}while(0);b:do if(n>>>0>=16){k[q+4>>2]=p|3;k[q+(p|4)>>2]=n|1;k[q+(n+p)>>2]=n;h=n>>>3;if(n>>>0<256){g=h<<1;e=318920+(g<<2)|0;f=k[79720]|0;h=1<<h;if(f&h){h=318920+(g+2<<2)|0;g=k[h>>2]|0;if(g>>>0<(k[79724]|0)>>>0)bb();else{t=h;u=g}}else{k[79720]=f|h;t=318920+(g+2<<2)|0;u=e}k[t>>2]=m;k[u+12>>2]=m;k[q+(p+8)>>2]=u;k[q+(p+12)>>2]=e;break}c=n>>>8;if(c)if(n>>>0>16777215)e=31;else{v=(c+1048320|0)>>>16&8;w=c<<v;u=(w+520192|0)>>>16&4;w=w<<u;e=(w+245760|0)>>>16&2;e=14-(u|v|e)+(w<<e>>>15)|0;e=n>>>(e+7|0)&1|e<<1}else e=0;h=319184+(e<<2)|0;k[q+(p+28)>>2]=e;k[q+(p+20)>>2]=0;k[q+(p+16)>>2]=0;g=k[79721]|0;f=1<<e;if(!(g&f)){k[79721]=g|f;k[h>>2]=m;k[q+(p+24)>>2]=h;k[q+(p+12)>>2]=m;k[q+(p+8)>>2]=m;break}c=k[h>>2]|0;c:do if((k[c+4>>2]&-8|0)!=(n|0)){g=n<<((e|0)==31?0:25-(e>>>1)|0);while(1){b=c+16+(g>>>31<<2)|0;h=k[b>>2]|0;if(!h)break;if((k[h+4>>2]&-8|0)==(n|0)){z=h;break c}else{g=g<<1;c=h}}if(b>>>0<(k[79724]|0)>>>0)bb();else{k[b>>2]=m;k[q+(p+24)>>2]=c;k[q+(p+12)>>2]=m;k[q+(p+8)>>2]=m;break b}}else z=c;while(0);c=z+8|0;b=k[c>>2]|0;w=k[79724]|0;if(b>>>0>=w>>>0&z>>>0>=w>>>0){k[b+12>>2]=m;k[c>>2]=m;k[q+(p+8)>>2]=b;k[q+(p+12)>>2]=z;k[q+(p+24)>>2]=0;break}else bb();}else{w=n+p|0;k[q+4>>2]=w|3;w=q+(w+4)|0;k[w>>2]=k[w>>2]|1}while(0);w=q+8|0;return w|0}else z=p}else z=p}else z=-1;while(0);a=k[79722]|0;if(a>>>0>=z>>>0){b=a-z|0;c=k[79725]|0;if(b>>>0>15){k[79725]=c+z;k[79722]=b;k[c+(z+4)>>2]=b|1;k[c+a>>2]=b;k[c+4>>2]=z|3}else{k[79722]=0;k[79725]=0;k[c+4>>2]=a|3;w=c+(a+4)|0;k[w>>2]=k[w>>2]|1}w=c+8|0;return w|0}a=k[79723]|0;if(a>>>0>z>>>0){v=a-z|0;k[79723]=v;w=k[79726]|0;k[79726]=w+z;k[w+(z+4)>>2]=v|1;k[w+4>>2]=z|3;w=w+8|0;return w|0}do if(!(k[79838]|0)){a=Pa(30)|0;if(!(a+-1&a)){k[79840]=a;k[79839]=a;k[79841]=-1;k[79842]=-1;k[79843]=0;k[79831]=0;u=(db(0)|0)&-16^1431655768;k[79838]=u;break}else bb();}while(0);l=z+48|0;c=k[79840]|0;b=z+47|0;d=c+b|0;c=0-c|0;m=d&c;if(m>>>0<=z>>>0){w=0;return w|0}a=k[79830]|0;if((a|0)!=0?(t=k[79828]|0,u=t+m|0,u>>>0<=t>>>0|u>>>0>a>>>0):0){w=0;return w|0}d:do if(!(k[79831]&4)){a=k[79726]|0;e:do if(a){g=319328;while(1){i=k[g>>2]|0;if(i>>>0<=a>>>0?(r=g+4|0,(i+(k[r>>2]|0)|0)>>>0>a>>>0):0){f=g;a=r;break}g=k[g+8>>2]|0;if(!g){w=174;break e}}i=d-(k[79723]|0)&c;if(i>>>0<2147483647){g=Ea(i|0)|0;u=(g|0)==((k[f>>2]|0)+(k[a>>2]|0)|0);a=u?i:0;if(u){if((g|0)!=(-1|0)){x=g;w=194;break d}}else w=184}else a=0}else w=174;while(0);do if((w|0)==174){f=Ea(0)|0;if((f|0)!=(-1|0)){a=f;i=k[79839]|0;g=i+-1|0;if(!(g&a))i=m;else i=m-a+(g+a&0-i)|0;a=k[79828]|0;g=a+i|0;if(i>>>0>z>>>0&i>>>0<2147483647){u=k[79830]|0;if((u|0)!=0?g>>>0<=a>>>0|g>>>0>u>>>0:0){a=0;break}g=Ea(i|0)|0;w=(g|0)==(f|0);a=w?i:0;if(w){x=f;w=194;break d}else w=184}else a=0}else a=0}while(0);f:do if((w|0)==184){f=0-i|0;do if(l>>>0>i>>>0&(i>>>0<2147483647&(g|0)!=(-1|0))?(v=k[79840]|0,v=b-i+v&0-v,v>>>0<2147483647):0)if((Ea(v|0)|0)==(-1|0)){Ea(f|0)|0;break f}else{i=v+i|0;break}while(0);if((g|0)!=(-1|0)){x=g;a=i;w=194;break d}}while(0);k[79831]=k[79831]|4;w=191}else{a=0;w=191}while(0);if((((w|0)==191?m>>>0<2147483647:0)?(x=Ea(m|0)|0,y=Ea(0)|0,x>>>0<y>>>0&((x|0)!=(-1|0)&(y|0)!=(-1|0))):0)?(A=y-x|0,B=A>>>0>(z+40|0)>>>0,B):0){a=B?A:a;w=194}if((w|0)==194){i=(k[79828]|0)+a|0;k[79828]=i;if(i>>>0>(k[79829]|0)>>>0)k[79829]=i;n=k[79726]|0;g:do if(n){d=319328;do{i=k[d>>2]|0;g=d+4|0;f=k[g>>2]|0;if((x|0)==(i+f|0)){C=i;D=g;E=f;F=d;w=204;break}d=k[d+8>>2]|0}while((d|0)!=0);if(((w|0)==204?(k[F+12>>2]&8|0)==0:0)?n>>>0<x>>>0&n>>>0>=C>>>0:0){k[D>>2]=E+a;w=(k[79723]|0)+a|0;v=n+8|0;v=(v&7|0)==0?0:0-v&7;u=w-v|0;k[79726]=n+v;k[79723]=u;k[n+(v+4)>>2]=u|1;k[n+(w+4)>>2]=40;k[79727]=k[79842];break}i=k[79724]|0;if(x>>>0<i>>>0){k[79724]=x;i=x}g=x+a|0;d=319328;while(1){if((k[d>>2]|0)==(g|0)){f=d;g=d;w=212;break}d=k[d+8>>2]|0;if(!d){f=319328;break}}if((w|0)==212)if(!(k[g+12>>2]&8)){k[f>>2]=x;p=g+4|0;k[p>>2]=(k[p>>2]|0)+a;p=x+8|0;p=(p&7|0)==0?0:0-p&7;j=x+(a+8)|0;j=(j&7|0)==0?0:0-j&7;h=x+(j+a)|0;o=p+z|0;q=x+o|0;m=h-(x+p)-z|0;k[x+(p+4)>>2]=z|3;h:do if((h|0)!=(n|0)){if((h|0)==(k[79725]|0)){w=(k[79722]|0)+m|0;k[79722]=w;k[79725]=q;k[x+(o+4)>>2]=w|1;k[x+(w+o)>>2]=w;break}l=a+4|0;g=k[x+(l+j)>>2]|0;if((g&3|0)==1){b=g&-8;d=g>>>3;i:do if(g>>>0>=256){c=k[x+((j|24)+a)>>2]|0;f=k[x+(a+12+j)>>2]|0;do if((f|0)==(h|0)){e=j|16;f=x+(l+e)|0;g=k[f>>2]|0;if(!g){f=x+(e+a)|0;g=k[f>>2]|0;if(!g){K=0;break}}while(1){e=g+20|0;d=k[e>>2]|0;if(d){g=d;f=e;continue}e=g+16|0;d=k[e>>2]|0;if(!d)break;else{g=d;f=e}}if(f>>>0<i>>>0)bb();else{k[f>>2]=0;K=g;break}}else{e=k[x+((j|8)+a)>>2]|0;if(e>>>0<i>>>0)bb();i=e+12|0;if((k[i>>2]|0)!=(h|0))bb();g=f+8|0;if((k[g>>2]|0)==(h|0)){k[i>>2]=f;k[g>>2]=e;K=f;break}else bb();}while(0);if(!c)break;i=k[x+(a+28+j)>>2]|0;g=319184+(i<<2)|0;do if((h|0)!=(k[g>>2]|0)){if(c>>>0<(k[79724]|0)>>>0)bb();i=c+16|0;if((k[i>>2]|0)==(h|0))k[i>>2]=K;else k[c+20>>2]=K;if(!K)break i}else{k[g>>2]=K;if(K)break;k[79721]=k[79721]&~(1<<i);break i}while(0);g=k[79724]|0;if(K>>>0<g>>>0)bb();k[K+24>>2]=c;i=j|16;h=k[x+(i+a)>>2]|0;do if(h)if(h>>>0<g>>>0)bb();else{k[K+16>>2]=h;k[h+24>>2]=K;break}while(0);h=k[x+(l+i)>>2]|0;if(!h)break;if(h>>>0<(k[79724]|0)>>>0)bb();else{k[K+20>>2]=h;k[h+24>>2]=K;break}}else{f=k[x+((j|8)+a)>>2]|0;e=k[x+(a+12+j)>>2]|0;g=318920+(d<<1<<2)|0;do if((f|0)!=(g|0)){if(f>>>0<i>>>0)bb();if((k[f+12>>2]|0)==(h|0))break;bb();}while(0);if((e|0)==(f|0)){k[79720]=k[79720]&~(1<<d);break}do if((e|0)==(g|0))G=e+8|0;else{if(e>>>0<i>>>0)bb();i=e+8|0;if((k[i>>2]|0)==(h|0)){G=i;break}bb();}while(0);k[f+12>>2]=e;k[G>>2]=f}while(0);h=x+((b|j)+a)|0;i=b+m|0}else i=m;h=h+4|0;k[h>>2]=k[h>>2]&-2;k[x+(o+4)>>2]=i|1;k[x+(i+o)>>2]=i;h=i>>>3;if(i>>>0<256){g=h<<1;e=318920+(g<<2)|0;f=k[79720]|0;h=1<<h;do if(!(f&h)){k[79720]=f|h;L=318920+(g+2<<2)|0;M=e}else{h=318920+(g+2<<2)|0;g=k[h>>2]|0;if(g>>>0>=(k[79724]|0)>>>0){L=h;M=g;break}bb();}while(0);k[L>>2]=q;k[M+12>>2]=q;k[x+(o+8)>>2]=M;k[x+(o+12)>>2]=e;break}c=i>>>8;do if(!c)e=0;else{if(i>>>0>16777215){e=31;break}v=(c+1048320|0)>>>16&8;w=c<<v;u=(w+520192|0)>>>16&4;w=w<<u;e=(w+245760|0)>>>16&2;e=14-(u|v|e)+(w<<e>>>15)|0;e=i>>>(e+7|0)&1|e<<1}while(0);h=319184+(e<<2)|0;k[x+(o+28)>>2]=e;k[x+(o+20)>>2]=0;k[x+(o+16)>>2]=0;g=k[79721]|0;f=1<<e;if(!(g&f)){k[79721]=g|f;k[h>>2]=q;k[x+(o+24)>>2]=h;k[x+(o+12)>>2]=q;k[x+(o+8)>>2]=q;break}c=k[h>>2]|0;j:do if((k[c+4>>2]&-8|0)!=(i|0)){g=i<<((e|0)==31?0:25-(e>>>1)|0);while(1){b=c+16+(g>>>31<<2)|0;h=k[b>>2]|0;if(!h)break;if((k[h+4>>2]&-8|0)==(i|0)){N=h;break j}else{g=g<<1;c=h}}if(b>>>0<(k[79724]|0)>>>0)bb();else{k[b>>2]=q;k[x+(o+24)>>2]=c;k[x+(o+12)>>2]=q;k[x+(o+8)>>2]=q;break h}}else N=c;while(0);c=N+8|0;b=k[c>>2]|0;w=k[79724]|0;if(b>>>0>=w>>>0&N>>>0>=w>>>0){k[b+12>>2]=q;k[c>>2]=q;k[x+(o+8)>>2]=b;k[x+(o+12)>>2]=N;k[x+(o+24)>>2]=0;break}else bb();}else{w=(k[79723]|0)+m|0;k[79723]=w;k[79726]=q;k[x+(o+4)>>2]=w|1}while(0);w=x+(p|8)|0;return w|0}else f=319328;while(1){g=k[f>>2]|0;if(g>>>0<=n>>>0?(h=k[f+4>>2]|0,e=g+h|0,e>>>0>n>>>0):0)break;f=k[f+8>>2]|0}i=g+(h+-39)|0;g=g+(h+-47+((i&7|0)==0?0:0-i&7))|0;i=n+16|0;g=g>>>0<i>>>0?n:g;h=g+8|0;f=x+8|0;f=(f&7|0)==0?0:0-f&7;w=a+-40-f|0;k[79726]=x+f;k[79723]=w;k[x+(f+4)>>2]=w|1;k[x+(a+-36)>>2]=40;k[79727]=k[79842];f=g+4|0;k[f>>2]=27;k[h>>2]=k[79832];k[h+4>>2]=k[79833];k[h+8>>2]=k[79834];k[h+12>>2]=k[79835];k[79832]=x;k[79833]=a;k[79835]=0;k[79834]=h;h=g+28|0;k[h>>2]=7;if((g+32|0)>>>0<e>>>0)do{w=h;h=h+4|0;k[h>>2]=7}while((w+8|0)>>>0<e>>>0);if((g|0)!=(n|0)){e=g-n|0;k[f>>2]=k[f>>2]&-2;k[n+4>>2]=e|1;k[g>>2]=e;h=e>>>3;if(e>>>0<256){g=h<<1;e=318920+(g<<2)|0;f=k[79720]|0;h=1<<h;if(f&h){c=318920+(g+2<<2)|0;b=k[c>>2]|0;if(b>>>0<(k[79724]|0)>>>0)bb();else{H=c;I=b}}else{k[79720]=f|h;H=318920+(g+2<<2)|0;I=e}k[H>>2]=n;k[I+12>>2]=n;k[n+8>>2]=I;k[n+12>>2]=e;break}c=e>>>8;if(c)if(e>>>0>16777215)g=31;else{v=(c+1048320|0)>>>16&8;w=c<<v;u=(w+520192|0)>>>16&4;w=w<<u;g=(w+245760|0)>>>16&2;g=14-(u|v|g)+(w<<g>>>15)|0;g=e>>>(g+7|0)&1|g<<1}else g=0;h=319184+(g<<2)|0;k[n+28>>2]=g;k[n+20>>2]=0;k[i>>2]=0;c=k[79721]|0;b=1<<g;if(!(c&b)){k[79721]=c|b;k[h>>2]=n;k[n+24>>2]=h;k[n+12>>2]=n;k[n+8>>2]=n;break}c=k[h>>2]|0;k:do if((k[c+4>>2]&-8|0)!=(e|0)){h=e<<((g|0)==31?0:25-(g>>>1)|0);while(1){b=c+16+(h>>>31<<2)|0;d=k[b>>2]|0;if(!d)break;if((k[d+4>>2]&-8|0)==(e|0)){J=d;break k}else{h=h<<1;c=d}}if(b>>>0<(k[79724]|0)>>>0)bb();else{k[b>>2]=n;k[n+24>>2]=c;k[n+12>>2]=n;k[n+8>>2]=n;break g}}else J=c;while(0);c=J+8|0;b=k[c>>2]|0;w=k[79724]|0;if(b>>>0>=w>>>0&J>>>0>=w>>>0){k[b+12>>2]=n;k[c>>2]=n;k[n+8>>2]=b;k[n+12>>2]=J;k[n+24>>2]=0;break}else bb();}}else{w=k[79724]|0;if((w|0)==0|x>>>0<w>>>0)k[79724]=x;k[79832]=x;k[79833]=a;k[79835]=0;k[79729]=k[79838];k[79728]=-1;c=0;do{w=c<<1;v=318920+(w<<2)|0;k[318920+(w+3<<2)>>2]=v;k[318920+(w+2<<2)>>2]=v;c=c+1|0}while((c|0)!=32);w=x+8|0;w=(w&7|0)==0?0:0-w&7;v=a+-40-w|0;k[79726]=x+w;k[79723]=v;k[x+(w+4)>>2]=v|1;k[x+(a+-36)>>2]=40;k[79727]=k[79842]}while(0);b=k[79723]|0;if(b>>>0>z>>>0){v=b-z|0;k[79723]=v;w=k[79726]|0;k[79726]=w+z;k[w+(z+4)>>2]=v|1;k[w+4>>2]=z|3;w=w+8|0;return w|0}}w=Za()|0;k[w>>2]=12;w=0;return w|0}function ng(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if(!a)return;f=a+-8|0;g=k[79724]|0;if(f>>>0<g>>>0)bb();e=k[a+-4>>2]|0;d=e&3;if((d|0)==1)bb();o=e&-8;q=a+(o+-8)|0;do if(!(e&1)){f=k[f>>2]|0;if(!d)return;h=-8-f|0;l=a+h|0;m=f+o|0;if(l>>>0<g>>>0)bb();if((l|0)==(k[79725]|0)){f=a+(o+-4)|0;e=k[f>>2]|0;if((e&3|0)!=3){u=l;j=m;break}k[79722]=m;k[f>>2]=e&-2;k[a+(h+4)>>2]=m|1;k[q>>2]=m;return}c=f>>>3;if(f>>>0<256){d=k[a+(h+8)>>2]|0;e=k[a+(h+12)>>2]|0;f=318920+(c<<1<<2)|0;if((d|0)!=(f|0)){if(d>>>0<g>>>0)bb();if((k[d+12>>2]|0)!=(l|0))bb();}if((e|0)==(d|0)){k[79720]=k[79720]&~(1<<c);u=l;j=m;break}if((e|0)!=(f|0)){if(e>>>0<g>>>0)bb();f=e+8|0;if((k[f>>2]|0)==(l|0))b=f;else bb();}else b=e+8|0;k[d+12>>2]=e;k[b>>2]=d;u=l;j=m;break}b=k[a+(h+24)>>2]|0;d=k[a+(h+12)>>2]|0;do if((d|0)==(l|0)){e=a+(h+20)|0;f=k[e>>2]|0;if(!f){e=a+(h+16)|0;f=k[e>>2]|0;if(!f){i=0;break}}while(1){d=f+20|0;c=k[d>>2]|0;if(c){f=c;e=d;continue}d=f+16|0;c=k[d>>2]|0;if(!c)break;else{f=c;e=d}}if(e>>>0<g>>>0)bb();else{k[e>>2]=0;i=f;break}}else{c=k[a+(h+8)>>2]|0;if(c>>>0<g>>>0)bb();f=c+12|0;if((k[f>>2]|0)!=(l|0))bb();e=d+8|0;if((k[e>>2]|0)==(l|0)){k[f>>2]=d;k[e>>2]=c;i=d;break}else bb();}while(0);if(b){f=k[a+(h+28)>>2]|0;e=319184+(f<<2)|0;if((l|0)==(k[e>>2]|0)){k[e>>2]=i;if(!i){k[79721]=k[79721]&~(1<<f);u=l;j=m;break}}else{if(b>>>0<(k[79724]|0)>>>0)bb();f=b+16|0;if((k[f>>2]|0)==(l|0))k[f>>2]=i;else k[b+20>>2]=i;if(!i){u=l;j=m;break}}e=k[79724]|0;if(i>>>0<e>>>0)bb();k[i+24>>2]=b;f=k[a+(h+16)>>2]|0;do if(f)if(f>>>0<e>>>0)bb();else{k[i+16>>2]=f;k[f+24>>2]=i;break}while(0);f=k[a+(h+20)>>2]|0;if(f)if(f>>>0<(k[79724]|0)>>>0)bb();else{k[i+20>>2]=f;k[f+24>>2]=i;u=l;j=m;break}else{u=l;j=m}}else{u=l;j=m}}else{u=f;j=o}while(0);if(u>>>0>=q>>>0)bb();f=a+(o+-4)|0;e=k[f>>2]|0;if(!(e&1))bb();if(!(e&2)){if((q|0)==(k[79726]|0)){l=(k[79723]|0)+j|0;k[79723]=l;k[79726]=u;k[u+4>>2]=l|1;if((u|0)!=(k[79725]|0))return;k[79725]=0;k[79722]=0;return}if((q|0)==(k[79725]|0)){l=(k[79722]|0)+j|0;k[79722]=l;k[79725]=u;k[u+4>>2]=l|1;k[u+l>>2]=l;return}g=(e&-8)+j|0;b=e>>>3;do if(e>>>0>=256){b=k[a+(o+16)>>2]|0;f=k[a+(o|4)>>2]|0;do if((f|0)==(q|0)){e=a+(o+12)|0;f=k[e>>2]|0;if(!f){e=a+(o+8)|0;f=k[e>>2]|0;if(!f){p=0;break}}while(1){d=f+20|0;c=k[d>>2]|0;if(c){f=c;e=d;continue}d=f+16|0;c=k[d>>2]|0;if(!c)break;else{f=c;e=d}}if(e>>>0<(k[79724]|0)>>>0)bb();else{k[e>>2]=0;p=f;break}}else{e=k[a+o>>2]|0;if(e>>>0<(k[79724]|0)>>>0)bb();d=e+12|0;if((k[d>>2]|0)!=(q|0))bb();c=f+8|0;if((k[c>>2]|0)==(q|0)){k[d>>2]=f;k[c>>2]=e;p=f;break}else bb();}while(0);if(b){f=k[a+(o+20)>>2]|0;e=319184+(f<<2)|0;if((q|0)==(k[e>>2]|0)){k[e>>2]=p;if(!p){k[79721]=k[79721]&~(1<<f);break}}else{if(b>>>0<(k[79724]|0)>>>0)bb();f=b+16|0;if((k[f>>2]|0)==(q|0))k[f>>2]=p;else k[b+20>>2]=p;if(!p)break}f=k[79724]|0;if(p>>>0<f>>>0)bb();k[p+24>>2]=b;e=k[a+(o+8)>>2]|0;do if(e)if(e>>>0<f>>>0)bb();else{k[p+16>>2]=e;k[e+24>>2]=p;break}while(0);c=k[a+(o+12)>>2]|0;if(c)if(c>>>0<(k[79724]|0)>>>0)bb();else{k[p+20>>2]=c;k[c+24>>2]=p;break}}}else{c=k[a+o>>2]|0;d=k[a+(o|4)>>2]|0;f=318920+(b<<1<<2)|0;if((c|0)!=(f|0)){if(c>>>0<(k[79724]|0)>>>0)bb();if((k[c+12>>2]|0)!=(q|0))bb();}if((d|0)==(c|0)){k[79720]=k[79720]&~(1<<b);break}if((d|0)!=(f|0)){if(d>>>0<(k[79724]|0)>>>0)bb();e=d+8|0;if((k[e>>2]|0)==(q|0))n=e;else bb();}else n=d+8|0;k[c+12>>2]=d;k[n>>2]=c}while(0);k[u+4>>2]=g|1;k[u+g>>2]=g;if((u|0)==(k[79725]|0)){k[79722]=g;return}else f=g}else{k[f>>2]=e&-2;k[u+4>>2]=j|1;k[u+j>>2]=j;f=j}e=f>>>3;if(f>>>0<256){d=e<<1;f=318920+(d<<2)|0;b=k[79720]|0;c=1<<e;if(b&c){c=318920+(d+2<<2)|0;b=k[c>>2]|0;if(b>>>0<(k[79724]|0)>>>0)bb();else{r=c;s=b}}else{k[79720]=b|c;r=318920+(d+2<<2)|0;s=f}k[r>>2]=u;k[s+12>>2]=u;k[u+8>>2]=s;k[u+12>>2]=f;return}b=f>>>8;if(b)if(f>>>0>16777215)e=31;else{j=(b+1048320|0)>>>16&8;l=b<<j;i=(l+520192|0)>>>16&4;l=l<<i;e=(l+245760|0)>>>16&2;e=14-(i|j|e)+(l<<e>>>15)|0;e=f>>>(e+7|0)&1|e<<1}else e=0;c=319184+(e<<2)|0;k[u+28>>2]=e;k[u+20>>2]=0;k[u+16>>2]=0;b=k[79721]|0;d=1<<e;a:do if(b&d){c=k[c>>2]|0;b:do if((k[c+4>>2]&-8|0)!=(f|0)){e=f<<((e|0)==31?0:25-(e>>>1)|0);while(1){b=c+16+(e>>>31<<2)|0;d=k[b>>2]|0;if(!d)break;if((k[d+4>>2]&-8|0)==(f|0)){t=d;break b}else{e=e<<1;c=d}}if(b>>>0<(k[79724]|0)>>>0)bb();else{k[b>>2]=u;k[u+24>>2]=c;k[u+12>>2]=u;k[u+8>>2]=u;break a}}else t=c;while(0);b=t+8|0;c=k[b>>2]|0;l=k[79724]|0;if(c>>>0>=l>>>0&t>>>0>=l>>>0){k[c+12>>2]=u;k[b>>2]=u;k[u+8>>2]=c;k[u+12>>2]=t;k[u+24>>2]=0;break}else bb();}else{k[79721]=b|d;k[c>>2]=u;k[u+24>>2]=c;k[u+12>>2]=u;k[u+8>>2]=u}while(0);l=(k[79728]|0)+-1|0;k[79728]=l;if(!l)b=319336;else return;while(1){b=k[b>>2]|0;if(!b)break;else b=b+8|0}k[79728]=-1;return}function og(a,b){a=a|0;b=b|0;var c=0;if(a){c=ia(b,a)|0;if((b|a)>>>0>65535)c=((c>>>0)/(a>>>0)|0|0)==(b|0)?c:-1}else c=0;b=mg(c)|0;if(!b)return b|0;if(!(k[b+-4>>2]&3))return b|0;Fg(b|0,0,c|0)|0;return b|0}function pg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;a:while(1){o=b;d=b+-4|0;b:while(1){n=a;f=o-n|0;e=f>>2;switch(e|0){case 2:{e=a;r=4;break a}case 5:{b=d;r=8;break a}case 3:{b=d;r=6;break a}case 4:{b=d;r=7;break a}case 1:case 0:break a;default:{}}if((f|0)<124){r=10;break a}g=(e|0)/2|0;h=a+(g<<2)|0;if((f|0)>3996){f=(e|0)/4|0;f=tg(a,a+(f<<2)|0,h,a+(f+g<<2)|0,d,c)|0}else f=rg(a,h,d,c)|0;m=k[a>>2]|0;i=k[h>>2]|0;do if(m>>>0<i>>>0)g=d;else{g=d;while(1){g=g+-4|0;if((a|0)==(g|0))break;e=k[g>>2]|0;if(e>>>0<i>>>0){r=29;break}}if((r|0)==29){r=0;k[a>>2]=e;k[g>>2]=m;f=f+1|0;break}e=a+4|0;j=k[d>>2]|0;if(m>>>0>=j>>>0){if((e|0)==(d|0))break a;else f=a;while(1){g=k[e>>2]|0;if(m>>>0<g>>>0)break;f=e+4|0;if((f|0)==(d|0))break a;else{l=e;e=f;f=l}}k[e>>2]=j;k[d>>2]=g;e=f+8|0}if((e|0)==(d|0))break a;else h=d;while(1){i=k[a>>2]|0;while(1){g=k[e>>2]|0;f=e+4|0;if(i>>>0<g>>>0){m=g;break}else e=f}g=h;while(1){h=g+-4|0;g=k[h>>2]|0;if(i>>>0<g>>>0)g=h;else break}if(e>>>0>=h>>>0){a=e;continue b}k[e>>2]=g;k[h>>2]=m;e=f}}while(0);e=a+4|0;c:do if(e>>>0<g>>>0){j=e;while(1){m=k[h>>2]|0;e=j;while(1){i=k[e>>2]|0;j=e+4|0;if(i>>>0<m>>>0)e=j;else break}do{g=g+-4|0;l=k[g>>2]|0}while(l>>>0>=m>>>0);m=g;g=l;if(e>>>0>m>>>0)break c;k[e>>2]=g;k[m>>2]=i;g=m;h=(h|0)==(e|0)?m:h;f=f+1|0}}while(0);if((e|0)!=(h|0)?(p=k[h>>2]|0,q=k[e>>2]|0,p>>>0<q>>>0):0){k[e>>2]=p;k[h>>2]=q;f=f+1|0}if(!f){f=qg(a,e,c)|0;g=e+4|0;if(qg(g,b,c)|0){r=42;break}if(f){a=g;continue}}l=e;if((l-n|0)>=(o-l|0)){r=46;break}pg(a,e,c);a=e+4|0}if((r|0)==42){r=0;if(f)break;else{b=e;continue}}else if((r|0)==46){r=0;pg(e+4|0,b,c);b=e;continue}}if((r|0)==4){b=k[d>>2]|0;a=k[e>>2]|0;if(b>>>0<a>>>0){k[e>>2]=b;k[d>>2]=a}}else if((r|0)==6)rg(a,a+4|0,b,c)|0;else if((r|0)==7)sg(a,a+4|0,a+8|0,b,c)|0;else if((r|0)==8)tg(a,a+4|0,a+8|0,a+12|0,b,c)|0;else if((r|0)==10)ug(a,b,c);return}function qg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;a:do switch(b-a>>2|0){case 2:{e=b+-4|0;d=k[e>>2]|0;c=k[a>>2]|0;if(d>>>0<c>>>0){k[a>>2]=d;k[e>>2]=c;d=1}else d=1;break}case 3:{rg(a,a+4|0,b+-4|0,c)|0;d=1;break}case 5:{tg(a,a+4|0,a+8|0,a+12|0,b+-4|0,c)|0;d=1;break}case 4:{sg(a,a+4|0,a+8|0,b+-4|0,c)|0;d=1;break}case 1:case 0:{d=1;break}default:{f=a+8|0;rg(a,a+4|0,f,c)|0;d=a+12|0;if((d|0)==(b|0))d=1;else{e=0;c=f;while(1){h=k[d>>2]|0;f=k[c>>2]|0;if(h>>>0<f>>>0){g=d;while(1){k[g>>2]=f;if((c|0)==(a|0)){c=a;break}g=c+-4|0;f=k[g>>2]|0;if(h>>>0>=f>>>0)break;else{i=c;c=g;g=i}}k[c>>2]=h;e=e+1|0;if((e|0)==8)break}c=d+4|0;if((c|0)==(b|0)){d=1;break a}else{f=d;d=c;c=f}}d=(d+4|0)==(b|0);}}}while(0);return d|0}function rg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;d=k[b>>2]|0;g=k[a>>2]|0;e=k[c>>2]|0;f=e>>>0<d>>>0;do if(d>>>0<g>>>0){if(f){k[a>>2]=e;k[c>>2]=g;e=1;break}k[a>>2]=d;k[b>>2]=g;d=k[c>>2]|0;if(d>>>0<g>>>0){k[b>>2]=d;k[c>>2]=g;e=2}else e=1}else if(f){k[b>>2]=e;k[c>>2]=d;e=k[b>>2]|0;d=k[a>>2]|0;if(e>>>0<d>>>0){k[a>>2]=e;k[b>>2]=d;e=2}else e=1}else e=0;while(0);return e|0}function sg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=rg(a,b,c,e)|0;e=k[d>>2]|0;f=k[c>>2]|0;if(e>>>0<f>>>0){k[c>>2]=e;k[d>>2]=f;f=g+1|0;e=k[c>>2]|0;d=k[b>>2]|0;if(e>>>0<d>>>0){k[b>>2]=e;k[c>>2]=d;e=k[b>>2]|0;f=k[a>>2]|0;if(e>>>0<f>>>0){k[a>>2]=e;k[b>>2]=f;f=g+3|0}else f=g+2|0}}else f=g;return f|0}function tg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=sg(a,b,c,d,f)|0;g=k[e>>2]|0;f=k[d>>2]|0;if(g>>>0<f>>>0){k[d>>2]=g;k[e>>2]=f;e=h+1|0;g=k[d>>2]|0;f=k[c>>2]|0;if(g>>>0<f>>>0){k[c>>2]=g;k[d>>2]=f;e=h+2|0;g=k[c>>2]|0;f=k[b>>2]|0;if(g>>>0<f>>>0){k[b>>2]=g;k[c>>2]=f;e=k[b>>2]|0;f=k[a>>2]|0;if(e>>>0<f>>>0){k[a>>2]=e;k[b>>2]=f;e=h+4|0}else e=h+3|0}}}else e=h;return e|0}function ug(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;d=a+8|0;rg(a,a+4|0,d,c)|0;c=a+12|0;if((c|0)!=(b|0)){g=c;c=d;while(1){f=k[g>>2]|0;d=k[c>>2]|0;if(f>>>0<d>>>0){e=g;while(1){k[e>>2]=d;if((c|0)==(a|0)){c=a;break}e=c+-4|0;d=k[e>>2]|0;if(f>>>0>=d>>>0)break;else{h=c;c=e;e=h}}k[c>>2]=f}c=g+4|0;if((c|0)==(b|0))break;else{d=g;g=c;c=d}}}return}function vg(a,b){a=a|0;b=b|0;k[a>>2]=317704;wg(a+4|0,b);return}function wg(a,b){a=a|0;b=b|0;var c=0,d=0;d=Hg(b|0)|0;c=Af(d+13|0)|0;k[c>>2]=d;k[c+4>>2]=d;k[c+8>>2]=0;c=c+12|0;Kg(c|0,b|0,d+1|0)|0;k[a>>2]=c;return}function xg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0;i=r;r=r+16|0;b=i+8|0;g=i+4|0;c=i;k[g>>2]=a;do if(a>>>0>=212){f=(a>>>0)/210|0;d=f*210|0;k[c>>2]=a-d;b=(yg(319568,319760,c,b)|0)-319568>>2;e=b;b=(k[319568+(b<<2)>>2]|0)+d|0;a:while(1){d=5;while(1){if(d>>>0>=47){d=211;h=8;break}a=k[319376+(d<<2)>>2]|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=106;break a}if((b|0)==(ia(c,a)|0))break;else d=d+1|0}b:do if((h|0)==8)while(1){h=0;a=(b>>>0)/(d>>>0)|0;if(a>>>0<d>>>0){h=105;break a}if((b|0)==(ia(a,d)|0))break b;a=d+10|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+12|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+16|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+18|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+22|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+28|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+30|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+36|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+40|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+42|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+46|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+52|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+58|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+60|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+66|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+70|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+72|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+78|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+82|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+88|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+96|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+100|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+102|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+106|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+108|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+112|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+120|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+126|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+130|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+136|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+138|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+142|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+148|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+150|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+156|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+162|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+166|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+168|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+172|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+178|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+180|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+186|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+190|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+192|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+196|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+198|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break b;a=d+208|0;c=(b>>>0)/(a>>>0)|0;if(c>>>0<a>>>0){h=105;break a}if((b|0)==(ia(c,a)|0))break;else{d=d+210|0;h=8}}while(0);c=e+1|0;b=(c|0)==48;c=b?0:c;b=(b&1)+f|0;e=c;f=b;b=(k[319568+(c<<2)>>2]|0)+(b*210|0)|0}if((h|0)==105){k[g>>2]=b;break}else if((h|0)==106){k[g>>2]=b;break}}else{b=yg(319376,319568,g,b)|0;b=k[b>>2]|0}while(0);r=i;return b|0}function yg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=k[c>>2]|0;e=a;c=b-a>>2;a:while(1){while(1){if(!c)break a;d=(c|0)/2|0;if((k[e+(d<<2)>>2]|0)>>>0<f>>>0)break;else c=d}e=e+(d+1<<2)|0;c=c+-1-d|0}return e|0}function zg(a,b){a=a|0;b=b|0;if(!(i[b>>0]&1)){k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2]}else Ag(a,k[b+8>>2]|0,k[b+4>>2]|0);return}function Ag(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(c>>>0>4294967279)xf(a);if(c>>>0<11){i[a>>0]=c<<1;a=a+1|0}else{e=c+16&-16;d=Af(e)|0;k[a+8>>2]=d;k[a>>2]=e|1;k[a+4>>2]=c;a=d}Kg(a|0,b|0,c|0)|0;i[a+c>>0]=0;return}function Bg(a){a=a|0;if(i[a>>0]&1)Df(k[a+8>>2]|0);return}function Cg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=i[a>>0]|0;if(!(d&1))e=10;else{d=k[a>>2]|0;e=(d&-2)+-1|0;d=d&255}if(!(d&1))f=(d&255)>>>1;else f=k[a+4>>2]|0;if((e-f|0)>>>0>=c>>>0){if(c){if(!(d&1))e=a+1|0;else e=k[a+8>>2]|0;Kg(e+f|0,b|0,c|0)|0;d=f+c|0;if(!(i[a>>0]&1))i[a>>0]=d<<1;else k[a+4>>2]=d;i[e+d>>0]=0}}else Dg(a,e,c-e+f|0,f,f,0,c,b);return a|0}function Dg(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,l=0,m=0;if((-18-b|0)>>>0<c>>>0)xf(a);if(!(i[a>>0]&1))m=a+1|0;else m=k[a+8>>2]|0;if(b>>>0<2147483623){j=c+b|0;l=b<<1;j=j>>>0<l>>>0?l:j;j=j>>>0<11?11:j+16&-16}else j=-17;l=Af(j)|0;if(e)Kg(l|0,m|0,e|0)|0;if(g)Kg(l+e|0,h|0,g|0)|0;c=d-f|0;if((c|0)!=(e|0))Kg(l+(g+e)|0,m+(f+e)|0,c-e|0)|0;if((b|0)!=10)Df(m);k[a+8>>2]=l;k[a>>2]=j|1;b=c+g|0;k[a+4>>2]=b;i[l+b>>0]=0;return}function Eg(){}function Fg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=a+c|0;if((c|0)>=20){b=b&255;f=a&3;g=b|b<<8|b<<16|b<<24;e=d&~3;if(f){f=a+4-f|0;while((a|0)<(f|0)){i[a>>0]=b;a=a+1|0}}while((a|0)<(e|0)){k[a>>2]=g;a=a+4|0}}while((a|0)<(d|0)){i[a>>0]=b;a=a+1|0}return a-c|0}function Gg(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){M=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}M=a<<c-32;return 0}function Hg(a){a=a|0;var b=0;b=a;while(i[b>>0]|0)b=b+1|0;return b-a|0}function Ig(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (M=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function Jg(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){M=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}M=0;return b>>>c-32|0}function Kg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((c|0)>=4096)return La(a|0,b|0,c|0)|0;d=a|0;if((a&3)==(b&3)){while(a&3){if(!c)return d|0;i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}while((c|0)>=4){k[a>>2]=k[b>>2];a=a+4|0;b=b+4|0;c=c-4|0}}while((c|0)>0){i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}return d|0}function Lg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((b|0)<(a|0)&(a|0)<(b+c|0)){d=a;b=b+c|0;a=a+c|0;while((c|0)>0){a=a-1|0;b=b-1|0;c=c-1|0;i[a>>0]=i[b>>0]|0}a=d}else Kg(a,b,c)|0;return a|0}function Mg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;b=b-d-(c>>>0>a>>>0|0)>>>0;return (M=b,a-c>>>0|0)|0}function Ng(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){M=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}M=(b|0)<0?-1:0;return b>>c-32|0}function Og(a){a=a|0;var b=0;b=i[v+(a&255)>>0]|0;if((b|0)<8)return b|0;b=i[v+(a>>8&255)>>0]|0;if((b|0)<8)return b+8|0;b=i[v+(a>>16&255)>>0]|0;if((b|0)<8)return b+16|0;return (i[v+(a>>>24)>>0]|0)+24|0}function Pg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;d=b&65535;c=ia(d,f)|0;e=a>>>16;d=(c>>>16)+(ia(d,e)|0)|0;b=b>>>16;a=ia(b,f)|0;return (M=(d>>>16)+(ia(b,e)|0)+(((d&65535)+a|0)>>>16)|0,d+a<<16|c&65535|0)|0}function Qg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=Mg(j^a,i^b,j,i)|0;g=M;b=f^j;a=e^i;return Mg((Vg(h,g,Mg(f^c,e^d,f,e)|0,M,0)|0)^b,M^a,b,a)|0}function Rg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;e=r;r=r+8|0;h=e|0;g=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;j=d>>31|((d|0)<0?-1:0)<<1;i=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;b=Mg(g^a,f^b,g,f)|0;a=M;Vg(b,a,Mg(j^c,i^d,j,i)|0,M,h)|0;a=Mg(k[h>>2]^g,k[h+4>>2]^f,g,f)|0;b=M;r=e;return (M=b,a)|0}function Sg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;a=Pg(e,f)|0;c=M;return (M=(ia(b,f)|0)+(ia(d,e)|0)+c|c&0,a|0|0)|0}function Tg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Vg(a,b,c,d,0)|0}function Ug(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=r;r=r+8|0;e=f|0;Vg(a,b,c,d,e)|0;r=f;return (M=k[e+4>>2]|0,k[e>>2]|0)|0}function Vg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;n=a;l=b;m=l;j=c;o=d;h=o;if(!m){f=(e|0)!=0;if(!h){if(f){k[e>>2]=(n>>>0)%(j>>>0);k[e+4>>2]=0}l=0;m=(n>>>0)/(j>>>0)>>>0;return (M=l,m)|0}else{if(!f){l=0;m=0;return (M=l,m)|0}k[e>>2]=a|0;k[e+4>>2]=b&0;l=0;m=0;return (M=l,m)|0}}i=(h|0)==0;do if(j){if(!i){g=(ka(h|0)|0)-(ka(m|0)|0)|0;if(g>>>0<=31){f=g+1|0;l=31-g|0;j=g-31>>31;h=f;i=n>>>(f>>>0)&j|m<<l;j=m>>>(f>>>0)&j;f=0;g=n<<l;break}if(!e){l=0;m=0;return (M=l,m)|0}k[e>>2]=a|0;k[e+4>>2]=l|b&0;l=0;m=0;return (M=l,m)|0}i=j-1|0;if(i&j){g=(ka(j|0)|0)+33-(ka(m|0)|0)|0;p=64-g|0;l=32-g|0;a=l>>31;b=g-32|0;j=b>>31;h=g;i=l-1>>31&m>>>(b>>>0)|(m<<l|n>>>(g>>>0))&j;j=j&m>>>(g>>>0);f=n<<p&a;g=(m<<p|n>>>(b>>>0))&a|n<<l&g-33>>31;break}if(e){k[e>>2]=i&n;k[e+4>>2]=0}if((j|0)==1){l=l|b&0;m=a|0|0;return (M=l,m)|0}else{a=Og(j|0)|0;l=m>>>(a>>>0)|0;m=m<<32-a|n>>>(a>>>0)|0;return (M=l,m)|0}}else{if(i){if(e){k[e>>2]=(m>>>0)%(j>>>0);k[e+4>>2]=0}l=0;m=(m>>>0)/(j>>>0)>>>0;return (M=l,m)|0}if(!n){if(e){k[e>>2]=0;k[e+4>>2]=(m>>>0)%(h>>>0);}l=0;m=(m>>>0)/(h>>>0)>>>0;return (M=l,m)|0}i=h-1|0;if(!(i&h)){if(e){k[e>>2]=a|0;k[e+4>>2]=i&m|b&0}l=0;m=m>>>((Og(h|0)|0)>>>0);return (M=l,m)|0}g=(ka(h|0)|0)-(ka(m|0)|0)|0;if(g>>>0<=30){j=g+1|0;g=31-g|0;h=j;i=m<<g|n>>>(j>>>0);j=m>>>(j>>>0);f=0;g=n<<g;break}if(!e){l=0;m=0;return (M=l,m)|0}k[e>>2]=a|0;k[e+4>>2]=l|b&0;l=0;m=0;return (M=l,m)|0}while(0);if(!h){l=g;h=0;g=0}else{m=c|0|0;l=o|d&0;b=Ig(m|0,l|0,-1,-1)|0;a=M;c=g;g=0;do{p=c;c=f>>>31|c<<1;f=g|f<<1;p=i<<1|p>>>31|0;o=i>>>31|j<<1|0;Mg(b,a,p,o)|0;n=M;d=n>>31|((n|0)<0?-1:0)<<1;g=d&1;i=Mg(p,o,d&m,(((n|0)<0?-1:0)>>31|((n|0)<0?-1:0)<<1)&l)|0;j=M;h=h-1|0}while((h|0)!=0);l=c;h=0}c=0;if(e){k[e>>2]=i;k[e+4>>2]=j}l=(f|0)>>>31|(l|c)<<1|(c<<1|f>>>31)&0|h;m=(f<<1|0>>>31)&-2|g;return (M=l,m)|0}function Wg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return hb[a&3](b|0,c|0,d|0)|0}function Xg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ib[a&3](b|0,c|0,d|0,e|0,f|0);}function Yg(a,b){a=a|0;b=b|0;jb[a&15](b|0);}function Zg(a,b){a=a|0;b=b|0;return kb[a&3](b|0)|0}function _g(a){a=a|0;lb[a&3]();}function $g(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;mb[a&3](b|0,c|0,d|0,e|0,f|0,g|0);}function ah(a,b,c){a=a|0;b=b|0;c=c|0;return nb[a&1](b|0,c|0)|0}function bh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ob[a&3](b|0,c|0,d|0,e|0);}function ch(a,b,c){a=a|0;b=b|0;c=c|0;la(0);return 0}function dh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;la(1);}function eh(a){a=a|0;la(2);}function fh(a){a=a|0;la(3);return 0}function gh(){la(4);}function hh(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;la(5);}function ih(a,b){a=a|0;b=b|0;la(6);return 0}function jh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;la(7);}

// EMSCRIPTEN_END_FUNCS
var hb=[ch,pf,rf,Wf];var ib=[dh,bg,ag,dh];var jb=[eh,sf,tf,uf,vf,Ff,Gf,Mf,Nf,Pf,Rf,Uf,Sf,Tf,Vf,jg];var kb=[fh,Hf,Of,fh];var lb=[gh,gg,hg,gh];var mb=[hh,dg,cg,hh];var nb=[ih,Ue];var ob=[jh,Yf,Zf,jh];return{___cxa_can_catch:eg,_free:ng,___cxa_is_pointer_type:fg,_i64Add:Ig,_memmove:Lg,_convertTTFToWOFF2:yb,_memset:Fg,_malloc:mg,_memcpy:Kg,_strlen:Hg,_bitshift64Lshr:Jg,_freeTTFToWOFF2:zb,_bitshift64Shl:Gg,runPostSets:Eg,_emscripten_replace_memory:_emscripten_replace_memory,stackAlloc:pb,stackSave:qb,stackRestore:rb,establishStackSpace:sb,setThrew:tb,setTempRet0:wb,getTempRet0:xb,dynCall_iiii:Wg,dynCall_viiiii:Xg,dynCall_vi:Yg,dynCall_ii:Zg,dynCall_v:_g,dynCall_viiiiii:$g,dynCall_iii:ah,dynCall_viiii:bh}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var ___cxa_can_catch=Module["___cxa_can_catch"]=asm["___cxa_can_catch"];var _free=Module["_free"]=asm["_free"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=asm["___cxa_is_pointer_type"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _memmove=Module["_memmove"]=asm["_memmove"];var _convertTTFToWOFF2=Module["_convertTTFToWOFF2"]=asm["_convertTTFToWOFF2"];var _memset=Module["_memset"]=asm["_memset"];var _malloc=Module["_malloc"]=asm["_malloc"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _strlen=Module["_strlen"]=asm["_strlen"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var _freeTTFToWOFF2=Module["_freeTTFToWOFF2"]=asm["_freeTTFToWOFF2"];var _emscripten_replace_memory=Module["_emscripten_replace_memory"]=asm["_emscripten_replace_memory"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_viiiii=Module["dynCall_viiiii"]=asm["dynCall_viiiii"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_v=Module["dynCall_v"]=asm["dynCall_v"];var dynCall_viiiiii=Module["dynCall_viiiiii"]=asm["dynCall_viiiiii"];var dynCall_iii=Module["dynCall_iii"]=asm["dynCall_iii"];var dynCall_viiii=Module["dynCall_viiii"]=asm["dynCall_viiii"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.establishStackSpace=asm["establishStackSpace"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];var i64Math=(function(){var goog={math:{}};goog.math.Long=(function(low,high){this.low_=low|0;this.high_=high|0});goog.math.Long.IntCache_={};goog.math.Long.fromInt=(function(value){if(-128<=value&&value<128){var cachedObj=goog.math.Long.IntCache_[value];if(cachedObj){return cachedObj}}var obj=new goog.math.Long(value|0,value<0?-1:0);if(-128<=value&&value<128){goog.math.Long.IntCache_[value]=obj}return obj});goog.math.Long.fromNumber=(function(value){if(isNaN(value)||!isFinite(value)){return goog.math.Long.ZERO}else if(value<=-goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MIN_VALUE}else if(value+1>=goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MAX_VALUE}else if(value<0){return goog.math.Long.fromNumber(-value).negate()}else{return new goog.math.Long(value%goog.math.Long.TWO_PWR_32_DBL_|0,value/goog.math.Long.TWO_PWR_32_DBL_|0)}});goog.math.Long.fromBits=(function(lowBits,highBits){return new goog.math.Long(lowBits,highBits)});goog.math.Long.fromString=(function(str,opt_radix){if(str.length==0){throw Error("number format error: empty string")}var radix=opt_radix||10;if(radix<2||36<radix){throw Error("radix out of range: "+radix)}if(str.charAt(0)=="-"){return goog.math.Long.fromString(str.substring(1),radix).negate()}else if(str.indexOf("-")>=0){throw Error('number format error: interior "-" character: '+str)}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,8));var result=goog.math.Long.ZERO;for(var i=0;i<str.length;i+=8){var size=Math.min(8,str.length-i);var value=parseInt(str.substring(i,i+size),radix);if(size<8){var power=goog.math.Long.fromNumber(Math.pow(radix,size));result=result.multiply(power).add(goog.math.Long.fromNumber(value))}else{result=result.multiply(radixToPower);result=result.add(goog.math.Long.fromNumber(value))}}return result});goog.math.Long.TWO_PWR_16_DBL_=1<<16;goog.math.Long.TWO_PWR_24_DBL_=1<<24;goog.math.Long.TWO_PWR_32_DBL_=goog.math.Long.TWO_PWR_16_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_31_DBL_=goog.math.Long.TWO_PWR_32_DBL_/2;goog.math.Long.TWO_PWR_48_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_64_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_32_DBL_;goog.math.Long.TWO_PWR_63_DBL_=goog.math.Long.TWO_PWR_64_DBL_/2;goog.math.Long.ZERO=goog.math.Long.fromInt(0);goog.math.Long.ONE=goog.math.Long.fromInt(1);goog.math.Long.NEG_ONE=goog.math.Long.fromInt(-1);goog.math.Long.MAX_VALUE=goog.math.Long.fromBits(4294967295|0,2147483647|0);goog.math.Long.MIN_VALUE=goog.math.Long.fromBits(0,2147483648|0);goog.math.Long.TWO_PWR_24_=goog.math.Long.fromInt(1<<24);goog.math.Long.prototype.toInt=(function(){return this.low_});goog.math.Long.prototype.toNumber=(function(){return this.high_*goog.math.Long.TWO_PWR_32_DBL_+this.getLowBitsUnsigned()});goog.math.Long.prototype.toString=(function(opt_radix){var radix=opt_radix||10;if(radix<2||36<radix){throw Error("radix out of range: "+radix)}if(this.isZero()){return"0"}if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){var radixLong=goog.math.Long.fromNumber(radix);var div=this.div(radixLong);var rem=div.multiply(radixLong).subtract(this);return div.toString(radix)+rem.toInt().toString(radix)}else{return"-"+this.negate().toString(radix)}}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,6));var rem=this;var result="";while(true){var remDiv=rem.div(radixToPower);var intval=rem.subtract(remDiv.multiply(radixToPower)).toInt();var digits=intval.toString(radix);rem=remDiv;if(rem.isZero()){return digits+result}else{while(digits.length<6){digits="0"+digits}result=""+digits+result}}});goog.math.Long.prototype.getHighBits=(function(){return this.high_});goog.math.Long.prototype.getLowBits=(function(){return this.low_});goog.math.Long.prototype.getLowBitsUnsigned=(function(){return this.low_>=0?this.low_:goog.math.Long.TWO_PWR_32_DBL_+this.low_});goog.math.Long.prototype.getNumBitsAbs=(function(){if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){return 64}else{return this.negate().getNumBitsAbs()}}else{var val=this.high_!=0?this.high_:this.low_;for(var bit=31;bit>0;bit--){if((val&1<<bit)!=0){break}}return this.high_!=0?bit+33:bit+1}});goog.math.Long.prototype.isZero=(function(){return this.high_==0&&this.low_==0});goog.math.Long.prototype.isNegative=(function(){return this.high_<0});goog.math.Long.prototype.isOdd=(function(){return(this.low_&1)==1});goog.math.Long.prototype.equals=(function(other){return this.high_==other.high_&&this.low_==other.low_});goog.math.Long.prototype.notEquals=(function(other){return this.high_!=other.high_||this.low_!=other.low_});goog.math.Long.prototype.lessThan=(function(other){return this.compare(other)<0});goog.math.Long.prototype.lessThanOrEqual=(function(other){return this.compare(other)<=0});goog.math.Long.prototype.greaterThan=(function(other){return this.compare(other)>0});goog.math.Long.prototype.greaterThanOrEqual=(function(other){return this.compare(other)>=0});goog.math.Long.prototype.compare=(function(other){if(this.equals(other)){return 0}var thisNeg=this.isNegative();var otherNeg=other.isNegative();if(thisNeg&&!otherNeg){return-1}if(!thisNeg&&otherNeg){return 1}if(this.subtract(other).isNegative()){return-1}else{return 1}});goog.math.Long.prototype.negate=(function(){if(this.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.MIN_VALUE}else{return this.not().add(goog.math.Long.ONE)}});goog.math.Long.prototype.add=(function(other){var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00+b00;c16+=c00>>>16;c00&=65535;c16+=a16+b16;c32+=c16>>>16;c16&=65535;c32+=a32+b32;c48+=c32>>>16;c32&=65535;c48+=a48+b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.subtract=(function(other){return this.add(other.negate())});goog.math.Long.prototype.multiply=(function(other){if(this.isZero()){return goog.math.Long.ZERO}else if(other.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){return other.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}else if(other.equals(goog.math.Long.MIN_VALUE)){return this.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().multiply(other.negate())}else{return this.negate().multiply(other).negate()}}else if(other.isNegative()){return this.multiply(other.negate()).negate()}if(this.lessThan(goog.math.Long.TWO_PWR_24_)&&other.lessThan(goog.math.Long.TWO_PWR_24_)){return goog.math.Long.fromNumber(this.toNumber()*other.toNumber())}var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00*b00;c16+=c00>>>16;c00&=65535;c16+=a16*b00;c32+=c16>>>16;c16&=65535;c16+=a00*b16;c32+=c16>>>16;c16&=65535;c32+=a32*b00;c48+=c32>>>16;c32&=65535;c32+=a16*b16;c48+=c32>>>16;c32&=65535;c32+=a00*b32;c48+=c32>>>16;c32&=65535;c48+=a48*b00+a32*b16+a16*b32+a00*b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.div=(function(other){if(other.isZero()){throw Error("division by zero")}else if(this.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){if(other.equals(goog.math.Long.ONE)||other.equals(goog.math.Long.NEG_ONE)){return goog.math.Long.MIN_VALUE}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ONE}else{var halfThis=this.shiftRight(1);var approx=halfThis.div(other).shiftLeft(1);if(approx.equals(goog.math.Long.ZERO)){return other.isNegative()?goog.math.Long.ONE:goog.math.Long.NEG_ONE}else{var rem=this.subtract(other.multiply(approx));var result=approx.add(rem.div(other));return result}}}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().div(other.negate())}else{return this.negate().div(other).negate()}}else if(other.isNegative()){return this.div(other.negate()).negate()}var res=goog.math.Long.ZERO;var rem=this;while(rem.greaterThanOrEqual(other)){var approx=Math.max(1,Math.floor(rem.toNumber()/other.toNumber()));var log2=Math.ceil(Math.log(approx)/Math.LN2);var delta=log2<=48?1:Math.pow(2,log2-48);var approxRes=goog.math.Long.fromNumber(approx);var approxRem=approxRes.multiply(other);while(approxRem.isNegative()||approxRem.greaterThan(rem)){approx-=delta;approxRes=goog.math.Long.fromNumber(approx);approxRem=approxRes.multiply(other)}if(approxRes.isZero()){approxRes=goog.math.Long.ONE}res=res.add(approxRes);rem=rem.subtract(approxRem)}return res});goog.math.Long.prototype.modulo=(function(other){return this.subtract(this.div(other).multiply(other))});goog.math.Long.prototype.not=(function(){return goog.math.Long.fromBits(~this.low_,~this.high_)});goog.math.Long.prototype.and=(function(other){return goog.math.Long.fromBits(this.low_&other.low_,this.high_&other.high_)});goog.math.Long.prototype.or=(function(other){return goog.math.Long.fromBits(this.low_|other.low_,this.high_|other.high_)});goog.math.Long.prototype.xor=(function(other){return goog.math.Long.fromBits(this.low_^other.low_,this.high_^other.high_)});goog.math.Long.prototype.shiftLeft=(function(numBits){numBits&=63;if(numBits==0){return this}else{var low=this.low_;if(numBits<32){var high=this.high_;return goog.math.Long.fromBits(low<<numBits,high<<numBits|low>>>32-numBits)}else{return goog.math.Long.fromBits(0,low<<numBits-32)}}});goog.math.Long.prototype.shiftRight=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>numBits)}else{return goog.math.Long.fromBits(high>>numBits-32,high>=0?0:-1)}}});goog.math.Long.prototype.shiftRightUnsigned=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>>numBits)}else if(numBits==32){return goog.math.Long.fromBits(high,0)}else{return goog.math.Long.fromBits(high>>>numBits-32,0)}}});var navigator={appName:"Modern Browser"};var dbits;var canary=0xdeadbeefcafe;var j_lm=(canary&16777215)==15715070;function BigInteger(a,b,c){if(a!=null)if("number"==typeof a)this.fromNumber(a,b,c);else if(b==null&&"string"!=typeof a)this.fromString(a,256);else this.fromString(a,b)}function nbi(){return new BigInteger(null)}function am1(i,x,w,j,c,n){while(--n>=0){var v=x*this[i++]+w[j]+c;c=Math.floor(v/67108864);w[j++]=v&67108863}return c}function am2(i,x,w,j,c,n){var xl=x&32767,xh=x>>15;while(--n>=0){var l=this[i]&32767;var h=this[i++]>>15;var m=xh*l+h*xl;l=xl*l+((m&32767)<<15)+w[j]+(c&1073741823);c=(l>>>30)+(m>>>15)+xh*h+(c>>>30);w[j++]=l&1073741823}return c}function am3(i,x,w,j,c,n){var xl=x&16383,xh=x>>14;while(--n>=0){var l=this[i]&16383;var h=this[i++]>>14;var m=xh*l+h*xl;l=xl*l+((m&16383)<<14)+w[j]+c;c=(l>>28)+(m>>14)+xh*h;w[j++]=l&268435455}return c}if(j_lm&&navigator.appName=="Microsoft Internet Explorer"){BigInteger.prototype.am=am2;dbits=30}else if(j_lm&&navigator.appName!="Netscape"){BigInteger.prototype.am=am1;dbits=26}else{BigInteger.prototype.am=am3;dbits=28}BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=(1<<dbits)-1;BigInteger.prototype.DV=1<<dbits;var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC=new Array;var rr,vv;rr="0".charCodeAt(0);for(vv=0;vv<=9;++vv)BI_RC[rr++]=vv;rr="a".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;rr="A".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;function int2char(n){return BI_RM.charAt(n)}function intAt(s,i){var c=BI_RC[s.charCodeAt(i)];return c==null?-1:c}function bnpCopyTo(r){for(var i=this.t-1;i>=0;--i)r[i]=this[i];r.t=this.t;r.s=this.s}function bnpFromInt(x){this.t=1;this.s=x<0?-1:0;if(x>0)this[0]=x;else if(x<-1)this[0]=x+DV;else this.t=0}function nbv(i){var r=nbi();r.fromInt(i);return r}function bnpFromString(s,b){var k;if(b==16)k=4;else if(b==8)k=3;else if(b==256)k=8;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else{this.fromRadix(s,b);return}this.t=0;this.s=0;var i=s.length,mi=false,sh=0;while(--i>=0){var x=k==8?s[i]&255:intAt(s,i);if(x<0){if(s.charAt(i)=="-")mi=true;continue}mi=false;if(sh==0)this[this.t++]=x;else if(sh+k>this.DB){this[this.t-1]|=(x&(1<<this.DB-sh)-1)<<sh;this[this.t++]=x>>this.DB-sh}else this[this.t-1]|=x<<sh;sh+=k;if(sh>=this.DB)sh-=this.DB}if(k==8&&(s[0]&128)!=0){this.s=-1;if(sh>0)this[this.t-1]|=(1<<this.DB-sh)-1<<sh}this.clamp();if(mi)BigInteger.ZERO.subTo(this,this)}function bnpClamp(){var c=this.s&this.DM;while(this.t>0&&this[this.t-1]==c)--this.t}function bnToString(b){if(this.s<0)return"-"+this.negate().toString(b);var k;if(b==16)k=4;else if(b==8)k=3;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else return this.toRadix(b);var km=(1<<k)-1,d,m=false,r="",i=this.t;var p=this.DB-i*this.DB%k;if(i-->0){if(p<this.DB&&(d=this[i]>>p)>0){m=true;r=int2char(d)}while(i>=0){if(p<k){d=(this[i]&(1<<p)-1)<<k-p;d|=this[--i]>>(p+=this.DB-k)}else{d=this[i]>>(p-=k)&km;if(p<=0){p+=this.DB;--i}}if(d>0)m=true;if(m)r+=int2char(d)}}return m?r:"0"}function bnNegate(){var r=nbi();BigInteger.ZERO.subTo(this,r);return r}function bnAbs(){return this.s<0?this.negate():this}function bnCompareTo(a){var r=this.s-a.s;if(r!=0)return r;var i=this.t;r=i-a.t;if(r!=0)return this.s<0?-r:r;while(--i>=0)if((r=this[i]-a[i])!=0)return r;return 0}function nbits(x){var r=1,t;if((t=x>>>16)!=0){x=t;r+=16}if((t=x>>8)!=0){x=t;r+=8}if((t=x>>4)!=0){x=t;r+=4}if((t=x>>2)!=0){x=t;r+=2}if((t=x>>1)!=0){x=t;r+=1}return r}function bnBitLength(){if(this.t<=0)return 0;return this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)}function bnpDLShiftTo(n,r){var i;for(i=this.t-1;i>=0;--i)r[i+n]=this[i];for(i=n-1;i>=0;--i)r[i]=0;r.t=this.t+n;r.s=this.s}function bnpDRShiftTo(n,r){for(var i=n;i<this.t;++i)r[i-n]=this[i];r.t=Math.max(this.t-n,0);r.s=this.s}function bnpLShiftTo(n,r){var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<cbs)-1;var ds=Math.floor(n/this.DB),c=this.s<<bs&this.DM,i;for(i=this.t-1;i>=0;--i){r[i+ds+1]=this[i]>>cbs|c;c=(this[i]&bm)<<bs}for(i=ds-1;i>=0;--i)r[i]=0;r[ds]=c;r.t=this.t+ds+1;r.s=this.s;r.clamp()}function bnpRShiftTo(n,r){r.s=this.s;var ds=Math.floor(n/this.DB);if(ds>=this.t){r.t=0;return}var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<bs)-1;r[0]=this[ds]>>bs;for(var i=ds+1;i<this.t;++i){r[i-ds-1]|=(this[i]&bm)<<cbs;r[i-ds]=this[i]>>bs}if(bs>0)r[this.t-ds-1]|=(this.s&bm)<<cbs;r.t=this.t-ds;r.clamp()}function bnpSubTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]-a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c-=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c-=a[i];r[i++]=c&this.DM;c>>=this.DB}c-=a.s}r.s=c<0?-1:0;if(c<-1)r[i++]=this.DV+c;else if(c>0)r[i++]=c;r.t=i;r.clamp()}function bnpMultiplyTo(a,r){var x=this.abs(),y=a.abs();var i=x.t;r.t=i+y.t;while(--i>=0)r[i]=0;for(i=0;i<y.t;++i)r[i+x.t]=x.am(0,y[i],r,i,0,x.t);r.s=0;r.clamp();if(this.s!=a.s)BigInteger.ZERO.subTo(r,r)}function bnpSquareTo(r){var x=this.abs();var i=r.t=2*x.t;while(--i>=0)r[i]=0;for(i=0;i<x.t-1;++i){var c=x.am(i,x[i],r,2*i,0,1);if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1))>=x.DV){r[i+x.t]-=x.DV;r[i+x.t+1]=1}}if(r.t>0)r[r.t-1]+=x.am(i,x[i],r,2*i,0,1);r.s=0;r.clamp()}function bnpDivRemTo(m,q,r){var pm=m.abs();if(pm.t<=0)return;var pt=this.abs();if(pt.t<pm.t){if(q!=null)q.fromInt(0);if(r!=null)this.copyTo(r);return}if(r==null)r=nbi();var y=nbi(),ts=this.s,ms=m.s;var nsh=this.DB-nbits(pm[pm.t-1]);if(nsh>0){pm.lShiftTo(nsh,y);pt.lShiftTo(nsh,r)}else{pm.copyTo(y);pt.copyTo(r)}var ys=y.t;var y0=y[ys-1];if(y0==0)return;var yt=y0*(1<<this.F1)+(ys>1?y[ys-2]>>this.F2:0);var d1=this.FV/yt,d2=(1<<this.F1)/yt,e=1<<this.F2;var i=r.t,j=i-ys,t=q==null?nbi():q;y.dlShiftTo(j,t);if(r.compareTo(t)>=0){r[r.t++]=1;r.subTo(t,r)}BigInteger.ONE.dlShiftTo(ys,t);t.subTo(y,y);while(y.t<ys)y[y.t++]=0;while(--j>=0){var qd=r[--i]==y0?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);if((r[i]+=y.am(0,qd,r,j,0,ys))<qd){y.dlShiftTo(j,t);r.subTo(t,r);while(r[i]<--qd)r.subTo(t,r)}}if(q!=null){r.drShiftTo(ys,q);if(ts!=ms)BigInteger.ZERO.subTo(q,q)}r.t=ys;r.clamp();if(nsh>0)r.rShiftTo(nsh,r);if(ts<0)BigInteger.ZERO.subTo(r,r)}function bnMod(a){var r=nbi();this.abs().divRemTo(a,null,r);if(this.s<0&&r.compareTo(BigInteger.ZERO)>0)a.subTo(r,r);return r}function Classic(m){this.m=m}function cConvert(x){if(x.s<0||x.compareTo(this.m)>=0)return x.mod(this.m);else return x}function cRevert(x){return x}function cReduce(x){x.divRemTo(this.m,null,x)}function cMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}function cSqrTo(x,r){x.squareTo(r);this.reduce(r)}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;function bnpInvDigit(){if(this.t<1)return 0;var x=this[0];if((x&1)==0)return 0;var y=x&3;y=y*(2-(x&15)*y)&15;y=y*(2-(x&255)*y)&255;y=y*(2-((x&65535)*y&65535))&65535;y=y*(2-x*y%this.DV)%this.DV;return y>0?this.DV-y:-y}function Montgomery(m){this.m=m;this.mp=m.invDigit();this.mpl=this.mp&32767;this.mph=this.mp>>15;this.um=(1<<m.DB-15)-1;this.mt2=2*m.t}function montConvert(x){var r=nbi();x.abs().dlShiftTo(this.m.t,r);r.divRemTo(this.m,null,r);if(x.s<0&&r.compareTo(BigInteger.ZERO)>0)this.m.subTo(r,r);return r}function montRevert(x){var r=nbi();x.copyTo(r);this.reduce(r);return r}function montReduce(x){while(x.t<=this.mt2)x[x.t++]=0;for(var i=0;i<this.m.t;++i){var j=x[i]&32767;var u0=j*this.mpl+((j*this.mph+(x[i]>>15)*this.mpl&this.um)<<15)&x.DM;j=i+this.m.t;x[j]+=this.m.am(0,u0,x,i,0,this.m.t);while(x[j]>=x.DV){x[j]-=x.DV;x[++j]++}}x.clamp();x.drShiftTo(this.m.t,x);if(x.compareTo(this.m)>=0)x.subTo(this.m,x)}function montSqrTo(x,r){x.squareTo(r);this.reduce(r)}function montMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;function bnpIsEven(){return(this.t>0?this[0]&1:this.s)==0}function bnpExp(e,z){if(e>4294967295||e<1)return BigInteger.ONE;var r=nbi(),r2=nbi(),g=z.convert(this),i=nbits(e)-1;g.copyTo(r);while(--i>=0){z.sqrTo(r,r2);if((e&1<<i)>0)z.mulTo(r2,g,r);else{var t=r;r=r2;r2=t}}return z.revert(r)}function bnModPowInt(e,m){var z;if(e<256||m.isEven())z=new Classic(m);else z=new Montgomery(m);return this.exp(e,z)}BigInteger.prototype.copyTo=bnpCopyTo;BigInteger.prototype.fromInt=bnpFromInt;BigInteger.prototype.fromString=bnpFromString;BigInteger.prototype.clamp=bnpClamp;BigInteger.prototype.dlShiftTo=bnpDLShiftTo;BigInteger.prototype.drShiftTo=bnpDRShiftTo;BigInteger.prototype.lShiftTo=bnpLShiftTo;BigInteger.prototype.rShiftTo=bnpRShiftTo;BigInteger.prototype.subTo=bnpSubTo;BigInteger.prototype.multiplyTo=bnpMultiplyTo;BigInteger.prototype.squareTo=bnpSquareTo;BigInteger.prototype.divRemTo=bnpDivRemTo;BigInteger.prototype.invDigit=bnpInvDigit;BigInteger.prototype.isEven=bnpIsEven;BigInteger.prototype.exp=bnpExp;BigInteger.prototype.toString=bnToString;BigInteger.prototype.negate=bnNegate;BigInteger.prototype.abs=bnAbs;BigInteger.prototype.compareTo=bnCompareTo;BigInteger.prototype.bitLength=bnBitLength;BigInteger.prototype.mod=bnMod;BigInteger.prototype.modPowInt=bnModPowInt;BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);function bnpFromRadix(s,b){this.fromInt(0);if(b==null)b=10;var cs=this.chunkSize(b);var d=Math.pow(b,cs),mi=false,j=0,w=0;for(var i=0;i<s.length;++i){var x=intAt(s,i);if(x<0){if(s.charAt(i)=="-"&&this.signum()==0)mi=true;continue}w=b*w+x;if(++j>=cs){this.dMultiply(d);this.dAddOffset(w,0);j=0;w=0}}if(j>0){this.dMultiply(Math.pow(b,j));this.dAddOffset(w,0)}if(mi)BigInteger.ZERO.subTo(this,this)}function bnpChunkSize(r){return Math.floor(Math.LN2*this.DB/Math.log(r))}function bnSigNum(){if(this.s<0)return-1;else if(this.t<=0||this.t==1&&this[0]<=0)return 0;else return 1}function bnpDMultiply(n){this[this.t]=this.am(0,n-1,this,0,0,this.t);++this.t;this.clamp()}function bnpDAddOffset(n,w){if(n==0)return;while(this.t<=w)this[this.t++]=0;this[w]+=n;while(this[w]>=this.DV){this[w]-=this.DV;if(++w>=this.t)this[this.t++]=0;++this[w]}}function bnpToRadix(b){if(b==null)b=10;if(this.signum()==0||b<2||b>36)return"0";var cs=this.chunkSize(b);var a=Math.pow(b,cs);var d=nbv(a),y=nbi(),z=nbi(),r="";this.divRemTo(d,y,z);while(y.signum()>0){r=(a+z.intValue()).toString(b).substr(1)+r;y.divRemTo(d,y,z)}return z.intValue().toString(b)+r}function bnIntValue(){if(this.s<0){if(this.t==1)return this[0]-this.DV;else if(this.t==0)return-1}else if(this.t==1)return this[0];else if(this.t==0)return 0;return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function bnpAddTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]+a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c+=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c+=a[i];r[i++]=c&this.DM;c>>=this.DB}c+=a.s}r.s=c<0?-1:0;if(c>0)r[i++]=c;else if(c<-1)r[i++]=this.DV+c;r.t=i;r.clamp()}BigInteger.prototype.fromRadix=bnpFromRadix;BigInteger.prototype.chunkSize=bnpChunkSize;BigInteger.prototype.signum=bnSigNum;BigInteger.prototype.dMultiply=bnpDMultiply;BigInteger.prototype.dAddOffset=bnpDAddOffset;BigInteger.prototype.toRadix=bnpToRadix;BigInteger.prototype.intValue=bnIntValue;BigInteger.prototype.addTo=bnpAddTo;var Wrapper={abs:(function(l,h){var x=new goog.math.Long(l,h);var ret;if(x.isNegative()){ret=x.negate()}else{ret=x}HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_}),ensureTemps:(function(){if(Wrapper.ensuredTemps)return;Wrapper.ensuredTemps=true;Wrapper.two32=new BigInteger;Wrapper.two32.fromString("4294967296",10);Wrapper.two64=new BigInteger;Wrapper.two64.fromString("18446744073709551616",10);Wrapper.temp1=new BigInteger;Wrapper.temp2=new BigInteger}),lh2bignum:(function(l,h){var a=new BigInteger;a.fromString(h.toString(),10);var b=new BigInteger;a.multiplyTo(Wrapper.two32,b);var c=new BigInteger;c.fromString(l.toString(),10);var d=new BigInteger;c.addTo(b,d);return d}),stringify:(function(l,h,unsigned){var ret=(new goog.math.Long(l,h)).toString();if(unsigned&&ret[0]=="-"){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(ret,10);ret=new BigInteger;Wrapper.two64.addTo(bignum,ret);ret=ret.toString(10)}return ret}),fromString:(function(str,base,min,max,unsigned){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(str,base);var bigmin=new BigInteger;bigmin.fromString(min,10);var bigmax=new BigInteger;bigmax.fromString(max,10);if(unsigned&&bignum.compareTo(BigInteger.ZERO)<0){var temp=new BigInteger;bignum.addTo(Wrapper.two64,temp);bignum=temp}var error=false;if(bignum.compareTo(bigmin)<0){bignum=bigmin;error=true}else if(bignum.compareTo(bigmax)>0){bignum=bigmax;error=true}var ret=goog.math.Long.fromString(bignum.toString());HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_;if(error)throw"range error"})};return Wrapper})();function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){assert(runDependencies==0,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");assert(__ATPRERUN__.length==0,"cannot call main when preRun functions remain to be called");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);initialStackTop=STACKTOP;try{var ret=Module["_main"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(ENVIRONMENT_IS_WEB&&preloadStartTime!==null){Module.printErr("pre-main prep time: "+(Date.now()-preloadStartTime)+" ms")}if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(Module["_main"]&&shouldRunNow)Module["callMain"](args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["stdout"]["once"]("drain",(function(){process["exit"](status)}));console.log(" ");setTimeout((function(){process["exit"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}run();module.exports=Module;Module.inspect=(function(){return"[Module]"})





}).call(this,require('_process'),require("buffer").Buffer,"/node_modules/ttf2woff2/jssrc")
},{"_process":152,"buffer":3,"crypto":7,"fs":1,"path":151,"ws":undefined}],282:[function(require,module,exports){
(function (Buffer){
var svgicons2svgfont = require('svgicons2svgfont');
var svg2ttf = require('svg2ttf');
var ttf2eot = require('ttf2eot');
var ttf2woff = require('ttf2woff');
var ttf2woff2 = require('ttf2woff2');
var JSZip = require('jszip');
var StringDecoder = require('string_decoder').StringDecoder;

function FontBundler() {

  /* Private vars */
  var _self = this;
  var _urls = {};
  var _zip;
  var _options;


  /* Public methods */
  this.bundle = function bundle(icons, options, callback) {
    // Revoke old URLs
    if(window && window.URL && window.URL.createObjectURL) {
      for(var prop in _urls) {
        window.URL.revokeObjectURL(_urls[prop]);
      }
    }
    // Prepare to ZIP
    _zip = new JSZip();
    // Save options
    _options = options || {};
    _options.fontName = _options.fontName || 'iconfont';
    // Generate SVG
    makeSVG(icons, function aSVGCallback(content) {
      // Add to ZIP
      _zip.file(_options.fontName+'.svg', content);
      // Generate TTF
      var ttfFontBuffer = makeTTF(content);
      _zip.file(_options.fontName+'.ttf', ttfFontBuffer);
      _zip.file(_options.fontName+'.eot', makeEOT(ttfFontBuffer));
      _zip.file(_options.fontName+'.woff', makeWOFF(ttfFontBuffer));
      _zip.file(_options.fontName+'.woff2', makeWOFF2(ttfFontBuffer));
      callback({
        urls: _urls,
        zip: _zip.generate({type:'blob', compression:'DEFLATE'})
      });
      urls={}; _zip = null;
    });
  };

  /* Private functions */
  function makeSVG(iconStreams, callback) {
    var fontStream = svgicons2svgfont(_options);
    var parts = [];
    var decoder = new StringDecoder('utf8');
    fontStream = svgicons2svgfont(_options);
    fontStream.on('data', function(chunk) {
      parts.push(decoder.write(chunk));
    });
    fontStream.on('finish', function() {
      if(window && window.URL && window.URL.createObjectURL) {
        _urls.svg = window.URL.createObjectURL(new Blob(parts,
          {type: 'image/svg+xml'}));
      }
      callback(parts.join(''));
    });
    iconStreams.forEach(fontStream.write.bind(fontStream));
    fontStream.end();
  }

  function makeTTF(svgFont) {
    var ttfFontBuffer = svg2ttf(svgFont).buffer;
    if(window && window.URL && window.URL.createObjectURL) {
      _urls.ttf = window.URL.createObjectURL(
        new Blob([ttfFontBuffer],
          {type: 'application/octet-stream'}));
    }
    return ttfFontBuffer;
  }

  function makeEOT(ttfFontBuffer) {
    var eotFontBuffer = ttf2eot(ttfFontBuffer).buffer;
    if(window && window.URL && window.URL.createObjectURL) {
      _urls.eot = window.URL.createObjectURL(new Blob([eotFontBuffer],
        {type: 'application/octet-stream'}));
    }
    return eotFontBuffer;
  }

  function makeWOFF(ttfFontBuffer) {
    var woffFontBuffer = ttf2woff(new Uint8Array(ttfFontBuffer.buffer)).buffer;
    if(window && window.URL && window.URL.createObjectURL) {
      _urls.woff = window.URL.createObjectURL(new Blob([woffFontBuffer],
        {type: 'application/octet-stream'}));
    }
    return woffFontBuffer;
  }

  function makeWOFF2(ttfFontBuffer) {
    ttfFontBuffer = new Uint8Array(ttfFontBuffer);
    var buf = new Buffer(ttfFontBuffer.length);
    for(var i = 0, j = ttfFontBuffer.length; i < j; i++) {
      buf.writeUInt8(ttfFontBuffer[i], i);
    }
    buf = ttf2woff2(buf);
    var woff2FontBuffer = new Uint8Array(buf.length);
    for(i = 0, j = buf.length; i < j; i++) {
      woff2FontBuffer[i] = buf.readUInt8(i);
    }
    if(window && window.URL && window.URL.createObjectURL) {
      _urls.woff2 = window.URL.createObjectURL(new Blob([woff2FontBuffer],
        {type: 'application/octet-stream'}));
    }
    return woff2FontBuffer;
  }
}

module.exports = FontBundler;

}).call(this,require("buffer").Buffer)
},{"buffer":3,"jszip":179,"string_decoder":165,"svg2ttf":222,"svgicons2svgfont":266,"ttf2eot":267,"ttf2woff":269,"ttf2woff2":280}],283:[function(require,module,exports){
var fontBundler = new (require('./common/FontBundler.js'))();
var commandManager = new (require("commandor"))(document.body);
var Stream = require("stream").PassThrough;
var iconInput = document.querySelector('input[type="file"]');
var iconStyle = document.getElementsByTagName('style')[0];
var iconPreview = document.querySelector('.font_preview');
var iconList = document.querySelector('.icons_list');
var iconTPL = document.querySelector('.icons_list li');
var iconForm = document.querySelector('.options form');
var saveButton = document.querySelector('.font_save a');
var fileList = [];

// Application commands
commandManager.suscribe('icons/add', function() {
	iconInput.click();
});
commandManager.suscribe('icons/delete', function(event, params) {
	fileList.splice(params.index,1);
	renderFont();
});
commandManager.suscribe('render', renderFont);

// Remove icon template
iconTPL.parentNode.removeChild(iconTPL);

// Listing files
iconInput.addEventListener('change', function(event) {
  for(var i=0, j=iconInput.files.length; i<j; i++) {
    if(!fileList.some(function(file) {
      return file.name == iconInput.files[i].name;
    })) {
      fileList.push(iconInput.files[i]);
    }
  }
  iconInput.value=null;
  renderFont();
});

// Render
function renderFont() {

  var iconStreams;
  var curCodepoint = 0xE001;
  var usedCodepoints = [];

  while(iconList.firstChild) {
    iconList.removeChild(iconList.firstChild);
  }
  iconPreview.innerHTML = '';

  if(!fileList.length) {
    return;
  }

  iconStreams = fileList.map(function(file, index) {
    var iconStream = new Stream();
    var reader = new FileReader();
    var matches = file.name.match(/^(?:u([0-9a-f]{4})\-)?(.*).svg$/i);
    var codepoint = (matches[1] ? parseInt(matches[1], 16) : curCodepoint++);
    reader.onload = function(e) {
      iconStream.write(e.target.result, 'utf8');
      iconStream.end();
    };
    reader.readAsText(file);

    var iconRow = iconTPL.cloneNode(true);
    iconRow.firstChild.innerHTML = file.name +
      ' [u' + codepoint.toString(16) + ']';
    iconRow.lastChild.setAttribute('href',
      iconRow.lastChild.getAttribute('href') + index);
    iconList.appendChild(iconRow);

    iconStream.metadata = {
      unicode: [String.fromCharCode(codepoint)],
      name: matches[2]
    };

    return iconStream;
  });
  fontBundler.bundle(iconStreams, {
      fontName: iconForm.fontname.value,
      normalize: iconForm.normalize.checked,
      fontHeight: ('' !== iconForm.fontheight.value ? parseInt(iconForm.fontheight.value) : undefined),
      descent: parseInt(iconForm.fontdescent.value, 10) || 0,
      fixedWidth: iconForm.fontfixed.checked,
      normalize: iconForm.normalize.checked
    }, function(result) {
    iconStyle.innerHTML = '\n\
    @font-face {\n\
	    font-family: "'+iconForm.fontname.value+'";\n\
    	src: url("'+result.urls.eot+'");\n\
    	src: url("'+result.urls.eot+'") format("embedded-opentype"),\n\
	         url("'+result.urls.ttf+'") format("truetype"),\n\
           url("'+result.urls.woff+'") format("woff"),\n\
           url("'+result.urls.woff2+'") format("woff2"),\n\
	         url("'+result.urls.svg+'") format("svg");\n\
	    font-weight: normal;\n\
	    font-style: normal;\n\
    }\n\
    ';
    iconPreview.setAttribute('style','\n\
	    font-family: '+iconForm.fontname.value+';\n\
	    speak: none;\n\
	    font-style: normal;\n\
	    font-weight: normal;\n\
	    font-variant: normal;\n\
	    text-transform: none;\n\
	    line-height:7.2rem;\n\
	    font-size:6rem;\n\
	    -webkit-font-smoothing: antialiased;\n\
	    -moz-osx-font-smoothing: grayscale;');
    iconPreview.innerHTML = iconStreams.length > 1 ? iconStreams.reduce(function(a, b) {
      return (a.metadata && a.metadata.unicode ? a.metadata.unicode[0] : a) +
        ' ' + b.metadata.unicode[0];
    }) : iconStreams[0].metadata.unicode[0];
    if(saveButton.href) {
      window.URL.revokeObjectURL(saveButton.href);
    }
    saveButton.href = window.URL.createObjectURL(result.zip);
    saveButton.download = iconForm.fontname.value+'.zip';
  });
}

module.exports = {};

},{"./common/FontBundler.js":282,"commandor":170,"stream":164}]},{},[283]);
